{"task_id": "1", "prompt": "Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].", "completion": "import pytest\n\nR = 3\nC = 3\n\ndef min_cost(cost, m, n): \n    if not cost or not cost[0]:\n        raise IndexError(\"Cost matrix is empty\")\n    if m >= len(cost) or n >= len(cost[0]):\n        raise IndexError(\"Invalid indices for the cost matrix\")\n    \n    tc = [[0 for x in range(n + 1)] for x in range(m + 1)] \n    tc[0][0] = cost[0][0] \n    for i in range(1, m + 1): \n        tc[i][0] = tc[i - 1][0] + cost[i][0] \n    for j in range(1, n + 1): \n        tc[0][j] = tc[0][j - 1] + cost[0][j] \n    for i in range(1, m + 1): \n        for j in range(1, n + 1): \n            tc[i][j] = min(tc[i - 1][j], tc[i][j - 1], tc[i - 1][j - 1]) + cost[i][j] \n    return tc[m][n]\n\ndef test_basic_functionality():\n    cost_matrix = [[1, 2, 3], \n                   [4, 8, 2], \n                   [1, 5, 3]]\n    assert min_cost(cost_matrix, 2, 2) == 8, \"Should be 8\"\n\ndef test_another_basic_case():\n    cost_matrix = [[1, 3, 5], \n                   [2, 1, 2], \n                   [4, 3, 1]]\n    assert min_cost(cost_matrix, 2, 2) == 5, \"Should be 5\"\n\ndef test_edge_case_empty_matrix():\n    with pytest.raises(IndexError):\n        min_cost([], 0, 0)\n\ndef test_edge_case_single_element():\n    cost_matrix = [[5]]\n    assert min_cost(cost_matrix, 0, 0) == 5, \"Should be 5\"\n\ndef test_edge_case_large_matrix():\n    cost_matrix = [[1]*100 for _ in range(100)]\n    assert min_cost(cost_matrix, 99, 99) == 198, \"Should be 198\"\n\ndef test_exceptions_invalid_input():\n    with pytest.raises(IndexError):\n        min_cost([[1, 2], [3, 4]], 2, 2)\n\ndef test_exceptions_non_integer_cost():\n    with pytest.raises(TypeError):\n        min_cost([[1, 2], [3, 'a']], 1, 1)", "test_list": ["assert min_cost([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2) == 8", "assert min_cost([[2, 3, 4], [5, 9, 3], [2, 6, 4]], 2, 2) == 12", "assert min_cost([[3, 4, 5], [6, 10, 4], [3, 7, 5]], 2, 2) == 16"], "challenge_test_list": [], "reference_code": "R = 3\r\nC = 3\r\ndef min_cost(cost, m, n): \r\n\ttc = [[0 for x in range(C)] for x in range(R)] \r\n\ttc[0][0] = cost[0][0] \r\n\tfor i in range(1, m+1): \r\n\t\ttc[i][0] = tc[i-1][0] + cost[i][0] \r\n\tfor j in range(1, n+1): \r\n\t\ttc[0][j] = tc[0][j-1] + cost[0][j] \r\n\tfor i in range(1, m+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\ttc[i][j] = min(tc[i-1][j-1], tc[i-1][j], tc[i][j-1]) + cost[i][j] \r\n\treturn tc[m][n]"}
{"task_id": "2", "prompt": "Write a function to find the similar elements from the given two tuple lists.", "completion": "def similar_elements(test_tup1, test_tup2):\n    if not isinstance(test_tup1, tuple) or not isinstance(test_tup2, tuple):\n        raise TypeError(\"Both arguments must be tuples\")\n    res = tuple(set(test_tup1) & set(test_tup2))\n    return res", "test_list": ["assert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)", "assert similar_elements((1, 2, 3, 4),(5, 4, 3, 7)) == (3, 4)", "assert similar_elements((11, 12, 14, 13),(17, 15, 14, 13)) == (13, 14)"], "challenge_test_list": [], "reference_code": "def similar_elements(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1) & set(test_tup2))\r\n  return (res) "}
{"task_id": "3", "prompt": "Write a python function to identify non-prime numbers.", "completion": "import math\n\ndef is_not_prime(n):\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer\")\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    if n <= 1:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False", "test_list": ["assert is_not_prime(2) == False", "assert is_not_prime(10) == True", "assert is_not_prime(35) == True"], "challenge_test_list": [], "reference_code": "import math\r\ndef is_not_prime(n):\r\n    result = False\r\n    for i in range(2,int(math.sqrt(n)) + 1):\r\n        if n % i == 0:\r\n            result = True\r\n    return result"}
{"task_id": "4", "prompt": "Write a function to find the largest integers from a given list of numbers using heap queue algorithm.", "completion": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    if not isinstance(nums, list):\n        raise TypeError(\"Expected a list of numbers\")\n    if not all(isinstance(x, (int, float)) for x in nums):\n        raise TypeError(\"Expected a list of numbers\")\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    \n    largest_nums = hq.nlargest(n, nums)\n    return largest_nums", "test_list": ["assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] ", "assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],2)==[85, 75] ", "assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[85, 75, 65, 58, 35]"], "challenge_test_list": [], "reference_code": "import heapq as hq\r\ndef heap_queue_largest(nums,n):\r\n  largest_nums = hq.nlargest(n, nums)\r\n  return largest_nums"}
{"task_id": "5", "prompt": "Write a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.", "completion": "def count_ways(n): \n    if not isinstance(n, int) or n < 0:\n        raise TypeError(\"unsupported operand type\")\n    \n    A = [0] * (n + 1) \n    B = [0] * (n + 1) \n    A[0] = 1\n    A[1] = 0\n    B[0] = 0\n    B[1] = 1\n    \n    for i in range(2, n + 1): \n        A[i] = A[i - 2] + 2 * B[i - 1] \n        B[i] = A[i - 1] + B[i - 2] \n    \n    return A[n]", "test_list": ["assert count_ways(2) == 3", "assert count_ways(8) == 153", "assert count_ways(12) == 2131"], "challenge_test_list": [], "reference_code": "def count_ways(n): \r\n\tA = [0] * (n + 1) \r\n\tB = [0] * (n + 1) \r\n\tA[0] = 1\r\n\tA[1] = 0\r\n\tB[0] = 0\r\n\tB[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tA[i] = A[i - 2] + 2 * B[i - 1] \r\n\t\tB[i] = A[i - 1] + B[i - 2] \r\n\treturn A[n] "}
{"task_id": "6", "prompt": "Write a python function to check whether the two numbers differ at one bit position only or not.", "completion": "def is_Power_Of_Two(x): \n    return x and (not(x & (x - 1))) \n\ndef differ_At_One_Bit_Pos(a, b): \n    if not isinstance(a, int) or not isinstance(b, int):\n        raise TypeError(\"Both arguments must be integers\")\n    return is_Power_Of_Two(a ^ b) and (a != b)", "test_list": ["assert differ_At_One_Bit_Pos(13,9) == True", "assert differ_At_One_Bit_Pos(15,8) == False", "assert differ_At_One_Bit_Pos(2,4) == False"], "challenge_test_list": [], "reference_code": "def is_Power_Of_Two (x): \r\n    return x and (not(x & (x - 1))) \r\ndef differ_At_One_Bit_Pos(a,b): \r\n    return is_Power_Of_Two(a ^ b)"}
{"task_id": "7", "prompt": "Write a function to find all words which are at least 4 characters long in a string by using regex.", "completion": "import re\n\ndef find_char_long(text):\n    if not isinstance(text, str):\n        raise TypeError(\"expected string or bytes-like object\")\n    return re.findall(r'\\b\\w{4,}\\b', text)", "test_list": ["assert find_char_long('Please move back to stream') == ['Please', 'move', 'back', 'stream']", "assert find_char_long('Jing Eco and Tech') == ['Jing', 'Tech']", "assert find_char_long('Jhingai wulu road Zone 3') == ['Jhingai', 'wulu', 'road', 'Zone']"], "challenge_test_list": [], "reference_code": "import re\r\ndef find_char_long(text):\r\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))"}
{"task_id": "8", "prompt": "Write a function to find squares of individual elements in a list using lambda function.", "completion": "def square_nums(nums):\n    if not isinstance(nums, list):\n        raise TypeError(\"unsupported operand type\")\n    return list(map(lambda x: x ** 2, nums))", "test_list": ["assert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]", "assert square_nums([10,20,30])==([100,400,900])", "assert square_nums([12,15])==([144,225])"], "challenge_test_list": [], "reference_code": "def square_nums(nums):\r\n square_nums = list(map(lambda x: x ** 2, nums))\r\n return square_nums"}
{"task_id": "9", "prompt": "Write a python function to find the minimum number of rotations required to get the same string.", "completion": "def find_Rotations(str): \n    if not isinstance(str, str):\n        raise TypeError(\"must be str\")\n    \n    n = len(str)\n    if n == 0:\n        return 0\n    \n    tmp = str + str\n    for i in range(1, n + 1): \n        substring = tmp[i: i+n] \n        if str == substring: \n            return i \n    return n", "test_list": ["assert find_Rotations(\"aaaa\") == 1", "assert find_Rotations(\"ab\") == 2", "assert find_Rotations(\"abc\") == 3"], "challenge_test_list": [], "reference_code": "def find_Rotations(str): \r\n    tmp = str + str\r\n    n = len(str) \r\n    for i in range(1,n + 1): \r\n        substring = tmp[i: i+n] \r\n        if (str == substring): \r\n            return i \r\n    return n "}
{"task_id": "10", "prompt": "Write a function to get the n smallest items from a dataset.", "completion": "import heapq\n\ndef small_nnum(list1, n):\n    if not isinstance(list1, list):\n        raise TypeError(f\"Expected list, got {type(list1)}\")\n    if not isinstance(n, int):\n        raise TypeError(f\"Expected int, got {type(n)}\")\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n > len(list1):\n        n = len(list1)\n    \n    smallest = heapq.nsmallest(n, list1)\n    return smallest", "test_list": ["assert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[10,20]", "assert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[10,20,20,40,50]", "assert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[10,20,20]"], "challenge_test_list": [], "reference_code": "import heapq\r\ndef small_nnum(list1,n):\r\n  smallest=heapq.nsmallest(n,list1)\r\n  return smallest"}
{"task_id": "11", "prompt": "Write a python function to remove first and last occurrence of a given character from the string.", "completion": "def remove_Occ(s, ch): \n    if s is None or ch is None:\n        raise TypeError(\"Input cannot be None\")\n    \n    first_index = s.find(ch)\n    last_index = s.rfind(ch)\n    \n    if first_index == -1 or first_index == last_index:\n        return s.replace(ch, \"\", 1) if first_index != -1 else s\n    \n    return s[:first_index] + s[first_index + 1:last_index] + s[last_index + 1:]\n\nimport pytest\n\ndef test_remove_first_and_last_occurrence_basic():\n    assert remove_Occ(\"hello world\", \"o\") == \"hell wrld\", \"Should remove first and last 'o'\"\n    assert remove_Occ(\"banana\", \"a\") == \"banan\", \"Should remove first and last 'a'\"\n\ndef test_remove_first_and_last_occurrence_no_occurrence():\n    assert remove_Occ(\"hello world\", \"x\") == \"hello world\", \"Should return the same string if character not found\"\n    assert remove_Occ(\"test\", \"z\") == \"test\", \"Should return the same string if character not found\"\n\ndef test_remove_first_and_last_occurrence_edge_cases():\n    assert remove_Occ(\"\", \"a\") == \"\", \"Should return empty string when input is empty\"\n    assert remove_Occ(\"a\", \"a\") == \"\", \"Should return empty string when input is a single character that is removed\"\n    assert remove_Occ(\"aa\", \"a\") == \"\", \"Should return empty string when input is two identical characters that are removed\"\n    assert remove_Occ(\"abcabc\", \"a\") == \"bcab\", \"Should remove first and last 'a' from 'abcabc'\"\n\ndef test_remove_first_and_last_occurrence_exceptions():\n    with pytest.raises(TypeError):\n        remove_Occ(None, \"a\")\n    with pytest.raises(TypeError):\n        remove_Occ(\"test\", None)\n    with pytest.raises(TypeError):\n        remove_Occ(None, None)", "test_list": ["assert remove_Occ(\"hello\",\"l\") == \"heo\"", "assert remove_Occ(\"abcda\",\"a\") == \"bcd\"", "assert remove_Occ(\"PHP\",\"P\") == \"H\""], "challenge_test_list": ["assert remove_Occ(\"hellolloll\",\"l\") == \"helollol\"", "assert remove_Occ(\"\",\"l\") == \"\""], "reference_code": "def remove_Occ(s,ch): \r\n    for i in range(len(s)): \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    for i in range(len(s) - 1,-1,-1):  \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    return s "}
{"task_id": "12", "prompt": "Write a function to sort a given matrix in ascending order according to the sum of its rows.", "completion": "def sort_matrix(M):\n    if not isinstance(M, list):\n        raise TypeError(\"expected an iterable\")\n    if any(not isinstance(row, list) for row in M):\n        raise TypeError(\"expected an iterable\")\n    if len(M) > 0 and any(len(row) != len(M[0]) for row in M):\n        raise ValueError(\"all rows must have the same length\")\n    \n    result = sorted(M, key=sum)\n    return result", "test_list": ["assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]", "assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]", "assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]"], "challenge_test_list": [], "reference_code": "def sort_matrix(M):\r\n    result = sorted(M, key=sum)\r\n    return result"}
{"task_id": "13", "prompt": "Write a function to count the most common words in a dictionary.", "completion": "from collections import Counter\n\ndef count_common(words):\n    if not isinstance(words, list):\n        raise TypeError(\"Input must be a list\")\n    for word in words:\n        if not isinstance(word, str):\n            raise TypeError(\"All elements in the list must be strings\")\n    \n    word_counts = Counter(words)\n    top_four = word_counts.most_common(4)\n    return top_four", "test_list": ["assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]", "assert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]", "assert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]"], "challenge_test_list": [], "reference_code": "from collections import Counter\r\ndef count_common(words):\r\n  word_counts = Counter(words)\r\n  top_four = word_counts.most_common(4)\r\n  return (top_four)\r\n"}
{"task_id": "14", "prompt": "Write a python function to find the volume of a triangular prism.", "completion": "def find_Volume(l, b, h):\n    if not all(isinstance(x, (int, float)) for x in [l, b, h]):\n        raise TypeError(\"unsupported operand type\")\n    return (l * b * h) / 2 if l > 0 and b > 0 and h > 0 else 0.0", "test_list": ["assert find_Volume(10,8,6) == 240", "assert find_Volume(3,2,2) == 6", "assert find_Volume(1,2,1) == 1"], "challenge_test_list": [], "reference_code": "def find_Volume(l,b,h) : \r\n    return ((l * b * h) / 2) "}
{"task_id": "15", "prompt": "Write a function to split a string at lowercase letters.", "completion": "import re\n\ndef split_lowerstring(text):\n    if not isinstance(text, str):\n        raise TypeError(\"expected a string\")\n    return re.findall('[a-z][^a-z]*', text)", "test_list": ["assert split_lowerstring(\"AbCd\")==['bC','d']", "assert split_lowerstring(\"Python\")==['y', 't', 'h', 'o', 'n']", "assert split_lowerstring(\"Programming\")==['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']"], "challenge_test_list": [], "reference_code": "import re\r\ndef split_lowerstring(text):\r\n return (re.findall('[a-z][^a-z]*', text))"}
{"task_id": "16", "prompt": "Write a function to find sequences of lowercase letters joined with an underscore.", "completion": "import re\n\ndef text_lowercase_underscore(text):\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n    \n    patterns = '^[a-z]+_[a-z]+$'\n    if re.match(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "test_list": ["assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')", "assert text_lowercase_underscore(\"aab_Abbbc\")==('Not matched!')", "assert text_lowercase_underscore(\"Aaab_abbbc\")==('Not matched!')"], "challenge_test_list": ["assert text_lowercase_underscore(\"aab-cbbbc\")==('Not matched!')"], "reference_code": "import re\r\ndef text_lowercase_underscore(text):\r\n        patterns = '^[a-z]+_[a-z]+$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"}
{"task_id": "17", "prompt": "Write a function to find the perimeter of a square.", "completion": "def square_perimeter(a):\n    if not isinstance(a, (int, float)):\n        raise TypeError(\"unsupported operand type\")\n    return 4 * a", "test_list": ["assert square_perimeter(10)==40", "assert square_perimeter(5)==20", "assert square_perimeter(4)==16"], "challenge_test_list": [], "reference_code": "def square_perimeter(a):\r\n  perimeter=4*a\r\n  return perimeter"}
{"task_id": "18", "prompt": "Write a function to remove characters from the first string which are present in the second string.", "completion": "NO_OF_CHARS = 256\n\ndef str_to_list(string): \n    temp = [] \n    for x in string: \n        temp.append(x) \n    return temp \n\ndef lst_to_string(List): \n    return ''.join(List) \n\ndef get_char_count_array(string): \n    count = [0] * NO_OF_CHARS \n    for i in string: \n        count[ord(i)] += 1\n    return count \n\ndef remove_dirty_chars(string, second_string): \n    if not isinstance(string, str) or not isinstance(second_string, str):\n        raise TypeError(\"Both arguments must be strings\")\n    \n    count = get_char_count_array(second_string) \n    ip_ind = 0\n    res_ind = 0\n    str_list = str_to_list(string) \n    while ip_ind != len(str_list): \n        temp = str_list[ip_ind] \n        if count[ord(temp)] == 0: \n            str_list[res_ind] = str_list[ip_ind] \n            res_ind += 1\n        ip_ind += 1\n    return lst_to_string(str_list[0:res_ind])", "test_list": ["assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'", "assert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'", "assert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles' "], "challenge_test_list": [], "reference_code": "NO_OF_CHARS = 256\r\ndef str_to_list(string): \r\n\ttemp = [] \r\n\tfor x in string: \r\n\t\ttemp.append(x) \r\n\treturn temp \r\ndef lst_to_string(List): \r\n\treturn ''.join(List) \r\ndef get_char_count_array(string): \r\n\tcount = [0] * NO_OF_CHARS \r\n\tfor i in string: \r\n\t\tcount[ord(i)] += 1\r\n\treturn count \r\ndef remove_dirty_chars(string, second_string): \r\n\tcount = get_char_count_array(second_string) \r\n\tip_ind = 0\r\n\tres_ind = 0\r\n\ttemp = '' \r\n\tstr_list = str_to_list(string) \r\n\twhile ip_ind != len(str_list): \r\n\t\ttemp = str_list[ip_ind] \r\n\t\tif count[ord(temp)] == 0: \r\n\t\t\tstr_list[res_ind] = str_list[ip_ind] \r\n\t\t\tres_ind += 1\r\n\t\tip_ind+=1\r\n\treturn lst_to_string(str_list[0:res_ind]) "}
{"task_id": "19", "prompt": "Write a function to find whether a given array of integers contains any duplicate element.", "completion": "def test_duplicate(arraynums):\n    if not isinstance(arraynums, list):\n        raise TypeError(\"Input must be a list\")\n    nums_set = set(arraynums)    \n    return len(arraynums) != len(nums_set)", "test_list": ["assert test_duplicate(([1,2,3,4,5]))==False", "assert test_duplicate(([1,2,3,4, 4]))==True", "assert test_duplicate([1,1,2,2,3,3,4,4,5])==True"], "challenge_test_list": [], "reference_code": "def test_duplicate(arraynums):\r\n    nums_set = set(arraynums)    \r\n    return len(arraynums) != len(nums_set)     "}
{"task_id": "20", "prompt": "Write a function to check if the given number is woodball or not.", "completion": "def is_woodall(x):\n    if not isinstance(x, int):\n        raise TypeError(\"Input should be an integer\")\n    if x == 0 or x % 2 == 0:\n        return False\n    if x == 1:\n        return True\n    x += 1\n    p = 0\n    while x % 2 == 0:\n        x //= 2\n        p += 1\n        if p == x:\n            return True\n    return False", "test_list": ["assert is_woodall(383) == True", "assert is_woodall(254) == False", "assert is_woodall(200) == False"], "challenge_test_list": ["assert is_woodall(32212254719) == True", "assert is_woodall(32212254718) == False", "assert is_woodall(159) == True"], "reference_code": "def is_woodall(x): \r\n\tif (x % 2 == 0): \r\n\t\treturn False\r\n\tif (x == 1): \r\n\t\treturn True\r\n\tx = x + 1 \r\n\tp = 0\r\n\twhile (x % 2 == 0): \r\n\t\tx = x/2\r\n\t\tp = p + 1\r\n\t\tif (p == x): \r\n\t\t\treturn True\r\n\treturn False"}
{"task_id": "21", "prompt": "Write a function to find m number of multiples of n.", "completion": "def multiples_of_num(m, n):\n    if not isinstance(m, int) or not isinstance(n, int):\n        raise TypeError(\"Both m and n must be integers\")\n    if m < 0:\n        return []\n    return [i * n for i in range(1, m + 1)]", "test_list": ["assert multiples_of_num(4,3)== [3,6,9,12]", "assert multiples_of_num(2,5)== [5,10]", "assert multiples_of_num(9,2)== [2,4,6,8,10,12,14,16,18]"], "challenge_test_list": [], "reference_code": "def multiples_of_num(m,n): \r\n    multiples_of_num= list(range(n,(m+1)*n, n)) \r\n    return list(multiples_of_num)"}
{"task_id": "22", "prompt": "Write a function to find the first duplicate element in a given array of integers.", "completion": "def find_first_duplicate(nums):\n    if not isinstance(nums, list):\n        raise TypeError(\"Input must be a list\")\n    \n    num_set = set()\n    for num in nums:\n        if not isinstance(num, int):\n            raise TypeError(\"All elements in the list must be integers\")\n        \n        if num in num_set:\n            return num\n        else:\n            num_set.add(num)\n\n    return -1", "test_list": ["assert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4", "assert find_first_duplicate([1, 2, 3, 4])==-1", "assert find_first_duplicate([1, 1, 2, 3, 3, 2, 2])==1"], "challenge_test_list": [], "reference_code": "def find_first_duplicate(nums):\r\n    num_set = set()\r\n    no_duplicate = -1\r\n\r\n    for i in range(len(nums)):\r\n\r\n        if nums[i] in num_set:\r\n            return nums[i]\r\n        else:\r\n            num_set.add(nums[i])\r\n\r\n    return no_duplicate"}
{"task_id": "23", "prompt": "Write a python function to find the maximum sum of elements of list in a list of lists.", "completion": "def maximum_Sum(list1): \n    if list1 == []:\n        return -100000\n    maxi = -100000\n    for x in list1: \n        if not isinstance(x, list):\n            raise TypeError(\"All elements must be lists\")\n        sum = 0 \n        for y in x: \n            if not isinstance(y, (int, float)):\n                raise TypeError(\"All elements must be numbers\")\n            sum += y      \n        maxi = max(sum, maxi)     \n    return maxi", "test_list": ["assert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33", "assert maximum_Sum([[0,1,1],[1,1,2],[3,2,1]]) == 6", "assert maximum_Sum([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]]) == 19"], "challenge_test_list": ["assert maximum_Sum([[0,-1,-1],[-1,-1,-2],[-3,-2,-1]]) == -2"], "reference_code": "def maximum_Sum(list1): \r\n    maxi = -100000\r\n    for x in list1: \r\n        sum = 0 \r\n        for y in x: \r\n            sum+= y      \r\n        maxi = max(sum,maxi)     \r\n    return maxi "}
{"task_id": "24", "prompt": "Write a function to convert the given binary number to its decimal equivalent.", "completion": "def binary_to_decimal(binary): \n    if isinstance(binary, str) and binary == \"\":\n        raise ValueError(\"Invalid binary number\")\n    if isinstance(binary, str):\n        for char in binary:\n            if char not in '01':\n                raise ValueError(\"Invalid binary number\")\n        binary = int(binary)\n    if binary < 0:\n        raise ValueError(\"Invalid binary number\")\n    \n    decimal, i = 0, 0\n    while binary != 0: \n        dec = binary % 10\n        decimal += dec * pow(2, i) \n        binary //= 10\n        i += 1\n    return decimal", "test_list": ["assert binary_to_decimal(100) == 4", "assert binary_to_decimal(1011) == 11", "assert binary_to_decimal(1101101) == 109"], "challenge_test_list": [], "reference_code": "def binary_to_decimal(binary): \r\n    binary1 = binary \r\n    decimal, i, n = 0, 0, 0\r\n    while(binary != 0): \r\n        dec = binary % 10\r\n        decimal = decimal + dec * pow(2, i) \r\n        binary = binary//10\r\n        i += 1\r\n    return (decimal)"}
{"task_id": "25", "prompt": "Write a python function to find the product of non-repeated elements in a given array.", "completion": "def find_Product(arr, n): \n    if arr is None or n is None or n < 0:\n        raise TypeError(\"Invalid input\")\n    \n    from collections import Counter\n    count = Counter(arr)\n    prod = 1\n    found_non_repeated = False\n    \n    for num in count:\n        if count[num] == 1:\n            prod *= num\n            found_non_repeated = True\n            \n    return prod if found_non_repeated else 1", "test_list": ["assert find_Product([1,1,2,3],4) == 6", "assert find_Product([1,2,3,1,1],5) == 6", "assert find_Product([1,1,4,5,6],5) == 120"], "challenge_test_list": ["assert find_Product([1,1,4,5,6,5,7,1,1,3,4],11) == 2520"], "reference_code": "def find_Product(arr,n): \r\n    arr.sort() \r\n    prod = 1\r\n    for i in range(0,n,1): \r\n        if (arr[i - 1] != arr[i]): \r\n            prod = prod * arr[i] \r\n    return prod; "}
{"task_id": "26", "prompt": "Write a function to check if the given tuple list has all k elements.", "completion": "def check_k_elements(test_list, K):\n    if test_list is None or K is None:\n        raise TypeError(\"Invalid input: NoneType provided\")\n    \n    for tup in test_list:\n        if not all(ele == K for ele in tup):\n            return False\n    return True", "test_list": ["assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True", "assert check_k_elements([(7, 7, 7), (7, 7)], 7) == True", "assert check_k_elements([(9, 9), (9, 9, 9, 9)], 7) == False"], "challenge_test_list": ["assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 6, 4), (4, )], 4) == False"], "reference_code": "def check_k_elements(test_list, K):\r\n  res = True\r\n  for tup in test_list:\r\n    for ele in tup:\r\n      if ele != K:\r\n        res = False\r\n  return (res) "}
{"task_id": "27", "prompt": "Write a python function to remove all digits from a list of strings.", "completion": "import re\n\ndef remove(lst):\n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list\")\n    for item in lst:\n        if not isinstance(item, str):\n            raise TypeError(\"All items in the list must be strings\")\n    \n    pattern = '[0-9]'\n    return [re.sub(pattern, '', i) for i in lst]", "test_list": ["assert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']", "assert remove(['28Jan','12Jan','11Jan']) == ['Jan','Jan','Jan']", "assert remove(['wonder1','wonder2','wonder3']) == ['wonder','wonder','wonder']"], "challenge_test_list": [], "reference_code": "import re  \r\ndef remove(list): \r\n    pattern = '[0-9]'\r\n    list = [re.sub(pattern, '', i) for i in list] \r\n    return list"}
{"task_id": "28", "prompt": "Write a python function to find binomial co-efficient.", "completion": "def binomial_Coeff(n, k):\n    if not isinstance(n, int) or not isinstance(k, int):\n        raise TypeError(\"Both n and k must be integers\")\n    if n < 0 or k < 0 or k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    return binomial_Coeff(n - 1, k - 1) + binomial_Coeff(n - 1, k)", "test_list": ["assert binomial_Coeff(5,2) == 10", "assert binomial_Coeff(4,3) == 4", "assert binomial_Coeff(3,2) == 3"], "challenge_test_list": ["assert binomial_Coeff(14,6) == 3003"], "reference_code": "def binomial_Coeff(n,k): \r\n    if k > n : \r\n       return 0\r\n    if k==0 or k ==n : \r\n        return 1 \r\n    return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k) "}
{"task_id": "29", "prompt": "Write a python function to find the element occurring odd number of times.", "completion": "def get_Odd_Occurrence(arr, arr_size):\n    if arr is None or not isinstance(arr, list) or arr_size is None or not isinstance(arr_size, int):\n        raise TypeError(\"Invalid input\")\n    \n    if arr_size == 0:\n        return -1\n    \n    occurrence_count = {}\n    \n    for num in arr:\n        if num in occurrence_count:\n            occurrence_count[num] += 1\n        else:\n            occurrence_count[num] = 1\n            \n    for num, count in occurrence_count.items():\n        if count % 2 != 0:\n            return num\n            \n    return -1", "test_list": ["assert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1", "assert get_Odd_Occurrence([1,2,3,2,3,1,3],7) == 3", "assert get_Odd_Occurrence([2,3,5,4,5,2,4,3,5,2,4,4,2],13) == 5"], "challenge_test_list": [], "reference_code": "def get_Odd_Occurrence(arr,arr_size):   \r\n    for i in range(0,arr_size): \r\n        count = 0\r\n        for j in range(0,arr_size): \r\n            if arr[i] == arr[j]: \r\n                count+=1     \r\n        if (count % 2 != 0): \r\n            return arr[i]     \r\n    return -1"}
{"task_id": "30", "prompt": "Write a python function to count all the substrings starting and ending with same characters.", "completion": "def check_Equality(s): \n    return (ord(s[0]) == ord(s[len(s) - 1])); \n\ndef count_Substring_With_Equal_Ends(s): \n    if not isinstance(s, str):\n        raise TypeError(\"expected a string\")\n    \n    result = 0; \n    n = len(s); \n    for i in range(n): \n        for j in range(1, n - i + 1):  \n            if (check_Equality(s[i:i+j])): \n                result += 1; \n    return result;", "test_list": ["assert count_Substring_With_Equal_Ends(\"abc\") == 3", "assert count_Substring_With_Equal_Ends(\"abcda\") == 6", "assert count_Substring_With_Equal_Ends(\"ab\") == 2"], "challenge_test_list": [], "reference_code": "def check_Equality(s): \r\n    return (ord(s[0]) == ord(s[len(s) - 1])); \r\ndef count_Substring_With_Equal_Ends(s): \r\n    result = 0; \r\n    n = len(s); \r\n    for i in range(n): \r\n        for j in range(1,n-i+1):  \r\n            if (check_Equality(s[i:i+j])): \r\n                result+=1; \r\n    return result; "}
{"task_id": "31", "prompt": "Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.", "completion": "def func(nums, k):\n    import collections\n    import heapq\n\n    if nums is None or k is None:\n        raise TypeError(\"Input cannot be None\")\n    if k < 0:\n        raise ValueError(\"k cannot be negative\")\n\n    d = collections.defaultdict(int)\n    for row in nums:\n        for i in row:\n            d[i] += 1\n\n    temp = []\n    for key, v in d.items():\n        if len(temp) < k:\n            heapq.heappush(temp, (v, key))\n        else:\n            if v > temp[0][0]:\n                heapq.heappop(temp)\n                heapq.heappush(temp, (v, key))\n\n    result = []\n    while temp:\n        v, key = heapq.heappop(temp)\n        result.append(key)\n\n    return result[::-1]", "test_list": ["assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]", "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],1)==[1]", "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],5)==[6, 5, 7, 8, 1]"], "challenge_test_list": [], "reference_code": "def func(nums, k):\r\n    import collections\r\n    d = collections.defaultdict(int)\r\n    for row in nums:\r\n        for i in row:\r\n            d[i] += 1\r\n    temp = []\r\n    import heapq\r\n    for key, v in d.items():\r\n        if len(temp) < k:\r\n            temp.append((v, key))\r\n            if len(temp) == k:\r\n                heapq.heapify(temp)\r\n        else:\r\n            if v > temp[0][0]:\r\n                heapq.heappop(temp)\r\n                heapq.heappush(temp, (v, key))\r\n    result = []\r\n    while temp:\r\n        v, key = heapq.heappop(temp)\r\n        result.append(key)\r\n    return result"}
{"task_id": "32", "prompt": "Write a python function to find the largest prime factor of a given number.", "completion": "import math \n\ndef max_Prime_Factors(n): \n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer\")\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n    \n    maxPrime = -1 \n    while n % 2 == 0: \n        maxPrime = 2\n        n >>= 1    \n    for i in range(3, int(math.sqrt(n)) + 1, 2): \n        while n % i == 0: \n            maxPrime = i \n            n //= i \n    if n > 2: \n        maxPrime = n  \n    return int(maxPrime)", "test_list": ["assert max_Prime_Factors(15) == 5", "assert max_Prime_Factors(6) == 3", "assert max_Prime_Factors(2) == 2"], "challenge_test_list": [], "reference_code": "import math \r\ndef max_Prime_Factors (n): \r\n    maxPrime = -1 \r\n    while n%2 == 0: \r\n        maxPrime = 2\r\n        n >>= 1    \r\n    for i in range(3,int(math.sqrt(n))+1,2): \r\n        while n % i == 0: \r\n            maxPrime = i \r\n            n = n / i \r\n    if n > 2: \r\n        maxPrime = n  \r\n    return int(maxPrime)"}
{"task_id": "33", "prompt": "Write a python function to convert a decimal number to binary number.", "completion": "def decimal_To_Binary(N): \n    if not isinstance(N, int):\n        raise TypeError(\"unsupported operand type\")\n    \n    if N < 0:\n        N = (1 << 32) + N  # Convert to two's complement for negative numbers\n    \n    B_Number = 0\n    cnt = 0\n    while (N != 0): \n        rem = N % 2\n        c = pow(10, cnt)  \n        B_Number += rem * c  \n        N //= 2 \n        cnt += 1\n    return B_Number", "test_list": ["assert decimal_To_Binary(10) == 1010", "assert decimal_To_Binary(1) == 1", "assert decimal_To_Binary(20) == 10100"], "challenge_test_list": [], "reference_code": "def decimal_To_Binary(N): \r\n    B_Number = 0\r\n    cnt = 0\r\n    while (N != 0): \r\n        rem = N % 2\r\n        c = pow(10,cnt)  \r\n        B_Number += rem*c  \r\n        N //= 2 \r\n        cnt += 1\r\n    return B_Number  "}
{"task_id": "34", "prompt": "Write a python function to find the missing number in a sorted array.", "completion": "def find_missing(ar, N): \n    if ar is None or not isinstance(ar, list):\n        raise TypeError(\"Input must be a list\")\n    \n    if N == 0:\n        return -1\n    \n    l = 0\n    r = N - 1\n    while (l <= r):  \n        mid = (l + r) // 2\n        if mid > 0 and ar[mid] != mid + 1 and ar[mid - 1] == mid:\n            return mid + 1  \n        elif ar[mid] != mid + 1: \n            r = mid - 1 \n        else: \n            l = mid + 1\n            \n    if l < N:\n        return l + 1\n    \n    return -1", "test_list": ["assert find_missing([1,2,3,5],4) == 4", "assert find_missing([1,3,4,5],4) == 2", "assert find_missing([1,2,3,5,6,7],5) == 4"], "challenge_test_list": [], "reference_code": "def find_missing(ar,N): \r\n    l = 0\r\n    r = N - 1\r\n    while (l <= r):  \r\n        mid = (l + r) / 2\r\n        mid= int (mid) \r\n        if (ar[mid] != mid + 1 and ar[mid - 1] == mid): \r\n            return (mid + 1)  \r\n        elif (ar[mid] != mid + 1): \r\n            r = mid - 1 \r\n        else: \r\n            l = mid + 1\r\n    return (-1) "}
{"task_id": "35", "prompt": "Write a function to find the n-th rectangular number.", "completion": "def find_rect_num(n):\n    if not isinstance(n, int):\n        raise TypeError(\"unsupported operand type\")\n    if n < 0:\n        raise ValueError(\"negative number\")\n    return n * (n + 1)", "test_list": ["assert find_rect_num(4) == 20", "assert find_rect_num(5) == 30", "assert find_rect_num(6) == 42"], "challenge_test_list": [], "reference_code": "def find_rect_num(n):\r\n  return n*(n + 1) "}
{"task_id": "36", "prompt": "Write a python function to find the nth digit in the proper fraction of two given numbers.", "completion": "def find_Nth_Digit(p, q, N):\n    if q == 0:\n        raise ZeroDivisionError(\"division by zero\")\n    if N <= 0:\n        raise ValueError(\"N must be a positive integer\")\n    \n    p = p % q  # Ensure p is within the bounds of q\n    while N > 0:\n        N -= 1\n        p *= 10\n        res = p // q\n        p %= q\n    return res", "test_list": ["assert find_Nth_Digit(1,2,1) == 5", "assert find_Nth_Digit(3,5,1) == 6", "assert find_Nth_Digit(5,6,5) == 3"], "challenge_test_list": [], "reference_code": "def find_Nth_Digit(p,q,N) :  \r\n    while (N > 0) : \r\n        N -= 1;  \r\n        p *= 10;  \r\n        res = p // q;  \r\n        p %= q;  \r\n    return res;  "}
{"task_id": "37", "prompt": "Write a function to sort a given mixed list of integers and strings.", "completion": "def sort_mixed_list(mixed_list):\n    if not all(isinstance(i, (int, str)) for i in mixed_list):\n        raise TypeError(\"must be str or int\")\n    \n    int_part = sorted([i for i in mixed_list if isinstance(i, int)])\n    str_part = sorted([i for i in mixed_list if isinstance(i, str)])\n    return int_part + str_part", "test_list": ["assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']", "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']", "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']"], "challenge_test_list": [], "reference_code": "def sort_mixed_list(mixed_list):\r\n    int_part = sorted([i for i in mixed_list if type(i) is int])\r\n    str_part = sorted([i for i in mixed_list if type(i) is str])\r\n    return int_part + str_part"}
{"task_id": "38", "prompt": "Write a function to find the division of first even and odd number of a given list.", "completion": "def div_even_odd(list1):\n    first_even = next((el for el in list1 if isinstance(el, (int, float)) and el % 2 == 0), -1)\n    first_odd = next((el for el in list1 if isinstance(el, (int, float)) and el % 2 != 0), -1)\n    \n    if first_even == -1 or first_odd == -1:\n        return -1\n    if first_odd == 0:\n        raise ZeroDivisionError(\"division by zero\")\n    \n    return first_even / first_odd", "test_list": ["assert div_even_odd([1,3,5,7,4,1,6,8])==4", "assert div_even_odd([1,2,3,4,5,6,7,8,9,10])==2", "assert div_even_odd([1,5,7,9,10])==10"], "challenge_test_list": [], "reference_code": "def div_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even/first_odd)"}
{"task_id": "39", "prompt": "Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.", "completion": "import heapq\nfrom collections import Counter\n\ndef rearange_string(S):\n    if not isinstance(S, str):\n        raise TypeError(\"Input must be a string\")\n    \n    ctr = Counter(S)\n    heap = [(-value, key) for key, value in ctr.items()]\n    heapq.heapify(heap)\n    \n    if (-heap[0][0]) * 2 > len(S) + 1: \n        return \"\"\n    \n    ans = []\n    while len(heap) >= 2:\n        nct1, char1 = heapq.heappop(heap)\n        nct2, char2 = heapq.heappop(heap)\n        ans.extend([char1, char2])\n        if nct1 + 1: heapq.heappush(heap, (nct1 + 1, char1))\n        if nct2 + 1: heapq.heappush(heap, (nct2 + 1, char2))\n    \n    if heap:\n        ans.append(heap[0][1])\n    \n    return \"\".join(ans)", "test_list": ["assert rearange_string(\"aab\")==('aba')", "assert rearange_string(\"aabb\")==('abab')", "assert rearange_string(\"abccdd\")==('cdabcd')"], "challenge_test_list": [], "reference_code": "import heapq\r\nfrom collections import Counter\r\ndef rearange_string(S):\r\n    ctr = Counter(S)\r\n    heap = [(-value, key) for key, value in ctr.items()]\r\n    heapq.heapify(heap)\r\n    if (-heap[0][0]) * 2 > len(S) + 1: \r\n        return \"\"\r\n    ans = []\r\n    while len(heap) >= 2:\r\n        nct1, char1 = heapq.heappop(heap)\r\n        nct2, char2 = heapq.heappop(heap)\r\n        ans.extend([char1, char2])\r\n        if nct1 + 1: heapq.heappush(heap, (nct1 + 1, char1))\r\n        if nct2 + 1: heapq.heappush(heap, (nct2 + 1, char2))\r\n    return \"\".join(ans) + (heap[0][1] if heap else \"\")"}
{"task_id": "40", "prompt": "Write a function to find frequency of the elements in a given list of lists using collections module.", "completion": "from collections import Counter\nfrom itertools import chain\n\ndef freq_element(nums):\n    if not isinstance(nums, (list, tuple)):\n        raise TypeError(\"expected an iterable\")\n    result = Counter(chain.from_iterable(nums))\n    return result", "test_list": ["assert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})", "assert freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]])==({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})", "assert freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]])==({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1})"], "challenge_test_list": [], "reference_code": "from collections import Counter\r\nfrom itertools import chain\r\ndef freq_element(nums):\r\n  result = Counter(chain.from_iterable(nums))\r\n  return result"}
{"task_id": "41", "prompt": "Write a function to filter even numbers using lambda function.", "completion": "def filter_evennumbers(nums):\n    if not isinstance(nums, list):\n        raise TypeError(\"unsupported operand type\")\n    for num in nums:\n        if not isinstance(num, int):\n            raise TypeError(\"unsupported operand type\")\n    even_nums = list(filter(lambda x: x % 2 == 0, nums))\n    return even_nums", "test_list": ["assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]", "assert filter_evennumbers([10,20,45,67,84,93])==[10,20,84]", "assert filter_evennumbers([5,7,9,8,6,4,3])==[8,6,4]"], "challenge_test_list": [], "reference_code": "def filter_evennumbers(nums):\r\n even_nums = list(filter(lambda x: x%2 == 0, nums))\r\n return even_nums"}
{"task_id": "42", "prompt": "Write a python function to find the sum of repeated elements in a given array.", "completion": "def find_Sum(arr, n): \n    return sum(set(x for x in arr if arr.count(x) > 1))\n\nimport pytest\n\ndef test_basic_functionality_with_repeated_elements():\n    assert find_Sum([1, 2, 3, 1, 2], 5) == 3, \"Should return the sum of repeated elements (1 + 2)\"\n    assert find_Sum([4, 5, 6, 4, 5, 4], 6) == 13, \"Should return the sum of repeated elements (4 + 5 + 4)\"\n    assert find_Sum([7, 8, 9, 10], 4) == 0, \"Should return 0 as there are no repeated elements\"\n\ndef test_edge_cases():\n    assert find_Sum([], 0) == 0, \"Should return 0 for an empty array\"\n    assert find_Sum([1], 1) == 0, \"Should return 0 for a single element array\"\n    assert find_Sum([1, 1], 2) == 1, \"Should return 1 for an array with two identical elements\"\n\ndef test_exceptions():\n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        find_Sum(None, 0)\n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        find_Sum(\"string\", 0)\n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        find_Sum([1, 2, 3], \"three\")", "test_list": ["assert find_Sum([1,2,3,1,1,4,5,6],8) == 3", "assert find_Sum([1,2,3,1,1],5) == 3", "assert find_Sum([1,1,2],3) == 2"], "challenge_test_list": ["assert find_Sum([1,1,2,3,4,5,6,3,5],9) == 18"], "reference_code": "def find_Sum(arr,n): \r\n    return sum([x for x in arr if arr.count(x) > 1])"}
{"task_id": "43", "prompt": "Write a function to find sequences of lowercase letters joined with an underscore using regex.", "completion": "import re\n\ndef text_match(text):\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n    patterns = '^[a-z]+_[a-z]+$'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "test_list": ["assert text_match(\"aab_cbbbc\") == 'Found a match!'", "assert text_match(\"aab_Abbbc\") == 'Not matched!'", "assert text_match(\"Aaab_abbbc\") == 'Not matched!'"], "challenge_test_list": ["assert text_match(\"aab-cbbbc\") == 'Not matched!'"], "reference_code": "import re\r\ndef text_match(text):\r\n  patterns = '^[a-z]+_[a-z]+$'\r\n  if re.search(patterns,  text):\r\n    return ('Found a match!')\r\n  else:\r\n    return ('Not matched!')"}
{"task_id": "44", "prompt": "Write a function that matches a word at the beginning of a string.", "completion": "import re\n\ndef text_match_string(text):\n    if not isinstance(text, str):\n        raise TypeError(\"expected string or bytes-like object\")\n    \n    patterns = '^\\w+'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "test_list": ["assert text_match_string(\" python\")==('Not matched!')", "assert text_match_string(\"python\")==('Found a match!')", "assert text_match_string(\"  lang\")==('Not matched!')"], "challenge_test_list": ["assert text_match_string(\"foo\")==('Found a match!')"], "reference_code": "import re\r\ndef text_match_string(text):\r\n        patterns = '^\\w+'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return 'Not matched!'"}
{"task_id": "45", "prompt": "Write a function to find the gcd of the given array elements.", "completion": "def find_gcd(x, y): \n    while(y): \n        x, y = y, x % y \n    return x \n\ndef get_gcd(l):\n    if not l:\n        raise IndexError(\"list index out of range\")\n    \n    gcd = l[0]\n    for num in l:\n        if not isinstance(num, int):\n            raise TypeError(\"unsupported operand type\")\n        gcd = find_gcd(gcd, num)\n    \n    return gcd if gcd != 0 else 0", "test_list": ["assert get_gcd([2, 4, 6, 8, 16]) == 2", "assert get_gcd([1, 2, 3]) == 1", "assert get_gcd([2, 4, 6, 8]) == 2 "], "challenge_test_list": [], "reference_code": "def find_gcd(x, y): \r\n\twhile(y): \r\n\t\tx, y = y, x % y \r\n\treturn x \r\ndef get_gcd(l):\r\n  num1 = l[0]\r\n  num2 = l[1]\r\n  gcd = find_gcd(num1, num2)\r\n  for i in range(2, len(l)):\r\n    gcd = find_gcd(gcd, l[i])\r\n  return gcd"}
{"task_id": "46", "prompt": "Write a python function to determine whether all the numbers are different from each other are not.", "completion": "def test_distinct(data):\n    if not hasattr(data, '__iter__'):\n        raise TypeError(\"argument must be iterable\")\n    return len(data) == len(set(data))", "test_list": ["assert test_distinct([1,5,7,9]) == True", "assert test_distinct([2,4,5,5,7,9]) == False", "assert test_distinct([1,2,3]) == True"], "challenge_test_list": [], "reference_code": "def test_distinct(data):\r\n  if len(data) == len(set(data)):\r\n    return True\r\n  else:\r\n    return False;"}
{"task_id": "47", "prompt": "Write a python function to find the last digit when factorial of a divides factorial of b.", "completion": "def compute_Last_Digit(A, B): \n    if A < 0 or B < 0:\n        raise ValueError(\"Inputs must be non-negative integers\")\n    if not isinstance(A, int) or not isinstance(B, int):\n        raise TypeError(\"Inputs must be integers\")\n    \n    variable = 1\n    if A == B: \n        return 1\n    elif (B - A) >= 5:  \n        return 0\n    else:   \n        for i in range(A + 1, B + 1): \n            variable = (variable * (i % 10)) % 10\n        return variable % 10", "test_list": ["assert compute_Last_Digit(2,4) == 2", "assert compute_Last_Digit(6,8) == 6", "assert compute_Last_Digit(1,2) == 2"], "challenge_test_list": ["assert compute_Last_Digit(3,7) == 0", "assert compute_Last_Digit(20,23) == 6", "assert compute_Last_Digit(1021,1024) == 4"], "reference_code": "def compute_Last_Digit(A,B): \r\n    variable = 1\r\n    if (A == B): \r\n        return 1\r\n    elif ((B - A) >= 5):  \r\n        return 0\r\n    else:   \r\n        for i in range(A + 1,B + 1): \r\n            variable = (variable * (i % 10)) % 10\r\n        return variable % 10"}
{"task_id": "48", "prompt": "Write a python function to set all odd bits of a given number.", "completion": "def odd_bit_set_number(n):\n    if not isinstance(n, int):\n        raise TypeError(\"unsupported operand type\")\n    \n    res = 0\n    for i in range(32):  # Assuming a 32-bit integer\n        if i % 2 == 1:  # Set odd bits\n            res |= (1 << i)\n    \n    return n | res", "test_list": ["assert odd_bit_set_number(10) == 15", "assert odd_bit_set_number(20) == 21", "assert odd_bit_set_number(30) == 31"], "challenge_test_list": [], "reference_code": "def odd_bit_set_number(n):\r\n    count = 0;res = 0;temp = n\r\n    while temp > 0:\r\n        if count % 2 == 0:\r\n            res |= (1 << count)\r\n        count += 1\r\n        temp >>= 1\r\n    return (n | res)"}
{"task_id": "49", "prompt": "Write a function to extract every first or specified element from a given two-dimensional list.", "completion": "def specified_element(nums, N):\n    result = []\n    for i in nums:\n        if isinstance(i, list) and N < len(i):\n            result.append(i[N])\n    return result", "test_list": ["assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]", "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]", "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],1)==[2,5,1]"], "challenge_test_list": [], "reference_code": "def specified_element(nums, N):\r\n    result = [i[N] for i in nums]\r\n    return result\r\n    "}
{"task_id": "50", "prompt": "Write a function to find the list with minimum length using lambda function.", "completion": "def min_length_list(input_list):\n    if not input_list:\n        raise ValueError(\"min() arg is an empty sequence\")\n    \n    if any(not isinstance(i, str) for i in input_list):\n        raise TypeError(\"object of type 'int' has no len()\")\n    \n    min_length = min(len(x) for x in input_list)  \n    min_list = min(input_list, key=lambda i: len(i))\n    return (min_length, min_list)", "test_list": ["assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])", "assert min_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(1,[1])", "assert min_length_list([[3,4,5],[6,7,8,9],[10,11,12],[1,2]])==(2,[1,2])"], "challenge_test_list": [], "reference_code": "def min_length_list(input_list):\r\n    min_length = min(len(x) for x in input_list )  \r\n    min_list = min(input_list, key = lambda i: len(i))\r\n    return(min_length, min_list)"}
{"task_id": "51", "prompt": "Write a function to print check if the triangle is equilateral or not.", "completion": "def check_equilateral(x, y, z):\n    if not all(isinstance(side, (int, float)) for side in (x, y, z)):\n        raise TypeError(\"All sides must be numbers\")\n    return x == y == z", "test_list": ["assert check_equilateral(6,8,12)==False ", "assert check_equilateral(6,6,12)==False", "assert check_equilateral(6,6,6)==True"], "challenge_test_list": [], "reference_code": "def check_equilateral(x,y,z):\r\n  if x == y == z:\r\n\t   return True\r\n  else:\r\n     return False"}
{"task_id": "52", "prompt": "Write a function to caluclate area of a parallelogram.", "completion": "def parallelogram_area(b, h):\n    if not isinstance(b, (int, float)) or not isinstance(h, (int, float)):\n        raise TypeError(\"unsupported operand type\")\n    return b * h", "test_list": ["assert parallelogram_area(10,20)==200", "assert parallelogram_area(15,20)==300", "assert parallelogram_area(8,9)==72"], "challenge_test_list": [], "reference_code": "def parallelogram_area(b,h):\r\n  area=b*h\r\n  return area"}
{"task_id": "53", "prompt": "Write a python function to check whether the first and last characters of a given string are equal or not.", "completion": "def check_Equality(str):\n    if not isinstance(str, str):\n        raise TypeError(\"Input must be a string\")\n    if len(str) == 0:\n        return \"Equal\"\n    if str[0] == str[-1]:\n        return \"Equal\"\n    else:\n        return \"Not Equal\"", "test_list": ["assert check_Equality(\"abcda\") == \"Equal\"", "assert check_Equality(\"ab\") == \"Not Equal\"", "assert check_Equality(\"mad\") == \"Not Equal\""], "challenge_test_list": [], "reference_code": "def check_Equality(str):\r\n  if (str[0] == str[-1]):  \r\n    return (\"Equal\") \r\n  else:  \r\n    return (\"Not Equal\") "}
{"task_id": "54", "prompt": "Write a function to sort the given array by using counting sort.", "completion": "def counting_sort(my_list):\n    if any(not isinstance(x, int) for x in my_list):\n        raise TypeError(\"All elements must be integers\")\n    if any(x < 0 for x in my_list):\n        raise ValueError(\"Negative numbers are not allowed\")\n    \n    if not my_list:\n        return []\n    \n    max_value = max(my_list)\n    buckets = [0] * (max_value + 1)\n    \n    for i in my_list:\n        buckets[i] += 1\n    \n    i = 0\n    for j in range(max_value + 1):\n        for a in range(buckets[j]):\n            my_list[i] = j\n            i += 1\n            \n    return my_list", "test_list": ["assert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]", "assert counting_sort([12, 9, 28, 33, 69, 45]) == [9, 12, 28, 33, 45, 69]", "assert counting_sort([8, 4, 14, 3, 2, 1]) == [1, 2, 3, 4, 8, 14]"], "challenge_test_list": [], "reference_code": "def counting_sort(my_list):\r\n    max_value = 0\r\n    for i in range(len(my_list)):\r\n        if my_list[i] > max_value:\r\n            max_value = my_list[i]\r\n    buckets = [0] * (max_value + 1)\r\n    for i in my_list:\r\n        buckets[i] += 1\r\n    i = 0\r\n    for j in range(max_value + 1):\r\n         for a in range(buckets[j]):\r\n             my_list[i] = j\r\n             i += 1\r\n    return my_list"}
{"task_id": "55", "prompt": "Write a function to find t-nth term of geometric series.", "completion": "import math\n\ndef tn_gp(a, n, r):\n    if not isinstance(a, (int, float)) or not isinstance(n, int) or not isinstance(r, (int, float)):\n        raise TypeError(\"unsupported operand type\")\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    tn = a * (math.pow(r, n - 1))\n    return tn", "test_list": ["assert tn_gp(1,5,2)==16", "assert tn_gp(1,5,4)==256", "assert tn_gp(2,6,3)==486"], "challenge_test_list": [], "reference_code": "import math\r\ndef tn_gp(a,n,r):\r\n  tn = a * (math.pow(r, n - 1))\r\n  return tn"}
{"task_id": "56", "prompt": "Write a python function to check if a given number is one less than twice its reverse.", "completion": "def rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \n\ndef check(n):    \n    if not isinstance(n, int) or n < 0:\n        return False\n    return (2 * rev(n) == n + 1)", "test_list": ["assert check(70) == False", "assert check(23) == False", "assert check(73) == True"], "challenge_test_list": [], "reference_code": "def rev(num):    \r\n    rev_num = 0\r\n    while (num > 0):  \r\n        rev_num = (rev_num * 10 + num % 10) \r\n        num = num // 10  \r\n    return rev_num  \r\ndef check(n):    \r\n    return (2 * rev(n) == n + 1)  "}
{"task_id": "57", "prompt": "Write a python function to find the largest number that can be formed with the given digits.", "completion": "def find_Max_Num(arr, n):\n    if not isinstance(arr, list) or any(not isinstance(x, int) for x in arr):\n        raise TypeError(\"unsupported operand type\")\n    if n > len(arr):\n        raise ValueError(\"not enough values to unpack\")\n    \n    arr = [str(x) for x in arr]\n    arr.sort(key=lambda x: x * 10, reverse=True)\n    return int(''.join(arr))\n\nimport pytest\n\ndef test_basic_functionality():\n    assert find_Max_Num([3, 30, 34, 5, 9], 5) == 9534330, \"Should form the largest number 9534330\"\n    assert find_Max_Num([1, 2, 3], 3) == 321, \"Should form the largest number 321\"\n    assert find_Max_Num([0, 0, 0], 3) == 0, \"Should form the largest number 0\"\n\ndef test_edge_cases():\n    assert find_Max_Num([9, 8, 7], 3) == 987, \"Should form the largest number 987\"\n    assert find_Max_Num([1], 1) == 1, \"Should return the single digit 1\"\n    assert find_Max_Num([], 0) == 0, \"Should return 0 for empty input\"\n\ndef test_exceptions():\n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        find_Max_Num(\"123\", 3)  # Invalid input type\n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        find_Max_Num([1, 2, \"3\"], 3)  # Mixed types in input\n    with pytest.raises(ValueError, match=\"not enough values to unpack\"):\n        find_Max_Num([1], 2)  # n is greater than the length of arr", "test_list": ["assert find_Max_Num([1,2,3],3) == 321", "assert find_Max_Num([4,5,6,1],4) == 6541", "assert find_Max_Num([1,2,3,9],4) == 9321"], "challenge_test_list": [], "reference_code": "def find_Max_Num(arr,n) : \r\n    arr.sort(reverse = True) \r\n    num = arr[0] \r\n    for i in range(1,n) : \r\n        num = num * 10 + arr[i] \r\n    return num "}
{"task_id": "58", "prompt": "Write a python function to check whether the given two integers have opposite sign or not.", "completion": "def opposite_Signs(x, y): \n    return (x < 0) != (y < 0)\n\nimport pytest\n\ndef test_opposite_signs_positive_negative():\n    assert opposite_Signs(5, -3) == True, \"5 and -3 should have opposite signs\"\n\ndef test_opposite_signs_negative_positive():\n    assert opposite_Signs(-7, 2) == True, \"-7 and 2 should have opposite signs\"\n\ndef test_opposite_signs_same_sign():\n    assert opposite_Signs(4, 3) == False, \"4 and 3 should not have opposite signs\"\n    assert opposite_Signs(-1, -5) == False, \"-1 and -5 should not have opposite signs\"\n\ndef test_opposite_signs_zero():\n    assert opposite_Signs(0, 5) == False, \"0 and 5 should not have opposite signs\"\n    assert opposite_Signs(0, -5) == False, \"0 and -5 should not have opposite signs\"\n\ndef test_opposite_signs_edge_cases():\n    assert opposite_Signs(1, -1) == True, \"1 and -1 should have opposite signs\"\n    assert opposite_Signs(-1, 1) == True, \"-1 and 1 should have opposite signs\"\n\ndef test_opposite_signs_large_numbers():\n    assert opposite_Signs(2147483647, -2147483648) == True, \"2147483647 and -2147483648 should have opposite signs\"\n    assert opposite_Signs(-2147483647, 2147483647) == True, \"-2147483647 and 2147483647 should have opposite signs\"\n\ndef test_opposite_signs_invalid_inputs():\n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        opposite_Signs(\"a\", 5)\n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        opposite_Signs(5, None)\n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        opposite_Signs([], 5)", "test_list": ["assert opposite_Signs(1,-2) == True", "assert opposite_Signs(3,2) == False", "assert opposite_Signs(-10,-10) == False"], "challenge_test_list": [], "reference_code": "def opposite_Signs(x,y): \r\n    return ((x ^ y) < 0); "}
{"task_id": "59", "prompt": "Write a function to find the nth octagonal number.", "completion": "def is_octagonal(n): \n    if not isinstance(n, int):\n        raise TypeError(\"unsupported operand type\")\n    if n < 0:\n        raise ValueError(\"negative integer\")\n    return 3 * n * n - 2 * n", "test_list": ["assert is_octagonal(5) == 65", "assert is_octagonal(10) == 280", "assert is_octagonal(15) == 645"], "challenge_test_list": [], "reference_code": "def is_octagonal(n): \r\n\treturn 3 * n * n - 2 * n "}
{"task_id": "60", "prompt": "Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.", "completion": "def max_len_sub(arr, n): \n    if arr is None or n is None or not isinstance(arr, list) or not isinstance(n, int):\n        raise TypeError(\"Invalid input types\")\n    if n < 0:\n        raise ValueError(\"Array length cannot be negative\")\n    \n    if n == 0:\n        return 0\n    \n    mls = [1] * n \n    max_length = 1\n    \n    for i in range(1, n): \n        for j in range(i): \n            if abs(arr[i] - arr[j]) <= 1: \n                mls[i] = max(mls[i], mls[j] + 1)\n        max_length = max(max_length, mls[i])\n    \n    return max_length", "test_list": ["assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5", "assert max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7) == 4", "assert max_len_sub([9, 11, 13, 15, 18], 5) == 1"], "challenge_test_list": [], "reference_code": "def max_len_sub( arr, n): \r\n\tmls=[] \r\n\tmax = 0\r\n\tfor i in range(n): \r\n\t\tmls.append(1) \r\n\tfor i in range(n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (abs(arr[i] - arr[j]) <= 1 and mls[i] < mls[j] + 1): \r\n\t\t\t\tmls[i] = mls[j] + 1\r\n\tfor i in range(n): \r\n\t\tif (max < mls[i]): \r\n\t\t\tmax = mls[i] \r\n\treturn max"}
{"task_id": "61", "prompt": "Write a python function to count number of substrings with the sum of digits equal to their length.", "completion": "from collections import defaultdict\n\ndef count_Substrings(s, n):\n    if not isinstance(s, str):\n        raise TypeError(\"expected a string\")\n    if len(s) != n:\n        raise ValueError(\"n must be equal to the length of s\")\n    \n    count, sum = 0, 0\n    mp = defaultdict(lambda: 0)\n    mp[0] += 1\n    \n    for i in range(n):\n        sum += int(s[i])\n        count += mp[sum - (i + 1)]\n        mp[sum - (i + 1)] += 1\n        \n    return count", "test_list": ["assert count_Substrings('112112',6) == 6", "assert count_Substrings('111',3) == 6", "assert count_Substrings('1101112',7) == 12"], "challenge_test_list": [], "reference_code": "from collections import defaultdict\r\ndef count_Substrings(s,n):\r\n    count,sum = 0,0\r\n    mp = defaultdict(lambda : 0)\r\n    mp[0] += 1\r\n    for i in range(n):\r\n        sum += ord(s[i]) - ord('0')\r\n        count += mp[sum - (i + 1)]\r\n        mp[sum - (i + 1)] += 1\r\n    return count"}
{"task_id": "62", "prompt": "Write a python function to find smallest number in a list.", "completion": "def smallest_num(xs):\n    if not xs:\n        raise ValueError(\"min() arg is an empty sequence\")\n    return min(xs)", "test_list": ["assert smallest_num([10, 20, 1, 45, 99]) == 1", "assert smallest_num([1, 2, 3]) == 1", "assert smallest_num([45, 46, 50, 60]) == 45"], "challenge_test_list": [], "reference_code": "def smallest_num(xs):\n  return min(xs)\n"}
{"task_id": "63", "prompt": "Write a function to find the maximum difference between available pairs in the given tuple list.", "completion": "def max_difference(test_list):\n    if not test_list:\n        return 0\n    temp = [abs(b - a) for a, b in test_list]\n    res = max(temp)\n    return res\n\nimport pytest\n\ndef test_basic_functionality():\n    assert max_difference([(1, 5), (2, 8), (3, 10)]) == 7, \"Should be 7 for pairs (1,5) and (3,10)\"\n    assert max_difference([(10, 20), (15, 25), (30, 40)]) == 20, \"Should be 20 for pairs (10,20) and (30,40)\"\n    assert max_difference([(0, 0), (1, 1), (2, 2)]) == 0, \"Should be 0 for pairs with the same values\"\n\ndef test_edge_cases():\n    assert max_difference([(1, 1)]) == 0, \"Should be 0 for a single pair (1,1)\"\n    assert max_difference([(1, 2), (2, 3)]) == 1, \"Should be 1 for pairs (1,2) and (2,3)\"\n    assert max_difference([]) == 0, \"Should return 0 for an empty list\"\n\ndef test_exceptions():\n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        max_difference([(1, 'a'), (2, 3)])  # Invalid input with a string\n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        max_difference([(None, 2), (3, 4)])  # Invalid input with None\n    with pytest.raises(ValueError, match=\"not enough values to unpack\"):\n        max_difference([(1,)])  # Invalid input with a single element tuple", "test_list": ["assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7", "assert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15", "assert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23"], "challenge_test_list": [], "reference_code": "def max_difference(test_list):\r\n  temp = [abs(b - a) for a, b in test_list]\r\n  res = max(temp)\r\n  return (res) "}
{"task_id": "64", "prompt": "Write a function to sort a list of tuples using lambda.", "completion": "def subject_marks(subjectmarks):\n    if not all(isinstance(item, tuple) and len(item) == 2 for item in subjectmarks):\n        raise TypeError(\"All elements must be tuples of length 2\")\n    if not all(isinstance(item[1], (int, float)) for item in subjectmarks):\n        raise TypeError(\"Second element of each tuple must be a number\")\n    \n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks", "test_list": ["assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]", "assert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])", "assert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])"], "challenge_test_list": [], "reference_code": "def subject_marks(subjectmarks):\r\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\r\n subjectmarks.sort(key = lambda x: x[1])\r\n return subjectmarks"}
{"task_id": "65", "prompt": "Write a function of recursion list sum.", "completion": "def recursive_list_sum(data_list):\n    total = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        elif isinstance(element, (int, float)):\n            total += element\n        else:\n            raise TypeError(\"unsupported operand type\")\n    return total", "test_list": ["assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21", "assert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106", "assert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210"], "challenge_test_list": [], "reference_code": "def recursive_list_sum(data_list):\r\n\ttotal = 0\r\n\tfor element in data_list:\r\n\t\tif type(element) == type([]):\r\n\t\t\ttotal = total + recursive_list_sum(element)\r\n\t\telse:\r\n\t\t\ttotal = total + element\r\n\treturn total"}
{"task_id": "66", "prompt": "Write a python function to count positive numbers in a list.", "completion": "def pos_count(lst):\n    if not all(isinstance(num, (int, float)) for num in lst):\n        raise TypeError(\"All elements in the list must be numeric\")\n    \n    pos_count = 0\n    for num in lst:\n        if num >= 0:\n            pos_count += 1\n    return pos_count", "test_list": ["assert pos_count([1,-2,3,-4]) == 2", "assert pos_count([3,4,5,-1]) == 3", "assert pos_count([1,2,3,4]) == 4"], "challenge_test_list": [], "reference_code": "def pos_count(list):\r\n  pos_count= 0\r\n  for num in list: \r\n    if num >= 0: \r\n      pos_count += 1\r\n  return pos_count "}
{"task_id": "67", "prompt": "Write a function to find the number of ways to partition a set of bell numbers.", "completion": "def bell_number(n):   \n    if n < 0:\n        raise IndexError(\"list index out of range\")\n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1): \n        bell[i][0] = bell[i-1][i-1]  \n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \n    return bell[n][0] \n\nimport pytest\n\ndef test_bell_number_basic_cases():\n    assert bell_number(0) == 1, \"Bell number for n=0 should be 1\"\n    assert bell_number(1) == 1, \"Bell number for n=1 should be 1\"\n    assert bell_number(2) == 2, \"Bell number for n=2 should be 2\"\n    assert bell_number(3) == 5, \"Bell number for n=3 should be 5\"\n    assert bell_number(4) == 15, \"Bell number for n=4 should be 15\"\n\ndef test_bell_number_edge_cases():\n    assert bell_number(5) == 52, \"Bell number for n=5 should be 52\"\n    assert bell_number(6) == 203, \"Bell number for n=6 should be 203\"\n    assert bell_number(7) == 877, \"Bell number for n=7 should be 877\"\n\ndef test_bell_number_boundary_cases():\n    assert bell_number(10) == 115975, \"Bell number for n=10 should be 115975\"\n    assert bell_number(15) == 6513215599, \"Bell number for n=15 should be 6513215599\"\n\ndef test_bell_number_exceptions():\n    with pytest.raises(IndexError, match=\"list index out of range\"):\n        bell_number(-1)\n    with pytest.raises(IndexError, match=\"list index out of range\"):\n        bell_number(1000)  # Assuming this is beyond the implementation limits", "test_list": ["assert bell_number(2)==2", "assert bell_number(10)==115975", "assert bell_number(56)==6775685320645824322581483068371419745979053216268760300"], "challenge_test_list": [], "reference_code": "def bell_number(n):   \r\n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \r\n    bell[0][0] = 1\r\n    for i in range(1, n+1): \r\n        bell[i][0] = bell[i-1][i-1]  \r\n        for j in range(1, i+1): \r\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \r\n    return bell[n][0] "}
{"task_id": "68", "prompt": "Write a python function to check whether the given array is monotonic or not.", "completion": "def is_Monotonic(A):\n    if A is None or not isinstance(A, list):\n        raise TypeError(\"Input must be a list\")\n    \n    if len(A) <= 1:\n        return True\n    \n    increasing = decreasing = True\n    \n    for i in range(1, len(A)):\n        if A[i] > A[i - 1]:\n            decreasing = False\n        elif A[i] < A[i - 1]:\n            increasing = False\n            \n    return increasing or decreasing", "test_list": ["assert is_Monotonic([6, 5, 4, 4]) == True", "assert is_Monotonic([1, 2, 2, 3]) == True", "assert is_Monotonic([1, 3, 2]) == False"], "challenge_test_list": [], "reference_code": "def is_Monotonic(A): \r\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\r\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) "}
{"task_id": "69", "prompt": "Write a function to check whether a list contains the given sublist or not.", "completion": "def is_sublist(l, s):\n    if l is None or s is None:\n        raise TypeError(\"Both arguments must be lists.\")\n    \n    sub_set = False\n    if s == []:\n        sub_set = True\n    elif s == l:\n        sub_set = True\n    elif len(s) > len(l):\n        sub_set = False\n    else:\n        for i in range(len(l)):\n            if l[i] == s[0]:\n                n = 1\n                while (n < len(s)) and (i + n < len(l)) and (l[i + n] == s[n]):\n                    n += 1                \n                if n == len(s):\n                    sub_set = True\n                    break\n    return sub_set", "test_list": ["assert is_sublist([2,4,3,5,7],[3,7])==False", "assert is_sublist([2,4,3,5,7],[4,3])==True", "assert is_sublist([2,4,3,5,7],[1,6])==False"], "challenge_test_list": [], "reference_code": "def is_sublist(l, s):\r\n\tsub_set = False\r\n\tif s == []:\r\n\t\tsub_set = True\r\n\telif s == l:\r\n\t\tsub_set = True\r\n\telif len(s) > len(l):\r\n\t\tsub_set = False\r\n\telse:\r\n\t\tfor i in range(len(l)):\r\n\t\t\tif l[i] == s[0]:\r\n\t\t\t\tn = 1\r\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\r\n\t\t\t\t\tn += 1\t\t\t\t\r\n\t\t\t\tif n == len(s):\r\n\t\t\t\t\tsub_set = True\r\n\treturn sub_set"}
{"task_id": "70", "prompt": "Write a function to find whether all the given tuples have equal length or not.", "completion": "def find_equal_tuple(Input, k):\n    if not isinstance(Input, list) or not all(isinstance(t, tuple) for t in Input):\n        raise TypeError(\"Input must be a list of tuples\")\n    if not isinstance(k, int):\n        raise TypeError(\"k must be an integer\")\n    \n    flag = 1\n    for tuple in Input:\n        if len(tuple) != k:\n            flag = 0\n            break\n    return flag\n\ndef get_equal(Input, k):\n    if find_equal_tuple(Input, k) == 1:\n        return (\"All tuples have same length\")\n    else:\n        return (\"All tuples do not have same length\")", "test_list": ["assert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'", "assert get_equal([(1, 2, 3), (4, 5, 6, 7)], 3) == 'All tuples do not have same length'", "assert get_equal([(1, 2), (3, 4)], 2) == 'All tuples have same length'"], "challenge_test_list": [], "reference_code": "def find_equal_tuple(Input, k):\r\n  flag = 1\r\n  for tuple in Input:\r\n    if len(tuple) != k:\r\n      flag = 0\r\n      break\r\n  return flag\r\ndef get_equal(Input, k):\r\n  if find_equal_tuple(Input, k) == 1:\r\n    return (\"All tuples have same length\")\r\n  else:\r\n    return (\"All tuples do not have same length\")"}
{"task_id": "71", "prompt": "Write a function to sort a list of elements using comb sort.", "completion": "def comb_sort(nums):\n    if not all(isinstance(x, (int, float)) for x in nums):\n        raise TypeError(\"'>=' not supported between instances of 'str' and 'int'\")\n    \n    shrink_fact = 1.3\n    gaps = len(nums)\n    swapped = True\n    i = 0\n    while gaps > 1 or swapped:\n        gaps = int(float(gaps) / shrink_fact)\n        if gaps < 1:\n            gaps = 1\n        swapped = False\n        i = 0\n        while gaps + i < len(nums):\n            if nums[i] > nums[i + gaps]:\n                nums[i], nums[i + gaps] = nums[i + gaps], nums[i]\n                swapped = True\n            i += 1\n    return nums", "test_list": ["assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]", "assert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]", "assert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]"], "challenge_test_list": [], "reference_code": "def comb_sort(nums):\r\n    shrink_fact = 1.3\r\n    gaps = len(nums)\r\n    swapped = True\r\n    i = 0\r\n    while gaps > 1 or swapped:\r\n        gaps = int(float(gaps) / shrink_fact)\r\n        swapped = False\r\n        i = 0\r\n        while gaps + i < len(nums):\r\n            if nums[i] > nums[i+gaps]:\r\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\r\n                swapped = True\r\n            i += 1\r\n    return nums"}
{"task_id": "72", "prompt": "Write a python function to check whether the given number can be represented as difference of two squares or not.", "completion": "def dif_Square(n):\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer.\")\n    return n % 4 != 2", "test_list": ["assert dif_Square(5) == True", "assert dif_Square(10) == False", "assert dif_Square(15) == True"], "challenge_test_list": [], "reference_code": "def dif_Square(n): \r\n    if (n % 4 != 2): \r\n        return True\r\n    return False"}
{"task_id": "73", "prompt": "Write a function to split the given string with multiple delimiters by using regex.", "completion": "import re\n\ndef multiple_split(text):\n    if not isinstance(text, str):\n        raise TypeError(\"expected string or bytes-like object\")\n    return re.split(r'[;,\\*\\n]+', text)", "test_list": ["assert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']", "assert multiple_split('Mi Box runs on the \\n Latest android*which has google assistance and chromecast.') == ['Mi Box runs on the ', ' Latest android', 'which has google assistance and chromecast.']", "assert multiple_split('Certain services\\nare subjected to change*over the seperate subscriptions.') == ['Certain services', 'are subjected to change', 'over the seperate subscriptions.']"], "challenge_test_list": [], "reference_code": "import re\r\ndef multiple_split(text):\r\n  return (re.split('; |, |\\*|\\n',text))"}
{"task_id": "74", "prompt": "Write a function to check whether it follows the sequence given in the patterns array.", "completion": "def is_samepatterns(colors, patterns):\n    if not isinstance(colors, list) or not isinstance(patterns, list):\n        raise TypeError(\"Both colors and patterns must be lists.\")\n    \n    if len(colors) != len(patterns):\n        return False\n    \n    sdict = {}\n    pset = set()\n    sset = set()\n    \n    for i in range(len(patterns)):\n        pset.add(patterns[i])\n        sset.add(colors[i])\n        if patterns[i] not in sdict:\n            sdict[patterns[i]] = []\n        sdict[patterns[i]].append(colors[i])\n\n    if len(pset) != len(sset):\n        return False\n\n    for values in sdict.values():\n        if len(set(values)) > 1:\n            return False\n\n    return True", "test_list": ["assert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True ", "assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False ", "assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False "], "challenge_test_list": [], "reference_code": "def is_samepatterns(colors, patterns):    \r\n    if len(colors) != len(patterns):\r\n        return False    \r\n    sdict = {}\r\n    pset = set()\r\n    sset = set()    \r\n    for i in range(len(patterns)):\r\n        pset.add(patterns[i])\r\n        sset.add(colors[i])\r\n        if patterns[i] not in sdict.keys():\r\n            sdict[patterns[i]] = []\r\n\r\n        keys = sdict[patterns[i]]\r\n        keys.append(colors[i])\r\n        sdict[patterns[i]] = keys\r\n\r\n    if len(pset) != len(sset):\r\n        return False   \r\n\r\n    for values in sdict.values():\r\n\r\n        for i in range(len(values) - 1):\r\n            if values[i] != values[i+1]:\r\n                return False\r\n\r\n    return True"}
{"task_id": "75", "prompt": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.", "completion": "def find_tuples(test_list, K):\n    if not isinstance(test_list, list) or not isinstance(K, int):\n        raise TypeError(\"Invalid input types\")\n    res = [sub for sub in test_list if all(isinstance(ele, int) and ele % K == 0 for ele in sub)]\n    return (str(res))", "test_list": ["assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'", "assert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == '[(5, 25, 30)]'", "assert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == '[(8, 16, 4)]'"], "challenge_test_list": [], "reference_code": "def find_tuples(test_list, K):\r\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\r\n  return (str(res)) "}
{"task_id": "76", "prompt": "Write a python function to count the number of squares in a rectangle.", "completion": "def count_Squares(m, n):\n    if not isinstance(m, int) or not isinstance(n, int):\n        raise TypeError(\"unsupported operand type\")\n    if m < 0 or n < 0:\n        return 0.0\n    if n < m:\n        temp = m\n        m = n\n        n = temp\n    return (m * (m + 1) * (2 * m + 1) / 6 + (n - m) * m * (m + 1) / 2)\n\nimport pytest\n\ndef test_basic_functionality():\n    assert count_Squares(2, 3) == 5.0, \"Should be 5 squares in a 2x3 rectangle\"\n    assert count_Squares(3, 3) == 14.0, \"Should be 14 squares in a 3x3 rectangle\"\n    assert count_Squares(1, 1) == 1.0, \"Should be 1 square in a 1x1 rectangle\"\n    assert count_Squares(4, 5) == 30.0, \"Should be 30 squares in a 4x5 rectangle\"\n\ndef test_edge_cases():\n    assert count_Squares(0, 0) == 0.0, \"Should be 0 squares in a 0x0 rectangle\"\n    assert count_Squares(1, 0) == 0.0, \"Should be 0 squares in a 1x0 rectangle\"\n    assert count_Squares(0, 1) == 0.0, \"Should be 0 squares in a 0x1 rectangle\"\n    assert count_Squares(1, 1) == 1.0, \"Should be 1 square in a 1x1 rectangle\"\n    assert count_Squares(10, 10) == 385.0, \"Should be 385 squares in a 10x10 rectangle\"\n\ndef test_exceptions():\n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        count_Squares(\"a\", 3)\n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        count_Squares(3, \"b\")\n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        count_Squares(None, 3)\n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        count_Squares(3, None)", "test_list": ["assert count_Squares(4,3) == 20", "assert count_Squares(2,2) == 5", "assert count_Squares(1,1) == 1"], "challenge_test_list": [], "reference_code": "def count_Squares(m,n):\r\n    if(n < m):\r\n        temp = m\r\n        m = n\r\n        n = temp\r\n    return ((m * (m + 1) * (2 * m + 1) / 6 + (n - m) * m * (m + 1) / 2))"}
{"task_id": "77", "prompt": "Write a python function to find the difference between sum of even and odd digits.", "completion": "def is_Diff(n):\n    if not isinstance(n, int):\n        raise TypeError(\"unsupported operand type\")\n    \n    even_sum = 0\n    odd_sum = 0\n    for digit in str(abs(n)):\n        if int(digit) % 2 == 0:\n            even_sum += int(digit)\n        else:\n            odd_sum += int(digit)\n    \n    return (even_sum - odd_sum) == 0", "test_list": ["assert is_Diff (12345) == False", "assert is_Diff(1212112) == True", "assert is_Diff(1212) == False"], "challenge_test_list": [], "reference_code": "def is_Diff(n): \r\n    return (n % 11 == 0) "}
{"task_id": "78", "prompt": "Write a python function to find number of integers with odd number of set bits.", "completion": "def count_With_Odd_SetBits(n): \n    if n < 0:\n        raise TypeError(\"unsupported operand type\")\n    if (n % 2 != 0): \n        return (n + 1) // 2\n    count = 0\n    for i in range(1, n + 1):\n        if bin(i).count('1') % 2 != 0:\n            count += 1\n    return count", "test_list": ["assert count_With_Odd_SetBits(5) == 3", "assert count_With_Odd_SetBits(10) == 5", "assert count_With_Odd_SetBits(15) == 8"], "challenge_test_list": [], "reference_code": "def count_With_Odd_SetBits(n): \r\n    if (n % 2 != 0): \r\n        return (n + 1) / 2\r\n    count = bin(n).count('1') \r\n    ans = n / 2\r\n    if (count % 2 != 0): \r\n        ans += 1\r\n    return ans "}
{"task_id": "79", "prompt": "Write a python function to check whether the length of the word is odd or not.", "completion": "def word_len(s):\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n    words = s.split(' ')\n    for word in words:\n        if len(word) % 2 != 0:\n            return True\n    return False", "test_list": ["assert word_len(\"Hadoop\") == False", "assert word_len(\"great\") == True", "assert word_len(\"structure\") == True"], "challenge_test_list": [], "reference_code": "def word_len(s): \r\n    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2!=0: \r\n            return True  \r\n        else:\r\n          return False"}
{"task_id": "80", "prompt": "Write a function to find the nth tetrahedral number.", "completion": "def tetrahedral_number(n):\n    if not isinstance(n, int):\n        raise TypeError(\"unsupported operand type\")\n    return (n * (n + 1) * (n + 2)) // 6", "test_list": ["assert tetrahedral_number(5) == 35.0", "assert tetrahedral_number(6) == 56.0", "assert tetrahedral_number(7) == 84.0"], "challenge_test_list": [], "reference_code": "def tetrahedral_number(n): \r\n\treturn (n * (n + 1) * (n + 2)) / 6"}
{"task_id": "81", "prompt": "Write a function to zip the two given tuples.", "completion": "def zip_tuples(test_tup1, test_tup2):\n    if not isinstance(test_tup1, tuple) or not isinstance(test_tup2, tuple):\n        raise TypeError(\"Both arguments must be tuples\")\n    \n    res = []\n    len_tup2 = len(test_tup2)\n    \n    for i, j in enumerate(test_tup1):\n        if len_tup2 == 0:\n            res.append((j, None))\n        else:\n            res.append((j, test_tup2[i % len_tup2]))\n    \n    return res", "test_list": ["assert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]", "assert zip_tuples((8, 9, 5, 6, 10, 11),(2, 6, 7) ) == [(8, 2), (9, 6), (5, 7), (6, 2), (10, 6), (11, 7)]", "assert zip_tuples((9, 10, 6, 7, 11, 12),(3, 7, 8) ) == [(9, 3), (10, 7), (6, 8), (7, 3), (11, 7), (12, 8)]"], "challenge_test_list": [], "reference_code": "def zip_tuples(test_tup1, test_tup2):\r\n  res = []\r\n  for i, j in enumerate(test_tup1):\r\n    res.append((j, test_tup2[i % len(test_tup2)])) \r\n  return (res) "}
{"task_id": "82", "prompt": "Write a function to find the volume of a sphere.", "completion": "import math\n\ndef volume_sphere(r):\n    if not isinstance(r, (int, float)):\n        raise TypeError(\"must be a number\")\n    if r < 0:\n        raise ValueError(\"Radius cannot be negative\")\n    volume = (4/3) * math.pi * r**3\n    return volume", "test_list": ["assert volume_sphere(10)==4188.790204786391", "assert volume_sphere(25)==65449.84694978735", "assert volume_sphere(20)==33510.32163829113"], "challenge_test_list": [], "reference_code": "import math\r\ndef volume_sphere(r):\r\n  volume=(4/3)*math.pi*r*r*r\r\n  return volume"}
{"task_id": "83", "prompt": "Write a python function to find the character made by adding all the characters of the given string.", "completion": "def get_Char(strr):  \n    if not isinstance(strr, str):\n        raise TypeError(\"string expected\")\n    \n    summ = 0\n    for i in range(len(strr)): \n        summ += (ord(strr[i]) - ord('a') + 1)  \n    \n    if (summ % 26 == 0): \n        return 'z' \n    else: \n        summ = summ % 26\n        return chr(ord('a') + summ - 1)\n\nimport pytest\n\ndef test_basic_functionality():\n    assert get_Char(\"abc\") == 'c', \"Expected 'c' for input 'abc'\"\n    assert get_Char(\"xyz\") == 'a', \"Expected 'a' for input 'xyz'\"\n    assert get_Char(\"hello\") == 'o', \"Expected 'o' for input 'hello'\"\n    assert get_Char(\"test\") == 's', \"Expected 's' for input 'test'\"\n    assert get_Char(\"a\") == 'a', \"Expected 'a' for input 'a'\"\n\ndef test_edge_cases():\n    assert get_Char(\"\") == 'z', \"Expected 'z' for empty input\"\n    assert get_Char(\"z\") == 'z', \"Expected 'z' for input 'z'\"\n    assert get_Char(\"a\" * 25) == 'y', \"Expected 'y' for input of 25 'a's\"\n    assert get_Char(\"a\" * 26) == 'z', \"Expected 'z' for input of 26 'a's\"\n    assert get_Char(\"a\" * 27) == 'a', \"Expected 'a' for input of 27 'a's\"\n\ndef test_exceptions():\n    with pytest.raises(TypeError, match=\"string expected\"):\n        get_Char(123)\n    with pytest.raises(TypeError, match=\"string expected\"):\n        get_Char(None)\n    with pytest.raises(TypeError, match=\"string expected\"):\n        get_Char([\"a\", \"b\", \"c\"])", "test_list": ["assert get_Char(\"abc\") == \"f\"", "assert get_Char(\"gfg\") == \"t\"", "assert get_Char(\"ab\") == \"c\""], "challenge_test_list": [], "reference_code": "def get_Char(strr):  \r\n    summ = 0\r\n    for i in range(len(strr)): \r\n        summ += (ord(strr[i]) - ord('a') + 1)  \r\n    if (summ % 26 == 0): \r\n        return ord('z') \r\n    else: \r\n        summ = summ % 26\r\n        return chr(ord('a') + summ - 1)"}
{"task_id": "84", "prompt": "Write a function to find the n-th number in newman conway sequence.", "completion": "def sequence(n): \n    if not isinstance(n, int) or n <= 0:\n        raise TypeError(\"Input must be a positive integer\")\n    if n == 1 or n == 2: \n        return 1\n    else: \n        return sequence(sequence(n-1)) + sequence(n - sequence(n-1))", "test_list": ["assert sequence(10) == 6", "assert sequence(2) == 1", "assert sequence(3) == 2"], "challenge_test_list": [], "reference_code": "def sequence(n): \r\n\tif n == 1 or n == 2: \r\n\t\treturn 1\r\n\telse: \r\n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))"}
{"task_id": "85", "prompt": "Write a function to find the surface area of a sphere.", "completion": "import math\n\ndef surfacearea_sphere(r):\n    if not isinstance(r, (int, float)):\n        raise TypeError(\"unsupported operand type\")\n    if r < 0:\n        raise ValueError(\"Radius cannot be negative\")\n    return 4 * math.pi * r * r", "test_list": ["assert surfacearea_sphere(10)==1256.6370614359173", "assert surfacearea_sphere(15)==2827.4333882308138", "assert surfacearea_sphere(20)==5026.548245743669"], "challenge_test_list": [], "reference_code": "import math\r\ndef surfacearea_sphere(r):\r\n  surfacearea=4*math.pi*r*r\r\n  return surfacearea"}
{"task_id": "86", "prompt": "Write a function to find nth centered hexagonal number.", "completion": "def centered_hexagonal_number(n):\n    if not isinstance(n, int):\n        raise TypeError(\"unsupported operand type\")\n    if n < 0:\n        raise ValueError(\"negative integer\")\n    return 3 * n * (n - 1) + 1 if n > 0 else 1", "test_list": ["assert centered_hexagonal_number(10) == 271", "assert centered_hexagonal_number(2) == 7", "assert centered_hexagonal_number(9) == 217"], "challenge_test_list": [], "reference_code": "def centered_hexagonal_number(n):\r\n  return 3 * n * (n - 1) + 1"}
{"task_id": "87", "prompt": "Write a function to merge three dictionaries into a single expression.", "completion": "def merge_dictionaries_three(dict1, dict2, dict3):\n    if not all(isinstance(d, dict) for d in [dict1, dict2, dict3]):\n        raise TypeError(\"expected a dictionary\")\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict", "test_list": ["assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}", "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}", "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}"], "challenge_test_list": [], "reference_code": "import collections as ct\r\ndef merge_dictionaries_three(dict1,dict2, dict3):\r\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\r\n    return merged_dict"}
{"task_id": "88", "prompt": "Write a function to get the frequency of the elements in a list.", "completion": "import collections\n\ndef freq_count(list1):\n    if not isinstance(list1, list):\n        raise TypeError(\"Input must be a list\")\n    freq_count = collections.Counter(list1)\n    return freq_count", "test_list": ["assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) ", "assert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3}) ", "assert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2}) "], "challenge_test_list": [], "reference_code": "import collections\r\ndef freq_count(list1):\r\n  freq_count= collections.Counter(list1)\r\n  return freq_count"}
{"task_id": "89", "prompt": "Write a function to find the closest smaller number than n.", "completion": "def closest_num(N):\n    if not isinstance(N, (int, float)):\n        raise TypeError(\"unsupported operand type\")\n    return N - 1", "test_list": ["assert closest_num(11) == 10", "assert closest_num(7) == 6", "assert closest_num(12) == 11"], "challenge_test_list": [], "reference_code": "def closest_num(N):\r\n  return (N - 1)"}
{"task_id": "90", "prompt": "Write a python function to find the length of the longest word.", "completion": "def len_log(list1):\n    if not list1:\n        raise IndexError(\"list index out of range\")\n    \n    max_length = 0\n    for item in list1:\n        if not isinstance(item, str):\n            raise TypeError(f\"object of type '{type(item).__name__}' has no len()\")\n        max_length = max(max_length, len(item))\n    \n    return max_length", "test_list": ["assert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7", "assert len_log([\"a\",\"ab\",\"abc\"]) == 3", "assert len_log([\"small\",\"big\",\"tall\"]) == 5"], "challenge_test_list": [], "reference_code": "def len_log(list1):\r\n    max=len(list1[0])\r\n    for i in list1:\r\n        if len(i)>max:\r\n            max=len(i)\r\n    return max"}
{"task_id": "91", "prompt": "Write a function to check if a substring is present in a given list of string values.", "completion": "def find_substring(str1, sub_str):\n    if not isinstance(str1, list) or not all(isinstance(s, str) for s in str1):\n        raise TypeError(\"expected str or bytes-like object\")\n    if not isinstance(sub_str, str):\n        raise TypeError(\"expected str or bytes-like object\")\n    \n    return any(sub_str in s for s in str1)", "test_list": ["assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True", "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False", "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")==True"], "challenge_test_list": [], "reference_code": "def find_substring(str1, sub_str):\r\n   if any(sub_str in s for s in str1):\r\n       return True\r\n   return False"}
{"task_id": "92", "prompt": "Write a function to check whether the given number is undulating or not.", "completion": "def is_undulating(n): \n    if not isinstance(n, list) or len(n) < 3: \n        return False\n    for i in range(2, len(n)): \n        if n[i - 2] != n[i]: \n            return False\n    return True", "test_list": ["assert is_undulating(\"1212121\") == True", "assert is_undulating(\"1991\") == False", "assert is_undulating(\"121\") == True"], "challenge_test_list": [], "reference_code": "def is_undulating(n): \r\n\tif (len(n) <= 2): \r\n\t\treturn False\r\n\tfor i in range(2, len(n)): \r\n\t\tif (n[i - 2] != n[i]): \r\n\t\t\treturn False\r\n\treturn True"}
{"task_id": "93", "prompt": "Write a function to calculate the value of 'a' to the power 'b'.", "completion": "def power(a, b):\n    if not isinstance(a, (int, float)) or not isinstance(b, (int, float)):\n        raise TypeError(\"unsupported operand type(s) for power: '{}' and '{}'\".format(type(a).__name__, type(b).__name__))\n    \n    if b == 0:\n        return 1\n    elif a == 0:\n        return 0\n    elif b == 1:\n        return a\n    elif b < 0:\n        return 1 / power(a, -b)\n    else:\n        return a * power(a, b - 1)", "test_list": ["assert power(3,4) == 81", "assert power(2,3) == 8", "assert power(5,5) == 3125"], "challenge_test_list": [], "reference_code": "def power(a,b):\r\n\tif b==0:\r\n\t\treturn 1\r\n\telif a==0:\r\n\t\treturn 0\r\n\telif b==1:\r\n\t\treturn a\r\n\telse:\r\n\t\treturn a*power(a,b-1)"}
{"task_id": "94", "prompt": "Write a function to extract the index minimum value record from the given tuples.", "completion": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    if not test_list:\n        raise ValueError(\"min() arg is an empty sequence\")\n    res = min(test_list, key=itemgetter(1))[0]\n    return res", "test_list": ["assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'", "assert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'", "assert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'"], "challenge_test_list": [], "reference_code": "from operator import itemgetter \r\ndef index_minimum(test_list):\r\n  res = min(test_list, key = itemgetter(1))[0]\r\n  return (res) "}
{"task_id": "95", "prompt": "Write a python function to find the minimum length of sublist.", "completion": "def Find_Min_Length(lst):  \n    if not lst:\n        raise ValueError(\"min() arg is an empty sequence\")\n    \n    minLength = float('inf')\n    \n    for sublist in lst:\n        if not isinstance(sublist, list):\n            raise TypeError(f\"object of type '{type(sublist).__name__}' has no len()\")\n        minLength = min(minLength, len(sublist))\n    \n    return minLength if minLength != float('inf') else 0", "test_list": ["assert Find_Min_Length([[1],[1,2]]) == 1", "assert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2", "assert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3"], "challenge_test_list": [], "reference_code": "def Find_Min_Length(lst):  \r\n    minLength = min(len(x) for x in lst )\r\n    return minLength "}
{"task_id": "96", "prompt": "Write a python function to find the number of divisors of a given integer.", "completion": "def divisor(n):\n    if not isinstance(n, int):\n        raise TypeError(\"unsupported operand type\")\n    if n < 1:\n        return 0\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            count += 1\n            if i != n // i:\n                count += 1\n    return count", "test_list": ["assert divisor(15) == 4 ", "assert divisor(12) == 6", "assert divisor(9) == 3"], "challenge_test_list": [], "reference_code": "def divisor(n):\r\n  for i in range(n):\r\n    x = len([i for i in range(1,n+1) if not n % i])\r\n  return x"}
{"task_id": "97", "prompt": "Write a function to find frequency count of list of lists.", "completion": "def frequency_lists(list1):\n    if not isinstance(list1, list) or any(not isinstance(sublist, list) for sublist in list1):\n        raise TypeError(\"expected a list of lists\")\n    \n    list1 = [item for sublist in list1 for item in sublist]\n    dic_data = {}\n    for num in list1:\n        dic_data[num] = dic_data.get(num, 0) + 1\n    return dic_data", "test_list": ["assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}", "assert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}", "assert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}"], "challenge_test_list": [], "reference_code": "def frequency_lists(list1):\r\n    list1 = [item for sublist in list1 for item in sublist]\r\n    dic_data = {}\r\n    for num in list1:\r\n        if num in dic_data.keys():\r\n            dic_data[num] += 1\r\n        else:\r\n            key = num\r\n            value = 1\r\n            dic_data[key] = value\r\n    return dic_data\r\n"}
{"task_id": "98", "prompt": "Write a function to multiply all the numbers in a list and divide with the length of the list.", "completion": "import pytest\n\ndef multiply_num(numbers):  \n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list\")\n    if any(not isinstance(x, (int, float)) for x in numbers):\n        raise TypeError(\"All elements must be numbers\")\n    if len(numbers) == 0:\n        raise ZeroDivisionError(\"Division by zero when length is zero\")\n    \n    total = 1\n    for x in numbers:\n        total *= x  \n    return total / len(numbers)", "test_list": ["assert multiply_num((8, 2, 3, -1, 7))==-67.2", "assert multiply_num((-10,-20,-30))==-2000.0", "assert multiply_num((19,15,18))==1710.0"], "challenge_test_list": [], "reference_code": "def multiply_num(numbers):  \r\n    total = 1\r\n    for x in numbers:\r\n        total *= x  \r\n    return total/len(numbers) "}
{"task_id": "99", "prompt": "Write a function to convert the given decimal number to its binary equivalent.", "completion": "def decimal_to_binary(n):\n    if not isinstance(n, int):\n        raise TypeError(\"must be an integer\")\n    if n < 0:\n        return bin(n & (2**32 - 1)).replace(\"0b\", \"\")\n    return bin(n).replace(\"0b\", \"\")", "test_list": ["assert decimal_to_binary(8) == '1000'", "assert decimal_to_binary(18) == '10010'", "assert decimal_to_binary(7) == '111' "], "challenge_test_list": [], "reference_code": "def decimal_to_binary(n): \r\n    return bin(n).replace(\"0b\",\"\") "}
{"task_id": "100", "prompt": "Write a function to find the next smallest palindrome of a specified number.", "completion": "def next_smallest_palindrome(num):\n    if not isinstance(num, int):\n        raise TypeError(\"unsupported operand type\")\n    if num < 0:\n        raise ValueError(\"negative number\")\n    \n    num += 1\n    while True:\n        if str(num) == str(num)[::-1]:\n            return num\n        num += 1", "test_list": ["assert next_smallest_palindrome(99)==101", "assert next_smallest_palindrome(1221)==1331", "assert next_smallest_palindrome(120)==121"], "challenge_test_list": [], "reference_code": "import sys\r\ndef next_smallest_palindrome(num):\r\n    numstr = str(num)\r\n    for i in range(num+1,sys.maxsize):\r\n        if str(i) == str(i)[::-1]:\r\n            return i"}
