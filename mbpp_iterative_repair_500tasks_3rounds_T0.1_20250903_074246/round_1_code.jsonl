{"task_id": "1", "round": 1, "temperature": 0.1, "generated_code": "def min_cost(cost, m, n): \n    if not cost or not cost[0]:\n        raise IndexError(\"Cost matrix is empty\")\n    \n    R = len(cost)\n    C = len(cost[0])\n    \n    for row in cost:\n        if len(row) != C:\n            raise ValueError(\"All rows in the cost matrix must have the same length\")\n    \n    tc = [[0 for x in range(C)] for x in range(R)] \n    tc[0][0] = cost[0][0] \n    \n    for i in range(1, m + 1): \n        tc[i][0] = tc[i - 1][0] + cost[i][0] \n    for j in range(1, n + 1): \n        tc[0][j] = tc[0][j - 1] + cost[0][j] \n    \n    for i in range(1, m + 1): \n        for j in range(1, n + 1): \n            tc[i][j] = min(tc[i - 1][j - 1], tc[i - 1][j], tc[i][j - 1]) + cost[i][j] \n    \n    return tc[m][n]", "tests_source": "initial_tests.jsonl", "tests_task_id": "1", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T07:43:01.563149", "stage": "code_generation"}
{"task_id": "2", "round": 1, "temperature": 0.1, "generated_code": "def similar_elements(test_tup1, test_tup2):\n    if not isinstance(test_tup1, tuple) or not isinstance(test_tup2, tuple):\n        raise TypeError(\"Both arguments must be tuples\")\n    res = tuple(set(test_tup1) & set(test_tup2))\n    return res", "tests_source": "initial_tests.jsonl", "tests_task_id": "2", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T07:43:37.656823", "stage": "code_generation"}
{"task_id": "3", "round": 1, "temperature": 0.1, "generated_code": "import math\n\ndef is_not_prime(n):\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer\")\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False", "tests_source": "initial_tests.jsonl", "tests_task_id": "3", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T07:43:47.041895", "stage": "code_generation"}
{"task_id": "4", "round": 1, "temperature": 0.1, "generated_code": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    if not isinstance(nums, list):\n        raise TypeError(\"Expected a list of numbers\")\n    if not isinstance(n, int) or n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    \n    return hq.nlargest(n, nums) if n <= len(nums) else sorted(nums, reverse=True)", "tests_source": "initial_tests.jsonl", "tests_task_id": "4", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T07:43:58.166828", "stage": "code_generation"}
{"task_id": "5", "round": 1, "temperature": 0.1, "generated_code": "def count_ways(n):\n    if not isinstance(n, int) or n < 0:\n        raise TypeError(\"unsupported operand type\")\n    \n    if n == 0:\n        return 1\n    elif n == 1:\n        return 0\n    \n    A = [0] * (n + 1)\n    B = [0] * (n + 1)\n    A[0] = 1\n    A[1] = 0\n    B[0] = 0\n    B[1] = 1\n    \n    for i in range(2, n + 1):\n        A[i] = A[i - 2] + 2 * B[i - 1]\n        B[i] = A[i - 1] + B[i - 2]\n    \n    return A[n]", "tests_source": "initial_tests.jsonl", "tests_task_id": "5", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T07:44:19.754117", "stage": "code_generation"}
{"task_id": "6", "round": 1, "temperature": 0.1, "generated_code": "def is_Power_Of_Two(x):\n    return x and (not (x & (x - 1)))\n\ndef differ_At_One_Bit_Pos(a, b):\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise TypeError(\"Both inputs must be integers\")\n    return is_Power_Of_Two(a ^ b)", "tests_source": "initial_tests.jsonl", "tests_task_id": "6", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T07:44:44.557297", "stage": "code_generation"}
{"task_id": "7", "round": 1, "temperature": 0.1, "generated_code": "import re\n\ndef find_char_long(text):\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n    return re.findall(r\"\\b\\w{4,}\\b\", text)", "tests_source": "initial_tests.jsonl", "tests_task_id": "7", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T07:44:50.944073", "stage": "code_generation"}
{"task_id": "8", "round": 1, "temperature": 0.1, "generated_code": "def square_nums(nums):\n    if not all(isinstance(x, (int, float)) for x in nums):\n        raise TypeError(\"unsupported operand type\")\n    return list(map(lambda x: x ** 2, nums))", "tests_source": "initial_tests.jsonl", "tests_task_id": "8", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T07:44:57.488441", "stage": "code_generation"}
{"task_id": "9", "round": 1, "temperature": 0.1, "generated_code": "def find_Rotations(s):\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n    \n    n = len(s)\n    if n == 0 or n == 1 or s.count(s[0]) == n:\n        return 0\n    \n    tmp = s + s\n    for i in range(1, n + 1):\n        substring = tmp[i:i + n]\n        if s == substring:\n            return i\n    return n", "tests_source": "initial_tests.jsonl", "tests_task_id": "9", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T07:45:05.886699", "stage": "code_generation"}
{"task_id": "10", "round": 1, "temperature": 0.1, "generated_code": "import heapq\n\ndef small_nnum(list1, n):\n    if not isinstance(list1, list):\n        raise TypeError(\"Expected list as the first argument\")\n    if not isinstance(n, int):\n        raise TypeError(\"Expected integer for n\")\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n > len(list1):\n        n = len(list1)\n    \n    return heapq.nsmallest(n, list1)", "tests_source": "initial_tests.jsonl", "tests_task_id": "10", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T07:45:27.695666", "stage": "code_generation"}
{"task_id": "11", "round": 1, "temperature": 0.1, "generated_code": "def remove_Occ(s, ch):\n    if not isinstance(s, str) or not isinstance(ch, str) or len(ch) != 1:\n        raise TypeError(\"Invalid input: s must be a string and ch must be a single character string.\")\n    \n    first_index = s.find(ch)\n    last_index = s.rfind(ch)\n    \n    if first_index == -1 or first_index == last_index:\n        return s\n    \n    return s[:first_index] + s[first_index + 1:last_index] + s[last_index + 1:]", "tests_source": "initial_tests.jsonl", "tests_task_id": "11", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T07:45:46.240073", "stage": "code_generation"}
{"task_id": "12", "round": 1, "temperature": 0.1, "generated_code": "def sort_matrix(M):\n    if not isinstance(M, list):\n        raise TypeError(\"object is not iterable\")\n    \n    for row in M:\n        if not isinstance(row, list):\n            raise TypeError(\"object is not iterable\")\n        if not all(isinstance(x, (int, float)) for x in row):\n            raise TypeError(\"unsupported operand type(s) for +: 'int' and 'str'\")\n    \n    return sorted(M, key=sum)", "tests_source": "initial_tests.jsonl", "tests_task_id": "12", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T07:46:16.006644", "stage": "code_generation"}
{"task_id": "13", "round": 1, "temperature": 0.1, "generated_code": "from collections import Counter\n\ndef count_common(words):\n    if not isinstance(words, list):\n        raise TypeError(\"Input must be a list\")\n    if any(not isinstance(word, str) for word in words):\n        raise TypeError(\"All elements in the list must be strings\")\n    \n    word_counts = Counter(words)\n    top_four = word_counts.most_common(4)\n    return top_four", "tests_source": "initial_tests.jsonl", "tests_task_id": "13", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T08:18:24.129897", "stage": "code_generation"}
{"task_id": "14", "round": 1, "temperature": 0.1, "generated_code": "def find_Volume(l, b, h):\n    if any(x < 0 for x in (l, b, h)):\n        raise ValueError(\"negative dimensions\")\n    if any(not isinstance(x, (int, float)) for x in (l, b, h)):\n        raise TypeError(\"unsupported operand type\")\n    return (l * b * h) / 2", "tests_source": "initial_tests.jsonl", "tests_task_id": "14", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T08:52:26.315011", "stage": "code_generation"}
{"task_id": "15", "round": 1, "temperature": 0.1, "generated_code": "import re\n\ndef split_lowerstring(text):\n    if not isinstance(text, str):\n        raise TypeError(\"expected string or bytes-like object\")\n    return re.findall('[a-z][^a-z]*', text)", "tests_source": "initial_tests.jsonl", "tests_task_id": "15", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T08:53:10.343273", "stage": "code_generation"}
{"task_id": "16", "round": 1, "temperature": 0.1, "generated_code": "import re\n\ndef text_lowercase_underscore(text):\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n    \n    patterns = '^[a-z]+_[a-z]+$'\n    if re.match(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "tests_source": "initial_tests.jsonl", "tests_task_id": "16", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T08:53:26.003032", "stage": "code_generation"}
{"task_id": "17", "round": 1, "temperature": 0.1, "generated_code": "def square_perimeter(a):\n    if not isinstance(a, (int, float)):\n        raise TypeError(\"unsupported operand type\")\n    return 4 * a", "tests_source": "initial_tests.jsonl", "tests_task_id": "17", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T08:53:32.968963", "stage": "code_generation"}
{"task_id": "18", "round": 1, "temperature": 0.1, "generated_code": "def remove_dirty_chars(string, second_string):\n    if not isinstance(string, str) or not isinstance(second_string, str):\n        raise TypeError(\"Both arguments must be strings\")\n    \n    count = [0] * 256\n    for char in second_string:\n        count[ord(char)] += 1\n    \n    result = []\n    for char in string:\n        if count[ord(char)] == 0:\n            result.append(char)\n    \n    return ''.join(result)", "tests_source": "initial_tests.jsonl", "tests_task_id": "18", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T08:53:40.035123", "stage": "code_generation"}
{"task_id": "19", "round": 1, "temperature": 0.1, "generated_code": "def test_duplicate(arraynums):\n    if not all(isinstance(num, int) for num in arraynums):\n        raise TypeError(\"All elements must be integers\")\n    nums_set = set(arraynums)    \n    return len(arraynums) != len(nums_set)", "tests_source": "initial_tests.jsonl", "tests_task_id": "19", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T08:53:59.056762", "stage": "code_generation"}
{"task_id": "20", "round": 1, "temperature": 0.1, "generated_code": "def is_woodall(x):\n    if not isinstance(x, int):\n        raise TypeError(\"unsupported operand type\")\n    if x % 2 == 0 or x == 0:\n        return False\n    if x == 1:\n        return True\n    x += 1\n    p = 0\n    while x % 2 == 0:\n        x //= 2\n        p += 1\n        if p == x:\n            return True\n    return False", "tests_source": "initial_tests.jsonl", "tests_task_id": "20", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T08:54:40.371561", "stage": "code_generation"}
{"task_id": "21", "round": 1, "temperature": 0.1, "generated_code": "def multiples_of_num(m, n):\n    if not isinstance(m, int) or not isinstance(n, int):\n        raise TypeError(\"Both m and n must be integers\")\n    if m < 0:\n        return []\n    return [i * n for i in range(1, m + 1)]", "tests_source": "initial_tests.jsonl", "tests_task_id": "21", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T08:54:48.773385", "stage": "code_generation"}
{"task_id": "22", "round": 1, "temperature": 0.1, "generated_code": "def find_first_duplicate(nums):\n    if not isinstance(nums, list):\n        raise TypeError(\"Input must be a list\")\n    \n    num_set = set()\n    for num in nums:\n        if not isinstance(num, int):\n            raise TypeError(\"All elements in the list must be integers\")\n        \n        if num in num_set:\n            return num\n        else:\n            num_set.add(num)\n\n    return -1", "tests_source": "initial_tests.jsonl", "tests_task_id": "22", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T08:55:00.422981", "stage": "code_generation"}
{"task_id": "23", "round": 1, "temperature": 0.1, "generated_code": "def maximum_Sum(list1): \n    if list1 is None or not isinstance(list1, list):\n        raise TypeError(\"Input must be a list of lists\")\n    \n    maxi = -100000\n    for x in list1: \n        if not isinstance(x, list):\n            raise TypeError(\"Each element of the input must be a list\")\n        sum = 0 \n        for y in x: \n            if not isinstance(y, (int, float)):\n                raise TypeError(\"All elements in the inner lists must be numbers\")\n            sum += y      \n        maxi = max(sum, maxi)     \n    return maxi", "tests_source": "initial_tests.jsonl", "tests_task_id": "23", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T08:55:12.256785", "stage": "code_generation"}
{"task_id": "24", "round": 1, "temperature": 0.1, "generated_code": "def binary_to_decimal(binary):\n    if not isinstance(binary, int) or binary < 0:\n        raise ValueError(\"Invalid binary number\")\n    \n    binary_str = str(binary)\n    if any(digit not in '01' for digit in binary_str):\n        raise ValueError(\"Invalid binary number\")\n    \n    decimal = 0\n    for i, digit in enumerate(reversed(binary_str)):\n        decimal += int(digit) * (2 ** i)\n    \n    return decimal", "tests_source": "initial_tests.jsonl", "tests_task_id": "24", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T08:55:38.590368", "stage": "code_generation"}
{"task_id": "25", "round": 1, "temperature": 0.1, "generated_code": "def find_Product(arr, n):\n    if arr is None:\n        raise TypeError(\"unsupported operand type\")\n    if n != len(arr):\n        raise ValueError(\"not enough values to unpack\")\n    \n    prod = 1\n    seen = {}\n    \n    for num in arr:\n        if not isinstance(num, (int, float)):\n            raise TypeError(\"unsupported operand type\")\n        if num in seen:\n            seen[num] += 1\n        else:\n            seen[num] = 1\n    \n    for num, count in seen.items():\n        if count == 1:\n            prod *= num\n    \n    return prod if prod != 1 or len(seen) == 0 else 1", "tests_source": "initial_tests.jsonl", "tests_task_id": "25", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T08:55:47.453238", "stage": "code_generation"}
{"task_id": "26", "round": 1, "temperature": 0.1, "generated_code": "def check_k_elements(test_list, K):\n    if not isinstance(test_list, list) or not all(isinstance(tup, tuple) for tup in test_list):\n        raise TypeError(\"test_list must be a list of tuples\")\n    if not isinstance(K, (int, float, str)):\n        raise TypeError(\"K must be a number or a string\")\n    \n    for tup in test_list:\n        for ele in tup:\n            if ele != K:\n                return False\n    return True", "tests_source": "initial_tests.jsonl", "tests_task_id": "26", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T08:55:56.129050", "stage": "code_generation"}
{"task_id": "27", "round": 1, "temperature": 0.1, "generated_code": "import re\n\ndef remove(lst):\n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list\")\n    \n    for item in lst:\n        if not isinstance(item, str):\n            raise TypeError(\"All items in the list must be strings\")\n    \n    pattern = '[0-9]'\n    return [re.sub(pattern, '', i) for i in lst]", "tests_source": "initial_tests.jsonl", "tests_task_id": "27", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T08:56:21.979490", "stage": "code_generation"}
{"task_id": "28", "round": 1, "temperature": 0.1, "generated_code": "def binomial_Coeff(n, k):\n    if n < 0 or k < 0:\n        raise RecursionError(\"Negative values are not allowed\")\n    if k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    return binomial_Coeff(n - 1, k - 1) + binomial_Coeff(n - 1, k)", "tests_source": "initial_tests.jsonl", "tests_task_id": "28", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T08:56:40.104110", "stage": "code_generation"}
{"task_id": "29", "round": 1, "temperature": 0.1, "generated_code": "def get_Odd_Occurrence(arr, arr_size):\n    if arr is None or arr_size is None:\n        raise TypeError(\"Input cannot be None\")\n    \n    if arr_size == 0:\n        return -1\n    \n    occurrence_count = {}\n    \n    for num in arr:\n        if num in occurrence_count:\n            occurrence_count[num] += 1\n        else:\n            occurrence_count[num] = 1\n    \n    for num, count in occurrence_count.items():\n        if count % 2 != 0:\n            return num\n    \n    return -1", "tests_source": "initial_tests.jsonl", "tests_task_id": "29", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T08:57:12.926543", "stage": "code_generation"}
{"task_id": "30", "round": 1, "temperature": 0.1, "generated_code": "def count_Substring_With_Equal_Ends(s):\n    if not isinstance(s, str):\n        raise TypeError(\"expected a string\")\n    \n    result = 0\n    n = len(s)\n    \n    for i in range(n):\n        for j in range(i, n):\n            if s[i] == s[j]:\n                result += 1\n                \n    return result", "tests_source": "initial_tests.jsonl", "tests_task_id": "30", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T08:57:21.121365", "stage": "code_generation"}
{"task_id": "31", "round": 1, "temperature": 0.1, "generated_code": "def func(nums, k):\n    import collections\n    import heapq\n\n    if not isinstance(k, int) or k < 1:\n        raise ValueError(\"k must be a positive integer\")\n    \n    d = collections.defaultdict(int)\n    for row in nums:\n        for i in row:\n            d[i] += 1\n\n    temp = []\n    for key, v in d.items():\n        if len(temp) < k:\n            heapq.heappush(temp, (v, key))\n        else:\n            if v > temp[0][0]:\n                heapq.heappop(temp)\n                heapq.heappush(temp, (v, key))\n\n    result = []\n    while temp:\n        v, key = heapq.heappop(temp)\n        result.append(key)\n\n    return result[::-1]", "tests_source": "initial_tests.jsonl", "tests_task_id": "31", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T08:57:39.200219", "stage": "code_generation"}
{"task_id": "32", "round": 1, "temperature": 0.1, "generated_code": "import math\n\ndef max_Prime_Factors(n):\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n    \n    maxPrime = -1\n    \n    while n % 2 == 0:\n        maxPrime = 2\n        n //= 2\n    \n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            maxPrime = i\n            n //= i\n            \n    if n > 2:\n        maxPrime = n\n        \n    return int(maxPrime)", "tests_source": "initial_tests.jsonl", "tests_task_id": "32", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T08:58:00.292448", "stage": "code_generation"}
{"task_id": "33", "round": 1, "temperature": 0.1, "generated_code": "def decimal_To_Binary(N):\n    if not isinstance(N, int) or N < 0:\n        return 0\n    B_Number = 0\n    cnt = 0\n    while (N != 0):\n        rem = N % 2\n        c = pow(10, cnt)\n        B_Number += rem * c\n        N //= 2\n        cnt += 1\n    return B_Number", "tests_source": "initial_tests.jsonl", "tests_task_id": "33", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T08:58:25.395508", "stage": "code_generation"}
{"task_id": "34", "round": 1, "temperature": 0.1, "generated_code": "def find_missing(ar, N):\n    if ar is None or not isinstance(N, int):\n        raise TypeError(\"Invalid input\")\n    if N > len(ar):\n        raise IndexError(\"N is greater than the length of the array\")\n    \n    if N == 0:\n        return -1\n    if N == 1:\n        return -1 if ar[0] == 1 else 1\n    \n    l = 0\n    r = N - 1\n    while l <= r:\n        mid = (l + r) // 2\n        if mid > 0 and ar[mid] != mid + 1 and ar[mid - 1] == mid:\n            return mid + 1\n        elif ar[mid] != mid + 1:\n            r = mid - 1\n        else:\n            l = mid + 1\n    return -1", "tests_source": "initial_tests.jsonl", "tests_task_id": "34", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T08:58:34.238191", "stage": "code_generation"}
{"task_id": "35", "round": 1, "temperature": 0.1, "generated_code": "def find_rect_num(n):\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer\")\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    return n * (n + 1)", "tests_source": "initial_tests.jsonl", "tests_task_id": "35", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T08:58:57.954978", "stage": "code_generation"}
{"task_id": "36", "round": 1, "temperature": 0.1, "generated_code": "def find_Nth_Digit(p, q, N):\n    if q == 0:\n        raise ZeroDivisionError(\"division by zero\")\n    if N <= 0:\n        raise ValueError(\"N must be a positive integer\")\n    \n    # Move to the Nth digit in the decimal representation\n    while N > 0:\n        N -= 1\n        p *= 10\n        res = p // q\n        p %= q\n    \n    return res", "tests_source": "initial_tests.jsonl", "tests_task_id": "36", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T08:59:08.607299", "stage": "code_generation"}
{"task_id": "37", "round": 1, "temperature": 0.1, "generated_code": "def sort_mixed_list(mixed_list):\n    if not all(isinstance(i, (int, str)) for i in mixed_list):\n        raise TypeError(\"must be str or int\")\n    \n    int_part = sorted([i for i in mixed_list if isinstance(i, int)])\n    str_part = sorted([i for i in mixed_list if isinstance(i, str)])\n    return int_part + str_part", "tests_source": "initial_tests.jsonl", "tests_task_id": "37", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T08:59:52.662781", "stage": "code_generation"}
{"task_id": "38", "round": 1, "temperature": 0.1, "generated_code": "def div_even_odd(list1):\n    first_even = next((el for el in list1 if isinstance(el, (int, float)) and el % 2 == 0), -1)\n    first_odd = next((el for el in list1 if isinstance(el, (int, float)) and el % 2 != 0), -1)\n    \n    if first_even == -1 or first_odd == -1:\n        return -1.0\n    \n    if first_odd == 0:\n        raise ZeroDivisionError(\"division by zero\")\n    \n    return first_even / first_odd", "tests_source": "initial_tests.jsonl", "tests_task_id": "38", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:00:04.535394", "stage": "code_generation"}
{"task_id": "39", "round": 1, "temperature": 0.1, "generated_code": "import heapq\nfrom collections import Counter\n\ndef rearange_string(S):\n    if not isinstance(S, str):\n        raise TypeError(\"Input must be a string\")\n    \n    ctr = Counter(S)\n    heap = [(-value, key) for key, value in ctr.items()]\n    heapq.heapify(heap)\n    \n    if (-heap[0][0]) * 2 > len(S) + 1: \n        return \"\"\n    \n    ans = []\n    while len(heap) >= 2:\n        nct1, char1 = heapq.heappop(heap)\n        nct2, char2 = heapq.heappop(heap)\n        ans.extend([char1, char2])\n        if nct1 + 1: heapq.heappush(heap, (nct1 + 1, char1))\n        if nct2 + 1: heapq.heappush(heap, (nct2 + 1, char2))\n    \n    return \"\".join(ans) + (heap[0][1] if heap else \"\")", "tests_source": "initial_tests.jsonl", "tests_task_id": "39", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:00:46.882290", "stage": "code_generation"}
{"task_id": "40", "round": 1, "temperature": 0.1, "generated_code": "from collections import Counter\nfrom itertools import chain\n\ndef freq_element(nums):\n    if not isinstance(nums, list) or not all(isinstance(i, list) for i in nums):\n        raise TypeError(\"expected an iterable of iterables\")\n    result = Counter(chain.from_iterable(nums))\n    return result", "tests_source": "initial_tests.jsonl", "tests_task_id": "40", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:01:23.318222", "stage": "code_generation"}
{"task_id": "41", "round": 1, "temperature": 0.1, "generated_code": "def filter_evennumbers(nums):\n    if not isinstance(nums, list):\n        raise TypeError(\"unsupported operand type\")\n    for num in nums:\n        if not isinstance(num, int):\n            raise TypeError(\"unsupported operand type\")\n    even_nums = list(filter(lambda x: x % 2 == 0, nums))\n    return even_nums", "tests_source": "initial_tests.jsonl", "tests_task_id": "41", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:01:42.398742", "stage": "code_generation"}
{"task_id": "42", "round": 1, "temperature": 0.1, "generated_code": "def find_Sum(arr, n):\n    if arr is None:\n        raise TypeError(\"unsupported operand type\")\n    if not isinstance(arr, list):\n        raise TypeError(\"unsupported operand type\")\n    \n    from collections import Counter\n    element_count = Counter(arr)\n    return sum(x * count for x, count in element_count.items() if count > 1)", "tests_source": "initial_tests.jsonl", "tests_task_id": "42", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:01:52.288797", "stage": "code_generation"}
{"task_id": "43", "round": 1, "temperature": 0.1, "generated_code": "import re\n\ndef text_match(text):\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n    patterns = '^[a-z]+_[a-z]+$'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "tests_source": "initial_tests.jsonl", "tests_task_id": "43", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:02:07.401989", "stage": "code_generation"}
{"task_id": "44", "round": 1, "temperature": 0.1, "generated_code": "import re\n\ndef text_match_string(text):\n    if not isinstance(text, str):\n        raise TypeError(\"expected string or bytes-like object\")\n    \n    patterns = '^\\w+'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "tests_source": "initial_tests.jsonl", "tests_task_id": "44", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:02:14.270533", "stage": "code_generation"}
{"task_id": "45", "round": 1, "temperature": 0.1, "generated_code": "def find_gcd(x, y): \n    while(y): \n        x, y = y, x % y \n    return abs(x)\n\ndef get_gcd(l):\n    if not l:\n        raise IndexError(\"list index out of range\")\n    \n    num1 = l[0]\n    gcd = abs(num1)\n    \n    for num in l[1:]:\n        if not isinstance(num, int):\n            raise TypeError(\"unsupported operand type\")\n        gcd = find_gcd(gcd, abs(num))\n    \n    return gcd", "tests_source": "initial_tests.jsonl", "tests_task_id": "45", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:02:26.175186", "stage": "code_generation"}
{"task_id": "46", "round": 1, "temperature": 0.1, "generated_code": "def test_distinct(data):\n    if not isinstance(data, list):\n        raise TypeError(\"Input must be a list\")\n    if any(not isinstance(x, (int, float)) for x in data):\n        raise TypeError(\"All elements in the list must be numbers\")\n    \n    return len(data) == len(set(data))", "tests_source": "initial_tests.jsonl", "tests_task_id": "46", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:02:33.469226", "stage": "code_generation"}
{"task_id": "47", "round": 1, "temperature": 0.1, "generated_code": "def compute_Last_Digit(A, B):\n    if not isinstance(A, int) or not isinstance(B, int):\n        raise TypeError(\"Inputs must be integers\")\n    if A < 0 or B < 0:\n        raise ValueError(\"Inputs must be non-negative integers\")\n    \n    if A == B:\n        return 1\n    elif (B - A) >= 5:\n        return 0\n    else:\n        variable = 1\n        for i in range(A + 1, B + 1):\n            variable = (variable * (i % 10)) % 10\n        return variable % 10", "tests_source": "initial_tests.jsonl", "tests_task_id": "47", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:02:44.571549", "stage": "code_generation"}
{"task_id": "48", "round": 1, "temperature": 0.1, "generated_code": "def odd_bit_set_number(n):\n    if not isinstance(n, int):\n        raise TypeError(\"unsupported operand type\")\n    \n    res = 0\n    count = 0\n    temp = n\n    \n    while temp > 0:\n        if count % 2 == 0:\n            res |= (1 << count)\n        count += 1\n        temp >>= 1\n    \n    return n | res", "tests_source": "initial_tests.jsonl", "tests_task_id": "48", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:03:09.599376", "stage": "code_generation"}
{"task_id": "49", "round": 1, "temperature": 0.1, "generated_code": "def specified_element(nums, N):\n    if not isinstance(N, int):\n        raise TypeError(\"list indices must be integers or slices, not {}\".format(type(N).__name__))\n    \n    result = []\n    for sublist in nums:\n        try:\n            result.append(sublist[N])\n        except IndexError:\n            result.append(None)\n    return result", "tests_source": "initial_tests.jsonl", "tests_task_id": "49", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:03:53.414101", "stage": "code_generation"}
{"task_id": "50", "round": 1, "temperature": 0.1, "generated_code": "def min_length_list(input_list):\n    if not input_list:\n        raise ValueError(\"min() arg is an empty sequence\")\n    \n    if any(not isinstance(i, list) for i in input_list):\n        raise TypeError(\"unhashable type: 'list'\")\n    \n    min_length = min(len(x) for x in input_list)\n    min_list = min(input_list, key=lambda i: len(i))\n    return (min_length, min_list)", "tests_source": "initial_tests.jsonl", "tests_task_id": "50", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:04:17.799320", "stage": "code_generation"}
{"task_id": "51", "round": 1, "temperature": 0.1, "generated_code": "def check_equilateral(x, y, z):\n    if not all(isinstance(side, (int, float)) for side in (x, y, z)):\n        raise TypeError(\"All sides must be numeric values.\")\n    return x == y == z", "tests_source": "initial_tests.jsonl", "tests_task_id": "51", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:04:54.034241", "stage": "code_generation"}
{"task_id": "52", "round": 1, "temperature": 0.1, "generated_code": "def parallelogram_area(b, h):\n    if not isinstance(b, (int, float)) or not isinstance(h, (int, float)):\n        raise TypeError(\"unsupported operand type\")\n    return b * h", "tests_source": "initial_tests.jsonl", "tests_task_id": "52", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:05:03.444765", "stage": "code_generation"}
{"task_id": "53", "round": 1, "temperature": 0.1, "generated_code": "def check_Equality(s):\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n    if len(s) == 0:\n        return \"Equal\"\n    return \"Equal\" if s[0] == s[-1] else \"Not Equal\"", "tests_source": "initial_tests.jsonl", "tests_task_id": "53", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:05:12.585134", "stage": "code_generation"}
{"task_id": "54", "round": 1, "temperature": 0.1, "generated_code": "def counting_sort(my_list):\n    if not all(isinstance(x, int) for x in my_list):\n        raise TypeError(\"Input must be a list of integers\")\n    if any(x < 0 for x in my_list):\n        raise ValueError(\"Negative numbers are not allowed\")\n    \n    if len(my_list) == 0:\n        return my_list\n    \n    max_value = max(my_list)\n    buckets = [0] * (max_value + 1)\n    \n    for i in my_list:\n        buckets[i] += 1\n    \n    i = 0\n    for j in range(max_value + 1):\n        for a in range(buckets[j]):\n            my_list[i] = j\n            i += 1\n            \n    return my_list", "tests_source": "initial_tests.jsonl", "tests_task_id": "54", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:05:49.285565", "stage": "code_generation"}
{"task_id": "55", "round": 1, "temperature": 0.1, "generated_code": "import math\n\ndef tn_gp(a, n, r):\n    if not isinstance(a, (int, float)) or not isinstance(n, int) or not isinstance(r, (int, float)):\n        raise TypeError(\"unsupported operand type\")\n    if n < 1:\n        raise ValueError(\"math domain error\")\n    return a * (math.pow(r, n - 1))", "tests_source": "initial_tests.jsonl", "tests_task_id": "55", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:05:58.071111", "stage": "code_generation"}
{"task_id": "56", "round": 1, "temperature": 0.1, "generated_code": "def rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \n\ndef check(n):\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer\")\n    return (2 * rev(n) == n + 1) if n >= 0 else False", "tests_source": "initial_tests.jsonl", "tests_task_id": "56", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:06:23.385490", "stage": "code_generation"}
{"task_id": "57", "round": 1, "temperature": 0.1, "generated_code": "def find_Max_Num(arr, n):\n    if not isinstance(arr, list) or not all(isinstance(x, int) for x in arr):\n        raise TypeError(\"unsupported operand type\")\n    if n != len(arr):\n        raise ValueError(\"not enough values to unpack\")\n    \n    if n == 0:\n        return 0\n    \n    arr = [str(x) for x in arr]\n    arr.sort(key=lambda x: x * 10, reverse=True)\n    \n    largest_num = ''.join(arr)\n    return int(largest_num) if largest_num else 0", "tests_source": "initial_tests.jsonl", "tests_task_id": "57", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:07:04.212519", "stage": "code_generation"}
{"task_id": "58", "round": 1, "temperature": 0.1, "generated_code": "def opposite_Signs(x, y):\n    if not isinstance(x, int) or not isinstance(y, int):\n        raise TypeError(\"unsupported operand type\")\n    return (x < 0) != (y < 0)", "tests_source": "initial_tests.jsonl", "tests_task_id": "58", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:07:15.756045", "stage": "code_generation"}
{"task_id": "59", "round": 1, "temperature": 0.1, "generated_code": "def is_octagonal(n):\n    if not isinstance(n, int):\n        raise TypeError(\"unsupported operand type\")\n    if n < 0:\n        raise ValueError(\"negative integer\")\n    return 3 * n * n - 2 * n", "tests_source": "initial_tests.jsonl", "tests_task_id": "59", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:07:42.991844", "stage": "code_generation"}
{"task_id": "60", "round": 1, "temperature": 0.1, "generated_code": "def max_len_sub(arr, n):\n    if not isinstance(arr, list) or not isinstance(n, int):\n        raise TypeError(\"Invalid input types\")\n    \n    if n == 0:\n        return 0\n    \n    mls = [1] * n\n    max_length = 1\n    \n    for i in range(1, n):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) <= 1:\n                mls[i] = max(mls[i], mls[j] + 1)\n        max_length = max(max_length, mls[i])\n    \n    return max_length", "tests_source": "initial_tests.jsonl", "tests_task_id": "60", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:08:16.554505", "stage": "code_generation"}
{"task_id": "61", "round": 1, "temperature": 0.1, "generated_code": "from collections import defaultdict\n\ndef count_Substrings(s, n):\n    if not isinstance(s, str):\n        raise TypeError(\"expected a string\")\n    if len(s) != n:\n        raise ValueError(\"n must be equal to the length of s\")\n    \n    count, sum = 0, 0\n    mp = defaultdict(lambda: 0)\n    mp[0] += 1\n    \n    for i in range(n):\n        if not s[i].isdigit():\n            raise ValueError(\"string must contain only digits\")\n        sum += ord(s[i]) - ord('0')\n        count += mp[sum - (i + 1)]\n        mp[sum - (i + 1)] += 1\n    \n    return count", "tests_source": "initial_tests.jsonl", "tests_task_id": "61", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:08:40.351027", "stage": "code_generation"}
{"task_id": "62", "round": 1, "temperature": 0.1, "generated_code": "def smallest_num(xs):\n    if xs is None:\n        raise TypeError(\"unsupported operand type(s) for min\")\n    if not xs:\n        raise ValueError(\"min() arg is an empty sequence\")\n    if any(not isinstance(x, (int, float)) for x in xs):\n        raise TypeError(\"unsupported operand type(s) for min\")\n    return min(xs)", "tests_source": "initial_tests.jsonl", "tests_task_id": "62", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:09:00.606538", "stage": "code_generation"}
{"task_id": "63", "round": 1, "temperature": 0.1, "generated_code": "def max_difference(test_list):\n    if test_list is None:\n        raise TypeError(\"Input cannot be None\")\n    \n    if not all(isinstance(pair, tuple) and len(pair) == 2 for pair in test_list):\n        raise ValueError(\"All elements must be tuples of exactly two elements\")\n    \n    temp = []\n    for a, b in test_list:\n        if not isinstance(a, (int, float)) or not isinstance(b, (int, float)):\n            raise TypeError(\"Tuple elements must be numbers\")\n        temp.append(abs(b - a))\n    \n    return max(temp) if temp else 0", "tests_source": "initial_tests.jsonl", "tests_task_id": "63", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:09:26.424389", "stage": "code_generation"}
{"task_id": "64", "round": 1, "temperature": 0.1, "generated_code": "def subject_marks(subjectmarks):\n    if not isinstance(subjectmarks, list):\n        raise TypeError(\"expected a list of tuples\")\n    for item in subjectmarks:\n        if not isinstance(item, tuple):\n            raise TypeError(\"expected a list of tuples\")\n        if len(item) != 2:\n            raise ValueError(\"each tuple must have exactly two elements\")\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks", "tests_source": "initial_tests.jsonl", "tests_task_id": "64", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:09:52.232123", "stage": "code_generation"}
{"task_id": "65", "round": 1, "temperature": 0.1, "generated_code": "def recursive_list_sum(data_list):\n    total = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        elif isinstance(element, (int, float)):\n            total += element\n        else:\n            raise TypeError(\"unsupported operand type\")\n    return total", "tests_source": "initial_tests.jsonl", "tests_task_id": "65", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:10:31.909292", "stage": "code_generation"}
{"task_id": "66", "round": 1, "temperature": 0.1, "generated_code": "def pos_count(lst):\n    if not all(isinstance(num, (int, float)) for num in lst):\n        raise TypeError(\"All elements in the list must be numeric\")\n    \n    pos_count = 0\n    for num in lst:\n        if num >= 0:\n            pos_count += 1\n    return pos_count", "tests_source": "initial_tests.jsonl", "tests_task_id": "66", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:10:38.841930", "stage": "code_generation"}
{"task_id": "67", "round": 1, "temperature": 0.1, "generated_code": "def bell_number(n):\n    if not isinstance(n, int) or n < 0:\n        raise TypeError(\"Input must be a non-negative integer\")\n    \n    bell = [[0 for i in range(n + 1)] for j in range(n + 1)]\n    bell[0][0] = 1\n    \n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    \n    return bell[n][0]", "tests_source": "initial_tests.jsonl", "tests_task_id": "67", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:10:47.781524", "stage": "code_generation"}
{"task_id": "68", "round": 1, "temperature": 0.1, "generated_code": "def is_Monotonic(A):\n    if A is None or not isinstance(A, list):\n        raise TypeError(\"Input must be a list\")\n    \n    if len(A) <= 1:\n        return True\n    \n    increasing = decreasing = True\n    \n    for i in range(1, len(A)):\n        if A[i] < A[i - 1]:\n            increasing = False\n        if A[i] > A[i - 1]:\n            decreasing = False\n    \n    return increasing or decreasing", "tests_source": "initial_tests.jsonl", "tests_task_id": "68", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:11:19.963644", "stage": "code_generation"}
{"task_id": "69", "round": 1, "temperature": 0.1, "generated_code": "def is_sublist(l, s):\n    if l is None or s is None:\n        raise TypeError(\"Input lists cannot be None\")\n    \n    if s == []:\n        return True\n    if len(s) > len(l):\n        return False\n    \n    for i in range(len(l) - len(s) + 1):\n        if l[i:i + len(s)] == s:\n            return True\n            \n    return False", "tests_source": "initial_tests.jsonl", "tests_task_id": "69", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:11:30.628281", "stage": "code_generation"}
{"task_id": "70", "round": 1, "temperature": 0.1, "generated_code": "def find_equal_tuple(Input, k):\n    if not isinstance(Input, list) or not isinstance(k, int):\n        raise TypeError(\"Invalid input types\")\n    \n    for tuple in Input:\n        if not isinstance(tuple, tuple) or len(tuple) != k:\n            return 0\n    return 1", "tests_source": "initial_tests.jsonl", "tests_task_id": "70", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:11:53.392021", "stage": "code_generation"}
{"task_id": "71", "round": 1, "temperature": 0.1, "generated_code": "def comb_sort(nums):\n    if not all(isinstance(x, (int, float)) for x in nums):\n        raise TypeError(\"All elements must be numeric\")\n    \n    shrink_fact = 1.3\n    gaps = len(nums)\n    swapped = True\n    i = 0\n    while gaps > 1 or swapped:\n        gaps = max(1, int(float(gaps) / shrink_fact))\n        swapped = False\n        i = 0\n        while gaps + i < len(nums):\n            if nums[i] > nums[i + gaps]:\n                nums[i], nums[i + gaps] = nums[i + gaps], nums[i]\n                swapped = True\n            i += 1\n    return nums", "tests_source": "initial_tests.jsonl", "tests_task_id": "71", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:12:18.089595", "stage": "code_generation"}
{"task_id": "72", "round": 1, "temperature": 0.1, "generated_code": "def dif_Square(n):\n    if not isinstance(n, int):\n        raise TypeError(\"Input should be an integer\")\n    return n % 4 != 2", "tests_source": "initial_tests.jsonl", "tests_task_id": "72", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:12:27.651190", "stage": "code_generation"}
{"task_id": "73", "round": 1, "temperature": 0.1, "generated_code": "import re\n\ndef multiple_split(text):\n    if not isinstance(text, str):\n        raise TypeError(\"expected string or bytes-like object\")\n    return re.split(r'; |, |\\*|\\n', text)", "tests_source": "initial_tests.jsonl", "tests_task_id": "73", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:12:36.466184", "stage": "code_generation"}
{"task_id": "74", "round": 1, "temperature": 0.1, "generated_code": "def is_samepatterns(colors, patterns):\n    if not isinstance(colors, list) or not isinstance(patterns, list):\n        raise TypeError(\"Both colors and patterns must be lists.\")\n    \n    if len(colors) != len(patterns):\n        return False\n    \n    sdict = {}\n    pset = set()\n    sset = set()\n    \n    for i in range(len(patterns)):\n        pset.add(patterns[i])\n        sset.add(colors[i])\n        if patterns[i] not in sdict:\n            sdict[patterns[i]] = []\n        sdict[patterns[i]].append(colors[i])\n\n    if len(pset) != len(sset):\n        return False\n\n    for values in sdict.values():\n        if len(set(values)) > 1:\n            return False\n\n    return True", "tests_source": "initial_tests.jsonl", "tests_task_id": "74", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:13:03.444354", "stage": "code_generation"}
{"task_id": "75", "round": 1, "temperature": 0.1, "generated_code": "def find_tuples(test_list, K):\n    if not isinstance(test_list, list) or not isinstance(K, (int, float)):\n        raise TypeError(\"Invalid input types\")\n    \n    res = [sub for sub in test_list if all(isinstance(ele, (int, float)) and ele % K == 0 for ele in sub)]\n    return str(res)", "tests_source": "initial_tests.jsonl", "tests_task_id": "75", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:13:42.596646", "stage": "code_generation"}
{"task_id": "76", "round": 1, "temperature": 0.1, "generated_code": "def count_Squares(m, n):\n    if not isinstance(m, int) or not isinstance(n, int):\n        raise TypeError(\"unsupported operand type\")\n    if m < 0 or n < 0:\n        return 0\n    if n < m:\n        temp = m\n        m = n\n        n = temp\n    return (m * (m + 1) * (2 * m + 1) // 6 + (n - m) * m * (m + 1) // 2)", "tests_source": "initial_tests.jsonl", "tests_task_id": "76", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:14:03.841912", "stage": "code_generation"}
{"task_id": "77", "round": 1, "temperature": 0.1, "generated_code": "def is_Diff(n):\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer\")\n    return n % 11 == 0", "tests_source": "initial_tests.jsonl", "tests_task_id": "77", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:14:32.752173", "stage": "code_generation"}
{"task_id": "78", "round": 1, "temperature": 0.1, "generated_code": "def count_With_Odd_SetBits(n):\n    if not isinstance(n, int):\n        raise TypeError(\"unsupported operand type\")\n    \n    if n < 0:\n        return 0\n    \n    count = 0\n    for i in range(n + 1):\n        if bin(i).count('1') % 2 != 0:\n            count += 1\n            \n    return count", "tests_source": "initial_tests.jsonl", "tests_task_id": "78", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:15:08.570162", "stage": "code_generation"}
{"task_id": "79", "round": 1, "temperature": 0.1, "generated_code": "def word_len(s): \n    if not isinstance(s, str):\n        raise AttributeError(\"Input must be a string\")\n    \n    s = s.split(' ')   \n    for word in s:    \n        if len(word) % 2 != 0: \n            return True  \n    return False", "tests_source": "initial_tests.jsonl", "tests_task_id": "79", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:15:31.857466", "stage": "code_generation"}
{"task_id": "80", "round": 1, "temperature": 0.1, "generated_code": "def tetrahedral_number(n):\n    if not isinstance(n, int):\n        raise TypeError(\"unsupported operand type\")\n    if n < 0:\n        raise ValueError(\"negative number\")\n    return (n * (n + 1) * (n + 2)) // 6", "tests_source": "initial_tests.jsonl", "tests_task_id": "80", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:15:42.945534", "stage": "code_generation"}
{"task_id": "81", "round": 1, "temperature": 0.1, "generated_code": "def zip_tuples(test_tup1, test_tup2):\n    if not isinstance(test_tup1, tuple) or not isinstance(test_tup2, tuple):\n        raise TypeError(\"Both inputs must be tuples\")\n    \n    len1, len2 = len(test_tup1), len(test_tup2)\n    \n    if len1 == 0 and len2 == 0:\n        return []\n    \n    if len1 == 0:\n        return [(None, test_tup2[i]) for i in range(len2)]\n    \n    if len2 == 0:\n        return [(test_tup1[i], None) for i in range(len1)]\n    \n    res = []\n    for i in range(len1):\n        res.append((test_tup1[i], test_tup2[i % len2]))\n    \n    return res", "tests_source": "initial_tests.jsonl", "tests_task_id": "81", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:15:52.281405", "stage": "code_generation"}
{"task_id": "82", "round": 1, "temperature": 0.1, "generated_code": "import math\n\ndef volume_sphere(r):\n    if not isinstance(r, (int, float)):\n        raise TypeError(\"must be a number\")\n    if r < 0:\n        raise ValueError(\"Radius cannot be negative\")\n    return (4/3) * math.pi * r**3", "tests_source": "initial_tests.jsonl", "tests_task_id": "82", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:16:21.798532", "stage": "code_generation"}
{"task_id": "83", "round": 1, "temperature": 0.1, "generated_code": "def get_Char(strr):\n    if not isinstance(strr, str):\n        raise TypeError(\"string expected\")\n    \n    if len(strr) == 0:\n        return 'a'\n    \n    summ = 0\n    for char in strr:\n        if 'a' <= char <= 'z':\n            summ += (ord(char) - ord('a') + 1)\n        else:\n            raise ValueError(\"Invalid character in string\")\n    \n    summ = summ % 26\n    if summ == 0:\n        return 'z'\n    else:\n        return chr(ord('a') + summ - 1)", "tests_source": "initial_tests.jsonl", "tests_task_id": "83", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:16:28.762042", "stage": "code_generation"}
{"task_id": "84", "round": 1, "temperature": 0.1, "generated_code": "def sequence(n):\n    if not isinstance(n, int) or n <= 0:\n        raise TypeError(\"Input must be a positive integer\")\n    \n    if n == 1 or n == 2:\n        return 1\n    \n    # Create a list to store the sequence values\n    seq = [0] * (n + 1)\n    seq[1] = 1\n    seq[2] = 1\n    \n    for i in range(3, n + 1):\n        seq[i] = seq[seq[i - 1]] + seq[i - seq[i - 1]]\n    \n    return seq[n]", "tests_source": "initial_tests.jsonl", "tests_task_id": "84", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:17:08.629617", "stage": "code_generation"}
{"task_id": "85", "round": 1, "temperature": 0.1, "generated_code": "import math\n\ndef surfacearea_sphere(r):\n    if r < 0:\n        raise ValueError(\"Radius cannot be negative\")\n    return 4 * math.pi * r * r", "tests_source": "initial_tests.jsonl", "tests_task_id": "85", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:17:31.482038", "stage": "code_generation"}
{"task_id": "86", "round": 1, "temperature": 0.1, "generated_code": "def centered_hexagonal_number(n):\n    if not isinstance(n, int):\n        raise TypeError(\"unsupported operand type\")\n    if n < 0:\n        raise ValueError(\"n must be a positive integer\")\n    return 3 * n * (n - 1) + 1 if n > 0 else 1", "tests_source": "initial_tests.jsonl", "tests_task_id": "86", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:17:39.586812", "stage": "code_generation"}
{"task_id": "87", "round": 1, "temperature": 0.1, "generated_code": "def merge_dictionaries_three(dict1, dict2, dict3):\n    if not all(isinstance(d, dict) for d in (dict1, dict2, dict3)):\n        raise TypeError(\"expected a dictionary\")\n    return {**dict1, **dict2, **dict3}", "tests_source": "initial_tests.jsonl", "tests_task_id": "87", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:18:10.753348", "stage": "code_generation"}
{"task_id": "88", "round": 1, "temperature": 0.1, "generated_code": "import collections\n\ndef freq_count(list1):\n    if any(isinstance(i, list) for i in list1):\n        raise TypeError(\"unhashable type: 'list'\")\n    return collections.Counter(list1)", "tests_source": "initial_tests.jsonl", "tests_task_id": "88", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:18:17.834059", "stage": "code_generation"}
{"task_id": "89", "round": 1, "temperature": 0.1, "generated_code": "def closest_num(N):\n    if not isinstance(N, (int, float)):\n        raise TypeError(\"unsupported operand type\")\n    return N - 1", "tests_source": "initial_tests.jsonl", "tests_task_id": "89", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:18:22.024470", "stage": "code_generation"}
{"task_id": "90", "round": 1, "temperature": 0.1, "generated_code": "def len_log(list1):\n    if not list1:\n        raise IndexError(\"list index out of range\")\n    \n    max_length = 0\n    for word in list1:\n        if not isinstance(word, str):\n            raise TypeError(f\"object of type '{type(word).__name__}' has no len()\")\n        max_length = max(max_length, len(word))\n    \n    return max_length", "tests_source": "initial_tests.jsonl", "tests_task_id": "90", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:18:29.843417", "stage": "code_generation"}
{"task_id": "91", "round": 1, "temperature": 0.1, "generated_code": "def find_substring(str1, sub_str):\n    if not isinstance(str1, list) or not all(isinstance(s, str) for s in str1):\n        raise TypeError(\"expected str or list\")\n    if not isinstance(sub_str, str):\n        raise TypeError(\"expected str or list\")\n    \n    return any(sub_str in s for s in str1)", "tests_source": "initial_tests.jsonl", "tests_task_id": "91", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:18:37.344500", "stage": "code_generation"}
{"task_id": "92", "round": 1, "temperature": 0.1, "generated_code": "def is_undulating(n):\n    if not isinstance(n, list):\n        raise TypeError(\"Input must be a list\")\n    if len(n) < 3:\n        return False\n    for i in range(2, len(n)):\n        if n[i - 2] != n[i]:\n            return False\n    return True", "tests_source": "initial_tests.jsonl", "tests_task_id": "92", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:18:45.342003", "stage": "code_generation"}
{"task_id": "93", "round": 1, "temperature": 0.1, "generated_code": "def power(a, b):\n    if not isinstance(a, (int, float)) or not isinstance(b, (int, float)):\n        raise TypeError(\"unsupported operand type\")\n    \n    if b == 0:\n        return 1\n    elif a == 0:\n        return 0\n    elif b == 1:\n        return a\n    elif b < 0:\n        return 1 / power(a, -b)\n    else:\n        return a * power(a, b - 1)", "tests_source": "initial_tests.jsonl", "tests_task_id": "93", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:19:18.463993", "stage": "code_generation"}
{"task_id": "94", "round": 1, "temperature": 0.1, "generated_code": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    if not test_list:\n        return None\n    return min(test_list, key=itemgetter(1))[0]", "tests_source": "initial_tests.jsonl", "tests_task_id": "94", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:19:46.117511", "stage": "code_generation"}
{"task_id": "95", "round": 1, "temperature": 0.1, "generated_code": "def Find_Min_Length(lst):\n    if not lst:\n        raise ValueError(\"min() arg is an empty sequence\")\n    \n    minLength = float('inf')\n    \n    for sublist in lst:\n        if not isinstance(sublist, list):\n            raise TypeError(\"object of type 'int' has no len()\")\n        minLength = min(minLength, len(sublist))\n    \n    return minLength", "tests_source": "initial_tests.jsonl", "tests_task_id": "95", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:20:16.786091", "stage": "code_generation"}
{"task_id": "96", "round": 1, "temperature": 0.1, "generated_code": "def divisor(n):\n    if not isinstance(n, int):\n        raise TypeError(\"unsupported operand type\")\n    if n < 1:\n        return 0\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count", "tests_source": "initial_tests.jsonl", "tests_task_id": "96", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:20:51.778869", "stage": "code_generation"}
{"task_id": "97", "round": 1, "temperature": 0.1, "generated_code": "def frequency_lists(list1):\n    if not isinstance(list1, list) or any(not isinstance(sublist, list) for sublist in list1):\n        raise TypeError(\"expected list of lists\")\n    \n    list1 = [item for sublist in list1 for item in sublist]\n    dic_data = {}\n    for num in list1:\n        dic_data[num] = dic_data.get(num, 0) + 1\n    return dic_data", "tests_source": "initial_tests.jsonl", "tests_task_id": "97", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:20:58.754316", "stage": "code_generation"}
{"task_id": "98", "round": 1, "temperature": 0.1, "generated_code": "def multiply_num(numbers):\n    if not numbers:\n        raise ZeroDivisionError(\"division by zero\")\n    \n    total = 1\n    for x in numbers:\n        if not isinstance(x, (int, float)):\n            raise TypeError(\"unsupported operand type\")\n        total *= x\n    \n    return total / len(numbers)", "tests_source": "initial_tests.jsonl", "tests_task_id": "98", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:21:07.955206", "stage": "code_generation"}
{"task_id": "99", "round": 1, "temperature": 0.1, "generated_code": "def decimal_to_binary(n):\n    if not isinstance(n, int):\n        raise TypeError(\"Invalid input type\")\n    if n < 0:\n        raise ValueError(\"Negative values are not supported\")\n    return bin(n).replace(\"0b\", \"\")", "tests_source": "initial_tests.jsonl", "tests_task_id": "99", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:21:47.892448", "stage": "code_generation"}
{"task_id": "100", "round": 1, "temperature": 0.1, "generated_code": "def next_smallest_palindrome(num):\n    if not isinstance(num, int):\n        raise TypeError(\"unsupported operand type\")\n    if num < 0:\n        raise ValueError(\"negative numbers are not supported\")\n    \n    num += 1  # Start searching from the next number\n    while True:\n        if str(num) == str(num)[::-1]:\n            return num\n        num += 1", "tests_source": "initial_tests.jsonl", "tests_task_id": "100", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:21:54.282708", "stage": "code_generation"}
{"task_id": "101", "round": 1, "temperature": 0.1, "generated_code": "def kth_element(arr, n, k):\n    if arr is None or k < 1 or k > n:\n        raise IndexError(\"list index out of range\")\n    \n    arr = sorted(arr)\n    return arr[k-1]", "tests_source": "initial_tests.jsonl", "tests_task_id": "101", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:22:17.675512", "stage": "code_generation"}
{"task_id": "102", "round": 1, "temperature": 0.1, "generated_code": "def snake_to_camel(word):\n    if not isinstance(word, str):\n        raise TypeError(\"expected string or bytes-like object\")\n    parts = word.split('_')\n    return ''.join(x.capitalize() for x in parts if x)", "tests_source": "initial_tests.jsonl", "tests_task_id": "102", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:22:43.677819", "stage": "code_generation"}
{"task_id": "103", "round": 1, "temperature": 0.1, "generated_code": "def eulerian_num(n, m):\n    if not isinstance(n, int) or not isinstance(m, int):\n        raise TypeError(\"Both n and m must be integers.\")\n    if n < 0 or m < 0:\n        raise ValueError(\"Both n and m must be non-negative.\")\n    if m >= n or n == 0:\n        return 0\n    if m == 0:\n        return 1\n    return ((n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m))", "tests_source": "initial_tests.jsonl", "tests_task_id": "103", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:23:13.525793", "stage": "code_generation"}
{"task_id": "104", "round": 1, "temperature": 0.1, "generated_code": "def sort_sublists(input_list):\n    if not all(isinstance(sublist, list) for sublist in input_list):\n        raise TypeError(\"string indices must be integers\")\n    \n    result = []\n    for sublist in input_list:\n        if not isinstance(sublist, list):\n            raise TypeError(\"unhashable type: 'list'\")\n        result.append(sorted(sublist))\n    \n    return result", "tests_source": "initial_tests.jsonl", "tests_task_id": "104", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:23:44.216276", "stage": "code_generation"}
{"task_id": "105", "round": 1, "temperature": 0.1, "generated_code": "def count(lst):\n    if any(not isinstance(x, bool) for x in lst):\n        raise TypeError(\"unsupported operand type\")\n    return sum(lst)", "tests_source": "initial_tests.jsonl", "tests_task_id": "105", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:24:05.232823", "stage": "code_generation"}
{"task_id": "106", "round": 1, "temperature": 0.1, "generated_code": "def add_lists(test_list, test_tup):\n    if not isinstance(test_list, list):\n        raise TypeError(\"can only concatenate tuple (not 'list') to tuple\")\n    return tuple(list(test_tup) + test_list)", "tests_source": "initial_tests.jsonl", "tests_task_id": "106", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:24:35.038188", "stage": "code_generation"}
{"task_id": "107", "round": 1, "temperature": 0.1, "generated_code": "def count_Hexadecimal(L, R):\n    if not isinstance(L, int) or not isinstance(R, int):\n        raise TypeError(\"Both L and R must be integers.\")\n    if L < 0 or R < 0:\n        raise ValueError(\"Both L and R must be non-negative.\")\n    if L > R:\n        return 0\n\n    count = 0\n    for i in range(L, R + 1):\n        if 10 <= i <= 15:\n            count += 1\n        elif i > 15:\n            k = i\n            while k != 0:\n                if k % 16 >= 10:\n                    count += 1\n                k = k // 16\n    return count", "tests_source": "initial_tests.jsonl", "tests_task_id": "107", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:25:07.221318", "stage": "code_generation"}
{"task_id": "108", "round": 1, "temperature": 0.1, "generated_code": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    if not all(isinstance(lst, list) for lst in [num1, num2, num3]):\n        raise TypeError(\"expected an iterable\")\n    \n    result = heapq.merge(sorted(num1), sorted(num2), sorted(num3))\n    return list(result)", "tests_source": "initial_tests.jsonl", "tests_task_id": "108", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:25:47.557571", "stage": "code_generation"}
{"task_id": "109", "round": 1, "temperature": 0.1, "generated_code": "def odd_Equivalent(s, n):\n    if not isinstance(s, str) or not isinstance(n, int):\n        raise TypeError(\"string index out of range\")\n    if n < 0 or n != len(s):\n        raise TypeError(\"string index out of range\")\n    \n    count = 0\n    for i in range(n):\n        if s[i] == '1':\n            count += 1\n    return count", "tests_source": "initial_tests.jsonl", "tests_task_id": "109", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:25:55.330005", "stage": "code_generation"}
{"task_id": "110", "round": 1, "temperature": 0.1, "generated_code": "def extract_missing(test_list, strt_val, stop_val):\n    if test_list is None or strt_val is None or stop_val is None:\n        raise TypeError(\"unsupported operand type\")\n    \n    res = []\n    current_start = strt_val\n\n    for sub in sorted(test_list):\n        if sub[0] > current_start:\n            res.append((current_start, sub[0]))\n        current_start = max(current_start, sub[1])\n\n    if current_start < stop_val:\n        res.append((current_start, stop_val))\n\n    return res", "tests_source": "initial_tests.jsonl", "tests_task_id": "110", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:26:04.827297", "stage": "code_generation"}
{"task_id": "111", "round": 1, "temperature": 0.1, "generated_code": "def common_in_nested_lists(nestedlist):\n    if not isinstance(nestedlist, list) or any(not isinstance(lst, list) for lst in nestedlist):\n        raise TypeError(\"expected an iterable of lists\")\n    \n    if not nestedlist:\n        return []\n    \n    result = list(set.intersection(*map(set, nestedlist)))\n    return result", "tests_source": "initial_tests.jsonl", "tests_task_id": "111", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:26:23.875308", "stage": "code_generation"}
{"task_id": "112", "round": 1, "temperature": 0.1, "generated_code": "def perimeter(diameter, height):\n    if not isinstance(diameter, (int, float)) or not isinstance(height, (int, float)):\n        raise TypeError(\"unsupported operand type\")\n    return 2 * (diameter + height)", "tests_source": "initial_tests.jsonl", "tests_task_id": "112", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:26:34.668819", "stage": "code_generation"}
{"task_id": "113", "round": 1, "temperature": 0.1, "generated_code": "def check_integer(text):\n    if text is None or len(text.strip()) == 0:\n        return None\n    \n    text = text.strip()\n    \n    if len(text) < 1:\n        return None\n    elif all(text[i] in \"0123456789\" for i in range(len(text))):\n        return True\n    elif (text[0] in \"+-\") and \\\n         all(text[i] in \"0123456789\" for i in range(1, len(text))):\n        return True\n    else:\n        return False", "tests_source": "initial_tests.jsonl", "tests_task_id": "113", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:26:44.288907", "stage": "code_generation"}
{"task_id": "114", "round": 1, "temperature": 0.1, "generated_code": "from collections import Counter \n\ndef assign_freq(test_list):\n    if test_list is None or not isinstance(test_list, list) or not all(isinstance(i, tuple) for i in test_list):\n        raise TypeError(\"Input must be a list of tuples\")\n    \n    res = [(*key, val) for key, val in Counter(test_list).items()]\n    return str(res)", "tests_source": "initial_tests.jsonl", "tests_task_id": "114", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:26:54.826720", "stage": "code_generation"}
{"task_id": "115", "round": 1, "temperature": 0.1, "generated_code": "def empty_dit(list1):\n    if not isinstance(list1, list):\n        raise TypeError(\"expected list\")\n    if any(not isinstance(d, dict) for d in list1):\n        raise TypeError(\"expected dictionary\")\n    return all(not d for d in list1)", "tests_source": "initial_tests.jsonl", "tests_task_id": "115", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:27:16.002949", "stage": "code_generation"}
{"task_id": "116", "round": 1, "temperature": 0.1, "generated_code": "def tuple_to_int(nums):\n    if not all(isinstance(x, int) for x in nums):\n        raise TypeError(\"tuple indices must be integers or slices, not str\")\n    return int(''.join(map(str, nums)))", "tests_source": "initial_tests.jsonl", "tests_task_id": "116", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:27:26.093967", "stage": "code_generation"}
{"task_id": "117", "round": 1, "temperature": 0.1, "generated_code": "def list_to_float(test_list):\n    res = []\n    for tup in test_list:\n        temp = []\n        for ele in tup:\n            if ele is None or (isinstance(ele, str) and not ele.replace('.', '', 1).isdigit()):\n                raise ValueError(\"Invalid input: {}\".format(ele))\n            temp.append(float(ele))\n        res.append(tuple(temp))\n    return str(res)", "tests_source": "initial_tests.jsonl", "tests_task_id": "117", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:27:35.858662", "stage": "code_generation"}
{"task_id": "118", "round": 1, "temperature": 0.1, "generated_code": "def string_to_list(string):\n    if not isinstance(string, str):\n        raise TypeError(\"expected a string\")\n    return list(filter(None, string.split(\" \")))", "tests_source": "initial_tests.jsonl", "tests_task_id": "118", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:27:57.926247", "stage": "code_generation"}
{"task_id": "119", "round": 1, "temperature": 0.1, "generated_code": "def search(arr, n):\n    if arr is None:\n        raise TypeError(\"unsupported operand type\")\n    if not all(isinstance(x, int) for x in arr):\n        raise TypeError(\"unsupported operand type\")\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n    \n    for i in range(0, n, 2):\n        if i == n - 1 or arr[i] != arr[i + 1]:\n            return arr[i]", "tests_source": "initial_tests.jsonl", "tests_task_id": "119", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:28:38.550628", "stage": "code_generation"}
{"task_id": "120", "round": 1, "temperature": 0.1, "generated_code": "def max_product_tuple(list1):\n    if list1 is None or not isinstance(list1, (list, tuple)):\n        raise TypeError(\"object is not iterable\")\n    \n    result_max = float('-inf')\n    \n    for item in list1:\n        if not isinstance(item, tuple) or len(item) != 2:\n            raise ValueError(\"not enough values to unpack\")\n        \n        x, y = item\n        \n        if not isinstance(x, (int, float)) or not isinstance(y, (int, float)):\n            raise TypeError(\"unsupported operand type\")\n        \n        product = x * y\n        if product > result_max:\n            result_max = product\n            \n    return result_max if result_max != float('-inf') else 0", "tests_source": "initial_tests.jsonl", "tests_task_id": "120", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:29:17.355628", "stage": "code_generation"}
{"task_id": "121", "round": 1, "temperature": 0.1, "generated_code": "def check_triplet(A, n, sum, count):\n    if A is None or not isinstance(A, list) or not all(isinstance(x, (int, float)) for x in A):\n        raise TypeError(\"Invalid input: A must be a list of numbers.\")\n    if not isinstance(n, int) or not isinstance(sum, (int, float)) or not isinstance(count, int):\n        raise TypeError(\"Invalid input: n, sum, and count must be integers or floats.\")\n    \n    if count == 3 and sum == 0:\n        return True\n    if count == 3 or n == 0 or sum < 0:\n        return False\n    return check_triplet(A, n - 1, sum - A[n - 1], count + 1) or\\\n           check_triplet(A, n - 1, sum, count)", "tests_source": "initial_tests.jsonl", "tests_task_id": "121", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:29:59.359549", "stage": "code_generation"}
{"task_id": "122", "round": 1, "temperature": 0.1, "generated_code": "MAX = 3000 \ndef smartNumber(n): \n    if not isinstance(n, int) or n <= 0:\n        raise IndexError(\"list index out of range\")\n    if n > 3000:\n        raise IndexError(\"list index out of range\")\n    \n    primes = [0] * MAX \n    result = [] \n    for i in range(2, MAX): \n        if (primes[i] == 0): \n            primes[i] = 1 \n            j = i * 2 \n            while (j < MAX): \n                primes[j] -= 1 \n                if ( (primes[j] + 3) == 0): \n                    result.append(j) \n                j = j + i \n    result.sort() \n    return result[n - 1]", "tests_source": "initial_tests.jsonl", "tests_task_id": "122", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:30:37.017832", "stage": "code_generation"}
{"task_id": "123", "round": 1, "temperature": 0.1, "generated_code": "def amicable_numbers_sum(limit):\n    if not isinstance(limit, int):\n        raise TypeError(\"Input is not an integer!\")\n    if limit < 1:\n        raise ValueError(\"Input must be bigger than 0!\")\n    \n    amicables = set()\n    \n    def sum_of_divisors(n):\n        return sum(fact for fact in range(1, n) if n % fact == 0)\n    \n    for num in range(2, limit + 1):\n        if num in amicables:\n            continue\n        sum_fact = sum_of_divisors(num)\n        sum_fact2 = sum_of_divisors(sum_fact)\n        if num == sum_fact2 and num != sum_fact:\n            amicables.add(num)\n            amicables.add(sum_fact)\n    \n    return sum(amicables)", "tests_source": "initial_tests.jsonl", "tests_task_id": "123", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:31:21.617461", "stage": "code_generation"}
{"task_id": "124", "round": 1, "temperature": 0.1, "generated_code": "import cmath\n\ndef angle_complex(a, b):\n    if not isinstance(a, (int, float)) or not isinstance(b, (int, float)):\n        raise TypeError(\"can't convert complex to float\")\n    cn = complex(a, b)\n    angle = cmath.phase(cn)\n    return angle", "tests_source": "initial_tests.jsonl", "tests_task_id": "124", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:31:41.663259", "stage": "code_generation"}
{"task_id": "125", "round": 1, "temperature": 0.1, "generated_code": "def find_length(string, n): \n    if not isinstance(string, str):\n        raise TypeError(\"string must be a binary string\")\n    if any(c not in '01' for c in string):\n        raise ValueError(\"string must be a binary string\")\n    \n    current_sum = 0\n    max_sum = 0\n    for i in range(n): \n        current_sum += (1 if string[i] == '0' else -1) \n        if current_sum < 0: \n            current_sum = 0\n        max_sum = max(current_sum, max_sum) \n    return max_sum if max_sum else 0", "tests_source": "initial_tests.jsonl", "tests_task_id": "125", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:31:57.031735", "stage": "code_generation"}
{"task_id": "126", "round": 1, "temperature": 0.1, "generated_code": "def sum(a, b):\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise TypeError(\"unsupported operand type\")\n    \n    if a == 0 or b == 0:\n        return 0\n    \n    common_sum = 0\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            common_sum += i\n    return common_sum", "tests_source": "initial_tests.jsonl", "tests_task_id": "126", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:32:31.228730", "stage": "code_generation"}
{"task_id": "127", "round": 1, "temperature": 0.1, "generated_code": "def multiply_int(x, y):\n    if not isinstance(x, int) or not isinstance(y, int):\n        raise TypeError(\"unsupported operand type\")\n    \n    if y < 0:\n        return -multiply_int(x, -y)\n    elif y == 0:\n        return 0\n    elif y == 1:\n        return x\n    else:\n        return x + multiply_int(x, y - 1)", "tests_source": "initial_tests.jsonl", "tests_task_id": "127", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:33:19.770711", "stage": "code_generation"}
{"task_id": "128", "round": 1, "temperature": 0.1, "generated_code": "def long_words(n, str):\n    if not isinstance(n, int):\n        raise TypeError(\"must be an integer\")\n    if not isinstance(str, str):\n        raise TypeError(\"must be a string\")\n    \n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n        if len(x) > n:\n            word_len.append(x)\n    return word_len", "tests_source": "initial_tests.jsonl", "tests_task_id": "128", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:34:02.394549", "stage": "code_generation"}
{"task_id": "129", "round": 1, "temperature": 0.1, "generated_code": "def magic_square_test(my_matrix):\n    if not my_matrix or len(my_matrix) != len(my_matrix[0]):\n        return False\n    \n    iSize = len(my_matrix)\n    magic_sum = sum(my_matrix[0])\n    \n    # Check rows\n    for row in my_matrix:\n        if sum(row) != magic_sum:\n            return False\n    \n    # Check columns\n    for col in range(iSize):\n        if sum(my_matrix[row][col] for row in range(iSize)) != magic_sum:\n            return False\n    \n    # Check diagonals\n    if sum(my_matrix[i][i] for i in range(iSize)) != magic_sum:\n        return False\n    if sum(my_matrix[i][iSize - 1 - i] for i in range(iSize)) != magic_sum:\n        return False\n    \n    return True", "tests_source": "initial_tests.jsonl", "tests_task_id": "129", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:34:19.303467", "stage": "code_generation"}
{"task_id": "130", "round": 1, "temperature": 0.1, "generated_code": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    if nums is None or not hasattr(nums, '__iter__'):\n        raise TypeError(\"Input must be an iterable\")\n    \n    dict = defaultdict(int)\n    for i in nums:\n        dict[i] += 1\n    \n    if not dict:\n        raise ValueError(\"max() arg is an empty sequence\")\n    \n    result = max(dict.items(), key=lambda x: x[1]) \n    return result", "tests_source": "initial_tests.jsonl", "tests_task_id": "130", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:34:27.688934", "stage": "code_generation"}
{"task_id": "131", "round": 1, "temperature": 0.1, "generated_code": "def reverse_vowels(str1):\n    if not isinstance(str1, str):\n        raise TypeError(\"expected a string\")\n    \n    vowels = [char for char in str1 if char in \"aeiouAEIOU\"]\n    result_string = \"\"\n    vowel_index = len(vowels) - 1\n    \n    for char in str1:\n        if char in \"aeiouAEIOU\":\n            result_string += vowels[vowel_index]\n            vowel_index -= 1\n        else:\n            result_string += char\n            \n    return result_string", "tests_source": "initial_tests.jsonl", "tests_task_id": "131", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:34:44.650676", "stage": "code_generation"}
{"task_id": "132", "round": 1, "temperature": 0.1, "generated_code": "def tup_string(tup1):\n    if not all(isinstance(i, str) for i in tup1):\n        raise TypeError(\"sequence item 0: expected str instance, {} found\".format(type(tup1[0]).__name__))\n    return ''.join(tup1)", "tests_source": "initial_tests.jsonl", "tests_task_id": "132", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:34:51.134903", "stage": "code_generation"}
{"task_id": "133", "round": 1, "temperature": 0.1, "generated_code": "def sum_negativenum(nums):\n    if not all(isinstance(x, (int, float)) for x in nums):\n        raise TypeError(\"unsupported operand type\")\n    return sum(filter(lambda x: x < 0, nums))", "tests_source": "initial_tests.jsonl", "tests_task_id": "133", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:34:57.701753", "stage": "code_generation"}
{"task_id": "134", "round": 1, "temperature": 0.1, "generated_code": "def check_last(arr, n, p):\n    if arr is None or not isinstance(p, int):\n        raise TypeError(\"Invalid input\")\n    \n    if n == 0:\n        return \"EVEN\"\n    \n    _sum = sum(arr)\n    \n    if p == 1:\n        return \"ODD\" if _sum % 2 == 0 else \"EVEN\"\n    \n    return \"EVEN\"", "tests_source": "initial_tests.jsonl", "tests_task_id": "134", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:35:05.604213", "stage": "code_generation"}
{"task_id": "135", "round": 1, "temperature": 0.1, "generated_code": "def hexagonal_num(n):\n    if not isinstance(n, int):\n        raise TypeError(\"unsupported operand type\")\n    if n < 0:\n        raise ValueError(\"negative integer\")\n    return n * (2 * n - 1)", "tests_source": "initial_tests.jsonl", "tests_task_id": "135", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:35:28.855281", "stage": "code_generation"}
{"task_id": "136", "round": 1, "temperature": 0.1, "generated_code": "def cal_electbill(units):\n    if not isinstance(units, (int, float)):\n        raise TypeError(\"unsupported operand type\")\n    if units < 0:\n        raise ValueError(\"negative units not allowed\")\n    \n    if units < 50:\n        amount = units * 2.60\n        surcharge = 25\n    elif units <= 100:\n        amount = 130 + ((units - 50) * 3.25)\n        surcharge = 35\n    elif units <= 200:\n        amount = 130 + 162.50 + ((units - 100) * 5.26)\n        surcharge = 45\n    else:\n        amount = 130 + 162.50 + 526 + ((units - 200) * 8.45)\n        surcharge = 75\n    \n    total = amount + surcharge\n    return total", "tests_source": "initial_tests.jsonl", "tests_task_id": "136", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:36:19.217890", "stage": "code_generation"}
{"task_id": "137", "round": 1, "temperature": 0.1, "generated_code": "def zero_count(nums):\n    if not isinstance(nums, list):\n        raise TypeError(\"unsupported operand type\")\n    n = len(nums)\n    if n == 0:\n        return 0.0\n    n1 = 0\n    for x in nums:\n        if not isinstance(x, int):\n            raise TypeError(\"unsupported operand type\")\n        if x == 0:\n            n1 += 1\n    return round(n1 / n, 2)", "tests_source": "initial_tests.jsonl", "tests_task_id": "137", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:36:41.839093", "stage": "code_generation"}
{"task_id": "138", "round": 1, "temperature": 0.1, "generated_code": "def is_Sum_Of_Powers_Of_Two(n):\n    if not isinstance(n, int):\n        raise TypeError(\"unsupported operand type\")\n    if n < 0:\n        return False\n    return (n & (n - 1)) == 0 or n == 0", "tests_source": "initial_tests.jsonl", "tests_task_id": "138", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:36:54.056014", "stage": "code_generation"}
{"task_id": "139", "round": 1, "temperature": 0.1, "generated_code": "def circle_circumference(r):\n    if not isinstance(r, (int, float)):\n        raise TypeError(\"must be a number\")\n    if r < 0:\n        raise ValueError(\"must be a non-negative number\")\n    return 2 * 3.1415 * r", "tests_source": "initial_tests.jsonl", "tests_task_id": "139", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:37:13.561300", "stage": "code_generation"}
{"task_id": "140", "round": 1, "temperature": 0.1, "generated_code": "def extract_singly(test_list):\n    if test_list is None:\n        raise TypeError(\"Input cannot be None\")\n    \n    res = []\n    temp = {}\n    \n    for inner in test_list:\n        if not isinstance(inner, tuple):\n            raise TypeError(\"All inner elements must be tuples\")\n        for ele in inner:\n            if not isinstance(ele, (int, float, str)):\n                raise TypeError(\"Elements must be of type int, float, or str\")\n            if ele in temp:\n                temp[ele] += 1\n            else:\n                temp[ele] = 1\n    \n    for ele, count in temp.items():\n        if count == 1:\n            res.append(ele)\n    \n    return res", "tests_source": "initial_tests.jsonl", "tests_task_id": "140", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:37:30.591438", "stage": "code_generation"}
{"task_id": "141", "round": 1, "temperature": 0.1, "generated_code": "def pancake_sort(nums):\n    if not isinstance(nums, list):\n        raise TypeError(\"must be a list\")\n    \n    arr_len = len(nums)\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        if mi != 0:\n            nums = nums[mi::-1] + nums[mi+1:arr_len]\n        if arr_len != 1:\n            nums = nums[arr_len-1::-1] + nums[arr_len:]\n        arr_len -= 1\n    return nums", "tests_source": "initial_tests.jsonl", "tests_task_id": "141", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:37:50.959202", "stage": "code_generation"}
{"task_id": "142", "round": 1, "temperature": 0.1, "generated_code": "def count_samepair(list1, list2, list3):\n    if not all(isinstance(x, type(list1[0])) for x in list1) or not all(isinstance(x, type(list2[0])) for x in list2) or not all(isinstance(x, type(list3[0])) for x in list3):\n        raise TypeError(\"All elements in the lists must be of the same type\")\n    \n    result = sum(m == n == o for m, n, o in zip(list1, list2, list3))\n    return result", "tests_source": "initial_tests.jsonl", "tests_task_id": "142", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:38:08.001350", "stage": "code_generation"}
{"task_id": "143", "round": 1, "temperature": 0.1, "generated_code": "def find_lists(Input):\n    if not isinstance(Input, (tuple, list)):\n        raise TypeError(\"Input must be a tuple or a list\")\n    \n    if isinstance(Input, list):\n        return 1\n    \n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count", "tests_source": "initial_tests.jsonl", "tests_task_id": "143", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:38:15.757432", "stage": "code_generation"}
{"task_id": "144", "round": 1, "temperature": 0.1, "generated_code": "def sum_Pairs(arr, n):\n    if arr is None or not isinstance(arr, list):\n        raise TypeError(\"unsupported operand type\")\n    if any(not isinstance(x, (int, float)) for x in arr):\n        raise TypeError(\"unsupported operand type\")\n    if len(arr) < n:\n        raise ValueError(\"not enough values to unpack\")\n    \n    sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            sum += abs(arr[i] - arr[j])\n    return sum", "tests_source": "initial_tests.jsonl", "tests_task_id": "144", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:38:23.575803", "stage": "code_generation"}
{"task_id": "145", "round": 1, "temperature": 0.1, "generated_code": "def max_Abs_Diff(arr, n):\n    if n == 0:\n        raise IndexError(\"list index out of range\")\n    if not isinstance(arr, list):\n        raise TypeError(\"object of type 'int' has no len()\")\n    \n    minEle = arr[0]\n    maxEle = arr[0]\n    \n    for i in range(1, n):\n        if not isinstance(arr[i], (int, float)):\n            raise TypeError(\"object of type 'str' has no len()\")\n        minEle = min(minEle, arr[i])\n        maxEle = max(maxEle, arr[i])\n    \n    return maxEle - minEle", "tests_source": "initial_tests.jsonl", "tests_task_id": "145", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:38:54.591232", "stage": "code_generation"}
{"task_id": "146", "round": 1, "temperature": 0.1, "generated_code": "def ascii_value_string(str1):\n    if not isinstance(str1, str):\n        raise TypeError(\"expected a string\")\n    if len(str1) == 0:\n        return 0\n    total_ascii = sum(ord(char) for char in str1)\n    return total_ascii", "tests_source": "initial_tests.jsonl", "tests_task_id": "146", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:39:32.091858", "stage": "code_generation"}
{"task_id": "147", "round": 1, "temperature": 0.1, "generated_code": "def max_path_sum(tri, m, n):\n    if tri is None or len(tri) == 0:\n        raise IndexError(\"Triangle is empty\")\n    if m != len(tri) or any(len(row) != i + 1 for i, row in enumerate(tri)):\n        raise IndexError(\"Invalid dimensions for the triangle\")\n    \n    for i in range(m - 1, -1, -1):\n        for j in range(i + 1):\n            if j < len(tri[i + 1]):\n                tri[i][j] += tri[i + 1][j]\n            if j + 1 < len(tri[i + 1]):\n                tri[i][j] = max(tri[i][j], tri[i][j] + tri[i + 1][j + 1])\n    \n    return tri[0][0]", "tests_source": "initial_tests.jsonl", "tests_task_id": "147", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:39:50.908562", "stage": "code_generation"}
{"task_id": "148", "round": 1, "temperature": 0.1, "generated_code": "def sum_digits_single(x):\n    ans = 0\n    while x:\n        ans += x % 10\n        x //= 10\n    return ans\n\ndef closest(x):\n    ans = 0\n    while (ans * 10 + 9 <= x):\n        ans = ans * 10 + 9\n    return ans\n\ndef sum_digits_twoparts(N):\n    if not isinstance(N, int):\n        raise TypeError(\"Input must be an integer\")\n    if N < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    \n    A = closest(N)\n    return sum_digits_single(A) + sum_digits_single(N - A)", "tests_source": "initial_tests.jsonl", "tests_task_id": "148", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:40:26.090115", "stage": "code_generation"}
{"task_id": "149", "round": 1, "temperature": 0.1, "generated_code": "def longest_subseq_with_diff_one(arr, n):\n    if arr is None or n is None:\n        raise TypeError(\"Input cannot be None\")\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n    \n    if n == 0:\n        return 0\n    \n    dp = [1 for _ in range(n)]\n    \n    for i in range(n):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) == 1:\n                dp[i] = max(dp[i], dp[j] + 1)\n    \n    return max(dp)", "tests_source": "initial_tests.jsonl", "tests_task_id": "149", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:41:03.862307", "stage": "code_generation"}
{"task_id": "150", "round": 1, "temperature": 0.1, "generated_code": "def does_Contain_B(a, b, c): \n    if not all(isinstance(x, int) for x in (a, b, c)):\n        raise TypeError(\"All inputs must be integers\")\n    \n    if (a == b): \n        return True\n    if c == 0:\n        return False\n    if ((b - a) * c > 0 and (b - a) % c == 0): \n        return True\n    return False", "tests_source": "initial_tests.jsonl", "tests_task_id": "150", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:41:36.380907", "stage": "code_generation"}
{"task_id": "151", "round": 1, "temperature": 0.1, "generated_code": "def gcd(p, q):\n    while q != 0:\n        p, q = q, p % q\n    return p\n\ndef is_coprime(x, y):\n    if not isinstance(x, int) or not isinstance(y, int):\n        raise TypeError(\"Both arguments must be integers.\")\n    if x == 0 or y == 0:\n        return False\n    return gcd(x, y) == 1", "tests_source": "initial_tests.jsonl", "tests_task_id": "151", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:42:05.229373", "stage": "code_generation"}
{"task_id": "152", "round": 1, "temperature": 0.1, "generated_code": "def merge(a, b):\n    c = []\n    while len(a) != 0 and len(b) != 0:\n        if a[0] < b[0]:\n            c.append(a[0])\n            a.pop(0)\n        else:\n            c.append(b[0])\n            b.pop(0)\n    c.extend(a)\n    c.extend(b)\n    return c\n\ndef merge_sort(x):\n    if not isinstance(x, (list, tuple)):\n        raise TypeError(\"Input must be an iterable\")\n    if len(x) == 0 or len(x) == 1:\n        return list(x)\n    else:\n        middle = len(x) // 2\n        a = merge_sort(x[:middle])\n        b = merge_sort(x[middle:])\n        return merge(a, b)", "tests_source": "initial_tests.jsonl", "tests_task_id": "152", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:42:15.882316", "stage": "code_generation"}
{"task_id": "153", "round": 1, "temperature": 0.1, "generated_code": "def parabola_vertex(a, b, c):\n    if not isinstance(a, (int, float)) or not isinstance(b, (int, float)) or not isinstance(c, (int, float)):\n        raise TypeError(\"All inputs must be numbers.\")\n    if a == 0:\n        raise ZeroDivisionError(\"Coefficient 'a' cannot be zero.\")\n    \n    x_vertex = -b / (2 * a)\n    y_vertex = (4 * a * c - b * b) / (4 * a)\n    return (x_vertex, y_vertex)", "tests_source": "initial_tests.jsonl", "tests_task_id": "153", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:42:26.099492", "stage": "code_generation"}
{"task_id": "154", "round": 1, "temperature": 0.1, "generated_code": "def specified_element(nums, N):\n    if not isinstance(N, int):\n        raise TypeError(\"list indices must be integers or slices, not {}\".format(type(N).__name__))\n    \n    result = []\n    for sublist in nums:\n        if N >= len(sublist):\n            raise IndexError(\"list index out of range\")\n        result.append(sublist[N])\n    \n    return result", "tests_source": "initial_tests.jsonl", "tests_task_id": "154", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:43:26.411055", "stage": "code_generation"}
{"task_id": "155", "round": 1, "temperature": 0.1, "generated_code": "def even_bit_toggle_number(n):\n    if not isinstance(n, int):\n        raise TypeError(\"unsupported operand type\")\n    \n    res = 0\n    count = 0\n    temp = n\n    \n    while temp > 0 or count < 32:  # Check up to 32 bits for safety\n        if count % 2 == 0:  # Toggle even bits\n            res |= (1 << count)\n        count += 1\n        temp >>= 1\n    \n    return n ^ res", "tests_source": "initial_tests.jsonl", "tests_task_id": "155", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:43:48.401246", "stage": "code_generation"}
{"task_id": "156", "round": 1, "temperature": 0.1, "generated_code": "def tuple_int_str(tuple_str):\n    result = tuple(int(x) for pair in tuple_str for x in pair)\n    return result", "tests_source": "initial_tests.jsonl", "tests_task_id": "156", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:44:06.157855", "stage": "code_generation"}
{"task_id": "157", "round": 1, "temperature": 0.1, "generated_code": "from itertools import groupby\n\ndef encode_list(list1):\n    if not isinstance(list1, (list, tuple)):\n        raise TypeError(\"groupby() argument must be iterable\")\n    return [[len(list(group)), key] for key, group in groupby(list1)]", "tests_source": "initial_tests.jsonl", "tests_task_id": "157", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:44:17.521195", "stage": "code_generation"}
{"task_id": "158", "round": 1, "temperature": 0.1, "generated_code": "def min_Ops(arr, n, k):\n    if not isinstance(arr, list) or not all(isinstance(x, int) for x in arr) or not isinstance(n, int) or not isinstance(k, int):\n        raise TypeError(\"Invalid input types\")\n    \n    if n == 0:\n        return 0\n    \n    max1 = max(arr)\n    res = 0\n    \n    for i in range(n):\n        if (max1 - arr[i]) % k != 0:\n            return -1\n        else:\n            res += (max1 - arr[i]) // k\n            \n    return res", "tests_source": "initial_tests.jsonl", "tests_task_id": "158", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:44:54.418933", "stage": "code_generation"}
{"task_id": "159", "round": 1, "temperature": 0.1, "generated_code": "def month_season(month, days):\n    if not isinstance(month, str) or not month or not isinstance(days, (int, float)) or days is None or days < 1:\n        raise ValueError(\"Invalid month or days\")\n    \n    month = month.capitalize()\n    \n    if month in ('January', 'February', 'March'):\n        season = 'winter'\n    elif month in ('April', 'May', 'June'):\n        season = 'spring'\n    elif month in ('July', 'August', 'September'):\n        season = 'summer'\n    elif month in ('October', 'November', 'December'):\n        season = 'autumn'\n    else:\n        raise ValueError(\"Invalid month\")\n\n    if (month == 'March' and days > 19):\n        season = 'spring'\n    elif (month == 'June' and days > 20):\n        season = 'summer'\n    elif (month == 'September' and days > 21):\n        season = 'autumn'\n    elif (month == 'October' and days > 21):\n        season = 'autumn':\n    elif (month == 'November' and days > 21):\n        season = 'autumn'\n    elif (month == 'December' and days > 20):\n        season = 'winter'\n\n    return season", "tests_source": "initial_tests.jsonl", "tests_task_id": "159", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:45:20.979778", "stage": "code_generation"}
{"task_id": "160", "round": 1, "temperature": 0.1, "generated_code": "def solution(a, b, n):\n    if not all(isinstance(x, (int, float)) for x in [a, b, n]):\n        raise TypeError(\"All inputs must be numbers\")\n    \n    if a == 0 and b == 0:\n        return \"No solution\"\n    \n    if a == 0:\n        if n % b == 0:\n            return (\"x = \", 0, \", y = \", n // b)\n        else:\n            return \"No solution\"\n    \n    if b == 0:\n        if n % a == 0:\n            return (\"x = \", n // a, \", y = \", 0)\n        else:\n            return \"No solution\"\n    \n    i = 0\n    while i * a <= n:\n        if (n - (i * a)) % b == 0:\n            return (\"x = \", i, \", y = \", (n - (i * a)) // b)\n        i += 1\n    \n    return \"No solution\"", "tests_source": "initial_tests.jsonl", "tests_task_id": "160", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:45:31.990827", "stage": "code_generation"}
{"task_id": "161", "round": 1, "temperature": 0.1, "generated_code": "def remove_elements(list1, list2):\n    if not isinstance(list1, (list, set, tuple)) or not isinstance(list2, (list, set, tuple)):\n        raise TypeError(\"expected an iterable\")\n    result = [x for x in list1 if x not in list2]\n    return result", "tests_source": "initial_tests.jsonl", "tests_task_id": "161", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:45:58.621424", "stage": "code_generation"}
{"task_id": "162", "round": 1, "temperature": 0.1, "generated_code": "def sum_series(n):\n    if not isinstance(n, int):\n        raise TypeError(\"unsupported operand type\")\n    if n < 1:\n        return 0\n    return n + sum_series(n - 2)", "tests_source": "initial_tests.jsonl", "tests_task_id": "162", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:46:06.382482", "stage": "code_generation"}
{"task_id": "163", "round": 1, "temperature": 0.1, "generated_code": "from math import tan, pi\n\ndef area_polygon(s, l):\n    if s < 3:\n        raise ValueError(\"Number of sides must be greater than 2\")\n    if l < 0:\n        raise ValueError(\"Side length must be non-negative\")\n    \n    area = s * (l ** 2) / (4 * tan(pi / s))\n    return area", "tests_source": "initial_tests.jsonl", "tests_task_id": "163", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:46:19.636300", "stage": "code_generation"}
{"task_id": "164", "round": 1, "temperature": 0.1, "generated_code": "import math \n\ndef divSum(n): \n    if n < 1:\n        return 0\n    sum = 1\n    i = 2\n    while(i * i <= n): \n        if (n % i == 0): \n            sum += i\n            if i != n // i:\n                sum += n // i\n        i += 1\n    return sum\n\ndef areEquivalent(num1, num2): \n    if not isinstance(num1, int) or not isinstance(num2, int):\n        raise TypeError(\"Both arguments must be integers\")\n    return divSum(num1) == divSum(num2)", "tests_source": "initial_tests.jsonl", "tests_task_id": "164", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:46:27.563353", "stage": "code_generation"}
{"task_id": "165", "round": 1, "temperature": 0.1, "generated_code": "def count_char_position(str1):\n    if not isinstance(str1, str):\n        raise TypeError(\"expected a string\")\n    \n    count_chars = 0\n    for i in range(len(str1)):\n        if str1[i].isalpha() and (i == ord(str1[i].upper()) - ord('A')):\n            count_chars += 1\n    return count_chars", "tests_source": "initial_tests.jsonl", "tests_task_id": "165", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:46:51.858797", "stage": "code_generation"}
{"task_id": "166", "round": 1, "temperature": 0.1, "generated_code": "def find_even_Pair(A, N):\n    if A is None or N is None:\n        raise TypeError(\"Input cannot be None\")\n    if N < 0:\n        raise ValueError(\"N cannot be negative\")\n    \n    even_count = sum(1 for x in A if x % 2 == 0)\n    odd_count = N - even_count\n    \n    # Pairs with even XOR can be formed by:\n    # 1. Pairing two even numbers\n    # 2. Pairing two odd numbers\n    even_pairs = (even_count * (even_count - 1)) // 2\n    odd_pairs = (odd_count * (odd_count - 1)) // 2\n    \n    return even_pairs + odd_pairs", "tests_source": "initial_tests.jsonl", "tests_task_id": "166", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:47:19.528797", "stage": "code_generation"}
{"task_id": "167", "round": 1, "temperature": 0.1, "generated_code": "def next_Power_Of_2(n):\n    if not isinstance(n, int) or n < 0:\n        raise TypeError(\"unsupported operand type\")\n    \n    if n == 0:\n        return 1\n    \n    if n & (n - 1) == 0:\n        return n\n    \n    count = 0\n    while n != 0:\n        n >>= 1\n        count += 1\n    return 1 << count", "tests_source": "initial_tests.jsonl", "tests_task_id": "167", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:47:51.565678", "stage": "code_generation"}
{"task_id": "168", "round": 1, "temperature": 0.1, "generated_code": "def frequency(a, x):\n    if not isinstance(a, list) or (a is None):\n        raise TypeError(\"unsupported operand type\")\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count", "tests_source": "initial_tests.jsonl", "tests_task_id": "168", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:47:59.175218", "stage": "code_generation"}
{"task_id": "169", "round": 1, "temperature": 0.1, "generated_code": "def get_pell(n):\n    if not isinstance(n, int):\n        raise TypeError(\"unsupported operand type\")\n    if n < 0:\n        raise ValueError(\"negative integer\")\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    \n    a, b = 1, 2\n    for i in range(3, n + 1):\n        c = 2 * b + a\n        a = b\n        b = c\n    return b", "tests_source": "initial_tests.jsonl", "tests_task_id": "169", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:48:32.655884", "stage": "code_generation"}
{"task_id": "170", "round": 1, "temperature": 0.1, "generated_code": "def sum_range_list(list1, m, n):\n    if m > n:\n        raise ValueError(\"m must be less than or equal to n\")\n    if m < 0 or n >= len(list1):\n        raise IndexError(\"list index out of range\")\n    \n    sum_range = 0\n    for i in range(m, n + 1):\n        sum_range += list1[i]\n    return sum_range", "tests_source": "initial_tests.jsonl", "tests_task_id": "170", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:48:59.514371", "stage": "code_generation"}
{"task_id": "171", "round": 1, "temperature": 0.1, "generated_code": "def perimeter_pentagon(a):\n    if not isinstance(a, (int, float)):\n        raise TypeError(\"unsupported operand type\")\n    return 5 * a", "tests_source": "initial_tests.jsonl", "tests_task_id": "171", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:49:27.199636", "stage": "code_generation"}
{"task_id": "172", "round": 1, "temperature": 0.1, "generated_code": "def count_occurance(s):\n    count = 0\n    for i in range(len(s) - 2):\n        if s[i] == 's' and s[i + 1] == 't' and s[i + 2] == 'd':\n            count += 1\n    return count", "tests_source": "initial_tests.jsonl", "tests_task_id": "172", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:49:35.104245", "stage": "code_generation"}
{"task_id": "173", "round": 1, "temperature": 0.1, "generated_code": "import re\n\ndef remove_splchar(text): \n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n    pattern = re.compile('[\\W_]+')\n    return pattern.sub('', text)", "tests_source": "initial_tests.jsonl", "tests_task_id": "173", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:50:00.608820", "stage": "code_generation"}
{"task_id": "174", "round": 1, "temperature": 0.1, "generated_code": "def group_keyvalue(l):\n    if not isinstance(l, list):\n        raise TypeError(\"expected a sequence of key-value pairs\")\n    \n    result = {}\n    for item in l:\n        if not isinstance(item, tuple) or len(item) != 2:\n            raise TypeError(\"cannot unpack non-iterable int object\" if isinstance(item, int) else \"not enough values to unpack (expected 2, got 1)\")\n        k, v = item\n        result.setdefault(k, []).append(v)\n    return result", "tests_source": "initial_tests.jsonl", "tests_task_id": "174", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:50:09.860691", "stage": "code_generation"}
{"task_id": "175", "round": 1, "temperature": 0.1, "generated_code": "def is_valid_parenthese(str1):\n    stack, pchar = [], {\"(\": \")\", \"{\": \"}\", \"[\": \"]\"}\n    for parenthese in str1:\n        if parenthese in pchar:\n            stack.append(parenthese)\n        elif len(stack) == 0 or pchar[stack.pop()] != parenthese:\n            return False\n        elif parenthese not in pchar.values():\n            raise KeyError(\"Invalid character found\")\n    return len(stack) == 0", "tests_source": "initial_tests.jsonl", "tests_task_id": "175", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:50:33.265749", "stage": "code_generation"}
{"task_id": "176", "round": 1, "temperature": 0.1, "generated_code": "def perimeter_triangle(a, b, c):\n    if not all(isinstance(x, (int, float)) for x in (a, b, c)):\n        raise TypeError(\"unsupported operand type\")\n    \n    if a < 0 or b < 0 or c < 0:\n        raise ValueError(\"Triangle inequality violated\")\n    \n    if a + b <= c or a + c <= b or b + c <= a:\n        raise ValueError(\"Triangle inequality violated\")\n    \n    perimeter = a + b + c\n    return perimeter", "tests_source": "initial_tests.jsonl", "tests_task_id": "176", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:51:28.221770", "stage": "code_generation"}
{"task_id": "177", "round": 1, "temperature": 0.1, "generated_code": "def answer(L, R):\n    if not (isinstance(L, int) and isinstance(R, int)):\n        raise TypeError(\"Both L and R must be integers\")\n    if L < 0 or R < 0 or L >= R:\n        return -1\n    if 2 * L <= R:\n        return (L, 2 * L)\n    else:\n        return -1", "tests_source": "initial_tests.jsonl", "tests_task_id": "177", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:52:05.817995", "stage": "code_generation"}
{"task_id": "178", "round": 1, "temperature": 0.1, "generated_code": "import re\n\ndef string_literals(patterns, text):\n    if not isinstance(patterns, (list, tuple)):\n        raise TypeError(\"expected an iterable\")\n    if not isinstance(text, str):\n        raise TypeError(\"expected a string\")\n    \n    for pattern in patterns:\n        if re.search(pattern, text):\n            return 'Matched!'\n    return 'Not Matched!'", "tests_source": "initial_tests.jsonl", "tests_task_id": "178", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:52:20.179993", "stage": "code_generation"}
{"task_id": "179", "round": 1, "temperature": 0.1, "generated_code": "def is_num_keith(x):\n    if not isinstance(x, int) or x < 0:\n        raise TypeError(\"Input must be a non-negative integer\")\n    \n    terms = []\n    temp = x\n    while temp > 0:\n        terms.append(temp % 10)\n        temp //= 10\n    terms.reverse()\n    \n    next_term = 0\n    i = len(terms)\n    \n    while next_term < x:\n        next_term = sum(terms[i - j] for j in range(1, len(terms) + 1))\n        terms.append(next_term)\n        i += 1\n    \n    return next_term == x", "tests_source": "initial_tests.jsonl", "tests_task_id": "179", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:52:29.795991", "stage": "code_generation"}
{"task_id": "180", "round": 1, "temperature": 0.1, "generated_code": "from math import radians, sin, cos, acos, isclose\n\ndef distance_lat_long(slat, slon, elat, elon):\n    if not (-radians(90) <= slat <= radians(90)):\n        raise ValueError(\"math domain error\")\n    if not (-radians(180) <= slon <= radians(180)):\n        raise ValueError(\"math domain error\")\n    if not (-radians(90) <= elat <= radians(90)):\n        raise ValueError(\"math domain error\")\n    if not (-radians(180) <= elon <= radians(180)):\n        raise ValueError(\"math domain error\")\n    \n    dist = 6371.01 * acos(sin(slat) * sin(elat) + cos(slat) * cos(elat) * cos(slon - elon))\n    return dist", "tests_source": "initial_tests.jsonl", "tests_task_id": "180", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:52:53.724099", "stage": "code_generation"}
{"task_id": "181", "round": 1, "temperature": 0.1, "generated_code": "def common_prefix(arr, n):\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n    if n == 0:\n        return \"\"\n    \n    for string in arr:\n        if not isinstance(string, str):\n            raise TypeError(\"All elements in the list must be strings\")\n    \n    def common_prefix_util(str1, str2):\n        result = \"\"\n        n1 = len(str1)\n        n2 = len(str2)\n        i = 0\n        j = 0\n        while i < n1 and j < n2:\n            if str1[i] != str2[j]:\n                break\n            result += str1[i]\n            i += 1\n            j += 1\n        return result\n    \n    prefix = arr[0]\n    for i in range(1, n):\n        prefix = common_prefix_util(prefix, arr[i])\n        if prefix == \"\":\n            break\n    return prefix", "tests_source": "initial_tests.jsonl", "tests_task_id": "181", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:53:29.264268", "stage": "code_generation"}
{"task_id": "182", "round": 1, "temperature": 0.1, "generated_code": "import re\n\ndef find_character(string):\n    if not isinstance(string, str):\n        raise TypeError(\"Input must be a string\")\n    \n    uppercase_characters = re.findall(r\"[A-Z]\", string) \n    lowercase_characters = re.findall(r\"[a-z]\", string) \n    numerical_characters = re.findall(r\"[0-9]\", string) \n    special_characters = re.findall(r\"[^\\w\\s]\", string)  # Match any non-word and non-space character\n    \n    return uppercase_characters, lowercase_characters, numerical_characters, special_characters", "tests_source": "initial_tests.jsonl", "tests_task_id": "182", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:53:38.005175", "stage": "code_generation"}
{"task_id": "183", "round": 1, "temperature": 0.1, "generated_code": "def count_pairs(arr, n, k):\n    if arr is None or not isinstance(arr, list) or not isinstance(n, int) or not isinstance(k, int):\n        raise TypeError(\"Invalid input types\")\n    \n    count = 0\n    seen = set()\n    \n    for num in arr:\n        if (num - k) in seen:\n            count += 1\n        if (num + k) in seen:\n            count += 1\n        seen.add(num)\n    \n    return count", "tests_source": "initial_tests.jsonl", "tests_task_id": "183", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:54:03.854936", "stage": "code_generation"}
{"task_id": "184", "round": 1, "temperature": 0.1, "generated_code": "def greater_specificnum(lst, num):\n    if lst is None or not isinstance(lst, list) or any(not isinstance(x, (int, float)) for x in lst) or not isinstance(num, (int, float)):\n        raise TypeError(\"Invalid input types\")\n    return [x for x in lst if x > num]", "tests_source": "initial_tests.jsonl", "tests_task_id": "184", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:54:13.034026", "stage": "code_generation"}
{"task_id": "185", "round": 1, "temperature": 0.1, "generated_code": "def parabola_focus(a, b, c):\n    if not isinstance(a, (int, float)) or not isinstance(b, (int, float)) or not isinstance(c, (int, float)):\n        raise TypeError(\"unsupported operand type\")\n    if a <= 0:\n        raise ValueError(\"a must be positive\")\n    \n    vertex_x = -b / (2 * a)\n    vertex_y = (4 * a * c - b * b + 1) / (4 * a)\n    focus = (vertex_x, vertex_y)\n    return focus", "tests_source": "initial_tests.jsonl", "tests_task_id": "185", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:54:21.080384", "stage": "code_generation"}
{"task_id": "186", "round": 1, "temperature": 0.1, "generated_code": "import re\n\ndef check_literals(text, patterns):\n    if not isinstance(text, str) or text is None:\n        raise TypeError(\"Invalid text input\")\n    if not isinstance(patterns, list) or patterns is None:\n        raise TypeError(\"Invalid patterns input\")\n    \n    for pattern in patterns:\n        if pattern is None:\n            raise TypeError(\"Invalid pattern in list\")\n        if re.search(pattern, text):\n            return 'Matched!'\n    return 'Not Matched!'", "tests_source": "initial_tests.jsonl", "tests_task_id": "186", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:54:50.767395", "stage": "code_generation"}
{"task_id": "187", "round": 1, "temperature": 0.1, "generated_code": "def longest_common_subsequence(X, Y, m, n):\n    if not isinstance(X, str) or not isinstance(Y, str):\n        raise TypeError(\"Both inputs must be strings\")\n    \n    if m == 0 or n == 0:\n        return 0\n    elif X[m-1] == Y[n-1]:\n        return 1 + longest_common_subsequence(X, Y, m-1, n-1)\n    else:\n        return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n))", "tests_source": "initial_tests.jsonl", "tests_task_id": "187", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:55:02.496861", "stage": "code_generation"}
{"task_id": "188", "round": 1, "temperature": 0.1, "generated_code": "def prod_Square(n):\n    if not isinstance(n, int):\n        raise TypeError(\"unsupported operand type\")\n    if n < 0:\n        raise ValueError(\"negative number\")\n    \n    for i in range(int(n**0.5) + 1):\n        for j in range(int(n**0.5) + 1):\n            if i * i + j * j == n:\n                return True\n    return False", "tests_source": "initial_tests.jsonl", "tests_task_id": "188", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:55:11.357972", "stage": "code_generation"}
{"task_id": "189", "round": 1, "temperature": 0.1, "generated_code": "def first_Missing_Positive(arr, n):\n    if not isinstance(arr, list) or not isinstance(n, int):\n        raise TypeError(\"Invalid input types\")\n    \n    if n == 0:\n        return 1\n    \n    for i in range(n):\n        if not isinstance(arr[i], int):\n            raise TypeError(\"Invalid input types\")\n    \n    for i in range(n):\n        if arr[i] <= 0 or arr[i] > n:\n            arr[i] = 1\n            \n    for i in range(n):\n        index = abs(arr[i]) - 1\n        if index < n:\n            arr[index] = -abs(arr[index])\n    \n    for i in range(n):\n        if arr[i] > 0:\n            return i + 1\n            \n    return n + 1", "tests_source": "initial_tests.jsonl", "tests_task_id": "189", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:55:44.464260", "stage": "code_generation"}
{"task_id": "190", "round": 1, "temperature": 0.1, "generated_code": "def count_Intgral_Points(x1, y1, x2, y2):\n    if not all(isinstance(i, (int, float)) for i in [x1, y1, x2, y2]):\n        raise TypeError(\"unsupported operand type\")\n    return max(0, (y2 - y1 - 1) * (x2 - x1 - 1))", "tests_source": "initial_tests.jsonl", "tests_task_id": "190", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:56:14.772345", "stage": "code_generation"}
{"task_id": "191", "round": 1, "temperature": 0.1, "generated_code": "def check_monthnumber(monthname3):\n    if not isinstance(monthname3, str):\n        raise TypeError(\"Input must be a string\")\n    \n    monthname3 = monthname3.strip()\n    \n    if monthname3 == \"\":\n        return False\n    \n    return monthname3 in [\"April\", \"June\", \"September\", \"November\"]", "tests_source": "initial_tests.jsonl", "tests_task_id": "191", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:56:52.766187", "stage": "code_generation"}
{"task_id": "192", "round": 1, "temperature": 0.1, "generated_code": "def check_String(s): \n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n    \n    flag_l = False\n    flag_n = False\n    for i in s: \n        if i.isalpha(): \n            flag_l = True  \n        if i.isdigit(): \n            flag_n = True\n        if flag_l and flag_n:  # Early exit if both flags are True\n            return True\n            \n    return flag_l and flag_n", "tests_source": "initial_tests.jsonl", "tests_task_id": "192", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:57:00.545659", "stage": "code_generation"}
{"task_id": "193", "round": 1, "temperature": 0.1, "generated_code": "def remove_tuple(test_tup):\n    if not isinstance(test_tup, tuple):\n        raise TypeError(\"Input must be a tuple\")\n    res = tuple(dict.fromkeys(test_tup))\n    return res", "tests_source": "initial_tests.jsonl", "tests_task_id": "193", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:57:10.389009", "stage": "code_generation"}
{"task_id": "194", "round": 1, "temperature": 0.1, "generated_code": "def octal_To_Decimal(n):\n    if isinstance(n, str):\n        if not n.isdigit() or '8' in n or '9' in n:\n            raise ValueError(f\"invalid literal for int() with base 10: '{n}'\")\n        n = int(n)\n    elif n < 0:\n        raise ValueError(f\"invalid literal for int() with base 10: '{n}'\")\n    \n    dec_value = 0\n    base = 1\n    temp = n\n    \n    while temp:\n        last_digit = temp % 10\n        temp = temp // 10\n        dec_value += last_digit * base\n        base *= 8\n    \n    return dec_value", "tests_source": "initial_tests.jsonl", "tests_task_id": "194", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:57:20.857591", "stage": "code_generation"}
{"task_id": "195", "round": 1, "temperature": 0.1, "generated_code": "def first(arr, x, n):\n    if arr is None or x is None or n is None:\n        raise TypeError(\"Arguments cannot be None\")\n    \n    low = 0\n    high = n - 1\n    res = -1  \n    while low <= high:\n        mid = (low + high) // 2 \n        if arr[mid] > x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            res = mid\n            high = mid - 1\n    return res", "tests_source": "initial_tests.jsonl", "tests_task_id": "195", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:57:43.513862", "stage": "code_generation"}
{"task_id": "196", "round": 1, "temperature": 0.1, "generated_code": "def remove_tuples(test_list, K):\n    if not isinstance(test_list, list) or not isinstance(K, int):\n        raise TypeError(\"Invalid input types\")\n    res = [ele for ele in test_list if len(ele) != K]\n    return res", "tests_source": "initial_tests.jsonl", "tests_task_id": "196", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:57:49.195479", "stage": "code_generation"}
{"task_id": "197", "round": 1, "temperature": 0.1, "generated_code": "def find_exponentio(test_tup1, test_tup2):\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"not enough values to unpack\")\n    res = tuple(ele1 ** ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n    return res", "tests_source": "initial_tests.jsonl", "tests_task_id": "197", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:57:57.156862", "stage": "code_generation"}
{"task_id": "198", "round": 1, "temperature": 0.1, "generated_code": "import math\n\ndef largest_triangle(a, b): \n    if a < 0 or b < 0: \n        return -1 \n    return (3 * math.sqrt(3) * pow(a, 2)) / (4 * b) if b > 0 else 0", "tests_source": "initial_tests.jsonl", "tests_task_id": "198", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:58:04.520457", "stage": "code_generation"}
{"task_id": "199", "round": 1, "temperature": 0.1, "generated_code": "def highest_Power_of_2(n):\n    if not isinstance(n, int):\n        raise TypeError(\"unsupported operand type\")\n    \n    if n < 1:\n        return 0\n    \n    power = 1\n    while power <= n:\n        power <<= 1\n    return power >> 1", "tests_source": "initial_tests.jsonl", "tests_task_id": "199", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:58:24.091909", "stage": "code_generation"}
{"task_id": "200", "round": 1, "temperature": 0.1, "generated_code": "def position_max(list1):\n    if not isinstance(list1, list):\n        raise TypeError(\"object is not iterable\")\n    if not all(isinstance(x, (int, float)) for x in list1):\n        raise TypeError(\"unsupported operand type(s) for max()\")\n    \n    if not list1:\n        return []\n    \n    max_val = max(list1)\n    return [i for i, j in enumerate(list1) if j == max_val]", "tests_source": "initial_tests.jsonl", "tests_task_id": "200", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:58:35.161995", "stage": "code_generation"}
{"task_id": "201", "round": 1, "temperature": 0.1, "generated_code": "def chkList(lst):\n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list\")\n    return len(set(lst)) <= 1", "tests_source": "initial_tests.jsonl", "tests_task_id": "201", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:59:03.392653", "stage": "code_generation"}
{"task_id": "202", "round": 1, "temperature": 0.1, "generated_code": "def remove_even(str1):\n    if not isinstance(str1, str):\n        raise TypeError(f\"must be str, not {type(str1).__name__}\")\n    \n    return ''.join(str1[i] for i in range(len(str1)) if i % 2 == 0)", "tests_source": "initial_tests.jsonl", "tests_task_id": "202", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:59:08.907723", "stage": "code_generation"}
{"task_id": "203", "round": 1, "temperature": 0.1, "generated_code": "def hamming_Distance(n1, n2):\n    if not isinstance(n1, int) or not isinstance(n2, int):\n        raise TypeError(\"unsupported operand type\")\n    \n    x = n1 ^ n2  \n    setBits = 0\n    while (x > 0): \n        setBits += x & 1\n        x >>= 1\n    return setBits", "tests_source": "initial_tests.jsonl", "tests_task_id": "203", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:59:17.430177", "stage": "code_generation"}
{"task_id": "204", "round": 1, "temperature": 0.1, "generated_code": "def count(s, c):\n    if not isinstance(s, str) or not isinstance(c, str) or len(c) != 1:\n        raise TypeError(\"string indices must be integers\")\n    \n    return s.count(c)", "tests_source": "initial_tests.jsonl", "tests_task_id": "204", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:59:38.326392", "stage": "code_generation"}
{"task_id": "205", "round": 1, "temperature": 0.1, "generated_code": "def inversion_elements(test_tup):\n    if not all(isinstance(x, int) for x in test_tup):\n        raise TypeError(\"unsupported operand type\")\n    return tuple(-x - 1 for x in test_tup)", "tests_source": "initial_tests.jsonl", "tests_task_id": "205", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:59:48.053966", "stage": "code_generation"}
{"task_id": "206", "round": 1, "temperature": 0.1, "generated_code": "def concatenate_elements(test_tup):\n    if len(test_tup) < 2:\n        return ()\n    if any(not isinstance(i, str) for i in test_tup):\n        raise TypeError(\"can't concat str to int\")\n    res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n    return res", "tests_source": "initial_tests.jsonl", "tests_task_id": "206", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T09:59:54.620211", "stage": "code_generation"}
{"task_id": "207", "round": 1, "temperature": 0.1, "generated_code": "def find_longest_repeating_subseq(str):\n    if not isinstance(str, str):\n        raise TypeError(\"expected a string\")\n    \n    n = len(str)\n    dp = [[0 for k in range(n + 1)] for l in range(n + 1)]\n    \n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if str[i - 1] == str[j - 1] and i != j:\n                dp[i][j] = 1 + dp[i - 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i - 1][j])\n    \n    return dp[n][n]", "tests_source": "initial_tests.jsonl", "tests_task_id": "207", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:00:06.957192", "stage": "code_generation"}
{"task_id": "208", "round": 1, "temperature": 0.1, "generated_code": "import re\n\ndef is_decimal(num):\n    num_fetch = re.compile(r\"^(0|[1-9][0-9]*)(\\.[0-9]{1,2})?$\")\n    result = num_fetch.match(num)\n    return bool(result)", "tests_source": "initial_tests.jsonl", "tests_task_id": "208", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:00:34.169687", "stage": "code_generation"}
{"task_id": "209", "round": 1, "temperature": 0.1, "generated_code": "import heapq as hq\n\ndef heap_replace(heap, a):\n    if not isinstance(heap, list):\n        raise TypeError(\"must be a list\")\n    if len(heap) == 0:\n        raise ValueError(\"heap is empty\")\n    \n    hq.heapify(heap)\n    return hq.heapreplace(heap, a)", "tests_source": "initial_tests.jsonl", "tests_task_id": "209", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:01:02.892436", "stage": "code_generation"}
{"task_id": "210", "round": 1, "temperature": 0.1, "generated_code": "import re\n\ndef is_allowed_specific_char(string):\n    if not isinstance(string, str):\n        raise TypeError(\"expected string or bytes-like object\")\n    get_char = re.compile(r'[^a-zA-Z0-9.]')\n    return not bool(get_char.search(string))", "tests_source": "initial_tests.jsonl", "tests_task_id": "210", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:01:26.320194", "stage": "code_generation"}
{"task_id": "211", "round": 1, "temperature": 0.1, "generated_code": "def count_Num(n):\n    if not isinstance(n, int):\n        raise TypeError(\"unsupported operand type\")\n    if n < 0:\n        raise ValueError(\"negative integer\")\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    count = pow(2, n - 2)\n    return count", "tests_source": "initial_tests.jsonl", "tests_task_id": "211", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:01:34.327823", "stage": "code_generation"}
{"task_id": "212", "round": 1, "temperature": 0.1, "generated_code": "def fourth_Power_Sum(n):\n    if not isinstance(n, int) or n < 0:\n        raise TypeError(\"unsupported operand type\")\n    \n    return sum(i**4 for i in range(1, n + 1))", "tests_source": "initial_tests.jsonl", "tests_task_id": "212", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:02:09.282557", "stage": "code_generation"}
{"task_id": "213", "round": 1, "temperature": 0.1, "generated_code": "def concatenate_strings(test_tup1, test_tup2):\n    if not isinstance(test_tup1, tuple) or not isinstance(test_tup2, tuple):\n        raise TypeError(\"tuple indices must be integers or slices, not str\")\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"not enough values to unpack\")\n    \n    res = tuple(str(ele1) + str(ele2) for ele1, ele2 in zip(test_tup1, test_tup2))\n    return res", "tests_source": "initial_tests.jsonl", "tests_task_id": "213", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:02:16.587518", "stage": "code_generation"}
{"task_id": "214", "round": 1, "temperature": 0.1, "generated_code": "import math\n\ndef degree_radian(radian):\n    if not isinstance(radian, (int, float)):\n        raise TypeError(\"unsupported operand type(s) for *: 'float' and 'str'\")\n    degree = radian * (180 / math.pi)\n    return degree", "tests_source": "initial_tests.jsonl", "tests_task_id": "214", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:02:37.925770", "stage": "code_generation"}
{"task_id": "215", "round": 1, "temperature": 0.1, "generated_code": "def decode_list(alist):\n    if not isinstance(alist, list):\n        raise TypeError(\"expected a list or a valid run-length encoding format\")\n    \n    result = []\n    i = 0\n    while i < len(alist):\n        if isinstance(alist[i], int) and i + 1 < len(alist) and isinstance(alist[i + 1], str):\n            count = alist[i]\n            char = alist[i + 1]\n            if count < 0:\n                raise ValueError(\"count must be non-negative\")\n            result.extend([char] * count)\n            i += 2\n        else:\n            raise TypeError(\"expected a list or a valid run-length encoding format\")\n    \n    return result", "tests_source": "initial_tests.jsonl", "tests_task_id": "215", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:02:47.294084", "stage": "code_generation"}
{"task_id": "216", "round": 1, "temperature": 0.1, "generated_code": "def check_subset_list(list1, list2):\n    if not isinstance(list1, list) or not isinstance(list2, list):\n        raise TypeError(\"Both arguments must be lists.\")\n    \n    for item in list1:\n        if not isinstance(item, list):\n            raise TypeError(\"All elements of the first list must be lists.\")\n    \n    for item in list2:\n        if not isinstance(item, list):\n            raise TypeError(\"All elements of the second list must be lists.\")\n    \n    return all(item in list2 for item in list1)", "tests_source": "initial_tests.jsonl", "tests_task_id": "216", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:02:56.651192", "stage": "code_generation"}
{"task_id": "217", "round": 1, "temperature": 0.1, "generated_code": "def first_Repeated_Char(s):\n    if not isinstance(s, str):\n        raise TypeError(\"expected a string\")\n    \n    h = {}\n    for ch in s:\n        if ch in h:\n            return ch\n        else:\n            h[ch] = 0\n    return '\\0'", "tests_source": "initial_tests.jsonl", "tests_task_id": "217", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:03:05.195364", "stage": "code_generation"}
{"task_id": "218", "round": 1, "temperature": 0.1, "generated_code": "import math\n\ndef min_Operations(A, B):\n    if not isinstance(A, int) or not isinstance(B, int):\n        raise TypeError(\"Both A and B must be integers\")\n    \n    if A == 0 and B == 0:\n        return 0\n    if A == 0 or B == 0:\n        return 0\n    \n    if A > B:\n        A, B = B, A\n    \n    B = B // math.gcd(A, B)\n    return B - 1", "tests_source": "initial_tests.jsonl", "tests_task_id": "218", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:03:16.059658", "stage": "code_generation"}
{"task_id": "219", "round": 1, "temperature": 0.1, "generated_code": "def extract_min_max(test_tup, K):\n    if not isinstance(test_tup, tuple):\n        raise TypeError(\"tuple expected\")\n    if K < 0:\n        raise ValueError(\"K must be a positive integer\")\n    if K > len(test_tup) // 2:\n        raise ValueError(\"K must be less than or equal to half the size of the tuple\")\n    \n    if len(test_tup) == 0 or K == 0:\n        return ()\n    \n    sorted_tup = sorted(test_tup)\n    res = sorted_tup[:K] + sorted_tup[-K:]\n    return tuple(res)", "tests_source": "initial_tests.jsonl", "tests_task_id": "219", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:03:58.538566", "stage": "code_generation"}
{"task_id": "220", "round": 1, "temperature": 0.1, "generated_code": "import re\n\ndef replace_max_specialchar(text, n):\n    if not isinstance(text, str):\n        raise TypeError(\"expected a string for 'text'\")\n    if not isinstance(n, int):\n        raise TypeError(\"expected an integer for 'n'\")\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    \n    return re.sub(r\"[ ,.]\", \":\", text, n)", "tests_source": "initial_tests.jsonl", "tests_task_id": "220", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:04:19.841677", "stage": "code_generation"}
{"task_id": "221", "round": 1, "temperature": 0.1, "generated_code": "def first_even(nums):\n    if not isinstance(nums, list):\n        raise TypeError(\"Input must be a list\")\n    return next((el for el in nums if isinstance(el, (int, float)) and el % 2 == 0), -1)", "tests_source": "initial_tests.jsonl", "tests_task_id": "221", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:04:46.092205", "stage": "code_generation"}
{"task_id": "222", "round": 1, "temperature": 0.1, "generated_code": "def check_type(test_tuple):\n    if not isinstance(test_tuple, tuple):\n        raise TypeError(\"Input must be a tuple\")\n    \n    if len(test_tuple) == 0:\n        return True\n    \n    first_type = type(test_tuple[0])\n    for ele in test_tuple:\n        if not isinstance(ele, first_type):\n            return False\n    return True", "tests_source": "initial_tests.jsonl", "tests_task_id": "222", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:04:56.384542", "stage": "code_generation"}
{"task_id": "223", "round": 1, "temperature": 0.1, "generated_code": "def is_majority(arr, n, x):\n    if arr is None or n < 0:\n        raise TypeError(\"Invalid input\")\n    \n    if n == 0:\n        return False\n    \n    i = binary_search(arr, 0, n - 1, x)\n    if i == -1:\n        return False\n    if (i + n // 2) < n and arr[i + n // 2] == x:\n        return True\n    return False\n\ndef binary_search(arr, low, high, x):\n    if high >= low:\n        mid = (low + high) // 2\n        if (mid == 0 or x > arr[mid - 1]) and (arr[mid] == x):\n            return mid\n        elif x > arr[mid]:\n            return binary_search(arr, mid + 1, high, x)\n        else:\n            return binary_search(arr, low, mid - 1, x)\n    return -1", "tests_source": "initial_tests.jsonl", "tests_task_id": "223", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:05:08.438495", "stage": "code_generation"}
{"task_id": "224", "round": 1, "temperature": 0.1, "generated_code": "def count_Set_Bits(n):\n    if not isinstance(n, int):\n        raise TypeError(\"unsupported operand type\")\n    \n    if n < 0:\n        n = (1 << 32) + n  # Convert negative number to its 32-bit unsigned equivalent\n    \n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count", "tests_source": "initial_tests.jsonl", "tests_task_id": "224", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:05:38.184419", "stage": "code_generation"}
{"task_id": "225", "round": 1, "temperature": 0.1, "generated_code": "def find_Min(arr, low, high):\n    if arr is None or low > high:\n        raise IndexError(\"list index out of range\")\n    \n    if len(arr) == 0:\n        return None\n    \n    while low < high:\n        mid = low + (high - low) // 2\n        if arr[mid] == arr[high]:\n            high -= 1\n        elif arr[mid] > arr[high]:\n            low = mid + 1\n        else:\n            high = mid\n    return arr[high]", "tests_source": "initial_tests.jsonl", "tests_task_id": "225", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:05:52.538410", "stage": "code_generation"}
{"task_id": "226", "round": 1, "temperature": 0.1, "generated_code": "def odd_values_string(s):\n    if not isinstance(s, str):\n        raise TypeError(\"expected a string\")\n    return ''.join(s[i] for i in range(len(s)) if i % 2 == 0)", "tests_source": "initial_tests.jsonl", "tests_task_id": "226", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:06:19.865054", "stage": "code_generation"}
{"task_id": "227", "round": 1, "temperature": 0.1, "generated_code": "def min_of_three(a, b, c):\n    if not all(isinstance(x, (int, float)) for x in (a, b, c)):\n        raise TypeError(\"unsupported operand type\")\n    \n    if (a <= b) and (a <= c):\n        return a\n    elif (b <= a) and (b <= c):\n        return b\n    else:\n        return c", "tests_source": "initial_tests.jsonl", "tests_task_id": "227", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:06:47.470738", "stage": "code_generation"}
{"task_id": "228", "round": 1, "temperature": 0.1, "generated_code": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    if l > r:\n        raise ValueError(\"Invalid range\")\n    \n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1))\n    new_num = n & num\n    return new_num == 0", "tests_source": "initial_tests.jsonl", "tests_task_id": "228", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:06:58.325796", "stage": "code_generation"}
{"task_id": "229", "round": 1, "temperature": 0.1, "generated_code": "def re_arrange_array(arr, n):\n    if not isinstance(arr, list) or not isinstance(n, int):\n        raise TypeError(\"unsupported operand type\")\n    if n != len(arr):\n        raise ValueError(\"not enough values to unpack\")\n    \n    j = 0\n    for i in range(n):\n        if arr[i] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            j += 1\n    return arr", "tests_source": "initial_tests.jsonl", "tests_task_id": "229", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:07:09.966057", "stage": "code_generation"}
{"task_id": "230", "round": 1, "temperature": 0.1, "generated_code": "def replace_blank(str1, char):\n    if not isinstance(str1, str) or not isinstance(char, str):\n        raise TypeError(\"replace_blank() argument must be str\")\n    return str1.replace(' ', char)", "tests_source": "initial_tests.jsonl", "tests_task_id": "230", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:07:26.933431", "stage": "code_generation"}
{"task_id": "231", "round": 1, "temperature": 0.1, "generated_code": "def max_sum(tri, n): \n    if tri is None or n <= 0:\n        raise TypeError(\"Input triangle cannot be None and must have a positive size\")\n    if len(tri) != n:\n        raise IndexError(\"Triangle must have the same number of rows as specified\")\n    \n    for i in range(n):\n        if len(tri[i]) != i + 1:\n            raise IndexError(\"Each row must have one more element than the previous row\")\n        for j in tri[i]:\n            if not isinstance(j, (int, float)):\n                raise TypeError(\"All elements in the triangle must be numbers\")\n    \n    for i in range(1, n): \n        tri[i][0] += tri[i-1][0] \n        tri[i][i] += tri[i-1][i-1] \n        for j in range(1, i): \n            tri[i][j] += max(tri[i-1][j-1], tri[i-1][j]) \n            \n    return max(tri[n-1])", "tests_source": "initial_tests.jsonl", "tests_task_id": "231", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:08:03.556923", "stage": "code_generation"}
{"task_id": "232", "round": 1, "temperature": 0.1, "generated_code": "import heapq\n\ndef larg_nnum(list1, n):\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"n must be a positive integer\")\n    \n    if n == 0:\n        return []\n    \n    return heapq.nlargest(n, list1) if n <= len(list1) else sorted(list1, reverse=True)", "tests_source": "initial_tests.jsonl", "tests_task_id": "232", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:08:38.378619", "stage": "code_generation"}
{"task_id": "233", "round": 1, "temperature": 0.1, "generated_code": "def lateralsuface_cylinder(r, h):\n    if not isinstance(r, (int, float)) or not isinstance(h, (int, float)):\n        raise TypeError(\"unsupported operand type\")\n    return 2 * 3.1415 * r * h if r > 0 and h > 0 else 0", "tests_source": "initial_tests.jsonl", "tests_task_id": "233", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:08:47.343185", "stage": "code_generation"}
{"task_id": "234", "round": 1, "temperature": 0.1, "generated_code": "def volume_cube(l):\n    if not isinstance(l, (int, float)):\n        raise TypeError(\"unsupported operand type(s) for ** or pow(): 'str' and 'int'\")\n    return l ** 3", "tests_source": "initial_tests.jsonl", "tests_task_id": "234", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:09:05.021833", "stage": "code_generation"}
{"task_id": "235", "round": 1, "temperature": 0.1, "generated_code": "def even_bit_set_number(n):\n    if not isinstance(n, int):\n        raise TypeError(\"unsupported operand type\")\n    \n    res = 0\n    count = 0\n    temp = n\n    \n    while temp > 0 or count < 32:  # Check up to 32 bits\n        if count % 2 == 0:  # Set even bits\n            res |= (1 << count)\n        count += 1\n        temp >>= 1\n    \n    return n | res", "tests_source": "initial_tests.jsonl", "tests_task_id": "235", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:09:15.990539", "stage": "code_generation"}
{"task_id": "236", "round": 1, "temperature": 0.1, "generated_code": "def No_of_Triangle(N, K):\n    if N < K or N < 1 or K < 1:\n        return -1\n    Tri_up = ((N - K + 1) * (N - K + 2)) // 2\n    Tri_down = ((N - 2 * K + 1) * (N - 2 * K + 2)) // 2\n    return Tri_up + Tri_down", "tests_source": "initial_tests.jsonl", "tests_task_id": "236", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:09:56.522067", "stage": "code_generation"}
{"task_id": "237", "round": 1, "temperature": 0.1, "generated_code": "from collections import Counter \n\ndef check_occurences(test_list):\n    if test_list is None:\n        raise TypeError(\"Input cannot be None\")\n    \n    res = {}\n    for ele in test_list:\n        if not isinstance(ele, tuple):\n            raise TypeError(\"All elements in the list must be tuples\")\n        for item in ele:\n            if not isinstance(item, (int, float)):\n                raise TypeError(\"All elements in the tuples must be numbers\")\n    \n    sorted_tuples = map(sorted, test_list)\n    res = dict(Counter(tuple(ele) for ele in sorted_tuples))\n    return res", "tests_source": "initial_tests.jsonl", "tests_task_id": "237", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:10:33.239345", "stage": "code_generation"}
{"task_id": "238", "round": 1, "temperature": 0.1, "generated_code": "def number_of_substrings(s):\n    if not isinstance(s, str):\n        raise TypeError(\"expected a string\")\n    str_len = len(s)\n    return int(str_len * (str_len + 1) / 2)", "tests_source": "initial_tests.jsonl", "tests_task_id": "238", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:10:53.462209", "stage": "code_generation"}
{"task_id": "239", "round": 1, "temperature": 0.1, "generated_code": "def get_total_number_of_sequences(m, n):\n    if m < 0 or n <= 0:\n        raise IndexError(\"Invalid input: m must be non-negative and n must be positive.\")\n    \n    T = [[0 for _ in range(n + 1)] for _ in range(m + 1)]\n    \n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                T[i][j] = 0\n            elif i < j:\n                T[i][j] = 0\n            elif j == 1:\n                T[i][j] = i\n            else:\n                T[i][j] = T[i - 1][j] + (T[i // 2][j - 1] if i // 2 >= 0 else 0)\n    \n    return T[m][n]", "tests_source": "initial_tests.jsonl", "tests_task_id": "239", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:11:04.592449", "stage": "code_generation"}
{"task_id": "240", "round": 1, "temperature": 0.1, "generated_code": "def replace_list(list1, list2):\n    if not isinstance(list1, list):\n        raise TypeError(\"list indices must be integers or slices, not {}\".format(type(list1).__name__))\n    if not isinstance(list2, list):\n        raise TypeError(\"list indices must be integers or slices, not {}\".format(type(list2).__name__))\n    \n    list1[-1:] = list2\n    return list1", "tests_source": "initial_tests.jsonl", "tests_task_id": "240", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:11:35.657237", "stage": "code_generation"}
{"task_id": "241", "round": 1, "temperature": 0.1, "generated_code": "def array_3d(m, n, o):\n    if not all(isinstance(x, int) for x in (m, n, o)):\n        raise TypeError(\"All dimensions must be integers.\")\n    if any(x < 0 for x in (m, n, o)):\n        raise ValueError(\"Dimensions must be non-negative.\")\n    \n    return [[['*' for _ in range(m)] for _ in range(n)] for _ in range(o)]", "tests_source": "initial_tests.jsonl", "tests_task_id": "241", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:12:02.501213", "stage": "code_generation"}
{"task_id": "242", "round": 1, "temperature": 0.1, "generated_code": "def count_charac(str1):\n    if not isinstance(str1, str):\n        raise TypeError(\"expected a string\")\n    return len(str1)", "tests_source": "initial_tests.jsonl", "tests_task_id": "242", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:12:40.424470", "stage": "code_generation"}
{"task_id": "243", "round": 1, "temperature": 0.1, "generated_code": "def sort_on_occurence(lst):\n    if not all(isinstance(item, tuple) and len(item) == 2 for item in lst):\n        raise TypeError(\"All items in the list must be tuples of length 2.\")\n    \n    dct = {}\n    for i, j in lst:\n        dct.setdefault(i, []).append(j)\n    \n    return [(i, *dict.fromkeys(j), len(j)) for i, j in sorted(dct.items(), key=lambda x: -len(x[1]))]", "tests_source": "initial_tests.jsonl", "tests_task_id": "243", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:12:47.643367", "stage": "code_generation"}
{"task_id": "244", "round": 1, "temperature": 0.1, "generated_code": "import math\n\ndef next_Perfect_Square(N):\n    if not isinstance(N, (int, float)):\n        raise TypeError(\"unsupported operand type\")\n    nextN = math.floor(math.sqrt(N)) + 1\n    return nextN * nextN", "tests_source": "initial_tests.jsonl", "tests_task_id": "244", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:12:59.358152", "stage": "code_generation"}
{"task_id": "245", "round": 1, "temperature": 0.1, "generated_code": "def max_sum(arr, n):\n    if arr is None or not isinstance(arr, list) or not isinstance(n, int):\n        raise TypeError(\"Invalid input\")\n    \n    if n == 0:\n        return float(\"-Inf\")\n    \n    MSIBS = arr[:] \n    for i in range(n): \n        for j in range(0, i): \n            if arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \n                MSIBS[i] = MSIBS[j] + arr[i] \n                \n    MSDBS = arr[:] \n    for i in range(1, n + 1): \n        for j in range(1, i): \n            if arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \n                MSDBS[-i] = MSDBS[-j] + arr[-i] \n                \n    max_sum = float(\"-Inf\") \n    for i, j, k in zip(MSIBS, MSDBS, arr): \n        max_sum = max(max_sum, i + j - k) \n        \n    return max_sum", "tests_source": "initial_tests.jsonl", "tests_task_id": "245", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:13:20.709846", "stage": "code_generation"}
{"task_id": "246", "round": 1, "temperature": 0.1, "generated_code": "def babylonian_squareroot(number):\n    if not isinstance(number, (int, float)):\n        raise TypeError(\"unsupported operand type\")\n    if number < 0:\n        raise ValueError(\"math domain error\")\n    if number == 0:\n        return 0\n    g = number / 2.0\n    g2 = g + 1\n    while g != g2:\n        n = number / g\n        g2 = g\n        g = (g + n) / 2\n    return g", "tests_source": "initial_tests.jsonl", "tests_task_id": "246", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:13:52.941500", "stage": "code_generation"}
{"task_id": "247", "round": 1, "temperature": 0.1, "generated_code": "def lps(s):\n    if not isinstance(s, str):\n        raise TypeError(\"expected a string\")\n    \n    n = len(s)\n    if n == 0:\n        return 0\n    \n    L = [[0 for x in range(n)] for y in range(n)]\n    \n    for i in range(n):\n        L[i][i] = 1\n        \n    for cl in range(2, n + 1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if s[i] == s[j] and cl == 2:\n                L[i][j] = 2\n            elif s[i] == s[j]:\n                L[i][j] = L[i + 1][j - 1] + 2\n            else:\n                L[i][j] = max(L[i][j - 1], L[i + 1][j])\n    \n    return L[0][n - 1]", "tests_source": "initial_tests.jsonl", "tests_task_id": "247", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:14:08.700571", "stage": "code_generation"}
{"task_id": "248", "round": 1, "temperature": 0.1, "generated_code": "def harmonic_sum(n):\n    if n < 1:\n        raise RecursionError(\"maximum recursion depth exceeded\")\n    elif n == 1:\n        return 1\n    else:\n        return 1 / (n - 1) + harmonic_sum(n - 1)", "tests_source": "initial_tests.jsonl", "tests_task_id": "248", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:14:14.566607", "stage": "code_generation"}
{"task_id": "249", "round": 1, "temperature": 0.1, "generated_code": "def intersection_array(array_nums1, array_nums2):\n    if not isinstance(array_nums1, list) or not isinstance(array_nums2, list):\n        raise TypeError(\"Both arguments must be lists\")\n    \n    result = list(filter(lambda x: x in array_nums1, array_nums2))\n    return result", "tests_source": "initial_tests.jsonl", "tests_task_id": "249", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:14:47.574704", "stage": "code_generation"}
{"task_id": "250", "round": 1, "temperature": 0.1, "generated_code": "def count_X(tup, x): \n    if not isinstance(tup, tuple):\n        raise TypeError(\"tuple expected\")\n    return tup.count(x)", "tests_source": "initial_tests.jsonl", "tests_task_id": "250", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:14:53.695965", "stage": "code_generation"}
{"task_id": "251", "round": 1, "temperature": 0.1, "generated_code": "def insert_element(lst, element):\n    if not hasattr(lst, '__iter__'):\n        raise TypeError(\"expected an iterable\")\n    return [v for elt in lst for v in (element, elt)]", "tests_source": "initial_tests.jsonl", "tests_task_id": "251", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:14:58.910960", "stage": "code_generation"}
{"task_id": "252", "round": 1, "temperature": 0.1, "generated_code": "import cmath\n\ndef convert(numbers):\n    if not isinstance(numbers, complex):\n        raise TypeError(\"complex expected\")\n    return cmath.polar(numbers)", "tests_source": "initial_tests.jsonl", "tests_task_id": "252", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:15:06.980755", "stage": "code_generation"}
{"task_id": "253", "round": 1, "temperature": 0.1, "generated_code": "def count_integer(list1):\n    if not isinstance(list1, list):\n        raise TypeError(\"Input must be a list\")\n    \n    ctr = 0\n    for i in list1:\n        if isinstance(i, int):\n            ctr += 1\n    return ctr", "tests_source": "initial_tests.jsonl", "tests_task_id": "253", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:15:31.520792", "stage": "code_generation"}
{"task_id": "254", "round": 1, "temperature": 0.1, "generated_code": "import re\n\ndef words_ae(text):\n    if not isinstance(text, str):\n        raise TypeError(\"expected a string\")\n    return re.findall(r'\\b[aeAE]\\w*', text)", "tests_source": "initial_tests.jsonl", "tests_task_id": "254", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:15:55.396102", "stage": "code_generation"}
{"task_id": "255", "round": 1, "temperature": 0.1, "generated_code": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    if not isinstance(l, (list, tuple)):\n        raise TypeError(\"argument must be a sequence\")\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n    \n    return list(combinations_with_replacement(l, n))", "tests_source": "initial_tests.jsonl", "tests_task_id": "255", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:16:22.562132", "stage": "code_generation"}
{"task_id": "256", "round": 1, "temperature": 0.1, "generated_code": "def count_Primes_nums(n):\n    if not isinstance(n, int) or n < 0:\n        raise TypeError(\"Input must be a non-negative integer\")\n    \n    if n < 2:\n        return 0\n    \n    ctr = 0\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            ctr += 1\n    return ctr", "tests_source": "initial_tests.jsonl", "tests_task_id": "256", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:16:44.999289", "stage": "code_generation"}
{"task_id": "257", "round": 1, "temperature": 0.1, "generated_code": "def swap_numbers(a, b):\n    if isinstance(a, type(b)) or (a is None and b is None):\n        return (b, a)\n    else:\n        raise TypeError(\"Cannot swap values of different types\")", "tests_source": "initial_tests.jsonl", "tests_task_id": "257", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:16:50.934284", "stage": "code_generation"}
{"task_id": "258", "round": 1, "temperature": 0.1, "generated_code": "def count_odd(array_nums):\n    if not isinstance(array_nums, list):\n        raise TypeError(\"Input must be a list\")\n    return len(list(filter(lambda x: isinstance(x, int) and x % 2 != 0, array_nums)))", "tests_source": "initial_tests.jsonl", "tests_task_id": "258", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:17:02.474978", "stage": "code_generation"}
{"task_id": "259", "round": 1, "temperature": 0.1, "generated_code": "def maximize_elements(test_tup1, test_tup2):\n    if not isinstance(test_tup1, tuple) or not isinstance(test_tup2, tuple):\n        raise TypeError(\"unsupported operand type\")\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"not enough values to unpack\")\n    \n    res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\n                for tup1, tup2 in zip(test_tup1, test_tup2))\n    return res", "tests_source": "initial_tests.jsonl", "tests_task_id": "259", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:17:25.899081", "stage": "code_generation"}
{"task_id": "260", "round": 1, "temperature": 0.1, "generated_code": "def newman_prime(n):\n    if not isinstance(n, int) or n < 0:\n        raise TypeError(\"unsupported operand type\")\n    \n    if n == 0 or n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 8\n    elif n == 5:\n        return 16\n    elif n == 6:\n        return 32\n    elif n == 7:\n        return 64\n    elif n == 8:\n        return 128\n    \n    # For n > 8, we can use a loop to calculate the values\n    primes = [1, 1, 2, 4, 8, 16, 32, 64, 128]\n    for i in range(9, n + 1):\n        next_prime = 2 * primes[i - 1] + primes[i - 2]\n        primes.append(next_prime)\n    \n    return primes[n]", "tests_source": "initial_tests.jsonl", "tests_task_id": "260", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:17:35.633643", "stage": "code_generation"}
{"task_id": "261", "round": 1, "temperature": 0.1, "generated_code": "def division_elements(test_tup1, test_tup2):\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"not enough values to unpack\")\n    \n    res = []\n    for ele1, ele2 in zip(test_tup1, test_tup2):\n        if ele2 == 0:\n            raise ZeroDivisionError(\"division by zero\")\n        if not isinstance(ele1, (int, float)) or not isinstance(ele2, (int, float)):\n            raise TypeError(\"unsupported operand type\")\n        res.append(ele1 // ele2)\n    \n    return tuple(res)", "tests_source": "initial_tests.jsonl", "tests_task_id": "261", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:17:43.905424", "stage": "code_generation"}
{"task_id": "262", "round": 1, "temperature": 0.1, "generated_code": "def split_two_parts(list1, L):\n    if not isinstance(list1, list):\n        raise TypeError(\"unsupported operand type\")\n    if not isinstance(L, int):\n        raise TypeError(\"unsupported operand type\")\n    if L < 0 or L > len(list1):\n        raise IndexError(\"list index out of range\")\n    return list1[:L], list1[L:]", "tests_source": "initial_tests.jsonl", "tests_task_id": "262", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:18:12.364667", "stage": "code_generation"}
{"task_id": "263", "round": 1, "temperature": 0.1, "generated_code": "def merge_dict(d1, d2):\n    if not isinstance(d1, dict) or not isinstance(d2, dict):\n        raise TypeError(\"Both inputs must be dictionaries\")\n    \n    d = d1.copy()\n    d.update(d2)\n    return d", "tests_source": "initial_tests.jsonl", "tests_task_id": "263", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:18:21.587592", "stage": "code_generation"}
{"task_id": "264", "round": 1, "temperature": 0.1, "generated_code": "def dog_age(h_age):\n    if h_age < 0:\n        exit()\n    elif h_age <= 2:\n        d_age = h_age * 10.5\n    else:\n        d_age = 21 + (h_age - 2) * 4\n    return d_age", "tests_source": "initial_tests.jsonl", "tests_task_id": "264", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:19:03.243965", "stage": "code_generation"}
{"task_id": "265", "round": 1, "temperature": 0.1, "generated_code": "def list_split(S, step):\n    if not isinstance(S, list):\n        raise TypeError(\"S must be a list\")\n    if not isinstance(step, int):\n        raise TypeError(\"step must be an integer\")\n    if step <= 0:\n        raise ValueError(\"step must be a positive integer\")\n    \n    return [S[i::step] for i in range(step)]", "tests_source": "initial_tests.jsonl", "tests_task_id": "265", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:19:16.865717", "stage": "code_generation"}
{"task_id": "266", "round": 1, "temperature": 0.1, "generated_code": "def lateralsurface_cube(l):\n    if not isinstance(l, (int, float)):\n        raise TypeError(\"unsupported operand type(s) for *: 'int' and 'str'\")\n    if l < 0:\n        raise ValueError(\"Length must be a non-negative number\")\n    LSA = 4 * (l * l)\n    return LSA", "tests_source": "initial_tests.jsonl", "tests_task_id": "266", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:19:45.368925", "stage": "code_generation"}
{"task_id": "267", "round": 1, "temperature": 0.1, "generated_code": "def square_Sum(n):\n    if not isinstance(n, int):\n        raise TypeError(\"unsupported operand type\")\n    if n < 0:\n        raise ValueError(\"negative number\")\n    return int(n * (4 * n * n - 1) / 3)", "tests_source": "initial_tests.jsonl", "tests_task_id": "267", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:20:14.604438", "stage": "code_generation"}
{"task_id": "268", "round": 1, "temperature": 0.1, "generated_code": "def find_star_num(n):\n    if not isinstance(n, int):\n        raise TypeError(\"unsupported operand type\")\n    if n < 0:\n        raise ValueError(\"n must be a positive integer\")\n    return (6 * n * (n - 1) + 1)", "tests_source": "initial_tests.jsonl", "tests_task_id": "268", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:20:42.470156", "stage": "code_generation"}
{"task_id": "269", "round": 1, "temperature": 0.1, "generated_code": "def ascii_value(k):\n    if not isinstance(k, str) or len(k) != 1:\n        raise TypeError(f\"ord() expected a character, but string of length {len(k)} found\" if isinstance(k, str) else \"ord() expected a character, but non-string input found\")\n    return ord(k)", "tests_source": "initial_tests.jsonl", "tests_task_id": "269", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:21:14.801486", "stage": "code_generation"}
{"task_id": "270", "round": 1, "temperature": 0.1, "generated_code": "def sum_even_and_even_index(arr, n):\n    if not isinstance(arr, list) or not isinstance(n, int):\n        raise TypeError(\"Invalid input types\")\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n    \n    sum = 0\n    for i in range(0, n, 2):\n        if i < len(arr) and arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum", "tests_source": "initial_tests.jsonl", "tests_task_id": "270", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:21:36.993609", "stage": "code_generation"}
{"task_id": "271", "round": 1, "temperature": 0.1, "generated_code": "def even_Power_Sum(n):\n    if not isinstance(n, int):\n        raise TypeError(\"must be an integer\")\n    if n < 0:\n        raise ValueError(\"must be a non-negative integer\")\n    \n    sum = 0\n    for i in range(1, n + 1):\n        j = 2 * i\n        sum += j ** 5\n    return sum", "tests_source": "initial_tests.jsonl", "tests_task_id": "271", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:22:10.860127", "stage": "code_generation"}
{"task_id": "272", "round": 1, "temperature": 0.1, "generated_code": "def rear_extract(test_list):\n    if not isinstance(test_list, list):\n        raise TypeError(\"list indices must be integers or slices, not tuple\")\n    \n    res = []\n    for lis in test_list:\n        if not isinstance(lis, tuple):\n            raise TypeError(\"list indices must be integers or slices, not tuple\")\n        if len(lis) == 0:\n            raise IndexError(\"tuple index out of range\")\n        res.append(lis[-1])\n    \n    return res", "tests_source": "initial_tests.jsonl", "tests_task_id": "272", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:22:34.797911", "stage": "code_generation"}
{"task_id": "273", "round": 1, "temperature": 0.1, "generated_code": "def substract_elements(test_tup1, test_tup2):\n    if not isinstance(test_tup1, tuple) or not isinstance(test_tup2, tuple):\n        raise TypeError(\"unsupported operand type(s) for -: 'tuple' and 'non-tuple'\")\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"not enough values to unpack\")\n    return tuple(i - j for i, j in zip(test_tup1, test_tup2))", "tests_source": "initial_tests.jsonl", "tests_task_id": "273", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:22:44.703866", "stage": "code_generation"}
{"task_id": "274", "round": 1, "temperature": 0.1, "generated_code": "def even_binomial_Coeff_Sum(n):\n    if not isinstance(n, int):\n        raise TypeError(\"unsupported operand type\")\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n    return (1 << (n - 1)) if n > 0 else 1", "tests_source": "initial_tests.jsonl", "tests_task_id": "274", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:22:52.310867", "stage": "code_generation"}
{"task_id": "275", "round": 1, "temperature": 0.1, "generated_code": "def get_Position(a, n, m):\n    if a is None or not isinstance(a, list) or not isinstance(n, int) or not isinstance(m, int):\n        raise TypeError(\"Invalid input types\")\n    if m == 0:\n        raise ValueError(\"m cannot be zero\")\n    \n    for i in range(n):\n        a[i] = (a[i] // m + (a[i] % m != 0))\n    \n    result, maxx = -1, -1\n    for i in range(n - 1, -1, -1):\n        if maxx < a[i]:\n            maxx = a[i]\n            result = i\n            \n    return result + 1", "tests_source": "initial_tests.jsonl", "tests_task_id": "275", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:23:28.145310", "stage": "code_generation"}
{"task_id": "276", "round": 1, "temperature": 0.1, "generated_code": "def volume_cylinder(r, h):\n    if r < 0 or h < 0:\n        raise ValueError(\"Radius and height must be non-negative\")\n    volume = 3.1415 * r * r * h\n    return volume", "tests_source": "initial_tests.jsonl", "tests_task_id": "276", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:23:38.759097", "stage": "code_generation"}
{"task_id": "277", "round": 1, "temperature": 0.1, "generated_code": "def dict_filter(d, n):\n    if not isinstance(d, dict):\n        raise TypeError(\"Input must be a dictionary\")\n    result = {key: value for key, value in d.items() if isinstance(value, (int, float)) and value >= n}\n    return result", "tests_source": "initial_tests.jsonl", "tests_task_id": "277", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:24:07.886882", "stage": "code_generation"}
{"task_id": "278", "round": 1, "temperature": 0.1, "generated_code": "def count_first_elements(test_tup):\n    if not isinstance(test_tup, tuple):\n        raise TypeError(\"tuple expected\")\n    \n    for count, ele in enumerate(test_tup):\n        if isinstance(ele, tuple):\n            return count\n    return len(test_tup)", "tests_source": "initial_tests.jsonl", "tests_task_id": "278", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:24:47.973231", "stage": "code_generation"}
{"task_id": "279", "round": 1, "temperature": 0.1, "generated_code": "def is_num_decagonal(n):\n    if not isinstance(n, int):\n        raise TypeError(\"unsupported operand type\")\n    if n < 0:\n        raise ValueError(\"negative number\")\n    return 4 * n * n - 3 * n", "tests_source": "initial_tests.jsonl", "tests_task_id": "279", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:24:56.279853", "stage": "code_generation"}
{"task_id": "280", "round": 1, "temperature": 0.1, "generated_code": "def sequential_search(dlist, item):\n    if dlist is None:\n        raise TypeError(\"unsupported operand type\")\n    \n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos += 1\n    return found, pos", "tests_source": "initial_tests.jsonl", "tests_task_id": "280", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:25:28.511960", "stage": "code_generation"}
{"task_id": "281", "round": 1, "temperature": 0.1, "generated_code": "def all_unique(test_list):\n    if not isinstance(test_list, list):\n        raise TypeError(\"Input must be a list\")\n    return len(test_list) == len(set(test_list))", "tests_source": "initial_tests.jsonl", "tests_task_id": "281", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:25:34.528675", "stage": "code_generation"}
{"task_id": "282", "round": 1, "temperature": 0.1, "generated_code": "def sub_list(nums1, nums2):\n    if not isinstance(nums1, list) or not isinstance(nums2, list):\n        raise TypeError(\"unsupported operand type\")\n    if len(nums1) != len(nums2):\n        raise ValueError(\"not enough values to unpack\")\n    result = map(lambda x, y: x - y, nums1, nums2)\n    return list(result)", "tests_source": "initial_tests.jsonl", "tests_task_id": "282", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:25:43.037893", "stage": "code_generation"}
{"task_id": "283", "round": 1, "temperature": 0.1, "generated_code": "def validate(n):\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer.\")\n    \n    digit_count = [0] * 10\n    temp = n\n    \n    while temp > 0:\n        digit_count[temp % 10] += 1\n        temp //= 10\n    \n    for i in range(10):\n        if digit_count[i] > i:\n            return False\n            \n    return True", "tests_source": "initial_tests.jsonl", "tests_task_id": "283", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:26:07.359459", "stage": "code_generation"}
{"task_id": "284", "round": 1, "temperature": 0.1, "generated_code": "def check_element(lst, element):\n    if lst is None or element is None:\n        raise TypeError(\"Input cannot be None\")\n    return all(v == element for v in lst)", "tests_source": "initial_tests.jsonl", "tests_task_id": "284", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:26:32.988808", "stage": "code_generation"}
{"task_id": "285", "round": 1, "temperature": 0.1, "generated_code": "import re\n\ndef text_match_two_three(text):\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n    \n    patterns = r'ab{2,3}'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "tests_source": "initial_tests.jsonl", "tests_task_id": "285", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:26:47.310243", "stage": "code_generation"}
{"task_id": "286", "round": 1, "temperature": 0.1, "generated_code": "def max_sub_array_sum_repeated(a, n, k):\n    if a is None or n is None or k is None:\n        raise TypeError(\"Input values cannot be None\")\n    if n < 0:\n        raise ValueError(\"Array length cannot be negative\")\n    \n    if n == 0 or k == 0:\n        return 0\n    \n    max_so_far = -2147483648\n    max_ending_here = 0\n    \n    total_sum = sum(a)\n    max_prefix_sum = float('-inf')\n    max_suffix_sum = float('-inf')\n    \n    current_prefix_sum = 0\n    for i in range(n):\n        current_prefix_sum += a[i]\n        max_prefix_sum = max(max_prefix_sum, current_prefix_sum)\n    \n    current_suffix_sum = 0\n    for i in range(n-1, -1, -1):\n        current_suffix_sum += a[i]\n        max_suffix_sum = max(max_suffix_sum, current_suffix_sum)\n    \n    for i in range(n * k):\n        max_ending_here += a[i % n]\n        max_so_far = max(max_so_far, max_ending_here)\n        if max_ending_here < 0:\n            max_ending_here = 0\n    \n    if k > 1:\n        max_so_far = max(max_so_far, max_suffix_sum + max_prefix_sum + (k - 2) * total_sum)\n    \n    return max_so_far", "tests_source": "initial_tests.jsonl", "tests_task_id": "286", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:27:17.470937", "stage": "code_generation"}
{"task_id": "287", "round": 1, "temperature": 0.1, "generated_code": "def square_Sum(n):\n    if not isinstance(n, int):\n        raise TypeError(\"Input should be an integer\")\n    if n < 0:\n        raise ValueError(\"negative number\")\n    return int(2 * n * (n + 1) * (2 * n + 1) / 3)", "tests_source": "initial_tests.jsonl", "tests_task_id": "287", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:27:43.103422", "stage": "code_generation"}
{"task_id": "288", "round": 1, "temperature": 0.1, "generated_code": "def modular_inverse(arr, N, P):\n    if not isinstance(arr, list) or not isinstance(N, int) or not isinstance(P, int):\n        raise TypeError(\"unsupported operand type\")\n    if P <= 1:\n        raise ValueError(\"must be greater than 1\")\n    \n    current_element = 0\n    for i in range(N):\n        if arr[i] < 0 or arr[i] >= P:\n            continue\n        if (arr[i] * arr[i]) % P == 1:\n            current_element += 1\n    return current_element", "tests_source": "initial_tests.jsonl", "tests_task_id": "288", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:28:17.561586", "stage": "code_generation"}
{"task_id": "289", "round": 1, "temperature": 0.1, "generated_code": "def odd_Days(N): \n    if not isinstance(N, int):\n        raise TypeError(\"Input must be an integer\")\n    \n    if N < 0:\n        raise ValueError(\"Year cannot be negative\")\n    \n    hund1 = N // 100\n    hund4 = N // 400\n    leap = N // 4\n    ordd = N - leap \n    \n    if hund1: \n        ordd += hund1 \n        leap -= hund1 \n    if hund4: \n        ordd -= hund4 \n        leap += hund4 \n    \n    days = ordd + leap * 2\n    odd = days % 7\n    return odd", "tests_source": "initial_tests.jsonl", "tests_task_id": "289", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:29:04.471394", "stage": "code_generation"}
{"task_id": "290", "round": 1, "temperature": 0.1, "generated_code": "def max_length(list1):\n    if not isinstance(list1, list):\n        raise TypeError(\"Input must be a list of lists\")\n    \n    if not list1:\n        return (0, [])\n    \n    max_list = []\n    max_length = 0\n    \n    for lst in list1:\n        if not isinstance(lst, list):\n            raise TypeError(\"Input must be a list of lists\")\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n            \n    return (max_length, max_list)", "tests_source": "initial_tests.jsonl", "tests_task_id": "290", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:29:22.069715", "stage": "code_generation"}
{"task_id": "291", "round": 1, "temperature": 0.1, "generated_code": "def count_no_of_ways(n, k):\n    if not isinstance(n, int) or not isinstance(k, int):\n        raise TypeError(\"Both n and k must be integers.\")\n    if n < 0 or k < 0:\n        raise ValueError(\"Both n and k must be non-negative.\")\n    \n    if n == 0:\n        return 0\n    if k == 0:\n        return 0\n    if n == 1:\n        return k\n    if n == 2:\n        return k * k\n    \n    dp = [0] * (n + 1)\n    dp[1] = k\n    dp[2] = k * k\n    mod = 1000000007\n    \n    for i in range(3, n + 1):\n        dp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod\n    \n    return dp[n]", "tests_source": "initial_tests.jsonl", "tests_task_id": "291", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:29:35.468154", "stage": "code_generation"}
{"task_id": "292", "round": 1, "temperature": 0.1, "generated_code": "def find(n, m):\n    if m == 0:\n        raise ZeroDivisionError(\"division by zero\")\n    return n // m", "tests_source": "initial_tests.jsonl", "tests_task_id": "292", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:29:55.172672", "stage": "code_generation"}
{"task_id": "293", "round": 1, "temperature": 0.1, "generated_code": "import math\n\ndef otherside_rightangle(w, h):\n    if not isinstance(w, (int, float)) or not isinstance(h, (int, float)):\n        raise TypeError(\"unsupported operand type\")\n    return math.sqrt(w * w + h * h)", "tests_source": "initial_tests.jsonl", "tests_task_id": "293", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:30:10.289200", "stage": "code_generation"}
{"task_id": "294", "round": 1, "temperature": 0.1, "generated_code": "def max_val(listval):\n    if not isinstance(listval, list):\n        raise TypeError(\"Input must be a list\")\n    \n    max_value = None\n    for i in listval:\n        if isinstance(i, int):\n            if max_value is None or i > max_value:\n                max_value = i\n        elif isinstance(i, list):\n            raise TypeError(\"Nested lists are not allowed\")\n    \n    if max_value is None:\n        raise ValueError(\"max() arg is an empty sequence\")\n    \n    return max_value", "tests_source": "initial_tests.jsonl", "tests_task_id": "294", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:30:39.289876", "stage": "code_generation"}
{"task_id": "295", "round": 1, "temperature": 0.1, "generated_code": "def sum_div(number):\n    if not isinstance(number, int):\n        raise TypeError(\"unsupported operand type\")\n    if number < 0:\n        raise ValueError(\"must be greater than 0\")\n    \n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    \n    divisors = [1]\n    for i in range(2, number):\n        if (number % i) == 0:\n            divisors.append(i)\n    return sum(divisors)", "tests_source": "initial_tests.jsonl", "tests_task_id": "295", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:31:16.352458", "stage": "code_generation"}
{"task_id": "296", "round": 1, "temperature": 0.1, "generated_code": "def get_Inv_Count(arr, n):\n    if arr is None or not isinstance(arr, list) or len(arr) != n:\n        raise TypeError(\"unsupported operand type\")\n    \n    inv_count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count", "tests_source": "initial_tests.jsonl", "tests_task_id": "296", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:31:25.520535", "stage": "code_generation"}
{"task_id": "297", "round": 1, "temperature": 0.1, "generated_code": "def flatten_list(list1):\n    if not isinstance(list1, list):\n        raise TypeError(\"Expected a list\")\n    \n    result_list = []\n    stack = [list1]\n    \n    while stack:\n        current = stack.pop()\n        for item in reversed(current):\n            if isinstance(item, list):\n                stack.append(item)\n            else:\n                result_list.append(item)\n    \n    return result_list", "tests_source": "initial_tests.jsonl", "tests_task_id": "297", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:31:44.304790", "stage": "code_generation"}
{"task_id": "298", "round": 1, "temperature": 0.1, "generated_code": "def intersection_nested_lists(l1, l2):\n    if not isinstance(l1, list) or not isinstance(l2, list):\n        raise TypeError(\"expected list\")\n    \n    result = [[n for n in lst if n in l1] for lst in l2]\n    return result", "tests_source": "initial_tests.jsonl", "tests_task_id": "298", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:31:57.584333", "stage": "code_generation"}
{"task_id": "299", "round": 1, "temperature": 0.1, "generated_code": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    if not stdata:\n        return None\n    \n    temp = defaultdict(int)\n    for entry in stdata:\n        if not isinstance(entry, tuple) or len(entry) != 2:\n            raise ValueError(\"too many values to unpack\")\n        name, marks = entry\n        if not isinstance(name, str):\n            raise TypeError(\"must be str, not {}\".format(type(name).__name__))\n        if not isinstance(marks, (int, float)):\n            raise TypeError(\"must be int or float, not {}\".format(type(marks).__name__))\n        temp[name] += marks\n    \n    return max(temp.items(), key=lambda x: (x[1], x[0]))", "tests_source": "initial_tests.jsonl", "tests_task_id": "299", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:32:09.060789", "stage": "code_generation"}
{"task_id": "300", "round": 1, "temperature": 0.1, "generated_code": "def count_binary_seq(n):\n    if not isinstance(n, int) or n < 0:\n        raise TypeError(\"unsupported operand type\")\n    \n    nCr = 1\n    res = 1\n    for r in range(1, n + 1):\n        nCr = (nCr * (n + 1 - r)) // r\n        res += nCr * nCr\n    return res", "tests_source": "initial_tests.jsonl", "tests_task_id": "300", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:32:50.019100", "stage": "code_generation"}
{"task_id": "301", "round": 1, "temperature": 0.1, "generated_code": "def dict_depth(d):\n    if not isinstance(d, dict):\n        raise TypeError(\"Expected a dictionary\")\n    return 1 + (max(map(dict_depth, d.values())) if d else 0)", "tests_source": "initial_tests.jsonl", "tests_task_id": "301", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:32:59.383745", "stage": "code_generation"}
{"task_id": "302", "round": 1, "temperature": 0.1, "generated_code": "def set_Bit_Number(n):\n    if not isinstance(n, int) or n < 0:\n        return 0\n    if n == 0:\n        return 0\n    msb = 0\n    while n > 0:\n        n = n >> 1\n        msb += 1\n    return 1 << (msb - 1)", "tests_source": "initial_tests.jsonl", "tests_task_id": "302", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:33:26.013209", "stage": "code_generation"}
{"task_id": "303", "round": 1, "temperature": 0.1, "generated_code": "def solve(a, n):\n    if not isinstance(a, list) or not isinstance(n, int):\n        raise TypeError(\"Invalid input types\")\n    if n < 0:\n        raise ValueError(\"Length of array cannot be negative\")\n    \n    if n == 0:\n        return True\n    if n == 1:\n        return True\n    \n    mx = -float('inf')\n    for j in range(1, n):\n        if mx > a[j]:\n            return False\n        mx = max(mx, a[j - 1])\n    \n    return True", "tests_source": "initial_tests.jsonl", "tests_task_id": "303", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:33:56.785481", "stage": "code_generation"}
{"task_id": "304", "round": 1, "temperature": 0.1, "generated_code": "def find_Element(arr, ranges, rotations, index):\n    if not arr:\n        return None\n    if index < 0 or index >= len(arr):\n        raise IndexError(\"list index out of range\")\n    \n    for left, right in ranges:\n        if left > right or left < 0 or right >= len(arr):\n            raise ValueError(\"Invalid ranges\")\n    \n    for i in range(rotations - 1, -1, -1):\n        left = ranges[i][0]\n        right = ranges[i][1]\n        if left <= index <= right:\n            if index == left:\n                index = right\n            else:\n                index -= 1\n    return arr[index]", "tests_source": "initial_tests.jsonl", "tests_task_id": "304", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:34:16.701768", "stage": "code_generation"}
{"task_id": "305", "round": 1, "temperature": 0.1, "generated_code": "import re\n\ndef start_withp(words):\n    if not isinstance(words, list):\n        raise TypeError(\"Input must be a list\")\n    \n    for w in words:\n        if not isinstance(w, str):\n            raise TypeError(\"List must contain only strings\")\n        \n        m = re.match(r\"(\\bp\\w+)\\s+(\\bp\\w+)\", w, re.IGNORECASE)\n        if m:\n            return m.groups()\n    \n    return None", "tests_source": "initial_tests.jsonl", "tests_task_id": "305", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:34:50.752381", "stage": "code_generation"}
{"task_id": "306", "round": 1, "temperature": 0.1, "generated_code": "def max_sum_increasing_subseq(a, n, index, k):\n    if n == 0:\n        return 0\n    if index >= n or k >= n or k <= index:\n        raise IndexError(\"list index out of range\")\n    if k <= index:\n        raise ValueError(\"k must be greater than index\")\n\n    dp = [0] * n\n    dp[index] = a[index]\n\n    for i in range(index + 1):\n        if a[i] > a[index]:\n            dp[i] = dp[index] + a[i]\n        else:\n            dp[i] = a[i]\n\n    max_sum = dp[index]\n    for j in range(index + 1, n):\n        if a[j] > a[index]:\n            max_sum = max(max_sum, dp[index] + a[j])\n\n    return max_sum", "tests_source": "initial_tests.jsonl", "tests_task_id": "306", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:35:06.519752", "stage": "code_generation"}
{"task_id": "307", "round": 1, "temperature": 0.1, "generated_code": "def colon_tuplex(tuplex, m, n):\n    if not isinstance(tuplex, tuple) or len(tuplex) <= m or not isinstance(tuplex[m], list):\n        raise TypeError(\"object is not subscriptable\")\n    \n    tuplex_colon = list(tuplex)\n    tuplex_colon[m] = tuplex_colon[m] + [n]\n    return tuple(tuplex_colon)", "tests_source": "initial_tests.jsonl", "tests_task_id": "307", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:35:34.427312", "stage": "code_generation"}
{"task_id": "308", "round": 1, "temperature": 0.1, "generated_code": "def large_product(nums1, nums2, N):\n    if not isinstance(nums1, list) or not isinstance(nums2, list):\n        raise TypeError(\"unsupported operand type\")\n    if not isinstance(N, int) or N <= 0:\n        raise ValueError(\"N must be a positive integer\")\n    \n    products = [x * y for x in nums1 for y in nums2]\n    return sorted(products, reverse=True)[:N]", "tests_source": "initial_tests.jsonl", "tests_task_id": "308", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:36:02.398768", "stage": "code_generation"}
{"task_id": "309", "round": 1, "temperature": 0.1, "generated_code": "def maximum(a, b):\n    if not isinstance(a, (int, float)) or not isinstance(b, (int, float)):\n        raise TypeError(\"unsupported operand type(s) for maximum: '{}' and '{}'\".format(type(a).__name__, type(b).__name__))\n    return a if a >= b else b", "tests_source": "initial_tests.jsonl", "tests_task_id": "309", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:36:21.837410", "stage": "code_generation"}
{"task_id": "310", "round": 1, "temperature": 0.1, "generated_code": "def string_to_tuple(str1):\n    if not isinstance(str1, str):\n        raise TypeError(\"expected a string\")\n    return tuple(x for x in str1 if not x.isspace())", "tests_source": "initial_tests.jsonl", "tests_task_id": "310", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:36:28.579157", "stage": "code_generation"}
{"task_id": "311", "round": 1, "temperature": 0.1, "generated_code": "def set_left_most_unset_bit(n):\n    if not isinstance(n, int):\n        raise TypeError(\"unsupported operand type\")\n    \n    if not (n & (n + 1)):\n        return n\n    \n    pos, temp, count = -1, n, 0\n    while temp:\n        if not (temp & 1):\n            pos = count\n        count += 1\n        temp >>= 1\n    \n    if pos == -1:\n        return n\n    \n    return n | (1 << pos)", "tests_source": "initial_tests.jsonl", "tests_task_id": "311", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:36:40.354461", "stage": "code_generation"}
{"task_id": "312", "round": 1, "temperature": 0.1, "generated_code": "import math\n\ndef volume_cone(r, h):\n    if r < 0 or h < 0:\n        raise ValueError(\"Radius and height must be non-negative\")\n    volume = (1.0 / 3) * math.pi * r * r * h\n    return volume", "tests_source": "initial_tests.jsonl", "tests_task_id": "312", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:37:25.227792", "stage": "code_generation"}
{"task_id": "313", "round": 1, "temperature": 0.1, "generated_code": "def pos_nos(list1):\n    if not isinstance(list1, (list, tuple)):\n        raise TypeError(\"list argument must be iterable\")\n    \n    for num in list1:\n        if num >= 0:\n            return num\n    return None", "tests_source": "initial_tests.jsonl", "tests_task_id": "313", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:37:31.676947", "stage": "code_generation"}
{"task_id": "314", "round": 1, "temperature": 0.1, "generated_code": "def max_sum_rectangular_grid(grid, n):\n    if not isinstance(grid, list) or len(grid) != 2 or any(not isinstance(row, list) for row in grid) or any(len(row) != n for row in grid):\n        raise ValueError(\"must be a 2xN grid\")\n    if n == 0:\n        raise IndexError(\"list index out of range\")\n\n    incl = max(grid[0][0], grid[1][0])\n    excl = 0\n\n    for i in range(1, n):\n        excl_new = max(excl, incl)\n        incl = excl + max(grid[0][i], grid[1][i])\n        excl = excl_new\n\n    return max(excl, incl)", "tests_source": "initial_tests.jsonl", "tests_task_id": "314", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:37:42.395046", "stage": "code_generation"}
{"task_id": "315", "round": 1, "temperature": 0.1, "generated_code": "def find_Max_Len_Even(str):\n    if not isinstance(str, str):\n        raise TypeError(\"Input must be a string\")\n    \n    n = len(str)\n    i = 0\n    currlen = 0\n    maxlen = 0\n    st = -1\n    \n    while i < n:\n        if str[i] == ' ':\n            if currlen % 2 == 0 and currlen > 0:\n                if maxlen < currlen:\n                    maxlen = currlen\n                    st = i - currlen\n            currlen = 0\n        else:\n            currlen += 1\n        i += 1\n    \n    if currlen % 2 == 0 and currlen > 0:\n        if maxlen < currlen:\n            maxlen = currlen\n            st = i - currlen\n    \n    if st == -1:\n        return \"-1\"\n    \n    return str[st: st + maxlen]", "tests_source": "initial_tests.jsonl", "tests_task_id": "315", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:38:22.536063", "stage": "code_generation"}
{"task_id": "316", "round": 1, "temperature": 0.1, "generated_code": "def find_last_occurrence(A, x):\n    if A is None or not isinstance(A, list) or (x is not None and not isinstance(x, (int, float))):\n        raise TypeError(\"Invalid input\")\n    \n    (left, right) = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            result = mid\n            left = mid + 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result", "tests_source": "initial_tests.jsonl", "tests_task_id": "316", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:38:48.944859", "stage": "code_generation"}
{"task_id": "317", "round": 1, "temperature": 0.1, "generated_code": "from itertools import groupby\n\ndef modified_encode(alist):\n    if not isinstance(alist, list):\n        raise TypeError(\"expected a list\")\n    \n    def ctr_ele(el):\n        if len(el) > 1: \n            return [len(el), el[0]]\n        else: \n            return el[0]\n    \n    return [ctr_ele(list(group)) for key, group in groupby(alist)]", "tests_source": "initial_tests.jsonl", "tests_task_id": "317", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:38:57.534954", "stage": "code_generation"}
{"task_id": "318", "round": 1, "temperature": 0.1, "generated_code": "def max_volume(s):\n    if not isinstance(s, int):\n        raise TypeError(\"unsupported operand type\")\n    if s < 1:\n        raise ValueError(\"must be greater than or equal to 1\")\n    \n    maxvalue = 0\n    for i in range(1, s - 1):\n        for j in range(1, s - i):\n            k = s - i - j\n            if k > 0:\n                maxvalue = max(maxvalue, i * j * k)\n    return maxvalue", "tests_source": "initial_tests.jsonl", "tests_task_id": "318", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:39:25.002098", "stage": "code_generation"}
{"task_id": "319", "round": 1, "temperature": 0.1, "generated_code": "import re\n\ndef find_long_word(text):\n    if not isinstance(text, str):\n        raise TypeError(\"expected string or bytes-like object\")\n    return re.findall(r\"\\b\\w{5}\\b\", text)", "tests_source": "initial_tests.jsonl", "tests_task_id": "319", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:39:44.842954", "stage": "code_generation"}
{"task_id": "320", "round": 1, "temperature": 0.1, "generated_code": "def sum_difference(n):\n    if not isinstance(n, int) or n < 0:\n        raise TypeError(\"unsupported operand type\")\n    \n    sumofsquares = 0\n    squareofsum = 0\n    for num in range(1, n + 1):\n        sumofsquares += num * num\n        squareofsum += num\n    squareofsum = squareofsum ** 2\n    return squareofsum - sumofsquares", "tests_source": "initial_tests.jsonl", "tests_task_id": "320", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:40:09.442725", "stage": "code_generation"}
{"task_id": "321", "round": 1, "temperature": 0.1, "generated_code": "def find_demlo(s): \n    if not isinstance(s, str):\n        raise TypeError(\"expected a string\")\n    \n    if s == \"0\" or s == \"\":\n        return \"\"\n    \n    l = int(s)\n    res = \"\" \n    for i in range(1, l + 1): \n        res += str(i) \n    for i in range(l - 1, 0, -1): \n        res += str(i) \n    return res", "tests_source": "initial_tests.jsonl", "tests_task_id": "321", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:40:32.854638", "stage": "code_generation"}
{"task_id": "322", "round": 1, "temperature": 0.1, "generated_code": "def position_min(list1):\n    if not isinstance(list1, list):\n        raise TypeError(\"must be a list\")\n    if len(list1) == 0:\n        return []\n    \n    min_val = min(list1)\n    min_result = [i for i, j in enumerate(list1) if j == min_val]\n    return min_result", "tests_source": "initial_tests.jsonl", "tests_task_id": "322", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:40:57.296397", "stage": "code_generation"}
{"task_id": "323", "round": 1, "temperature": 0.1, "generated_code": "def right_rotate(arr, n, out_of_place, cur):\n    temp = arr[cur]\n    for i in range(cur, out_of_place, -1):\n        arr[i] = arr[i - 1]\n    arr[out_of_place] = temp\n    return arr\n\ndef re_arrange(arr, n):\n    if arr is None or n is None:\n        raise TypeError(\"Input cannot be None\")\n    if n < 0:\n        raise ValueError(\"Input size cannot be negative\")\n    \n    out_of_place = -1\n    for index in range(n):\n        if (out_of_place >= 0):\n            if ((arr[index] >= 0 and arr[out_of_place] < 0) or\n                (arr[index] < 0 and arr[out_of_place] >= 0)):\n                arr = right_rotate(arr, n, out_of_place, index)\n                if (index - out_of_place > 2):\n                    out_of_place += 2\n                else:\n                    out_of_place = -1\n        if (out_of_place == -1):\n            if ((arr[index] >= 0 and index % 2 == 0) or\n                (arr[index] < 0 and index % 2 == 1)):\n                out_of_place = index\n    return arr", "tests_source": "initial_tests.jsonl", "tests_task_id": "323", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:41:31.669926", "stage": "code_generation"}
{"task_id": "324", "round": 1, "temperature": 0.1, "generated_code": "def sum_of_alternates(test_tuple):\n    if not isinstance(test_tuple, tuple):\n        raise TypeError(\"unsupported operand type\")\n    \n    sum1 = 0\n    sum2 = 0\n    for idx, ele in enumerate(test_tuple):\n        if not isinstance(ele, tuple):\n            raise TypeError(\"unsupported operand type\")\n        if idx % 2:\n            sum1 += sum(ele)\n        else:\n            sum2 += sum(ele)\n    return (sum1, sum2)", "tests_source": "initial_tests.jsonl", "tests_task_id": "324", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:42:00.571154", "stage": "code_generation"}
{"task_id": "325", "round": 1, "temperature": 0.1, "generated_code": "def get_Min_Squares(n):\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer\")\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    \n    if n == 0:\n        return 0\n    if n <= 3:\n        return n\n    \n    res = n  # Maximum squares needed is n (1*1 + 1*1 + ...)\n    \n    for x in range(1, int(n**0.5) + 1):\n        temp = x * x\n        if temp > n:\n            break\n        else:\n            res = min(res, 1 + get_Min_Squares(n - temp))\n    \n    return res", "tests_source": "initial_tests.jsonl", "tests_task_id": "325", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:42:35.347961", "stage": "code_generation"}
{"task_id": "326", "round": 1, "temperature": 0.1, "generated_code": "from collections import defaultdict \n\ndef most_occurrences(test_list):\n    if not isinstance(test_list, list):\n        raise TypeError(\"Input must be a list\")\n    \n    temp = defaultdict(int)\n    for sub in test_list:\n        if not isinstance(sub, str):\n            raise TypeError(\"All elements in the list must be strings\")\n        for wrd in sub.split():\n            temp[wrd] += 1\n            \n    if not temp:\n        return \"\"\n    \n    res = max(temp, key=temp.get)\n    return str(res)", "tests_source": "initial_tests.jsonl", "tests_task_id": "326", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:42:42.375175", "stage": "code_generation"}
{"task_id": "327", "round": 1, "temperature": 0.1, "generated_code": "def check_isosceles(x, y, z):\n    if not all(isinstance(side, (int, float)) for side in (x, y, z)):\n        raise TypeError(\"All sides must be numeric.\")\n    if x < 0 or y < 0 or z < 0:\n        raise ValueError(\"Sides must be non-negative.\")\n    \n    return x == y or y == z or z == x", "tests_source": "initial_tests.jsonl", "tests_task_id": "327", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:42:49.679786", "stage": "code_generation"}
{"task_id": "328", "round": 1, "temperature": 0.1, "generated_code": "def rotate_left(list1, m, n):\n    if not isinstance(m, int) or not isinstance(n, int):\n        raise TypeError(\"list indices must be integers or slices\")\n    if m < 0 or m >= len(list1):\n        raise IndexError(\"list index out of range\")\n    if n < 0 or n > len(list1):\n        raise IndexError(\"list index out of range\")\n    \n    return list1[m:] + list1[:m]", "tests_source": "initial_tests.jsonl", "tests_task_id": "328", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:43:02.277320", "stage": "code_generation"}
{"task_id": "329", "round": 1, "temperature": 0.1, "generated_code": "def neg_count(lst):\n    if not isinstance(lst, list):\n        raise TypeError(\"unsupported operand type\")\n    \n    neg_count = 0\n    for num in lst:\n        if not isinstance(num, (int, float)):\n            raise TypeError(\"unsupported operand type\")\n        if num <= 0:\n            neg_count += 1\n    return neg_count", "tests_source": "initial_tests.jsonl", "tests_task_id": "329", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:43:21.347031", "stage": "code_generation"}
{"task_id": "330", "round": 1, "temperature": 0.1, "generated_code": "import re\n\ndef find_char(text):\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n    return re.findall(r\"\\b\\w{3,5}\\b\", text)", "tests_source": "initial_tests.jsonl", "tests_task_id": "330", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:43:27.354416", "stage": "code_generation"}
{"task_id": "331", "round": 1, "temperature": 0.1, "generated_code": "def count_unset_bits(n):\n    if not isinstance(n, int):\n        raise TypeError(\"unsupported operand type\")\n    if n < 0:\n        raise ValueError(\"negative number\")\n    \n    count = 0\n    bits = n.bit_length()  # Get the number of bits required to represent n\n    for i in range(bits):\n        if (n & (1 << i)) == 0:\n            count += 1\n    return count + (1 if n == 0 else 0)  # Add 1 for the unset bit in case of 0", "tests_source": "initial_tests.jsonl", "tests_task_id": "331", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:43:45.583633", "stage": "code_generation"}
{"task_id": "332", "round": 1, "temperature": 0.1, "generated_code": "def char_frequency(str1):\n    if not isinstance(str1, str):\n        raise TypeError(\"expected string or bytes-like object\")\n    \n    frequency_dict = {}\n    for char in str1:\n        frequency_dict[char] = frequency_dict.get(char, 0) + 1\n    return frequency_dict", "tests_source": "initial_tests.jsonl", "tests_task_id": "332", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:43:53.315793", "stage": "code_generation"}
{"task_id": "333", "round": 1, "temperature": 0.1, "generated_code": "def Sort(sub_li):\n    if not isinstance(sub_li, list) or not all(isinstance(i, list) for i in sub_li):\n        raise TypeError(\"expected a list of lists\")\n    sub_li.sort(key=lambda x: x[1])\n    return sub_li", "tests_source": "initial_tests.jsonl", "tests_task_id": "333", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:44:01.226629", "stage": "code_generation"}
{"task_id": "334", "round": 1, "temperature": 0.1, "generated_code": "def check_Validity(a, b, c):\n    if not all(isinstance(side, (int, float)) for side in (a, b, c)):\n        raise TypeError(\"unsupported operand type\")\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n    return (a + b > c) and (a + c > b) and (b + c > a)", "tests_source": "initial_tests.jsonl", "tests_task_id": "334", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:44:13.514433", "stage": "code_generation"}
{"task_id": "335", "round": 1, "temperature": 0.1, "generated_code": "def ap_sum(a, n, d):\n    if not isinstance(a, (int, float)) or not isinstance(n, int) or not isinstance(d, (int, float)):\n        raise TypeError(\"unsupported operand type\")\n    if n < 0:\n        return 0\n    total = (n * (2 * a + (n - 1) * d)) / 2\n    return total", "tests_source": "initial_tests.jsonl", "tests_task_id": "335", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:44:20.584242", "stage": "code_generation"}
{"task_id": "336", "round": 1, "temperature": 0.1, "generated_code": "def check_monthnum(monthname1):\n    if not isinstance(monthname1, str) or monthname1.strip() == \"\":\n        return False\n    monthname1 = monthname1.strip()\n    return monthname1 == \"February\"", "tests_source": "initial_tests.jsonl", "tests_task_id": "336", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:44:31.497651", "stage": "code_generation"}
{"task_id": "337", "round": 1, "temperature": 0.1, "generated_code": "import re\n\ndef text_match_word(text):\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n    \n    patterns = r'\\w+\\S*$'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "tests_source": "initial_tests.jsonl", "tests_task_id": "337", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:44:53.666422", "stage": "code_generation"}
{"task_id": "338", "round": 1, "temperature": 0.1, "generated_code": "def count_Substring_With_Equal_Ends(s):\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n    \n    result = 0\n    n = len(s)\n    \n    for i in range(n):\n        count = 1  # Count the current character\n        for j in range(i + 1, n):\n            if s[i] == s[j]:\n                count += 1\n                result += count\n            else:\n                break\n        result += count  # Add the single character substring\n    \n    return result", "tests_source": "initial_tests.jsonl", "tests_task_id": "338", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:45:03.504259", "stage": "code_generation"}
{"task_id": "339", "round": 1, "temperature": 0.1, "generated_code": "def find_Divisor(x, y):\n    if not isinstance(x, int) or not isinstance(y, int):\n        raise TypeError(\"unsupported operand type\")\n    \n    if x == y:\n        return x\n    \n    start = min(x, y)\n    end = max(x, y)\n    \n    max_divisor = start\n    for i in range(start, end + 1):\n        if i == 0:\n            continue\n        if start % i == 0:\n            max_divisor = i\n    \n    return max_divisor", "tests_source": "initial_tests.jsonl", "tests_task_id": "339", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:45:23.693274", "stage": "code_generation"}
{"task_id": "340", "round": 1, "temperature": 0.1, "generated_code": "def sum_three_smallest_nums(lst):\n    if not isinstance(lst, list):\n        raise TypeError(\"unsupported operand type\")\n    positive_nums = sorted(x for x in lst if x > 0)\n    if len(positive_nums) < 3:\n        return sum(positive_nums)\n    return sum(positive_nums[:3])", "tests_source": "initial_tests.jsonl", "tests_task_id": "340", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:45:34.012045", "stage": "code_generation"}
{"task_id": "341", "round": 1, "temperature": 0.1, "generated_code": "def set_to_tuple(s):\n    if not isinstance(s, set):\n        raise TypeError(\"Input must be a set\")\n    return tuple(sorted(s, key=lambda x: (isinstance(x, str), x)))", "tests_source": "initial_tests.jsonl", "tests_task_id": "341", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:46:14.238342", "stage": "code_generation"}
{"task_id": "342", "round": 1, "temperature": 0.1, "generated_code": "from heapq import heappop, heappush\n\nclass Node:\n    def __init__(self, value, list_num, index):\n        self.value = value\n        self.list_num = list_num\n        self.index = index\n        \n    def __lt__(self, other):\n        return self.value < other.value\n\ndef find_minimum_range(lists):\n    if not all(isinstance(lst, list) for lst in lists):\n        raise TypeError(\"object of type 'int' has no len()\")\n    \n    for lst in lists:\n        if not lst:\n            raise IndexError(\"list index out of range\")\n    \n    high = float('-inf')\n    p = (0, float('inf'))\n    pq = []\n    \n    for i in range(len(lists)):\n        heappush(pq, Node(lists[i][0], i, 0))\n        high = max(high, lists[i][0])\n        \n    while True:\n        top = heappop(pq)\n        low = top.value\n        i = top.list_num\n        j = top.index\n        \n        if high - low < p[1] - p[0]:\n            p = (low, high)\n        \n        if j == len(lists[i]) - 1:\n            return p\n        \n        heappush(pq, Node(lists[i][j + 1], i, j + 1))\n        high = max(high, lists[i][j + 1])", "tests_source": "initial_tests.jsonl", "tests_task_id": "342", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:46:28.721298", "stage": "code_generation"}
{"task_id": "343", "round": 1, "temperature": 0.1, "generated_code": "def dig_let(s):\n    if not isinstance(s, str):\n        raise TypeError(\"expected a string\")\n    \n    d = l = 0\n    for c in s:\n        if c.isdigit():\n            d += 1\n        elif c.isalpha():\n            l += 1\n    return (l, d)", "tests_source": "initial_tests.jsonl", "tests_task_id": "343", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:47:07.783527", "stage": "code_generation"}
{"task_id": "344", "round": 1, "temperature": 0.1, "generated_code": "def count_Odd_Squares(n, m):\n    if not isinstance(n, int) or not isinstance(m, int):\n        raise TypeError(\"unsupported operand type\")\n    if n < 0 or m < 0:\n        raise ValueError(\"math domain error\")\n    \n    odd_squares_count = int(m**0.5) - int((n-1)**0.5)\n    return odd_squares_count", "tests_source": "initial_tests.jsonl", "tests_task_id": "344", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:47:16.225972", "stage": "code_generation"}
{"task_id": "345", "round": 1, "temperature": 0.1, "generated_code": "def diff_consecutivenums(nums):\n    if not isinstance(nums, list):\n        raise TypeError(\"unsupported operand type\")\n    for num in nums:\n        if not isinstance(num, (int, float)):\n            raise TypeError(\"unsupported operand type\")\n    result = [b - a for a, b in zip(nums[:-1], nums[1:])]\n    return result", "tests_source": "initial_tests.jsonl", "tests_task_id": "345", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:47:43.811072", "stage": "code_generation"}
{"task_id": "346", "round": 1, "temperature": 0.1, "generated_code": "def zigzag(n, k):\n    if not isinstance(n, int) or not isinstance(k, int):\n        raise TypeError(\"Both n and k must be integers\")\n    if n < 0 or k < 0:\n        return 0\n    if n == 0 and k == 0:\n        return 1\n    if k == 0:\n        return 0\n    return zigzag(n, k - 1) + zigzag(n - 1, n - k)", "tests_source": "initial_tests.jsonl", "tests_task_id": "346", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:47:54.296463", "stage": "code_generation"}
{"task_id": "347", "round": 1, "temperature": 0.1, "generated_code": "def count_Squares(m, n):\n    if not isinstance(m, int) or not isinstance(n, int):\n        raise TypeError(\"unsupported operand type\")\n    if m < 0 or n < 0:\n        return 0\n    if n < m:\n        m, n = n, m\n    return n * (n + 1) * (3 * m - n + 1) // 6", "tests_source": "initial_tests.jsonl", "tests_task_id": "347", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:48:30.783682", "stage": "code_generation"}
{"task_id": "348", "round": 1, "temperature": 0.1, "generated_code": "def bin_coff(n, r): \n    val = 1\n    if (r > (n - r)): \n        r = (n - r) \n    for i in range(0, r): \n        val *= (n - i) \n        val //= (i + 1) \n    return val \n\ndef find_ways(M): \n    if not isinstance(M, int):\n        raise TypeError(\"unsupported operand type\")\n    if M < 0:\n        raise ValueError(\"M must be non-negative\")\n    if M % 2 != 0:\n        return 0\n    n = M // 2\n    a = bin_coff(2 * n, n) \n    b = a // (n + 1) \n    return b", "tests_source": "initial_tests.jsonl", "tests_task_id": "348", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:48:50.966624", "stage": "code_generation"}
{"task_id": "349", "round": 1, "temperature": 0.1, "generated_code": "def check(string):\n    if not isinstance(string, str):\n        raise TypeError(\"Input must be a string\")\n    \n    if string == \"\":\n        return \"No\"\n    \n    p = set(string)\n    s = {'0', '1'}\n    \n    if s == p or p == {'0'} or p == {'1'}:\n        return \"Yes\"\n    else:\n        return \"No\"", "tests_source": "initial_tests.jsonl", "tests_task_id": "349", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:48:59.644556", "stage": "code_generation"}
{"task_id": "350", "round": 1, "temperature": 0.1, "generated_code": "def minimum_Length(s):\n    if not isinstance(s, str):\n        raise TypeError(\"string indices must be integers\")\n    \n    maxOcc = 0\n    n = len(s)\n    arr = [0] * 26\n    \n    for i in range(n):\n        arr[ord(s[i]) - ord('a')] += 1\n    \n    for count in arr:\n        if count > maxOcc:\n            maxOcc = count\n            \n    return n - maxOcc", "tests_source": "initial_tests.jsonl", "tests_task_id": "350", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:49:09.317410", "stage": "code_generation"}
{"task_id": "351", "round": 1, "temperature": 0.1, "generated_code": "def first_Element(arr, n, k):\n    if arr is None or not isinstance(arr, list) or not isinstance(n, int) or not isinstance(k, int):\n        raise TypeError(\"Invalid input types\")\n    if k < 1:\n        raise ValueError(\"k must be a positive integer\")\n    \n    count_map = {}\n    for i in range(n):\n        if arr[i] in count_map:\n            count_map[arr[i]] += 1\n        else:\n            count_map[arr[i]] = 1\n            \n    for i in range(n):\n        if count_map[arr[i]] == k:\n            return arr[i]\n    \n    return -1", "tests_source": "initial_tests.jsonl", "tests_task_id": "351", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:49:21.151029", "stage": "code_generation"}
{"task_id": "352", "round": 1, "temperature": 0.1, "generated_code": "def unique_Characters(s):\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n    \n    return len(s) == len(set(s))", "tests_source": "initial_tests.jsonl", "tests_task_id": "352", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:49:29.637437", "stage": "code_generation"}
{"task_id": "353", "round": 1, "temperature": 0.1, "generated_code": "def remove_column(list1, n):\n    if not isinstance(n, int):\n        raise TypeError(\"list indices must be integers or slices, not str\")\n    for i in list1:\n        if n < 0 or n >= len(i):\n            raise IndexError(\"list index out of range\")\n        del i[n]\n    return list1", "tests_source": "initial_tests.jsonl", "tests_task_id": "353", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:49:37.450342", "stage": "code_generation"}
{"task_id": "354", "round": 1, "temperature": 0.1, "generated_code": "def tn_ap(a, n, d):\n    if not isinstance(a, (int, float)):\n        raise TypeError(\"First term must be an integer or float\")\n    if not isinstance(n, int):\n        raise TypeError(\"n must be an integer\")\n    if not isinstance(d, (int, float)):\n        raise TypeError(\"Difference must be an integer or float\")\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    \n    tn = a + (n - 1) * d\n    return tn", "tests_source": "initial_tests.jsonl", "tests_task_id": "354", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:49:59.123659", "stage": "code_generation"}
{"task_id": "355", "round": 1, "temperature": 0.1, "generated_code": "def count_Rectangles(radius):\n    if not isinstance(radius, (int, float)):\n        raise TypeError(\"unsupported operand type\")\n    if radius < 0:\n        raise ValueError(\"negative radius\")\n    \n    rectangles = 0\n    diameter = 2 * radius\n    diameterSquare = diameter * diameter\n    \n    for a in range(1, diameter + 1):\n        for b in range(1, diameter + 1):\n            diagnalLengthSquare = (a * a + b * b)\n            if diagnalLengthSquare <= diameterSquare:\n                rectangles += 1\n                \n    return rectangles", "tests_source": "initial_tests.jsonl", "tests_task_id": "355", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:50:42.602003", "stage": "code_generation"}
{"task_id": "356", "round": 1, "temperature": 0.1, "generated_code": "def find_angle(a, b):\n    if not (0 <= a < 180) or not (0 <= b < 180):\n        raise ValueError(\"Angles must be non-negative and less than 180\")\n    c = 180 - (a + b)\n    return c", "tests_source": "initial_tests.jsonl", "tests_task_id": "356", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:50:59.768302", "stage": "code_generation"}
{"task_id": "357", "round": 1, "temperature": 0.1, "generated_code": "def find_max(test_list):\n    if not test_list:\n        raise ValueError(\"max() arg is an empty sequence\")\n    \n    flat_list = []\n    for tup in test_list:\n        if not isinstance(tup, tuple):\n            raise TypeError(\"Invalid input: expected a tuple\")\n        flat_list.extend(tup)\n    \n    if not flat_list:\n        return float('-inf')\n    \n    return max(int(x) for x in flat_list if isinstance(x, (int, float)) and not isinstance(x, bool))", "tests_source": "initial_tests.jsonl", "tests_task_id": "357", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:51:08.142875", "stage": "code_generation"}
{"task_id": "358", "round": 1, "temperature": 0.1, "generated_code": "def moddiv_list(nums1, nums2):\n    if not isinstance(nums1, list) or not isinstance(nums2, list):\n        raise TypeError(\"unsupported operand type\")\n    \n    if len(nums1) != len(nums2):\n        raise ValueError(\"Input lists must have the same length\")\n    \n    result = map(lambda x, y: x % y if y != 0 else 0, nums1, nums2)\n    return list(result)", "tests_source": "initial_tests.jsonl", "tests_task_id": "358", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:51:19.501467", "stage": "code_generation"}
{"task_id": "359", "round": 1, "temperature": 0.1, "generated_code": "def Check_Solution(a, b, c): \n    if not all(isinstance(x, (int, float)) for x in [a, b, c]):\n        raise TypeError(\"All coefficients must be numeric\")\n    \n    if a == 0 and b == 0 and c == 0:\n        return \"No\"\n    \n    if a == 0:\n        return \"No\"\n    \n    if (2 * b * b == 9 * a * c): \n        return \"Yes\"\n    else: \n        return \"No\"", "tests_source": "initial_tests.jsonl", "tests_task_id": "359", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:51:27.279769", "stage": "code_generation"}
{"task_id": "360", "round": 1, "temperature": 0.1, "generated_code": "def get_carol(n):\n    if not isinstance(n, int):\n        raise TypeError(\"unsupported operand type\")\n    if n < 0:\n        raise ValueError(\"negative integer\")\n    \n    result = (2 ** n) - 1\n    return result * result - 2", "tests_source": "initial_tests.jsonl", "tests_task_id": "360", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:51:46.758871", "stage": "code_generation"}
{"task_id": "361", "round": 1, "temperature": 0.1, "generated_code": "def remove_empty(list1):\n    if not isinstance(list1, list):\n        raise TypeError(\"object is not iterable\")\n    return [x for x in list1 if isinstance(x, list) and x]", "tests_source": "initial_tests.jsonl", "tests_task_id": "361", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:52:13.894811", "stage": "code_generation"}
{"task_id": "362", "round": 1, "temperature": 0.1, "generated_code": "def max_occurrences(nums):\n    if nums is None:\n        raise TypeError(\"Input must be a list\")\n    if not nums:\n        return None\n    \n    count_dict = {}\n    for item in nums:\n        count_dict[item] = count_dict.get(item, 0) + 1\n    \n    max_item = max(count_dict, key=count_dict.get)\n    return max_item", "tests_source": "initial_tests.jsonl", "tests_task_id": "362", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:52:23.433626", "stage": "code_generation"}
{"task_id": "363", "round": 1, "temperature": 0.1, "generated_code": "def add_K_element(test_list, K):\n    if not isinstance(K, int):\n        raise TypeError(\"unsupported operand type\")\n    if any(not isinstance(sub, tuple) for sub in test_list):\n        raise TypeError(\"tuple index out of range\")\n    if len(set(len(sub) for sub in test_list)) > 1:\n        raise TypeError(\"tuple index out of range\")\n    \n    res = [tuple(j + K for j in sub) for sub in test_list]\n    return res", "tests_source": "initial_tests.jsonl", "tests_task_id": "363", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:52:47.787033", "stage": "code_generation"}
{"task_id": "364", "round": 1, "temperature": 0.1, "generated_code": "def min_flip_to_make_string_alternate(s):\n    if not isinstance(s, str):\n        raise TypeError(\"expected a string\")\n    if any(c not in '01' for c in s):\n        raise ValueError(\"invalid character in string\")\n    \n    def make_flip(ch):\n        return '1' if (ch == '0') else '0'\n    \n    def get_flip_with_starting_charcter(s, expected):\n        flip_count = 0\n        for i in range(len(s)):\n            if s[i] != expected:\n                flip_count += 1\n            expected = make_flip(expected)\n        return flip_count\n    \n    return min(get_flip_with_starting_charcter(s, '0'), get_flip_with_starting_charcter(s, '1'))", "tests_source": "initial_tests.jsonl", "tests_task_id": "364", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:53:19.874487", "stage": "code_generation"}
{"task_id": "365", "round": 1, "temperature": 0.1, "generated_code": "def count_Digit(n):\n    if not isinstance(n, int):\n        raise TypeError(\"invalid literal for int()\")\n    \n    n = abs(n)  # Consider the absolute value for digit counting\n    if n == 0:\n        return 1  # Special case for zero\n    \n    count = 0\n    while n != 0:\n        n //= 10\n        count += 1\n    return count", "tests_source": "initial_tests.jsonl", "tests_task_id": "365", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:53:37.480291", "stage": "code_generation"}
{"task_id": "366", "round": 1, "temperature": 0.1, "generated_code": "def adjacent_num_product(list_nums):\n    if not isinstance(list_nums, list) or any(not isinstance(x, int) for x in list_nums):\n        raise TypeError(\"unsupported operand type\")\n    \n    if len(list_nums) < 2:\n        return 0\n    \n    return max(a * b for a, b in zip(list_nums, list_nums[1:]))", "tests_source": "initial_tests.jsonl", "tests_task_id": "366", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:53:44.241962", "stage": "code_generation"}
{"task_id": "367", "round": 1, "temperature": 0.1, "generated_code": "def is_tree_balanced(root): \n    def check_balance(node): \n        if node is None: \n            return 0, True\n        left_height, left_balanced = check_balance(node.left) \n        right_height, right_balanced = check_balance(node.right) \n        current_height = max(left_height, right_height) + 1 \n        current_balanced = left_balanced and right_balanced and abs(left_height - right_height) <= 1 \n        return current_height, current_balanced\n    \n    _, balanced = check_balance(root) \n    return balanced", "tests_source": "initial_tests.jsonl", "tests_task_id": "367", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:54:26.582274", "stage": "code_generation"}
{"task_id": "368", "round": 1, "temperature": 0.1, "generated_code": "def repeat_tuples(test_tup, N):\n    if not isinstance(test_tup, tuple):\n        raise TypeError(\"expected an iterable\")\n    if not isinstance(N, int) or N < 0:\n        raise ValueError(\"N must be a non-negative integer\")\n    return (test_tup,) * N", "tests_source": "initial_tests.jsonl", "tests_task_id": "368", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:54:34.932678", "stage": "code_generation"}
{"task_id": "369", "round": 1, "temperature": 0.1, "generated_code": "def lateralsurface_cuboid(l, w, h):\n    if not all(isinstance(x, (int, float)) for x in [l, w, h]):\n        raise TypeError(\"unsupported operand type\")\n    if l < 0 or w < 0 or h < 0:\n        raise ValueError(\"negative dimensions\")\n    LSA = 2 * h * (l + w)\n    return LSA", "tests_source": "initial_tests.jsonl", "tests_task_id": "369", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:54:46.384377", "stage": "code_generation"}
{"task_id": "370", "round": 1, "temperature": 0.1, "generated_code": "def float_sort(price):\n    if not isinstance(price, tuple):\n        raise TypeError(\"float() argument must be a string or a number, not 'tuple'\")\n    \n    sorted_price = []\n    for item in price:\n        if not isinstance(item, tuple) or len(item) != 2:\n            raise TypeError(\"float() argument must be a string or a number, not 'tuple'\")\n        try:\n            float(item[1])\n        except ValueError:\n            raise ValueError(f\"could not convert string to float: '{item[1]}'\")\n    \n    sorted_price = sorted(price, key=lambda x: float(x[1]), reverse=True)\n    return sorted_price", "tests_source": "initial_tests.jsonl", "tests_task_id": "370", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:55:36.185693", "stage": "code_generation"}
{"task_id": "371", "round": 1, "temperature": 0.1, "generated_code": "def smallest_missing(A, left_element, right_element):\n    if A is None or not isinstance(A, list):\n        raise TypeError(\"Input must be a list\")\n    if left_element > right_element:\n        return left_element\n    mid = left_element + (right_element - left_element) // 2\n    if mid < len(A) and A[mid] == mid:\n        return smallest_missing(A, mid + 1, right_element)\n    else:\n        return smallest_missing(A, left_element, mid - 1)", "tests_source": "initial_tests.jsonl", "tests_task_id": "371", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:55:56.879534", "stage": "code_generation"}
{"task_id": "372", "round": 1, "temperature": 0.1, "generated_code": "import heapq as hq\n\ndef heap_assending(nums):\n    if not isinstance(nums, list):\n        raise TypeError(\"must be a list of numbers\")\n    if not all(isinstance(x, (int, float)) for x in nums):\n        raise TypeError(\"must be a list of numbers\")\n    \n    hq.heapify(nums)\n    s_result = [hq.heappop(nums) for _ in range(len(nums))]\n    return s_result", "tests_source": "initial_tests.jsonl", "tests_task_id": "372", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:56:08.362195", "stage": "code_generation"}
{"task_id": "373", "round": 1, "temperature": 0.1, "generated_code": "def volume_cuboid(l, w, h):\n    if not all(isinstance(dim, (int, float)) for dim in (l, w, h)):\n        raise TypeError(\"unsupported operand type\")\n    if l < 0 or w < 0 or h < 0:\n        raise ValueError(\"negative dimensions are not allowed\")\n    return l * w * h", "tests_source": "initial_tests.jsonl", "tests_task_id": "373", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:56:19.930476", "stage": "code_generation"}
{"task_id": "374", "round": 1, "temperature": 0.1, "generated_code": "def permute_string(s):\n    if not isinstance(s, str):\n        raise TypeError(\"expected a string\")\n    \n    if len(s) == 0:\n        return ['']\n    \n    from itertools import permutations\n    return sorted(set([''.join(p) for p in permutations(s)]))", "tests_source": "initial_tests.jsonl", "tests_task_id": "374", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:57:02.508817", "stage": "code_generation"}
{"task_id": "375", "round": 1, "temperature": 0.1, "generated_code": "def round_num(n, m):\n    if m == 0:\n        raise ZeroDivisionError(\"Cannot round with a multiple of zero.\")\n    if not isinstance(n, (int, float)) or not isinstance(m, (int, float)):\n        raise TypeError(\"Both n and m must be numbers.\")\n    \n    rounded_value = round(n / m) * m\n    return rounded_value", "tests_source": "initial_tests.jsonl", "tests_task_id": "375", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:57:15.608849", "stage": "code_generation"}
{"task_id": "376", "round": 1, "temperature": 0.1, "generated_code": "def remove_replica(test_tup):\n    if not isinstance(test_tup, tuple):\n        raise TypeError(f\"tuple expected, got '{type(test_tup).__name__}'\")\n    \n    temp = set()\n    res = tuple(ele if ele not in temp and not temp.add(ele) else 'MSP' for ele in test_tup)\n    return res", "tests_source": "initial_tests.jsonl", "tests_task_id": "376", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:57:35.821391", "stage": "code_generation"}
{"task_id": "377", "round": 1, "temperature": 0.1, "generated_code": "def remove_Char(s, c):\n    if not isinstance(s, str) or not isinstance(c, str):\n        raise TypeError(\"string indices must be integers or slices, not str\")\n    return s.replace(c, \"\")", "tests_source": "initial_tests.jsonl", "tests_task_id": "377", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:57:43.379143", "stage": "code_generation"}
{"task_id": "378", "round": 1, "temperature": 0.1, "generated_code": "def move_first(test_list):\n    if not isinstance(test_list, list):\n        raise TypeError(\"unsupported operand type\")\n    if len(test_list) == 0 or len(test_list) == 1:\n        return test_list\n    return [test_list[-1]] + test_list[:-1]", "tests_source": "initial_tests.jsonl", "tests_task_id": "378", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:57:49.471598", "stage": "code_generation"}
{"task_id": "379", "round": 1, "temperature": 0.1, "generated_code": "def surfacearea_cuboid(l, w, h):\n    if not all(isinstance(x, (int, float)) for x in (l, w, h)):\n        raise TypeError(\"unsupported operand type\")\n    if l < 0 or w < 0 or h < 0:\n        raise ValueError(\"negative dimensions\")\n    SA = 2 * (l * w + l * h + w * h)\n    return SA", "tests_source": "initial_tests.jsonl", "tests_task_id": "379", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:58:01.978082", "stage": "code_generation"}
{"task_id": "380", "round": 1, "temperature": 0.1, "generated_code": "def multi_list(rownum, colnum):\n    if not isinstance(rownum, int):\n        raise TypeError(\"Row number must be an integer\")\n    if not isinstance(colnum, int):\n        raise TypeError(\"Column number must be an integer\")\n    if rownum < 0:\n        raise ValueError(\"Row number must be non-negative\")\n    if colnum < 0:\n        raise ValueError(\"Column number must be non-negative\")\n    \n    return [[row * col for col in range(colnum)] for row in range(rownum)]", "tests_source": "initial_tests.jsonl", "tests_task_id": "380", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:58:54.339265", "stage": "code_generation"}
{"task_id": "381", "round": 1, "temperature": 0.1, "generated_code": "def index_on_inner_list(list_data, index_no):\n    if not isinstance(list_data, list):\n        raise TypeError(\"list indices must be integers or slices, not str\")\n    if not all(isinstance(inner_list, list) for inner_list in list_data):\n        raise TypeError(\"list indices must be integers or slices, not str\")\n    if not isinstance(index_no, int):\n        raise TypeError(\"list indices must be integers or slices, not str\")\n    \n    if any(len(inner_list) <= index_no for inner_list in list_data):\n        raise IndexError(\"list index out of range\")\n    \n    return sorted(list_data, key=lambda x: x[index_no])", "tests_source": "initial_tests.jsonl", "tests_task_id": "381", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:59:21.368748", "stage": "code_generation"}
{"task_id": "382", "round": 1, "temperature": 0.1, "generated_code": "def find_rotation_count(A):\n    if A is None or not isinstance(A, list):\n        raise TypeError(\"Input must be a list\")\n    \n    (left, right) = (0, len(A) - 1)\n    \n    if right < 0:  # Handle empty array\n        return -1\n    if right == 0:  # Handle single element array\n        return 0\n    \n    while left <= right:\n        if A[left] <= A[right]:\n            return left\n        mid = (left + right) // 2\n        next = (mid + 1) % len(A)\n        prev = (mid - 1 + len(A)) % len(A)\n        if A[mid] <= A[next] and A[mid] <= A[prev]:\n            return mid\n        elif A[mid] <= A[right]:\n            right = mid - 1\n        elif A[mid] >= A[left]:\n            left = mid + 1\n    return -1", "tests_source": "initial_tests.jsonl", "tests_task_id": "382", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T10:59:44.709220", "stage": "code_generation"}
{"task_id": "383", "round": 1, "temperature": 0.1, "generated_code": "def even_bit_toggle_number(n):\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer\")\n    \n    res = 0\n    count = 0\n    temp = n\n    \n    while temp > 0:\n        if count % 2 == 1:  # Toggle odd bits\n            res |= (1 << count)\n        count += 1\n        temp >>= 1\n    \n    return n ^ res", "tests_source": "initial_tests.jsonl", "tests_task_id": "383", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:00:10.225647", "stage": "code_generation"}
{"task_id": "384", "round": 1, "temperature": 0.1, "generated_code": "def frequency_Of_Smallest(n, arr):\n    if n == 0:\n        raise IndexError(\"list index out of range\")\n    if not isinstance(arr, list):\n        raise TypeError(\"object of type 'int' has no len()\") if isinstance(arr, int) else TypeError(\"object of type 'str' has no len()\")\n    \n    mn = arr[0]\n    freq = 1\n    for i in range(1, n):\n        if arr[i] < mn:\n            mn = arr[i]\n            freq = 1\n        elif arr[i] == mn:\n            freq += 1\n    return freq", "tests_source": "initial_tests.jsonl", "tests_task_id": "384", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:01:02.725720", "stage": "code_generation"}
{"task_id": "385", "round": 1, "temperature": 0.1, "generated_code": "def get_perrin(n):\n    if n < 0:\n        raise RecursionError(\"Negative index not allowed\")\n    if n == 0:\n        return 3\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    return get_perrin(n - 2) + get_perrin(n - 3)", "tests_source": "initial_tests.jsonl", "tests_task_id": "385", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:01:10.863842", "stage": "code_generation"}
{"task_id": "386", "round": 1, "temperature": 0.1, "generated_code": "def swap_count(s):\n    if not isinstance(s, str):\n        raise TypeError(\"Expected a string input\")\n    if any(c not in '[]' for c in s):\n        raise ValueError(\"Invalid characters in input\")\n    \n    count_left = 0\n    count_right = 0\n    swap = 0\n    imbalance = 0\n    \n    for char in s:\n        if char == '[':\n            count_left += 1\n            if imbalance > 0:\n                swap += imbalance\n                imbalance -= 1\n        elif char == ']':\n            count_right += 1\n            imbalance = count_right - count_left\n            \n    return swap", "tests_source": "initial_tests.jsonl", "tests_task_id": "386", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:01:44.758911", "stage": "code_generation"}
{"task_id": "387", "round": 1, "temperature": 0.1, "generated_code": "def even_or_odd(N): \n    if N is None or any(c not in '0123456789ABCDEF' for c in N.upper()):\n        raise IndexError(\"Invalid hexadecimal input\")\n    \n    if len(N) == 0:\n        return \"Even\"\n    \n    last_char = N[-1].upper()\n    if last_char in '02468ACE':\n        return \"Even\"\n    else:\n        return \"Odd\"", "tests_source": "initial_tests.jsonl", "tests_task_id": "387", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:02:13.460667", "stage": "code_generation"}
{"task_id": "388", "round": 1, "temperature": 0.1, "generated_code": "def highest_Power_of_2(n):\n    if not isinstance(n, int):\n        raise TypeError(\"unsupported operand type\")\n    if n < 0:\n        raise ValueError(\"negative number\")\n    if n == 0:\n        return 0\n    \n    power = 1\n    while power <= n:\n        power <<= 1\n    return power >> 1", "tests_source": "initial_tests.jsonl", "tests_task_id": "388", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:02:27.623052", "stage": "code_generation"}
{"task_id": "389", "round": 1, "temperature": 0.1, "generated_code": "def find_lucas(n):\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    \n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    \n    a, b = 2, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b", "tests_source": "initial_tests.jsonl", "tests_task_id": "389", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:02:36.644916", "stage": "code_generation"}
{"task_id": "390", "round": 1, "temperature": 0.1, "generated_code": "def add_string(lst, string):\n    if not isinstance(string, str) and string is not None:\n        raise TypeError(\"The second argument must be a string or None.\")\n    return [f\"{string}{i}\" for i in lst if isinstance(i, str)]", "tests_source": "initial_tests.jsonl", "tests_task_id": "390", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:03:06.741004", "stage": "code_generation"}
{"task_id": "391", "round": 1, "temperature": 0.1, "generated_code": "def convert_list_dictionary(l1, l2, l3):\n    if l1 is None or l2 is None or l3 is None:\n        raise TypeError(\"object is not iterable\")\n    if len(l1) != len(l2) or len(l1) != len(l3):\n        raise ValueError(\"not enough values to unpack\")\n    \n    return [{x: {y: z}} for x, y, z in zip(l1, l2, l3)]", "tests_source": "initial_tests.jsonl", "tests_task_id": "391", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:03:31.507439", "stage": "code_generation"}
{"task_id": "392", "round": 1, "temperature": 0.1, "generated_code": "def get_max_sum(n):\n    if not isinstance(n, int):\n        raise TypeError(\"unsupported operand type\")\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n    \n    res = [0] * (n + 1)\n    res[1] = 1\n    \n    for i in range(2, n + 1):\n        res[i] = max(i, res[i // 2] + res[i // 3] + res[i // 4] + res[i // 5])\n    \n    return res[n]", "tests_source": "initial_tests.jsonl", "tests_task_id": "392", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:04:00.327498", "stage": "code_generation"}
{"task_id": "393", "round": 1, "temperature": 0.1, "generated_code": "def max_length_list(input_list):\n    if not all(isinstance(i, list) for i in input_list):\n        raise TypeError(\"object of type 'int' has no len()\")\n    \n    max_length = 0\n    max_list = []\n    \n    for item in input_list:\n        if isinstance(item, list):\n            if len(item) > max_length:\n                max_length = len(item)\n                max_list = item\n        else:\n            raise TypeError(f\"object of type '{type(item).__name__}' has no len()\")\n    \n    return (max_length, max_list)", "tests_source": "initial_tests.jsonl", "tests_task_id": "393", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:04:18.361391", "stage": "code_generation"}
{"task_id": "394", "round": 1, "temperature": 0.1, "generated_code": "def check_distinct(test_tup):\n    if not isinstance(test_tup, tuple):\n        raise TypeError(\"Input must be a tuple\")\n    \n    res = True\n    temp = set()\n    for ele in test_tup:\n        if ele in temp:\n            res = False\n            break\n        temp.add(ele)\n    return res", "tests_source": "initial_tests.jsonl", "tests_task_id": "394", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:04:36.417672", "stage": "code_generation"}
{"task_id": "395", "round": 1, "temperature": 0.1, "generated_code": "def first_non_repeating_character(str1):\n    if not isinstance(str1, str):\n        raise TypeError(\"Input must be a string\")\n    \n    char_order = []\n    ctr = {}\n    for c in str1:\n        if c in ctr:\n            ctr[c] += 1\n        else:\n            ctr[c] = 1 \n            char_order.append(c)\n    \n    for c in char_order:\n        if ctr[c] == 1:\n            return c\n    return None", "tests_source": "initial_tests.jsonl", "tests_task_id": "395", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:04:43.090209", "stage": "code_generation"}
{"task_id": "396", "round": 1, "temperature": 0.1, "generated_code": "import re\n\ndef check_char(string):\n    if not isinstance(string, str):\n        raise TypeError(\"Input must be a string\")\n    \n    regex = r'^(.)\\1?$|^(.).*\\2$'\n    if re.search(regex, string):\n        return \"Valid\"\n    else:\n        return \"Invalid\"", "tests_source": "initial_tests.jsonl", "tests_task_id": "396", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:04:53.281117", "stage": "code_generation"}
{"task_id": "397", "round": 1, "temperature": 0.1, "generated_code": "def median_numbers(a, b, c):\n    if not all(isinstance(x, (int, float)) for x in (a, b, c)):\n        raise TypeError(\"All inputs must be numbers\")\n    \n    if (a > b and a < c) or (a < b and a > c):\n        return a\n    elif (b > a and b < c) or (b < a and b > c):\n        return b\n    else:\n        return c", "tests_source": "initial_tests.jsonl", "tests_task_id": "397", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:05:02.771608", "stage": "code_generation"}
{"task_id": "398", "round": 1, "temperature": 0.1, "generated_code": "def sum_of_digits(nums):\n    if not isinstance(nums, list):\n        raise TypeError(\"unsupported operand type\")\n    \n    total = 0\n    for n in nums:\n        if not isinstance(n, int):\n            raise TypeError(\"unsupported operand type\")\n        total += sum(int(el) for el in str(abs(n)) if el.isdigit())\n    return total", "tests_source": "initial_tests.jsonl", "tests_task_id": "398", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:05:12.999987", "stage": "code_generation"}
{"task_id": "399", "round": 1, "temperature": 0.1, "generated_code": "def bitwise_xor(test_tup1, test_tup2):\n    if not isinstance(test_tup1, tuple) or not isinstance(test_tup2, tuple):\n        raise TypeError(\"unsupported operand type\")\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"not enough values to unpack\")\n    \n    res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n    return res", "tests_source": "initial_tests.jsonl", "tests_task_id": "399", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:05:24.746962", "stage": "code_generation"}
{"task_id": "400", "round": 1, "temperature": 0.1, "generated_code": "def extract_freq(test_list):\n    if not isinstance(test_list, list):\n        raise TypeError(\"Input must be a list\")\n    \n    unique_tuples = set()\n    \n    for item in test_list:\n        if not isinstance(item, tuple):\n            raise TypeError(\"All items in the list must be tuples\")\n        unique_tuples.add(tuple(sorted(item)))\n    \n    return len(unique_tuples)", "tests_source": "initial_tests.jsonl", "tests_task_id": "400", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:05:32.703398", "stage": "code_generation"}
{"task_id": "401", "round": 1, "temperature": 0.1, "generated_code": "def add_nested_tuples(test_tup1, test_tup2):\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"not enough values to unpack\")\n    \n    res = tuple(tuple(a + b for a, b in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n    return res", "tests_source": "initial_tests.jsonl", "tests_task_id": "401", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:05:49.688048", "stage": "code_generation"}
{"task_id": "402", "round": 1, "temperature": 0.1, "generated_code": "def ncr_modp(n, r, p):\n    if p <= 0:\n        raise ZeroDivisionError(\"Modulus p must be greater than 0\")\n    if n < 0 or r < 0 or r > n:\n        raise IndexError(\"Invalid values for n or r\")\n    \n    C = [0 for _ in range(r + 1)]\n    C[0] = 1\n    \n    for i in range(1, n + 1):\n        for j in range(min(i, r), 0, -1):\n            C[j] = (C[j] + C[j - 1]) % p\n            \n    return C[r]", "tests_source": "initial_tests.jsonl", "tests_task_id": "402", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:06:05.072072", "stage": "code_generation"}
{"task_id": "403", "round": 1, "temperature": 0.1, "generated_code": "import re\n\ndef is_valid_URL(url):\n    if url is None or url == \"\":\n        return False\n    regex = re.compile(\n        r'^(https?://)'  # http:// or https://\n        r'((www\\.)?([a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,6})'  # domain name\n        r'(:\\d+)?'  # optional port\n        r'(/[-a-zA-Z0-9@:%._\\+~#?&//=]*)?$'  # path\n    )\n    return re.match(regex, url) is not None", "tests_source": "initial_tests.jsonl", "tests_task_id": "403", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:06:29.678754", "stage": "code_generation"}
{"task_id": "404", "round": 1, "temperature": 0.1, "generated_code": "def minimum(a, b):\n    if not isinstance(a, (int, float)) or not isinstance(b, (int, float)):\n        raise TypeError(\"unsupported operand type(s) for minimum: '{}' and '{}'\".format(type(a).__name__, type(b).__name__))\n    return a if a <= b else b", "tests_source": "initial_tests.jsonl", "tests_task_id": "404", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:06:37.449246", "stage": "code_generation"}
{"task_id": "405", "round": 1, "temperature": 0.1, "generated_code": "def check_tuplex(tuplex, tuple1):\n    if not isinstance(tuplex, tuple) or not isinstance(tuple1, (int, float, str, bool, type(None))):\n        raise TypeError(\"Invalid input types\")\n    return tuple1 in tuplex", "tests_source": "initial_tests.jsonl", "tests_task_id": "405", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:06:45.586670", "stage": "code_generation"}
{"task_id": "406", "round": 1, "temperature": 0.1, "generated_code": "def find_Parity(x):\n    if not isinstance(x, int):\n        raise TypeError(\"unsupported operand type\")\n    \n    y = x ^ (x >> 1)\n    y = y ^ (y >> 2)\n    y = y ^ (y >> 4)\n    y = y ^ (y >> 8)\n    y = y ^ (y >> 16)\n    \n    if (y & 1):\n        return \"Odd Parity\"\n    return \"Even Parity\"", "tests_source": "initial_tests.jsonl", "tests_task_id": "406", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:07:20.504207", "stage": "code_generation"}
{"task_id": "407", "round": 1, "temperature": 0.1, "generated_code": "def rearrange_bigger(n):\n    if not isinstance(n, int) or n < 0:\n        raise TypeError(\"invalid literal for int()\")\n    \n    nums = list(str(n))\n    for i in range(len(nums) - 2, -1, -1):\n        if nums[i] < nums[i + 1]:\n            z = nums[i:]\n            y = min(filter(lambda x: x > z[0], z))\n            z.remove(y)\n            z.sort()\n            nums[i:] = [y] + z\n            return int(\"\".join(nums))\n    return False", "tests_source": "initial_tests.jsonl", "tests_task_id": "407", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:07:51.310620", "stage": "code_generation"}
{"task_id": "408", "round": 1, "temperature": 0.1, "generated_code": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    if not isinstance(nums1, list) or not isinstance(nums2, list) or not isinstance(k, int):\n        raise TypeError(\"unsupported operand type\")\n    if k < 0:\n        raise ValueError(\"k must be a non-negative integer\")\n    \n    queue = []\n    \n    def push(i, j):\n        if i < len(nums1) and j < len(nums2):\n            heapq.heappush(queue, (nums1[i] + nums2[j], i, j))\n    \n    push(0, 0)\n    pairs = []\n    \n    while queue and len(pairs) < k:\n        _, i, j = heapq.heappop(queue)\n        pairs.append([nums1[i], nums2[j]])\n        push(i, j + 1)\n        if j == 0:\n            push(i + 1, 0)\n    \n    return pairs", "tests_source": "initial_tests.jsonl", "tests_task_id": "408", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:08:19.388560", "stage": "code_generation"}
{"task_id": "409", "round": 1, "temperature": 0.1, "generated_code": "def min_product_tuple(list1):\n    if list1 is None:\n        raise TypeError(\"object is not iterable\")\n    \n    if not isinstance(list1, list):\n        raise TypeError(\"object is not iterable\")\n    \n    if len(list1) == 0:\n        return float('inf')\n    \n    result_min = float('inf')\n    \n    for item in list1:\n        if not isinstance(item, tuple) or len(item) != 2:\n            raise ValueError(\"not enough values to unpack\")\n        \n        x, y = item\n        \n        if not isinstance(x, (int, float)) or not isinstance(y, (int, float)):\n            raise TypeError(\"unsupported operand type\")\n        \n        product = x * y\n        if abs(product) < abs(result_min):\n            result_min = product\n            \n    return abs(result_min)", "tests_source": "initial_tests.jsonl", "tests_task_id": "409", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:08:49.985912", "stage": "code_generation"}
{"task_id": "410", "round": 1, "temperature": 0.1, "generated_code": "def min_val(listval):\n    if not listval:\n        raise ValueError(\"min() arg is an empty sequence\")\n    \n    int_values = [i for i in listval if isinstance(i, int)]\n    \n    if not int_values:\n        raise TypeError(\"No valid integers found in the list\")\n    \n    return min(int_values)", "tests_source": "initial_tests.jsonl", "tests_task_id": "410", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:09:29.584360", "stage": "code_generation"}
{"task_id": "411", "round": 1, "temperature": 0.1, "generated_code": "import re\n\ndef snake_to_camel(word):\n    if not isinstance(word, str):\n        raise TypeError(\"expected a string\")\n    return ''.join(x.capitalize() for x in re.split(r'_+', word))", "tests_source": "initial_tests.jsonl", "tests_task_id": "411", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:10:11.444193", "stage": "code_generation"}
{"task_id": "412", "round": 1, "temperature": 0.1, "generated_code": "def remove_odd(l):\n    return [i for i in l if isinstance(i, int) and i % 2 == 0]", "tests_source": "initial_tests.jsonl", "tests_task_id": "412", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:10:19.964909", "stage": "code_generation"}
{"task_id": "413", "round": 1, "temperature": 0.1, "generated_code": "def extract_nth_element(list1, n):\n    if not isinstance(list1, list):\n        raise TypeError(\"'list' object is required\")\n    result = []\n    for x in list1:\n        if not isinstance(x, tuple):\n            raise TypeError(\"'tuple' object is required\")\n        if n < 0 or n >= len(x):\n            raise IndexError(\"list index out of range\")\n        result.append(x[n])\n    return result", "tests_source": "initial_tests.jsonl", "tests_task_id": "413", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:10:52.731796", "stage": "code_generation"}
{"task_id": "414", "round": 1, "temperature": 0.1, "generated_code": "def overlapping(list1, list2):\n    if not isinstance(list1, (list, tuple)) or not isinstance(list2, (list, tuple)):\n        raise TypeError(\"Both inputs must be a list or tuple.\")\n    \n    for item in list1:\n        if item in list2:\n            return 1\n    return 0", "tests_source": "initial_tests.jsonl", "tests_task_id": "414", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:11:26.769544", "stage": "code_generation"}
{"task_id": "415", "round": 1, "temperature": 0.1, "generated_code": "def max_Product(arr):\n    if not isinstance(arr, list):\n        raise TypeError(\"unsupported operand type\")\n    if len(arr) < 2:\n        raise ValueError(\"No pairs exists\")\n    \n    max1 = max2 = float('-inf')\n    \n    for num in arr:\n        if not isinstance(num, int):\n            raise TypeError(\"unsupported operand type\")\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n    \n    if max2 == float('-inf'):\n        raise ValueError(\"No pairs exists\")\n    \n    return max1, max2", "tests_source": "initial_tests.jsonl", "tests_task_id": "415", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:11:36.434226", "stage": "code_generation"}
{"task_id": "416", "round": 1, "temperature": 0.1, "generated_code": "MAX = 1000000\n\ndef breakSum(n): \n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer\")\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    \n    dp = [0] * (n + 1) \n    dp[0] = 0\n    if n >= 1:\n        dp[1] = 1\n    for i in range(2, n + 1): \n        dp[i] = max(dp[i // 2] + dp[i // 3] + dp[i // 4], i) \n    return dp[n]", "tests_source": "initial_tests.jsonl", "tests_task_id": "416", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:11:59.309988", "stage": "code_generation"}
{"task_id": "417", "round": 1, "temperature": 0.1, "generated_code": "def group_tuples(Input):\n    out = {}\n    for elem in Input:\n        if not isinstance(elem, tuple) or len(elem) == 0:\n            raise IndexError(\"Empty tuples are not allowed\")\n        if any(not isinstance(x, int) for x in elem):\n            raise TypeError(\"All elements must be integers\")\n        try:\n            out[elem[0]].extend(elem[1:])\n        except KeyError:\n            out[elem[0]] = list(elem)\n    return [tuple(values) for values in out.values()]", "tests_source": "initial_tests.jsonl", "tests_task_id": "417", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:12:43.890503", "stage": "code_generation"}
{"task_id": "418", "round": 1, "temperature": 0.1, "generated_code": "def Find_Max(lst):\n    if lst is None or not isinstance(lst, list):\n        raise TypeError(\"unhashable type: 'list'\")\n    \n    max_list = []\n    for sublist in lst:\n        if not isinstance(sublist, list):\n            raise TypeError(\"unhashable type: 'list'\")\n        if len(sublist) > len(max_list):\n            max_list = sublist\n            \n    return max_list", "tests_source": "initial_tests.jsonl", "tests_task_id": "418", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:13:26.288334", "stage": "code_generation"}
{"task_id": "419", "round": 1, "temperature": 0.1, "generated_code": "def round_and_sum(list1):\n    if not isinstance(list1, list):\n        raise TypeError(\"unsupported operand type\")\n    \n    rounded_sum = 0\n    for number in list1:\n        if not isinstance(number, (int, float)):\n            raise TypeError(\"unsupported operand type\")\n        rounded_sum += round(number)\n    \n    return rounded_sum * len(list1)", "tests_source": "initial_tests.jsonl", "tests_task_id": "419", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:14:00.161820", "stage": "code_generation"}
{"task_id": "420", "round": 1, "temperature": 0.1, "generated_code": "def cube_Sum(n):\n    if not isinstance(n, int):\n        raise TypeError(\"unsupported operand type\")\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n    \n    sum = 0\n    for i in range(1, n + 1):\n        sum += (2 * i) ** 3\n    return sum", "tests_source": "initial_tests.jsonl", "tests_task_id": "420", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:14:19.095378", "stage": "code_generation"}
{"task_id": "421", "round": 1, "temperature": 0.1, "generated_code": "def concatenate_tuple(test_tup):\n    if not isinstance(test_tup, tuple):\n        raise TypeError(\"Input must be a tuple\")\n    \n    delim = \"-\"\n    res = delim.join(str(ele) for ele in test_tup)\n    return res", "tests_source": "initial_tests.jsonl", "tests_task_id": "421", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:14:31.766120", "stage": "code_generation"}
{"task_id": "422", "round": 1, "temperature": 0.1, "generated_code": "def find_Average_Of_Cube(n):\n    if not isinstance(n, int):\n        raise TypeError(\"unsupported operand type\")\n    if n < 0:\n        raise ValueError(\"must be greater than or equal to 0\")\n    \n    if n == 0:\n        return 0.0\n    \n    sum_cubes = sum(i ** 3 for i in range(1, n + 1))\n    return round(sum_cubes / n, 6)", "tests_source": "initial_tests.jsonl", "tests_task_id": "422", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:14:44.861535", "stage": "code_generation"}
{"task_id": "423", "round": 1, "temperature": 0.1, "generated_code": "def get_maxgold(gold, m, n):\n    if gold is None:\n        raise TypeError(\"Input cannot be None\")\n    if m < 0 or n < 0:\n        raise ValueError(\"Dimensions must be non-negative\")\n    if m == 0 or n == 0:\n        return 0\n    if len(gold) != m or any(len(row) != n for row in gold):\n        raise IndexError(\"Irregular matrix dimensions\")\n\n    goldTable = [[0 for _ in range(n)] for _ in range(m)]\n    \n    for col in range(n - 1, -1, -1):\n        for row in range(m):\n            if col == n - 1:\n                right = 0\n            else:\n                right = goldTable[row][col + 1]\n            if row == 0 or col == n - 1:\n                right_up = 0\n            else:\n                right_up = goldTable[row - 1][col + 1]\n            if row == m - 1 or col == n - 1:\n                right_down = 0\n            else:\n                right_down = goldTable[row + 1][col + 1]\n            goldTable[row][col] = gold[row][col] + max(right, right_up, right_down)\n\n    res = goldTable[0][0]\n    for i in range(1, m):\n        res = max(res, goldTable[i][0])\n    \n    return res", "tests_source": "initial_tests.jsonl", "tests_task_id": "423", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:15:27.599229", "stage": "code_generation"}
{"task_id": "424", "round": 1, "temperature": 0.1, "generated_code": "def extract_rear(test_tuple):\n    res = []\n    for sub in test_tuple:\n        if not isinstance(sub, str):\n            raise TypeError(\"string index out of range\")\n        res.append(sub[-1])\n    return res", "tests_source": "initial_tests.jsonl", "tests_task_id": "424", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:15:50.147308", "stage": "code_generation"}
{"task_id": "425", "round": 1, "temperature": 0.1, "generated_code": "def count_element_in_list(list1, x):\n    if not isinstance(list1, list) or any(not isinstance(sublist, list) for sublist in list1):\n        raise TypeError(\"First argument must be a list of lists\")\n    if not isinstance(x, (int, float, str)):\n        raise TypeError(\"Second argument must be an int, float, or str\")\n    \n    ctr = 0\n    for sublist in list1:\n        if x in sublist:\n            ctr += 1\n    return ctr", "tests_source": "initial_tests.jsonl", "tests_task_id": "425", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:16:01.626194", "stage": "code_generation"}
{"task_id": "426", "round": 1, "temperature": 0.1, "generated_code": "def filter_oddnumbers(nums):\n    if not isinstance(nums, list):\n        raise TypeError(\"unsupported operand type\")\n    odd_nums = list(filter(lambda x: isinstance(x, int) and x % 2 != 0, nums))\n    return odd_nums", "tests_source": "initial_tests.jsonl", "tests_task_id": "426", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:16:36.100236", "stage": "code_generation"}
{"task_id": "427", "round": 1, "temperature": 0.1, "generated_code": "import re\n\ndef change_date_format(dt):\n    if not isinstance(dt, str) or not dt:\n        raise ValueError(\"not a valid date format\")\n    \n    match = re.match(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', dt)\n    if not match:\n        raise ValueError(\"not a valid date format\")\n    \n    year, month, day = match.groups()\n    \n    if not (1 <= int(month) <= 12):\n        raise ValueError(\"not a valid date format\")\n    \n    days_in_month = [31, 29 if (int(year) % 4 == 0 and (int(year) % 100 != 0 or int(year) % 400 == 0)) else 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    if not (1 <= int(day) <= days_in_month[int(month) - 1]):\n        raise ValueError(\"not a valid date format\")\n    \n    return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', r'\\3-\\2-\\1', dt)", "tests_source": "initial_tests.jsonl", "tests_task_id": "427", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:17:07.479236", "stage": "code_generation"}
{"task_id": "428", "round": 1, "temperature": 0.1, "generated_code": "def shell_sort(my_list):\n    if not isinstance(my_list, list):\n        raise TypeError(\"object is not iterable\")\n    \n    for item in my_list:\n        if not isinstance(item, (int, float)):\n            raise TypeError(\"unsupported operand type\")\n\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current_item:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_item\n        gap //= 2\n\n    return my_list", "tests_source": "initial_tests.jsonl", "tests_task_id": "428", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:17:28.616732", "stage": "code_generation"}
{"task_id": "429", "round": 1, "temperature": 0.1, "generated_code": "def and_tuples(test_tup1, test_tup2):\n    if not isinstance(test_tup1, tuple) or not isinstance(test_tup2, tuple):\n        raise TypeError(\"unsupported operand type\")\n    res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n    return res", "tests_source": "initial_tests.jsonl", "tests_task_id": "429", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:17:37.350067", "stage": "code_generation"}
{"task_id": "430", "round": 1, "temperature": 0.1, "generated_code": "def parabola_directrix(a, b, c):\n    if not isinstance(a, (int, float)) or not isinstance(b, (int, float)) or not isinstance(c, (int, float)):\n        raise TypeError(\"unsupported operand type\")\n    if a <= 0:\n        raise ValueError(\"Invalid input for a\")\n    \n    directrix = c - ((b ** 2) / (4 * a))\n    return directrix", "tests_source": "initial_tests.jsonl", "tests_task_id": "430", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:17:45.472878", "stage": "code_generation"}
{"task_id": "431", "round": 1, "temperature": 0.1, "generated_code": "def common_element(list1, list2):\n    if not isinstance(list1, list) or not isinstance(list2, list):\n        raise TypeError(\"Both inputs must be lists\")\n    \n    set1 = set(list1)\n    set2 = set(list2)\n    \n    return not set1.isdisjoint(set2)", "tests_source": "initial_tests.jsonl", "tests_task_id": "431", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:18:15.688481", "stage": "code_generation"}
{"task_id": "432", "round": 1, "temperature": 0.1, "generated_code": "def median_trapezium(base1, base2, height):\n    if not all(isinstance(arg, (int, float)) for arg in [base1, base2, height]):\n        raise TypeError(\"unsupported operand type\")\n    median = 0.5 * (base1 + base2)\n    return median", "tests_source": "initial_tests.jsonl", "tests_task_id": "432", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:18:23.481953", "stage": "code_generation"}
{"task_id": "433", "round": 1, "temperature": 0.1, "generated_code": "def check_greater(arr, number):\n    if not isinstance(number, (int, float)):\n        raise TypeError(\"The number must be an integer or float.\")\n    if not isinstance(arr, list):\n        raise TypeError(\"The first argument must be a list.\")\n    for item in arr:\n        if not isinstance(item, (int, float)):\n            raise TypeError(\"All elements in the array must be integers or floats.\")\n    \n    if len(arr) == 0 or number > max(arr, default=float('-inf')):\n        return 'Yes, the entered number is greater than those in the array'\n    else:\n        return 'No, entered number is less than those in the array'", "tests_source": "initial_tests.jsonl", "tests_task_id": "433", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:18:34.271743", "stage": "code_generation"}
{"task_id": "434", "round": 1, "temperature": 0.1, "generated_code": "import re\n\ndef text_match_one(text):\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n    \n    patterns = 'ab+'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "tests_source": "initial_tests.jsonl", "tests_task_id": "434", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:18:42.106095", "stage": "code_generation"}
{"task_id": "435", "round": 1, "temperature": 0.1, "generated_code": "def last_Digit(n):\n    if not isinstance(n, int):\n        raise TypeError(\"not an integer\")\n    return abs(n) % 10", "tests_source": "initial_tests.jsonl", "tests_task_id": "435", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:18:48.483214", "stage": "code_generation"}
{"task_id": "436", "round": 1, "temperature": 0.1, "generated_code": "def neg_nos(list1):\n    if not isinstance(list1, list):\n        raise TypeError(\"unsupported operand type\")\n    for num in list1:\n        if not isinstance(num, (int, float)):\n            raise TypeError(\"unsupported operand type\")\n        if num < 0:\n            return num\n    return None", "tests_source": "initial_tests.jsonl", "tests_task_id": "436", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:18:55.606572", "stage": "code_generation"}
{"task_id": "437", "round": 1, "temperature": 0.1, "generated_code": "def remove_odd(str1):\n    if not isinstance(str1, str):\n        raise TypeError(\"expected a string\")\n    return ''.join(str1[i] for i in range(len(str1)) if i % 2 == 1)", "tests_source": "initial_tests.jsonl", "tests_task_id": "437", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:19:01.526558", "stage": "code_generation"}
{"task_id": "438", "round": 1, "temperature": 0.1, "generated_code": "def count_bidirectional(test_list):\n    if test_list is None:\n        raise TypeError(\"Input cannot be None\")\n    \n    res = 0\n    seen_pairs = set()\n    \n    for pair in test_list:\n        if not isinstance(pair, tuple) or len(pair) != 2:\n            raise TypeError(\"All elements must be tuples of length 2\")\n        if not all(isinstance(x, (int, float)) for x in pair):\n            raise TypeError(\"Tuple elements must be integers or floats\")\n        \n        a, b = pair\n        if (b, a) in seen_pairs:\n            res += 1\n        seen_pairs.add(pair)\n    \n    return str(res)", "tests_source": "initial_tests.jsonl", "tests_task_id": "438", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:19:24.460593", "stage": "code_generation"}
{"task_id": "439", "round": 1, "temperature": 0.1, "generated_code": "def multiple_to_single(L):\n    if not all(isinstance(x, int) for x in L):\n        raise ValueError(\"invalid literal for int()\")\n    return int(\"\".join(map(str, L))) if L else 0", "tests_source": "initial_tests.jsonl", "tests_task_id": "439", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:19:47.659250", "stage": "code_generation"}
{"task_id": "440", "round": 1, "temperature": 0.1, "generated_code": "import re\n\ndef find_adverb_position(text):\n    if not isinstance(text, str):\n        raise TypeError(\"expected a string\")\n    \n    for m in re.finditer(r\"\\b\\w+ly\\b\", text):\n        return (m.start(), m.end(), m.group(0))\n    \n    return None", "tests_source": "initial_tests.jsonl", "tests_task_id": "440", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:20:03.411139", "stage": "code_generation"}
{"task_id": "441", "round": 1, "temperature": 0.1, "generated_code": "def surfacearea_cube(l):\n    if l < 0:\n        raise ValueError(\"Length must be non-negative\")\n    surfacearea = 6 * l * l\n    return surfacearea", "tests_source": "initial_tests.jsonl", "tests_task_id": "441", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:20:22.381861", "stage": "code_generation"}
{"task_id": "442", "round": 1, "temperature": 0.1, "generated_code": "def positive_count(nums):\n    if not isinstance(nums, (list, array)):\n        raise TypeError(\"Input must be an array or list of integers.\")\n    \n    n = len(nums)\n    if n == 0:\n        return 0.0\n    \n    n1 = sum(1 for x in nums if x > 0)\n    return round(n1 / n, 2)", "tests_source": "initial_tests.jsonl", "tests_task_id": "442", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:20:33.574915", "stage": "code_generation"}
{"task_id": "443", "round": 1, "temperature": 0.1, "generated_code": "def largest_neg(list1):\n    if not isinstance(list1, list):\n        raise TypeError(\"Input must be a list\")\n    \n    largest_negative = None\n    for x in list1:\n        if x < 0:\n            if largest_negative is None or x > largest_negative:\n                largest_negative = x\n    return largest_negative", "tests_source": "initial_tests.jsonl", "tests_task_id": "443", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:20:50.629862", "stage": "code_generation"}
{"task_id": "444", "round": 1, "temperature": 0.1, "generated_code": "def trim_tuple(test_list, K):\n    if not isinstance(test_list, list) or not all(isinstance(t, tuple) for t in test_list):\n        raise TypeError(\"First argument must be a list of tuples\")\n    if not isinstance(K, int):\n        raise TypeError(\"Second argument must be an integer\")\n    \n    res = []\n    for ele in test_list:\n        N = len(ele)\n        if K > N:\n            raise IndexError(\"K cannot be greater than the length of the tuple\")\n        res.append(tuple(list(ele)[K: N - K]))\n    return str(res)", "tests_source": "initial_tests.jsonl", "tests_task_id": "444", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:21:00.866777", "stage": "code_generation"}
{"task_id": "445", "round": 1, "temperature": 0.1, "generated_code": "def index_multiplication(test_tup1, test_tup2):\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"not enough values to unpack\")\n    \n    res = tuple(tuple(a * b for a, b in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n    return res", "tests_source": "initial_tests.jsonl", "tests_task_id": "445", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:21:12.161773", "stage": "code_generation"}
{"task_id": "446", "round": 1, "temperature": 0.1, "generated_code": "def count_Occurrence(tup, lst):\n    if not isinstance(tup, tuple):\n        raise TypeError(\"expected tuple for tup\")\n    if not isinstance(lst, list):\n        raise TypeError(\"expected list for lst\")\n    \n    count = 0\n    for item in tup:\n        if item in lst:\n            count += 1\n    return count", "tests_source": "initial_tests.jsonl", "tests_task_id": "446", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:21:34.917983", "stage": "code_generation"}
{"task_id": "447", "round": 1, "temperature": 0.1, "generated_code": "def cube_nums(nums):\n    return list(map(lambda x: x ** 3, nums))", "tests_source": "initial_tests.jsonl", "tests_task_id": "447", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:21:57.691376", "stage": "code_generation"}
{"task_id": "448", "round": 1, "temperature": 0.1, "generated_code": "def cal_sum(n):\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    \n    a, b, c = 3, 0, 2\n    if n == 0:\n        return 3\n    if n == 1:\n        return 3\n    if n == 2:\n        return 5\n    \n    total_sum = 5\n    for _ in range(3, n + 1):\n        d = a + b\n        total_sum += d\n        a, b, c = b, c, d\n    \n    return total_sum", "tests_source": "initial_tests.jsonl", "tests_task_id": "448", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:22:06.995376", "stage": "code_generation"}
{"task_id": "449", "round": 1, "temperature": 0.1, "generated_code": "def check_Triangle(x1, y1, x2, y2, x3, y3):\n    # Check if all inputs are numeric\n    if not all(isinstance(i, (int, float)) for i in [x1, y1, x2, y2, x3, y3]):\n        raise TypeError(\"All inputs must be numeric\")\n    \n    # Calculate the area using the determinant method\n    area = (x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2))\n    \n    # If the area is zero, the points are collinear\n    if area == 0:\n        return 'No'\n    else:\n        return 'Yes'", "tests_source": "initial_tests.jsonl", "tests_task_id": "449", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:22:50.932314", "stage": "code_generation"}
{"task_id": "450", "round": 1, "temperature": 0.1, "generated_code": "def extract_string(str, l):\n    if not isinstance(str, list) or not all(isinstance(e, str) for e in str):\n        raise TypeError(\"expected str or list\")\n    if not isinstance(l, int):\n        raise TypeError(\"expected str or list\")\n    \n    result = [e for e in str if len(e) == l]\n    return result", "tests_source": "initial_tests.jsonl", "tests_task_id": "450", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:22:59.221776", "stage": "code_generation"}
{"task_id": "451", "round": 1, "temperature": 0.1, "generated_code": "import re\n\ndef remove_whitespaces(text1):\n    if not isinstance(text1, str):\n        raise TypeError(\"expected string or bytes-like object\")\n    return re.sub(r'\\s+', '', text1)", "tests_source": "initial_tests.jsonl", "tests_task_id": "451", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:23:38.085388", "stage": "code_generation"}
{"task_id": "452", "round": 1, "temperature": 0.1, "generated_code": "def loss_amount(actual_cost, sale_amount):\n    if not isinstance(actual_cost, (int, float)) or not isinstance(sale_amount, (int, float)):\n        raise TypeError(\"unsupported operand type\")\n    \n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return None", "tests_source": "initial_tests.jsonl", "tests_task_id": "452", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:23:45.860123", "stage": "code_generation"}
{"task_id": "453", "round": 1, "temperature": 0.1, "generated_code": "import math \n\ndef sumofFactors(n): \n    if not isinstance(n, int) or n < 0:\n        raise TypeError(\"Input must be a non-negative integer\")\n    if n % 2 != 0: \n        return 0\n    res = 0\n    for i in range(1, (int)(math.sqrt(n)) + 1):    \n        if n % i == 0:\n            if i % 2 == 0:\n                res += i\n            if i != n // i and (n // i) % 2 == 0:\n                res += n // i\n    return res", "tests_source": "initial_tests.jsonl", "tests_task_id": "453", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:24:06.574529", "stage": "code_generation"}
{"task_id": "454", "round": 1, "temperature": 0.1, "generated_code": "import re\n\ndef text_match_wordz(text):\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n    patterns = r'\\w*z\\w*'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "tests_source": "initial_tests.jsonl", "tests_task_id": "454", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:24:33.257573", "stage": "code_generation"}
{"task_id": "455", "round": 1, "temperature": 0.1, "generated_code": "def check_monthnumb_number(monthnum2):\n    if not isinstance(monthnum2, int):\n        raise TypeError(\"Input must be an integer\")\n    if monthnum2 < 1 or monthnum2 > 12:\n        return False\n    return monthnum2 in {1, 3, 5, 7, 8, 10, 12}", "tests_source": "initial_tests.jsonl", "tests_task_id": "455", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:24:46.149478", "stage": "code_generation"}
{"task_id": "456", "round": 1, "temperature": 0.1, "generated_code": "def reverse_string_list(stringlist):\n    if not isinstance(stringlist, list):\n        raise TypeError(\"stringlist must be a list\")\n    return [x[::-1] for x in stringlist]", "tests_source": "initial_tests.jsonl", "tests_task_id": "456", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:24:53.180949", "stage": "code_generation"}
{"task_id": "457", "round": 1, "temperature": 0.1, "generated_code": "def Find_Min(lst):\n    if not isinstance(lst, list):\n        raise TypeError(\"unhashable type: 'list'\")\n    if not lst:\n        raise ValueError(\"min() arg is an empty sequence\")\n    \n    min_length = float('inf')\n    min_list = None\n    \n    for sublist in lst:\n        if not isinstance(sublist, list):\n            raise TypeError(\"unhashable type: 'list'\")\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_list = sublist\n            \n    return min_list if min_list is not None else []", "tests_source": "initial_tests.jsonl", "tests_task_id": "457", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:25:00.865724", "stage": "code_generation"}
{"task_id": "458", "round": 1, "temperature": 0.1, "generated_code": "def rectangle_area(l, b):\n    if not isinstance(l, (int, float)) or not isinstance(b, (int, float)):\n        raise TypeError(\"unsupported operand type\")\n    return l * b", "tests_source": "initial_tests.jsonl", "tests_task_id": "458", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:25:33.285598", "stage": "code_generation"}
{"task_id": "459", "round": 1, "temperature": 0.1, "generated_code": "import re\n\ndef remove_uppercase(str1):\n    if not isinstance(str1, str):\n        raise TypeError(\"Input must be a string\")\n    return re.sub(r'[A-Z]+', '', str1)", "tests_source": "initial_tests.jsonl", "tests_task_id": "459", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:25:39.808808", "stage": "code_generation"}
{"task_id": "460", "round": 1, "temperature": 0.1, "generated_code": "def Extract(lst):\n    if lst is None:\n        raise TypeError(\"list index out of range\")\n    return [item[0] for item in lst if isinstance(item, list) and len(item) > 0]", "tests_source": "initial_tests.jsonl", "tests_task_id": "460", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:25:57.449311", "stage": "code_generation"}
{"task_id": "461", "round": 1, "temperature": 0.1, "generated_code": "def upper_ctr(s):\n    if not isinstance(s, str):\n        raise TypeError(\"expected a string\")\n    \n    upper_ctr = 0\n    for char in s:\n        if 'A' <= char <= 'Z':\n            upper_ctr += 1\n    return upper_ctr", "tests_source": "initial_tests.jsonl", "tests_task_id": "461", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:26:27.477755", "stage": "code_generation"}
{"task_id": "462", "round": 1, "temperature": 0.1, "generated_code": "def combinations_list(list1):\n    if not isinstance(list1, (list, tuple)):\n        raise TypeError(\"expected an iterable\")\n    \n    if len(list1) == 0:\n        return [[]]\n    \n    result = []\n    for el in combinations_list(list1[1:]):\n        result += [el, el + [list1[0]]]\n    return result", "tests_source": "initial_tests.jsonl", "tests_task_id": "462", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:26:34.881399", "stage": "code_generation"}
{"task_id": "463", "round": 1, "temperature": 0.1, "generated_code": "def max_subarray_product(arr):\n    if arr is None:\n        raise TypeError(\"Input cannot be None\")\n    if not all(isinstance(x, (int, float)) for x in arr):\n        raise TypeError(\"All elements in the array must be numeric\")\n\n    n = len(arr)\n    if n == 0:\n        return 0\n\n    max_ending_here = 1\n    min_ending_here = 1\n    max_so_far = float('-inf')\n    flag = 0\n\n    for i in range(n):\n        if arr[i] > 0:\n            max_ending_here *= arr[i]\n            min_ending_here = min(min_ending_here * arr[i], 1)\n            flag = 1\n        elif arr[i] == 0:\n            max_ending_here = 1\n            min_ending_here = 1\n        else:\n            temp = max_ending_here\n            max_ending_here = max(min_ending_here * arr[i], 1)\n            min_ending_here = temp * arr[i]\n\n        max_so_far = max(max_so_far, max_ending_here)\n\n    if flag == 0 and max_so_far < 0:\n        return max(arr)  # Return the maximum element if all are negative\n    return max_so_far", "tests_source": "initial_tests.jsonl", "tests_task_id": "463", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:27:05.954227", "stage": "code_generation"}
{"task_id": "464", "round": 1, "temperature": 0.1, "generated_code": "def check_value(d, n):\n    if not isinstance(d, dict):\n        raise TypeError(\"First argument must be a dictionary\")\n    if len(d) == 0:\n        return True\n    if not all(isinstance(v, type(n)) for v in d.values()):\n        raise TypeError(\"All values in the dictionary must be of the same type as the provided value\")\n    return all(x == n for x in d.values())", "tests_source": "initial_tests.jsonl", "tests_task_id": "464", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:27:40.648155", "stage": "code_generation"}
{"task_id": "465", "round": 1, "temperature": 0.1, "generated_code": "def drop_empty(dict1):\n    if not isinstance(dict1, dict):\n        raise TypeError(\"Input must be a dictionary\")\n    return {key: value for key, value in dict1.items() if value not in (None, '', [])}", "tests_source": "initial_tests.jsonl", "tests_task_id": "465", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:27:49.438152", "stage": "code_generation"}
{"task_id": "466", "round": 1, "temperature": 0.1, "generated_code": "def find_peak_util(arr, low, high, n): \n    mid = low + (high - low) // 2\n    if ((mid == 0 or arr[mid - 1] <= arr[mid]) and\n        (mid == n - 1 or arr[mid + 1] <= arr[mid])): \n        return mid \n    elif (mid > 0 and arr[mid - 1] > arr[mid]): \n        return find_peak_util(arr, low, mid - 1, n) \n    else: \n        return find_peak_util(arr, mid + 1, high, n) \n\ndef find_peak(arr, n): \n    if n == 0:\n        raise IndexError(\"Array is empty\")\n    if not all(isinstance(x, (int, float)) for x in arr):\n        raise TypeError(\"Array must contain only numbers\")\n    return find_peak_util(arr, 0, n - 1, n)", "tests_source": "initial_tests.jsonl", "tests_task_id": "466", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:28:00.976186", "stage": "code_generation"}
{"task_id": "467", "round": 1, "temperature": 0.1, "generated_code": "def decimal_to_Octal(deciNum):\n    if not isinstance(deciNum, int):\n        raise TypeError(\"unsupported operand type\")\n    \n    octalNum = 0\n    countval = 1\n    dNo = deciNum\n    \n    while deciNum != 0:\n        remainder = deciNum % 8\n        octalNum += remainder * countval\n        countval *= 10\n        deciNum //= 8\n    \n    return octalNum", "tests_source": "initial_tests.jsonl", "tests_task_id": "467", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:28:18.940070", "stage": "code_generation"}
{"task_id": "468", "round": 1, "temperature": 0.1, "generated_code": "def max_product(arr, n):\n    if arr is None or not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n    if n < 0:\n        raise ValueError(\"Length of array cannot be negative\")\n    \n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n\n    mpis = [0] * n\n    for i in range(n):\n        mpis[i] = arr[i]\n    \n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j] and mpis[i] < (mpis[j] * arr[i]):\n                mpis[i] = mpis[j] * arr[i]\n    \n    return max(mpis)", "tests_source": "initial_tests.jsonl", "tests_task_id": "468", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:28:30.099220", "stage": "code_generation"}
{"task_id": "469", "round": 1, "temperature": 0.1, "generated_code": "def max_profit(price, k):\n    if price is None or k is None:\n        raise TypeError(\"Input cannot be None\")\n    if k < 0:\n        raise ValueError(\"Number of transactions cannot be negative\")\n    \n    n = len(price)\n    if n == 0 or k == 0:\n        return 0\n    if k >= n // 2:\n        return sum(max(price[i + 1] - price[i], 0) for i in range(n - 1))\n\n    final_profit = [[0 for _ in range(n)] for _ in range(k + 1)]\n    \n    for i in range(1, k + 1):\n        max_so_far = float('-inf')\n        for j in range(1, n):\n            max_so_far = max(max_so_far, final_profit[i - 1][j - 1] - price[j - 1])\n            final_profit[i][j] = max(final_profit[i][j - 1], price[j] + max_so_far)\n    \n    return final_profit[k][n - 1]", "tests_source": "initial_tests.jsonl", "tests_task_id": "469", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:29:07.060330", "stage": "code_generation"}
{"task_id": "470", "round": 1, "temperature": 0.1, "generated_code": "def add_pairwise(test_tup):\n    if len(test_tup) < 2:\n        return ()\n    res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n    return res", "tests_source": "initial_tests.jsonl", "tests_task_id": "470", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:29:34.415900", "stage": "code_generation"}
{"task_id": "471", "round": 1, "temperature": 0.1, "generated_code": "def find_remainder(arr, lens, n): \n    if not isinstance(arr, list):\n        raise TypeError(\"unsupported operand type\")\n    if not isinstance(n, int):\n        raise TypeError(\"unsupported operand type\")\n    if lens != len(arr):\n        raise ValueError(\"lens must be equal to the length of arr\")\n    \n    mul = 1\n    for i in range(lens):  \n        mul = (mul * (arr[i] % n)) % n \n    return mul % n", "tests_source": "initial_tests.jsonl", "tests_task_id": "471", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:29:46.493062", "stage": "code_generation"}
{"task_id": "472", "round": 1, "temperature": 0.1, "generated_code": "def check_Consecutive(l):\n    if l is None or not isinstance(l, list) or any(not isinstance(x, int) for x in l):\n        raise TypeError(\"Input must be a list of integers\")\n    \n    if len(l) == 0:\n        return True\n    if len(l) == 1:\n        return True\n    \n    return sorted(l) == list(range(min(l), max(l) + 1))", "tests_source": "initial_tests.jsonl", "tests_task_id": "472", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:30:28.373680", "stage": "code_generation"}
{"task_id": "473", "round": 1, "temperature": 0.1, "generated_code": "def tuple_intersection(test_list1, test_list2):\n    if test_list1 is None or test_list2 is None:\n        raise TypeError(\"Input lists cannot be None\")\n    \n    if not all(isinstance(tup, tuple) for tup in test_list1) or not all(isinstance(tup, tuple) for tup in test_list2):\n        raise TypeError(\"All elements in the lists must be tuples\")\n    \n    res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n    return res", "tests_source": "initial_tests.jsonl", "tests_task_id": "473", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:30:44.581256", "stage": "code_generation"}
{"task_id": "474", "round": 1, "temperature": 0.1, "generated_code": "def replace_char(str1, ch, newch):\n    if not isinstance(str1, str) or not isinstance(ch, str) or not isinstance(newch, str):\n        raise TypeError(\"Invalid input type\")\n    if len(ch) != 1 or len(newch) != 1:\n        raise ValueError(\"ch and newch must be single characters\")\n    \n    return str1.replace(ch, newch)", "tests_source": "initial_tests.jsonl", "tests_task_id": "474", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:30:54.030296", "stage": "code_generation"}
{"task_id": "475", "round": 1, "temperature": 0.1, "generated_code": "from collections import Counter\n\ndef sort_counter(dict1):\n    if not isinstance(dict1, dict):\n        raise TypeError(\"Input must be a dictionary\")\n    \n    for key, value in dict1.items():\n        if isinstance(value, list):\n            raise TypeError(\"unhashable type: 'list'\")\n    \n    x = Counter(dict1)\n    sort_counter = sorted(x.items(), key=lambda item: item[1], reverse=True)\n    return sort_counter", "tests_source": "initial_tests.jsonl", "tests_task_id": "475", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:31:40.039210", "stage": "code_generation"}
{"task_id": "476", "round": 1, "temperature": 0.1, "generated_code": "def big_sum(nums):\n    if nums is None:\n        raise ValueError(\"min() arg is an empty sequence\")\n    if not nums:\n        return 0\n    if not all(isinstance(x, (int, float)) for x in nums):\n        raise TypeError(\"unsupported operand type\")\n    \n    return max(nums) + min(nums)", "tests_source": "initial_tests.jsonl", "tests_task_id": "476", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:32:00.420355", "stage": "code_generation"}
{"task_id": "477", "round": 1, "temperature": 0.1, "generated_code": "def is_lower(string):\n    if not isinstance(string, str):\n        raise TypeError(\"expected string or bytes-like object\")\n    return string.lower()", "tests_source": "initial_tests.jsonl", "tests_task_id": "477", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:32:16.544666", "stage": "code_generation"}
{"task_id": "478", "round": 1, "temperature": 0.1, "generated_code": "import re\n\ndef remove_lowercase(str1):\n    if not isinstance(str1, str):\n        raise TypeError(\"expected string or bytes-like object\")\n    return re.sub('[a-z]', '', str1)", "tests_source": "initial_tests.jsonl", "tests_task_id": "478", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:32:24.081809", "stage": "code_generation"}
{"task_id": "479", "round": 1, "temperature": 0.1, "generated_code": "def first_Digit(n):\n    if not isinstance(n, int):\n        raise TypeError(\"unsupported operand type\")\n    \n    n = abs(n)\n    \n    if n == 0:\n        return 0\n    \n    while n >= 10:\n        n //= 10\n    \n    return n", "tests_source": "initial_tests.jsonl", "tests_task_id": "479", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:32:37.271504", "stage": "code_generation"}
{"task_id": "480", "round": 1, "temperature": 0.1, "generated_code": "def get_max_occuring_char(str1):\n    if not isinstance(str1, str):\n        raise TypeError(\"Input must be a string\")\n    \n    ASCII_SIZE = 256\n    ctr = [0] * ASCII_SIZE\n    max_count = -1\n    ch = ''\n    \n    for i in str1:\n        ctr[ord(i)] += 1\n    \n    for i in str1:\n        if max_count < ctr[ord(i)]:\n            max_count = ctr[ord(i)]\n            ch = i\n            \n    return ch", "tests_source": "initial_tests.jsonl", "tests_task_id": "480", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:32:50.247765", "stage": "code_generation"}
{"task_id": "481", "round": 1, "temperature": 0.1, "generated_code": "def is_subset_sum(set, n, sum):\n    if set is None or n is None or sum is None:\n        raise TypeError(\"Arguments cannot be None\")\n    \n    if sum == 0:\n        return True\n    if n == 0:\n        return False\n    if set[n - 1] > sum:\n        return is_subset_sum(set, n - 1, sum)\n    return is_subset_sum(set, n - 1, sum) or is_subset_sum(set, n - 1, sum - set[n - 1])", "tests_source": "initial_tests.jsonl", "tests_task_id": "481", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:33:02.510761", "stage": "code_generation"}
{"task_id": "482", "round": 1, "temperature": 0.1, "generated_code": "import re \n\ndef match(text): \n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n    \n    pattern = '^[A-Z][a-z]+$'\n    if re.match(pattern, text): \n        return 'Yes' \n    else: \n        return 'No'", "tests_source": "initial_tests.jsonl", "tests_task_id": "482", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:33:13.308251", "stage": "code_generation"}
{"task_id": "483", "round": 1, "temperature": 0.1, "generated_code": "def first_Factorial_Divisible_Number(x):\n    if not isinstance(x, int):\n        raise TypeError(\"unsupported operand type\")\n    if x <= 0:\n        raise ValueError(\"must be a positive integer\")\n    \n    i = 1\n    fact = 1\n    while True:\n        fact *= i\n        if fact % x == 0:\n            return i\n        i += 1", "tests_source": "initial_tests.jsonl", "tests_task_id": "483", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:33:26.979689", "stage": "code_generation"}
{"task_id": "484", "round": 1, "temperature": 0.1, "generated_code": "def remove_matching_tuple(test_list1, test_list2):\n    if not isinstance(test_list1, tuple) or not isinstance(test_list2, tuple):\n        raise TypeError(\"Both arguments must be tuples\")\n    res = [sub for sub in test_list1 if sub not in test_list2]\n    return tuple(res)", "tests_source": "initial_tests.jsonl", "tests_task_id": "484", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:33:48.276020", "stage": "code_generation"}
{"task_id": "485", "round": 1, "temperature": 0.1, "generated_code": "def is_palindrome(n):\n    if n < 0:\n        return False\n    str_n = str(n)\n    return str_n == str_n[::-1]\n\ndef largest_palindrome(A, n):\n    if not all(isinstance(x, int) for x in A):\n        raise TypeError(\"All elements in the array must be integers.\")\n    \n    largest = -1\n    for num in A:\n        if is_palindrome(num) and num > largest:\n            largest = num\n    return largest", "tests_source": "initial_tests.jsonl", "tests_task_id": "485", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:34:04.494730", "stage": "code_generation"}
{"task_id": "486", "round": 1, "temperature": 0.1, "generated_code": "def nCr(n, r): \n    if (r > n / 2): \n        r = n - r \n    answer = 1 \n    for i in range(1, r + 1): \n        answer *= (n - r + i) \n        answer /= i \n    return answer \n\ndef binomial_probability(n, k, p): \n    if k < 0 or k > n:\n        raise ValueError(\"k must be between 0 and n\")\n    if p < 0 or p > 1:\n        raise ValueError(\"p must be between 0 and 1\")\n    \n    if n == 0 and k == 0:\n        return 1.0\n    if n == 0:\n        return 0.0\n    \n    return (nCr(n, k) * pow(p, k) * pow(1 - p, n - k))", "tests_source": "initial_tests.jsonl", "tests_task_id": "486", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:34:18.026636", "stage": "code_generation"}
{"task_id": "487", "round": 1, "temperature": 0.1, "generated_code": "def sort_tuple(tup):\n    if not isinstance(tup, list):\n        raise TypeError(\"Input must be a list of tuples\")\n    if not all(isinstance(i, tuple) for i in tup):\n        raise TypeError(\"All elements must be tuples\")\n    \n    return sorted(tup, key=lambda x: x[-1])", "tests_source": "initial_tests.jsonl", "tests_task_id": "487", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:34:27.476402", "stage": "code_generation"}
{"task_id": "488", "round": 1, "temperature": 0.1, "generated_code": "import math\n\ndef area_pentagon(a):\n    if a < 0:\n        raise ValueError(\"Side length must be positive\")\n    return (math.sqrt(5 * (5 + 2 * math.sqrt(5))) * pow(a, 2)) / 4.0", "tests_source": "initial_tests.jsonl", "tests_task_id": "488", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:34:43.849057", "stage": "code_generation"}
{"task_id": "489", "round": 1, "temperature": 0.1, "generated_code": "def frequency_Of_Largest(n, arr):\n    if n == 0:\n        raise IndexError(\"Array cannot be empty\")\n    if not isinstance(arr, list) or any(not isinstance(x, int) for x in arr):\n        raise TypeError(\"Input must be a list of integers\")\n    \n    mn = arr[0]\n    freq = 1\n    for i in range(1, n):\n        if arr[i] > mn:\n            mn = arr[i]\n            freq = 1\n        elif arr[i] == mn:\n            freq += 1\n    return freq", "tests_source": "initial_tests.jsonl", "tests_task_id": "489", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:35:07.155978", "stage": "code_generation"}
{"task_id": "490", "round": 1, "temperature": 0.1, "generated_code": "def extract_symmetric(test_list):\n    if not all(isinstance(pair, tuple) and len(pair) == 2 for pair in test_list):\n        raise TypeError(\"unhashable type: 'list'\")\n    \n    temp = set(test_list) & {(b, a) for a, b in test_list}\n    res = {(a, b) for a, b in temp if a < b}\n    return res", "tests_source": "initial_tests.jsonl", "tests_task_id": "490", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:35:18.345463", "stage": "code_generation"}
{"task_id": "491", "round": 1, "temperature": 0.1, "generated_code": "import math\n\ndef sum_gp(a, n, r):\n    if not isinstance(a, (int, float)):\n        raise TypeError(\"a should be a number\")\n    if not isinstance(n, int):\n        raise TypeError(\"n should be a number\")\n    if not isinstance(r, (int, float)):\n        raise TypeError(\"r should be a number\")\n    if n < 0:\n        raise ValueError(\"n should not be negative\")\n    if r < 0:\n        raise ValueError(\"r should not be negative\")\n    \n    if n == 0:\n        return 0\n    if r == 1:\n        return a * n\n    \n    total = (a * (1 - math.pow(r, n))) / (1 - r)\n    return total", "tests_source": "initial_tests.jsonl", "tests_task_id": "491", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:35:38.660912", "stage": "code_generation"}
{"task_id": "492", "round": 1, "temperature": 0.1, "generated_code": "def binary_search(item_list, item):\n    if item_list is None or item is None:\n        raise TypeError(\"Input cannot be None\")\n    \n    first = 0\n    last = len(item_list) - 1\n    found = False\n    while first <= last and not found:\n        mid = (first + last) // 2\n        if item_list[mid] == item:\n            found = True\n        else:\n            if item < item_list[mid]:\n                last = mid - 1\n            else:\n                first = mid + 1\n    return found", "tests_source": "initial_tests.jsonl", "tests_task_id": "492", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:36:06.887003", "stage": "code_generation"}
{"task_id": "493", "round": 1, "temperature": 0.1, "generated_code": "import math\n\ndef calculate_polygons(startx, starty, endx, endy, radius):\n    if not all(isinstance(i, (int, float)) for i in [startx, starty, endx, endy, radius]):\n        raise TypeError(\"All inputs must be numbers.\")\n    if endx <= startx or endy <= starty or radius <= 0:\n        raise ValueError(\"Invalid input values for grid dimensions or radius.\")\n\n    sl = (2 * radius) * math.tan(math.pi / 6)\n    p = sl * 0.5\n    b = sl * math.cos(math.radians(30))\n    w = b * 2\n    h = 2 * sl   \n    startx = startx - w\n    starty = starty - h\n    endx = endx + w\n    endy = endy + h\n    origx = startx\n    origy = starty\n    xoffset = b\n    yoffset = 3 * p\n    polygons = []\n    row = 1\n\n    while starty < endy:\n        if row % 2 == 0:\n            startx = origx + xoffset\n        else:\n            startx = origx\n        while startx < endx:\n            p1x = startx\n            p1y = starty + p\n            p2x = startx\n            p2y = starty + (3 * p)\n            p3x = startx + b\n            p3y = starty + h\n            p4x = startx + w\n            p4y = starty + (3 * p)\n            p5x = startx + w\n            p5y = starty + p\n            p6x = startx + b\n            p6y = starty\n            poly = [\n                (p1x, p1y),\n                (p2x, p2y),\n                (p3x, p3y),\n                (p4x, p4y),\n                (p5x, p5y),\n                (p6x, p6y),\n                (p1x, p1y)]\n            polygons.append(poly)\n            startx += w\n        starty += yoffset\n        row += 1\n\n    return polygons", "tests_source": "initial_tests.jsonl", "tests_task_id": "493", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:36:27.622097", "stage": "code_generation"}
{"task_id": "494", "round": 1, "temperature": 0.1, "generated_code": "def binary_to_integer(test_tup):\n    if not all(isinstance(x, int) and x in (0, 1) for x in test_tup):\n        raise ValueError(f\"invalid literal for int() with base 2: '{''.join(map(str, test_tup))}'\")\n    res = int(\"\".join(str(ele) for ele in test_tup), 2)\n    return str(res)", "tests_source": "initial_tests.jsonl", "tests_task_id": "494", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:37:17.561700", "stage": "code_generation"}
{"task_id": "495", "round": 1, "temperature": 0.1, "generated_code": "import re\n\ndef remove_lowercase(str1):\n    if not isinstance(str1, str):\n        raise TypeError(\"expected string or bytes-like object\")\n    return re.sub('[a-z]', '', str1)", "tests_source": "initial_tests.jsonl", "tests_task_id": "495", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:37:32.668960", "stage": "code_generation"}
{"task_id": "496", "round": 1, "temperature": 0.1, "generated_code": "import heapq as hq\n\ndef heap_queue_smallest(nums, n):\n    if not isinstance(nums, list):\n        raise TypeError(\"Input must be a list of numbers\")\n    if any(not isinstance(x, (int, float)) for x in nums):\n        raise TypeError(\"Input must be a list of numbers\")\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n > len(nums):\n        raise ValueError(\"n must not exceed the length of the list\")\n    \n    smallest_nums = hq.nsmallest(n, nums)\n    return smallest_nums", "tests_source": "initial_tests.jsonl", "tests_task_id": "496", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:38:09.981132", "stage": "code_generation"}
{"task_id": "497", "round": 1, "temperature": 0.1, "generated_code": "import math\n\ndef surfacearea_cone(r, h):\n    if r < 0 or h < 0:\n        raise ValueError(\"Radius and height must be non-negative\")\n    l = math.sqrt(r * r + h * h)\n    SA = math.pi * r * (r + l)\n    return SA", "tests_source": "initial_tests.jsonl", "tests_task_id": "497", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:38:19.531826", "stage": "code_generation"}
{"task_id": "498", "round": 1, "temperature": 0.1, "generated_code": "def gcd(x, y):\n    if not isinstance(x, int) or not isinstance(y, int):\n        raise TypeError(\"Inputs must be integers.\")\n    if x < 0 or y < 0:\n        raise ValueError(\"Inputs must be positive integers.\")\n    \n    if x == 0:\n        return y\n    if y == 0:\n        return x\n    \n    while y:\n        x, y = y, x % y\n    return x", "tests_source": "initial_tests.jsonl", "tests_task_id": "498", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:38:38.611847", "stage": "code_generation"}
{"task_id": "499", "round": 1, "temperature": 0.1, "generated_code": "def diameter_circle(r):\n    if not isinstance(r, (int, float)):\n        raise TypeError(\"unsupported operand type\")\n    if r < 0:\n        raise ValueError(\"negative radius\")\n    return 2 * r", "tests_source": "initial_tests.jsonl", "tests_task_id": "499", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:38:44.953472", "stage": "code_generation"}
{"task_id": "500", "round": 1, "temperature": 0.1, "generated_code": "def concatenate_elements(lst):\n    if not all(isinstance(i, str) for i in lst):\n        raise TypeError(\"All elements must be strings\")\n    return ' ' + ' '.join(lst)", "tests_source": "initial_tests.jsonl", "tests_task_id": "500", "method": "iterative_repair_mbpp", "model": "gpt-4o-mini", "timestamp": "2025-09-03T11:38:51.205246", "stage": "code_generation"}
