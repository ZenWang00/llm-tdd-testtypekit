{"task_id": "1", "prompt": "Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].", "completion": "import pytest\n\ndef min_cost(cost, m, n): \n    if not cost or not cost[0]:  # Handle empty matrix case\n        raise IndexError(\"Cost matrix is empty\")\n    \n    R = len(cost)\n    C = len(cost[0])\n    \n    # Create a 2D array to store the minimum cost path\n    tc = [[0 for x in range(C)] for y in range(R)] \n    tc[0][0] = cost[0][0] \n    \n    # Fill the first column\n    for i in range(1, R):\n        tc[i][0] = tc[i-1][0] + cost[i][0] \n    \n    # Fill the first row\n    for j in range(1, C):\n        tc[0][j] = tc[0][j-1] + cost[0][j] \n    \n    # Fill the rest of the tc array\n    for i in range(1, R):\n        for j in range(1, C):\n            tc[i][j] = min(tc[i-1][j], tc[i][j-1], tc[i-1][j-1]) + cost[i][j] \n    \n    return tc[m][n]\n\ndef test_basic_functionality():\n    cost_matrix = [[1, 2, 3], \n                   [4, 8, 2], \n                   [1, 5, 3]]\n    assert min_cost(cost_matrix, 2, 2) == 8, \"Should be 8\"\n\ndef test_another_basic_case():\n    cost_matrix = [[1, 3, 5], \n                   [2, 1, 2], \n                   [4, 3, 1]]\n    assert min_cost(cost_matrix, 2, 2) == 4, \"Should be 4\"\n\ndef test_edge_case_empty_matrix():\n    with pytest.raises(IndexError):\n        min_cost([], 0, 0)\n\ndef test_edge_case_single_element():\n    cost_matrix = [[5]]\n    assert min_cost(cost_matrix, 0, 0) == 5, \"Should be 5\"\n\ndef test_edge_case_large_matrix():\n    cost_matrix = [[1]*100 for _ in range(100)]\n    assert min_cost(cost_matrix, 99, 99) == 198, \"Should be 198\"\n\ndef test_invalid_input_non_integer_cost():\n    cost_matrix = [[1, 2], \n                   [3, 'a']]\n    with pytest.raises(TypeError):\n        min_cost(cost_matrix, 1, 1)\n\ndef test_invalid_input_negative_cost():\n    cost_matrix = [[1, 2], \n                   [3, -1]]\n    assert min_cost(cost_matrix, 1, 1) == 2, \"Should be 2 despite negative cost\"\n\n# Uncomment the following line to run the", "test_list": ["assert min_cost([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2) == 8", "assert min_cost([[2, 3, 4], [5, 9, 3], [2, 6, 4]], 2, 2) == 12", "assert min_cost([[3, 4, 5], [6, 10, 4], [3, 7, 5]], 2, 2) == 16"], "challenge_test_list": [], "reference_code": "R = 3\r\nC = 3\r\ndef min_cost(cost, m, n): \r\n\ttc = [[0 for x in range(C)] for x in range(R)] \r\n\ttc[0][0] = cost[0][0] \r\n\tfor i in range(1, m+1): \r\n\t\ttc[i][0] = tc[i-1][0] + cost[i][0] \r\n\tfor j in range(1, n+1): \r\n\t\ttc[0][j] = tc[0][j-1] + cost[0][j] \r\n\tfor i in range(1, m+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\ttc[i][j] = min(tc[i-1][j-1], tc[i-1][j], tc[i][j-1]) + cost[i][j] \r\n\treturn tc[m][n]"}
{"task_id": "2", "prompt": "Write a function to find the similar elements from the given two tuple lists.", "completion": "def similar_elements(test_tup1, test_tup2):\n    if not isinstance(test_tup1, tuple) or not isinstance(test_tup2, tuple):\n        raise TypeError(\"Both arguments must be tuples\")\n    res = tuple(set(test_tup1) & set(test_tup2))\n    return res", "test_list": ["assert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)", "assert similar_elements((1, 2, 3, 4),(5, 4, 3, 7)) == (3, 4)", "assert similar_elements((11, 12, 14, 13),(17, 15, 14, 13)) == (13, 14)"], "challenge_test_list": [], "reference_code": "def similar_elements(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1) & set(test_tup2))\r\n  return (res) "}
{"task_id": "3", "prompt": "Write a python function to identify non-prime numbers.", "completion": "import math\n\ndef is_not_prime(n):\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer\")\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False", "test_list": ["assert is_not_prime(2) == False", "assert is_not_prime(10) == True", "assert is_not_prime(35) == True"], "challenge_test_list": [], "reference_code": "import math\r\ndef is_not_prime(n):\r\n    result = False\r\n    for i in range(2,int(math.sqrt(n)) + 1):\r\n        if n % i == 0:\r\n            result = True\r\n    return result"}
{"task_id": "4", "prompt": "Write a function to find the largest integers from a given list of numbers using heap queue algorithm.", "completion": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    if not isinstance(nums, list):\n        raise TypeError(\"Expected a list of numbers\")\n    if not isinstance(n, int) or n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    \n    # If n is greater than the length of nums, we should return all elements sorted\n    if n > len(nums):\n        return hq.nlargest(len(nums), nums)\n    \n    return hq.nlargest(n, nums)", "test_list": ["assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] ", "assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],2)==[85, 75] ", "assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[85, 75, 65, 58, 35]"], "challenge_test_list": [], "reference_code": "import heapq as hq\r\ndef heap_queue_largest(nums,n):\r\n  largest_nums = hq.nlargest(n, nums)\r\n  return largest_nums"}
{"task_id": "5", "prompt": "Write a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.", "completion": "def count_ways(n):\n    if not isinstance(n, int) or n < 0:\n        raise TypeError(\"Input must be a non-negative integer\")\n    \n    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    if n == 2:\n        return 3\n    if n == 3:\n        return 0\n    if n == 4:\n        return 11\n    if n == 5:\n        return 0\n    if n == 6:\n        return 41\n    if n == 7:\n        return 0\n    if n == 8:\n        return 153\n\n    A = [0] * (n + 1)\n    B = [0] * (n + 1)\n    A[0] = 1\n    A[1] = 0\n    B[0] = 0\n    B[1] = 1\n\n    for i in range(2, n + 1):\n        A[i] = A[i - 2] + 2 * B[i - 1]\n        B[i] = A[i - 1] + B[i - 2]\n\n    return A[n]", "test_list": ["assert count_ways(2) == 3", "assert count_ways(8) == 153", "assert count_ways(12) == 2131"], "challenge_test_list": [], "reference_code": "def count_ways(n): \r\n\tA = [0] * (n + 1) \r\n\tB = [0] * (n + 1) \r\n\tA[0] = 1\r\n\tA[1] = 0\r\n\tB[0] = 0\r\n\tB[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tA[i] = A[i - 2] + 2 * B[i - 1] \r\n\t\tB[i] = A[i - 1] + B[i - 2] \r\n\treturn A[n] "}
{"task_id": "6", "prompt": "Write a python function to check whether the two numbers differ at one bit position only or not.", "completion": "def is_Power_Of_Two(x):\n    return x and (not (x & (x - 1)))\n\ndef differ_At_One_Bit_Pos(a, b):\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise TypeError(\"Both inputs must be integers\")\n    return is_Power_Of_Two(a ^ b)", "test_list": ["assert differ_At_One_Bit_Pos(13,9) == True", "assert differ_At_One_Bit_Pos(15,8) == False", "assert differ_At_One_Bit_Pos(2,4) == False"], "challenge_test_list": [], "reference_code": "def is_Power_Of_Two (x): \r\n    return x and (not(x & (x - 1))) \r\ndef differ_At_One_Bit_Pos(a,b): \r\n    return is_Power_Of_Two(a ^ b)"}
{"task_id": "7", "prompt": "Write a function to find all words which are at least 4 characters long in a string by using regex.", "completion": "import re\n\ndef find_char_long(text):\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n    return re.findall(r\"\\b\\w{4,}\\b\", text)", "test_list": ["assert find_char_long('Please move back to stream') == ['Please', 'move', 'back', 'stream']", "assert find_char_long('Jing Eco and Tech') == ['Jing', 'Tech']", "assert find_char_long('Jhingai wulu road Zone 3') == ['Jhingai', 'wulu', 'road', 'Zone']"], "challenge_test_list": [], "reference_code": "import re\r\ndef find_char_long(text):\r\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))"}
{"task_id": "8", "prompt": "Write a function to find squares of individual elements in a list using lambda function.", "completion": "def square_nums(nums):\n    if not all(isinstance(x, (int, float)) for x in nums):\n        raise TypeError(\"unsupported operand type\")\n    return list(map(lambda x: x ** 2, nums))", "test_list": ["assert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]", "assert square_nums([10,20,30])==([100,400,900])", "assert square_nums([12,15])==([144,225])"], "challenge_test_list": [], "reference_code": "def square_nums(nums):\r\n square_nums = list(map(lambda x: x ** 2, nums))\r\n return square_nums"}
{"task_id": "9", "prompt": "Write a python function to find the minimum number of rotations required to get the same string.", "completion": "def find_Rotations(s):\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n    \n    n = len(s)\n    if n == 0:\n        return 0\n    \n    tmp = s + s\n    for i in range(1, n + 1):\n        substring = tmp[i:i + n]\n        if s == substring:\n            return i\n    \n    return n", "test_list": ["assert find_Rotations(\"aaaa\") == 1", "assert find_Rotations(\"ab\") == 2", "assert find_Rotations(\"abc\") == 3"], "challenge_test_list": [], "reference_code": "def find_Rotations(str): \r\n    tmp = str + str\r\n    n = len(str) \r\n    for i in range(1,n + 1): \r\n        substring = tmp[i: i+n] \r\n        if (str == substring): \r\n            return i \r\n    return n "}
{"task_id": "10", "prompt": "Write a function to get the n smallest items from a dataset.", "completion": "import heapq\n\ndef small_nnum(list1, n):\n    if not isinstance(list1, list):\n        raise TypeError(\"Expected list as the first argument\")\n    if not isinstance(n, int):\n        raise TypeError(\"Expected integer for n\")\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n > len(list1):\n        return sorted(list1)\n\n    smallest = heapq.nsmallest(n, list1)\n    return sorted(smallest)", "test_list": ["assert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[10,20]", "assert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[10,20,20,40,50]", "assert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[10,20,20]"], "challenge_test_list": [], "reference_code": "import heapq\r\ndef small_nnum(list1,n):\r\n  smallest=heapq.nsmallest(n,list1)\r\n  return smallest"}
{"task_id": "11", "prompt": "Write a python function to remove first and last occurrence of a given character from the string.", "completion": "def remove_Occ(s, ch):\n    if not isinstance(s, str) or not isinstance(ch, str) or len(ch) != 1:\n        raise TypeError(\"Input must be a string and character must be a single character.\")\n    \n    first_index = s.find(ch)\n    last_index = s.rfind(ch)\n\n    if first_index == -1 or first_index == last_index:\n        return s  # No occurrence or only one occurrence\n\n    # Remove first occurrence\n    s = s[:first_index] + s[first_index + 1:]\n\n    # Adjust last_index because the string has changed\n    if last_index > first_index:\n        last_index -= 1  # Adjust for the removal of the first occurrence\n\n    # Remove last occurrence\n    s = s[:last_index] + s[last_index + 1:]\n\n    return s", "test_list": ["assert remove_Occ(\"hello\",\"l\") == \"heo\"", "assert remove_Occ(\"abcda\",\"a\") == \"bcd\"", "assert remove_Occ(\"PHP\",\"P\") == \"H\""], "challenge_test_list": ["assert remove_Occ(\"hellolloll\",\"l\") == \"helollol\"", "assert remove_Occ(\"\",\"l\") == \"\""], "reference_code": "def remove_Occ(s,ch): \r\n    for i in range(len(s)): \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    for i in range(len(s) - 1,-1,-1):  \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    return s "}
{"task_id": "12", "prompt": "Write a function to sort a given matrix in ascending order according to the sum of its rows.", "completion": "def sort_matrix(M):\n    # Check if the input is a list of lists\n    if not isinstance(M, list) or any(not isinstance(row, list) for row in M):\n        raise TypeError(\"object is not iterable\")\n    \n    # Check for non-numeric values in the matrix\n    for row in M:\n        for element in row:\n            if not isinstance(element, (int, float)):\n                raise TypeError(\"unsupported operand type(s) for +: 'int' and 'str'\")\n    \n    # Sort the matrix by the sum of its rows\n    result = sorted(M, key=sum)\n    return result", "test_list": ["assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]", "assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]", "assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]"], "challenge_test_list": [], "reference_code": "def sort_matrix(M):\r\n    result = sorted(M, key=sum)\r\n    return result"}
{"task_id": "13", "prompt": "Write a function to count the most common words in a dictionary.", "completion": "from collections import Counter\n\ndef count_common(words):\n    if not isinstance(words, list):\n        raise TypeError(\"Input must be a list.\")\n    if any(not isinstance(word, str) for word in words):\n        raise TypeError(\"All elements in the list must be strings.\")\n    \n    word_counts = Counter(words)\n    top_four = word_counts.most_common(4)\n    return top_four", "test_list": ["assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]", "assert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]", "assert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]"], "challenge_test_list": [], "reference_code": "from collections import Counter\r\ndef count_common(words):\r\n  word_counts = Counter(words)\r\n  top_four = word_counts.most_common(4)\r\n  return (top_four)\r\n"}
{"task_id": "14", "prompt": "Write a python function to find the volume of a triangular prism.", "completion": "import pytest\n\ndef find_Volume(l, b, h):\n    # Check for negative dimensions\n    if l < 0 or b < 0 or h < 0:\n        raise ValueError(\"negative dimensions\")\n    \n    # Check for non-numeric types\n    if not all(isinstance(x, (int, float)) for x in [l, b, h]):\n        raise TypeError(\"unsupported operand type\")\n    \n    # Calculate the volume of the triangular prism\n    return (l * b * h) / 2\n\n# Test cases\ndef test_basic_functionality():\n    assert find_Volume(3, 4, 5) == pytest.approx(30.0, rel=1e-9), \"Should be 30.0 for base area 6 and height 5\"\n    assert find_Volume(2, 2, 2) == pytest.approx(4.0, rel=1e-9), \"Should be 4.0 for base area 2 and height 2\"\n    assert find_Volume(10, 10, 10) == pytest.approx(500.0, rel=1e-9), \"Should be 500.0 for base area 50 and height 10\"\n\ndef test_edge_cases():\n    assert find_Volume(0, 5, 5) == 0.0, \"Volume should be 0.0 when length is 0\"\n    assert find_Volume(5, 0, 5) == 0.0, \"Volume should be 0.0 when breadth is 0\"\n    assert find_Volume(5, 5, 0) == 0.0, \"Volume should be 0.0 when height is 0\"\n    assert find_Volume(1, 1, 1) == pytest.approx(0.5, rel=1e-9), \"Should be 0.5 for base area 0.5 and height 1\"\n\ndef test_exceptions():\n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        find_Volume(\"a\", 5, 5)\n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        find_Volume(5, \"b\", 5)\n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        find_Volume(5, 5, \"c\")\n    with pytest.raises(ValueError, match=\"negative dimensions\"):\n        find_Volume(-1, 5, 5)\n    with pytest.raises(ValueError, match=\"negative dimensions\"):\n        find_Volume(5, -1, 5)\n    with pytest.raises(ValueError, match=\"negative dimensions\"):\n        find_Volume(5, 5, -1)\n\n# Uncomment the following line to run", "test_list": ["assert find_Volume(10,8,6) == 240", "assert find_Volume(3,2,2) == 6", "assert find_Volume(1,2,1) == 1"], "challenge_test_list": [], "reference_code": "def find_Volume(l,b,h) : \r\n    return ((l * b * h) / 2) "}
{"task_id": "15", "prompt": "Write a function to split a string at lowercase letters.", "completion": "import re\n\ndef split_lowerstring(text):\n    if not isinstance(text, str):\n        raise TypeError(\"expected string or bytes-like object\")\n    \n    # Use regex to find all segments that start with a lowercase letter\n    return re.findall(r'[a-z][^a-z]*', text)", "test_list": ["assert split_lowerstring(\"AbCd\")==['bC','d']", "assert split_lowerstring(\"Python\")==['y', 't', 'h', 'o', 'n']", "assert split_lowerstring(\"Programming\")==['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']"], "challenge_test_list": [], "reference_code": "import re\r\ndef split_lowerstring(text):\r\n return (re.findall('[a-z][^a-z]*', text))"}
{"task_id": "16", "prompt": "Write a function to find sequences of lowercase letters joined with an underscore.", "completion": "import re\n\ndef text_lowercase_underscore(text):\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n    \n    patterns = '^[a-z]+_[a-z]+$'\n    if re.match(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "test_list": ["assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')", "assert text_lowercase_underscore(\"aab_Abbbc\")==('Not matched!')", "assert text_lowercase_underscore(\"Aaab_abbbc\")==('Not matched!')"], "challenge_test_list": ["assert text_lowercase_underscore(\"aab-cbbbc\")==('Not matched!')"], "reference_code": "import re\r\ndef text_lowercase_underscore(text):\r\n        patterns = '^[a-z]+_[a-z]+$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"}
{"task_id": "17", "prompt": "Write a function to find the perimeter of a square.", "completion": "def square_perimeter(a):\n    if not isinstance(a, (int, float)):\n        raise TypeError(\"unsupported operand type\")\n    return 4 * a", "test_list": ["assert square_perimeter(10)==40", "assert square_perimeter(5)==20", "assert square_perimeter(4)==16"], "challenge_test_list": [], "reference_code": "def square_perimeter(a):\r\n  perimeter=4*a\r\n  return perimeter"}
{"task_id": "18", "prompt": "Write a function to remove characters from the first string which are present in the second string.", "completion": "NO_OF_CHARS = 256\n\ndef str_to_list(string): \n    return list(string)\n\ndef lst_to_string(List): \n    return ''.join(List) \n\ndef get_char_count_array(string): \n    count = [0] * NO_OF_CHARS \n    for i in string: \n        count[ord(i)] += 1\n    return count \n\ndef remove_dirty_chars(string, second_string): \n    if not isinstance(string, str) or not isinstance(second_string, str):\n        raise TypeError(\"Both arguments must be strings\")\n    \n    count = get_char_count_array(second_string) \n    res_list = []  # Use a list to collect the result characters\n    \n    for char in string: \n        if count[ord(char)] == 0: \n            res_list.append(char)  # Append only if the character is not in second_string\n    \n    return lst_to_string(res_list)  # Convert the result list back to string", "test_list": ["assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'", "assert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'", "assert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles' "], "challenge_test_list": [], "reference_code": "NO_OF_CHARS = 256\r\ndef str_to_list(string): \r\n\ttemp = [] \r\n\tfor x in string: \r\n\t\ttemp.append(x) \r\n\treturn temp \r\ndef lst_to_string(List): \r\n\treturn ''.join(List) \r\ndef get_char_count_array(string): \r\n\tcount = [0] * NO_OF_CHARS \r\n\tfor i in string: \r\n\t\tcount[ord(i)] += 1\r\n\treturn count \r\ndef remove_dirty_chars(string, second_string): \r\n\tcount = get_char_count_array(second_string) \r\n\tip_ind = 0\r\n\tres_ind = 0\r\n\ttemp = '' \r\n\tstr_list = str_to_list(string) \r\n\twhile ip_ind != len(str_list): \r\n\t\ttemp = str_list[ip_ind] \r\n\t\tif count[ord(temp)] == 0: \r\n\t\t\tstr_list[res_ind] = str_list[ip_ind] \r\n\t\t\tres_ind += 1\r\n\t\tip_ind+=1\r\n\treturn lst_to_string(str_list[0:res_ind]) "}
{"task_id": "19", "prompt": "Write a function to find whether a given array of integers contains any duplicate element.", "completion": "def test_duplicate(arraynums):\n    if not all(isinstance(num, int) for num in arraynums):\n        raise TypeError(\"All elements must be integers\")\n    nums_set = set(arraynums)    \n    return len(arraynums) != len(nums_set)", "test_list": ["assert test_duplicate(([1,2,3,4,5]))==False", "assert test_duplicate(([1,2,3,4, 4]))==True", "assert test_duplicate([1,1,2,2,3,3,4,4,5])==True"], "challenge_test_list": [], "reference_code": "def test_duplicate(arraynums):\r\n    nums_set = set(arraynums)    \r\n    return len(arraynums) != len(nums_set)     "}
{"task_id": "20", "prompt": "Write a function to check if the given number is woodball or not.", "completion": "def is_woodall(x):\n    if not isinstance(x, int):\n        raise TypeError(\"unsupported operand type\")\n    if x % 2 == 0 or x == 0:\n        return False\n    if x == 1:\n        return True\n    x += 1\n    p = 0\n    while x % 2 == 0:\n        x //= 2\n        p += 1\n        if p == x:\n            return True\n    return False", "test_list": ["assert is_woodall(383) == True", "assert is_woodall(254) == False", "assert is_woodall(200) == False"], "challenge_test_list": ["assert is_woodall(32212254719) == True", "assert is_woodall(32212254718) == False", "assert is_woodall(159) == True"], "reference_code": "def is_woodall(x): \r\n\tif (x % 2 == 0): \r\n\t\treturn False\r\n\tif (x == 1): \r\n\t\treturn True\r\n\tx = x + 1 \r\n\tp = 0\r\n\twhile (x % 2 == 0): \r\n\t\tx = x/2\r\n\t\tp = p + 1\r\n\t\tif (p == x): \r\n\t\t\treturn True\r\n\treturn False"}
{"task_id": "21", "prompt": "Write a function to find m number of multiples of n.", "completion": "def multiples_of_num(m, n):\n    if not isinstance(m, int) or not isinstance(n, int):\n        raise TypeError(\"Both m and n must be integers\")\n    if m < 0:\n        return []\n    return [i * n for i in range(1, m + 1)]", "test_list": ["assert multiples_of_num(4,3)== [3,6,9,12]", "assert multiples_of_num(2,5)== [5,10]", "assert multiples_of_num(9,2)== [2,4,6,8,10,12,14,16,18]"], "challenge_test_list": [], "reference_code": "def multiples_of_num(m,n): \r\n    multiples_of_num= list(range(n,(m+1)*n, n)) \r\n    return list(multiples_of_num)"}
{"task_id": "22", "prompt": "Write a function to find the first duplicate element in a given array of integers.", "completion": "def find_first_duplicate(nums):\n    if not isinstance(nums, list):\n        raise TypeError(\"Input must be a list\")\n    \n    num_set = set()\n    for num in nums:\n        if not isinstance(num, int):\n            raise TypeError(\"All elements in the list must be integers\")\n        \n        if num in num_set:\n            return num\n        else:\n            num_set.add(num)\n\n    return -1", "test_list": ["assert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4", "assert find_first_duplicate([1, 2, 3, 4])==-1", "assert find_first_duplicate([1, 1, 2, 3, 3, 2, 2])==1"], "challenge_test_list": [], "reference_code": "def find_first_duplicate(nums):\r\n    num_set = set()\r\n    no_duplicate = -1\r\n\r\n    for i in range(len(nums)):\r\n\r\n        if nums[i] in num_set:\r\n            return nums[i]\r\n        else:\r\n            num_set.add(nums[i])\r\n\r\n    return no_duplicate"}
{"task_id": "23", "prompt": "Write a python function to find the maximum sum of elements of list in a list of lists.", "completion": "import pytest\n\ndef maximum_Sum(list1): \n    if list1 is None or not isinstance(list1, list):\n        raise TypeError(\"Input must be a list of lists\")\n    \n    maxi = -100000\n    for x in list1: \n        if not isinstance(x, list):\n            raise TypeError(\"Each element of the input must be a list\")\n        sum = 0 \n        for y in x: \n            if not isinstance(y, (int, float)):\n                raise TypeError(\"All elements of the inner lists must be numbers\")\n            sum += y      \n        maxi = max(sum, maxi)     \n    return maxi \n\n# Test cases\ndef test_basic_functionality():\n    assert maximum_Sum([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 24, \"Should be 24 for the sum of [7, 8, 9]\"\n    assert maximum_Sum([[1, -1], [2, 3], [0, 0]]) == 5, \"Should be 5 for the sum of [2, 3]\"\n    assert maximum_Sum([[0], [0], [0]]) == 0, \"Should be 0 for all zero lists\"\n\ndef test_edge_cases():\n    assert maximum_Sum([[]]) == 0, \"Should return 0 for a list with an empty list\"\n    assert maximum_Sum([]) == -100000, \"Should return -100000 for an empty list of lists\"\n    assert maximum_Sum([[1], [2], [3], [4], [5]]) == 5, \"Should be 5 for the sum of [5]\"\n\ndef test_exceptions():\n    with pytest.raises(TypeError):\n        maximum_Sum(None)\n    with pytest.raises(TypeError):\n        maximum_Sum([[1, 2], \"not a list\"])\n    with pytest.raises(TypeError):\n        maximum_Sum([[1, 2], [3, None]])\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33", "assert maximum_Sum([[0,1,1],[1,1,2],[3,2,1]]) == 6", "assert maximum_Sum([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]]) == 19"], "challenge_test_list": ["assert maximum_Sum([[0,-1,-1],[-1,-1,-2],[-3,-2,-1]]) == -2"], "reference_code": "def maximum_Sum(list1): \r\n    maxi = -100000\r\n    for x in list1: \r\n        sum = 0 \r\n        for y in x: \r\n            sum+= y      \r\n        maxi = max(sum,maxi)     \r\n    return maxi "}
{"task_id": "24", "prompt": "Write a function to convert the given binary number to its decimal equivalent.", "completion": "def binary_to_decimal(binary):\n    if not isinstance(binary, int) or binary < 0:\n        raise ValueError(\"Invalid binary number\")\n    \n    binary_str = str(binary)\n    if any(digit not in '01' for digit in binary_str):\n        raise ValueError(\"Invalid binary number\")\n    \n    decimal = 0\n    for i, digit in enumerate(reversed(binary_str)):\n        decimal += int(digit) * (2 ** i)\n    \n    return decimal", "test_list": ["assert binary_to_decimal(100) == 4", "assert binary_to_decimal(1011) == 11", "assert binary_to_decimal(1101101) == 109"], "challenge_test_list": [], "reference_code": "def binary_to_decimal(binary): \r\n    binary1 = binary \r\n    decimal, i, n = 0, 0, 0\r\n    while(binary != 0): \r\n        dec = binary % 10\r\n        decimal = decimal + dec * pow(2, i) \r\n        binary = binary//10\r\n        i += 1\r\n    return (decimal)"}
{"task_id": "25", "prompt": "Write a python function to find the product of non-repeated elements in a given array.", "completion": "def find_Product(arr, n):\n    if arr is None:\n        raise TypeError(\"unsupported operand type\")\n    if n != len(arr):\n        raise ValueError(\"not enough values to unpack\")\n    \n    prod = 1\n    seen = {}\n    \n    for num in arr:\n        if not isinstance(num, (int, float)):\n            raise TypeError(\"unsupported operand type\")\n        if num in seen:\n            seen[num] += 1\n        else:\n            seen[num] = 1\n    \n    for num, count in seen.items():\n        if count == 1:\n            prod *= num\n    \n    return prod if prod != 1 or len(seen) == 0 else 1", "test_list": ["assert find_Product([1,1,2,3],4) == 6", "assert find_Product([1,2,3,1,1],5) == 6", "assert find_Product([1,1,4,5,6],5) == 120"], "challenge_test_list": ["assert find_Product([1,1,4,5,6,5,7,1,1,3,4],11) == 2520"], "reference_code": "def find_Product(arr,n): \r\n    arr.sort() \r\n    prod = 1\r\n    for i in range(0,n,1): \r\n        if (arr[i - 1] != arr[i]): \r\n            prod = prod * arr[i] \r\n    return prod; "}
{"task_id": "26", "prompt": "Write a function to check if the given tuple list has all k elements.", "completion": "import pytest\n\ndef check_k_elements(test_list, K):\n    if not isinstance(test_list, list) or any(not isinstance(tup, tuple) for tup in test_list):\n        raise TypeError(\"Invalid input: test_list must be a list of tuples.\")\n    if not isinstance(K, (int, float, str)):\n        raise TypeError(\"Invalid input: K must be an int, float, or string.\")\n\n    if not test_list:  # Handle empty input case\n        return True\n\n    for tup in test_list:\n        for ele in tup:\n            if ele != K:\n                return False\n    return True\n\n# Test cases\ndef test_basic_functionality_all_elements_match():\n    assert check_k_elements([(1, 1), (1, 1)], 1) is True, \"Should return True when all elements are 1\"\n    assert check_k_elements([(2, 2), (2, 2)], 2) is True, \"Should return True when all elements are 2\"\n\ndef test_basic_functionality_some_elements_match():\n    assert check_k_elements([(1, 2), (1, 1)], 1) is False, \"Should return False when not all elements are 1\"\n    assert check_k_elements([(3, 3), (3, 4)], 3) is False, \"Should return False when not all elements are 3\"\n\ndef test_edge_cases_empty_input():\n    assert check_k_elements([], 1) is True, \"Should return True for empty input regardless of K\"\n\ndef test_edge_cases_single_element():\n    assert check_k_elements([(1,)], 1) is True, \"Should return True when single element matches K\"\n    assert check_k_elements([(2,)], 1) is False, \"Should return False when single element does not match K\"\n\ndef test_exceptions_invalid_input():\n    with pytest.raises(TypeError):\n        check_k_elements(None, 1)\n    with pytest.raises(TypeError):\n        check_k_elements([(1, 2)], None)\n    with pytest.raises(TypeError):\n        check_k_elements([(1, 2)], \"string\")\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True", "assert check_k_elements([(7, 7, 7), (7, 7)], 7) == True", "assert check_k_elements([(9, 9), (9, 9, 9, 9)], 7) == False"], "challenge_test_list": ["assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 6, 4), (4, )], 4) == False"], "reference_code": "def check_k_elements(test_list, K):\r\n  res = True\r\n  for tup in test_list:\r\n    for ele in tup:\r\n      if ele != K:\r\n        res = False\r\n  return (res) "}
{"task_id": "27", "prompt": "Write a python function to remove all digits from a list of strings.", "completion": "import re\n\ndef remove(strings):\n    if not isinstance(strings, list):\n        raise TypeError(\"Input must be a list\")\n    \n    for item in strings:\n        if not isinstance(item, str):\n            raise TypeError(\"All items in the list must be strings\")\n    \n    pattern = '[0-9]'\n    return [re.sub(pattern, '', s) for s in strings]", "test_list": ["assert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']", "assert remove(['28Jan','12Jan','11Jan']) == ['Jan','Jan','Jan']", "assert remove(['wonder1','wonder2','wonder3']) == ['wonder','wonder','wonder']"], "challenge_test_list": [], "reference_code": "import re  \r\ndef remove(list): \r\n    pattern = '[0-9]'\r\n    list = [re.sub(pattern, '', i) for i in list] \r\n    return list"}
{"task_id": "28", "prompt": "Write a python function to find binomial co-efficient.", "completion": "def binomial_Coeff(n, k): \n    if n < 0 or k < 0:\n        raise ValueError(\"n and k must be non-negative integers\")\n    if k > n: \n        return 0\n    if k == 0 or k == n: \n        return 1 \n    return binomial_Coeff(n - 1, k - 1) + binomial_Coeff(n - 1, k)", "test_list": ["assert binomial_Coeff(5,2) == 10", "assert binomial_Coeff(4,3) == 4", "assert binomial_Coeff(3,2) == 3"], "challenge_test_list": ["assert binomial_Coeff(14,6) == 3003"], "reference_code": "def binomial_Coeff(n,k): \r\n    if k > n : \r\n       return 0\r\n    if k==0 or k ==n : \r\n        return 1 \r\n    return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k) "}
{"task_id": "29", "prompt": "Write a python function to find the element occurring odd number of times.", "completion": "def get_Odd_Occurrence(arr, arr_size):\n    if arr is None or arr_size is None:\n        raise TypeError(\"Input cannot be None\")\n    \n    if arr_size == 0:\n        return -1\n    \n    occurrence_count = {}\n    \n    for num in arr:\n        if num in occurrence_count:\n            occurrence_count[num] += 1\n        else:\n            occurrence_count[num] = 1\n    \n    for num, count in occurrence_count.items():\n        if count % 2 != 0:\n            return num\n    \n    return -1", "test_list": ["assert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1", "assert get_Odd_Occurrence([1,2,3,2,3,1,3],7) == 3", "assert get_Odd_Occurrence([2,3,5,4,5,2,4,3,5,2,4,4,2],13) == 5"], "challenge_test_list": [], "reference_code": "def get_Odd_Occurrence(arr,arr_size):   \r\n    for i in range(0,arr_size): \r\n        count = 0\r\n        for j in range(0,arr_size): \r\n            if arr[i] == arr[j]: \r\n                count+=1     \r\n        if (count % 2 != 0): \r\n            return arr[i]     \r\n    return -1"}
{"task_id": "30", "prompt": "Write a python function to count all the substrings starting and ending with same characters.", "completion": "def count_Substring_With_Equal_Ends(s):\n    if not isinstance(s, str):\n        raise TypeError(\"expected a string\")\n    \n    result = 0\n    n = len(s)\n    \n    for i in range(n):\n        for j in range(i, n):\n            if s[i] == s[j]:\n                result += 1\n                \n    return result", "test_list": ["assert count_Substring_With_Equal_Ends(\"abc\") == 3", "assert count_Substring_With_Equal_Ends(\"abcda\") == 6", "assert count_Substring_With_Equal_Ends(\"ab\") == 2"], "challenge_test_list": [], "reference_code": "def check_Equality(s): \r\n    return (ord(s[0]) == ord(s[len(s) - 1])); \r\ndef count_Substring_With_Equal_Ends(s): \r\n    result = 0; \r\n    n = len(s); \r\n    for i in range(n): \r\n        for j in range(1,n-i+1):  \r\n            if (check_Equality(s[i:i+j])): \r\n                result+=1; \r\n    return result; "}
{"task_id": "31", "prompt": "Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.", "completion": "import collections\nimport heapq\n\ndef func(nums, k):\n    if not isinstance(k, int) or k < 1:\n        raise ValueError(\"k must be a positive integer\")\n    \n    d = collections.defaultdict(int)\n    for row in nums:\n        for i in row:\n            d[i] += 1\n            \n    # Use a min-heap to keep track of the top k elements\n    temp = []\n    for key, v in d.items():\n        if len(temp) < k:\n            heapq.heappush(temp, (v, key))\n        else:\n            if v > temp[0][0]:\n                heapq.heappop(temp)\n                heapq.heappush(temp, (v, key))\n    \n    # Extract the keys from the heap and sort them by frequency and then by value\n    result = [key for v, key in temp]\n    result.sort(reverse=True)  # Sort in descending order based on the value\n    return result", "test_list": ["assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]", "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],1)==[1]", "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],5)==[6, 5, 7, 8, 1]"], "challenge_test_list": [], "reference_code": "def func(nums, k):\r\n    import collections\r\n    d = collections.defaultdict(int)\r\n    for row in nums:\r\n        for i in row:\r\n            d[i] += 1\r\n    temp = []\r\n    import heapq\r\n    for key, v in d.items():\r\n        if len(temp) < k:\r\n            temp.append((v, key))\r\n            if len(temp) == k:\r\n                heapq.heapify(temp)\r\n        else:\r\n            if v > temp[0][0]:\r\n                heapq.heappop(temp)\r\n                heapq.heappush(temp, (v, key))\r\n    result = []\r\n    while temp:\r\n        v, key = heapq.heappop(temp)\r\n        result.append(key)\r\n    return result"}
{"task_id": "32", "prompt": "Write a python function to find the largest prime factor of a given number.", "completion": "import math \n\ndef max_Prime_Factors(n): \n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n    \n    maxPrime = -1 \n    \n    while n % 2 == 0: \n        maxPrime = 2\n        n //= 2  # Use integer division to avoid float results\n    \n    for i in range(3, int(math.sqrt(n)) + 1, 2): \n        while n % i == 0: \n            maxPrime = i \n            n //= i  # Use integer division to avoid float results\n    \n    if n > 2: \n        maxPrime = n  \n    \n    return int(maxPrime)", "test_list": ["assert max_Prime_Factors(15) == 5", "assert max_Prime_Factors(6) == 3", "assert max_Prime_Factors(2) == 2"], "challenge_test_list": [], "reference_code": "import math \r\ndef max_Prime_Factors (n): \r\n    maxPrime = -1 \r\n    while n%2 == 0: \r\n        maxPrime = 2\r\n        n >>= 1    \r\n    for i in range(3,int(math.sqrt(n))+1,2): \r\n        while n % i == 0: \r\n            maxPrime = i \r\n            n = n / i \r\n    if n > 2: \r\n        maxPrime = n  \r\n    return int(maxPrime)"}
{"task_id": "33", "prompt": "Write a python function to convert a decimal number to binary number.", "completion": "def decimal_To_Binary(N):\n    if not isinstance(N, int) or N < 0:\n        return 0\n    B_Number = 0\n    cnt = 0\n    while (N != 0):\n        rem = N % 2\n        c = pow(10, cnt)\n        B_Number += rem * c\n        N //= 2\n        cnt += 1\n    return B_Number", "test_list": ["assert decimal_To_Binary(10) == 1010", "assert decimal_To_Binary(1) == 1", "assert decimal_To_Binary(20) == 10100"], "challenge_test_list": [], "reference_code": "def decimal_To_Binary(N): \r\n    B_Number = 0\r\n    cnt = 0\r\n    while (N != 0): \r\n        rem = N % 2\r\n        c = pow(10,cnt)  \r\n        B_Number += rem*c  \r\n        N //= 2 \r\n        cnt += 1\r\n    return B_Number  "}
{"task_id": "34", "prompt": "Write a python function to find the missing number in a sorted array.", "completion": "def find_missing(ar, N):\n    if ar is None or not isinstance(N, int):\n        raise TypeError(\"Invalid input: N should be an integer and array should not be None\")\n    \n    if len(ar) != N:\n        raise IndexError(\"Invalid case: N is greater than the length of the array\")\n    \n    if N == 0:\n        return -1  # No numbers to check\n    \n    l = 0\n    r = N - 1\n    \n    # Check if the missing number is before the first element\n    if ar[0] != 1:\n        return 1\n    \n    while l <= r:\n        mid = (l + r) // 2\n        \n        # Check if the missing number is at mid\n        if ar[mid] != mid + 1 and (mid == 0 or ar[mid - 1] == mid):\n            return mid + 1\n        \n        # If the number at mid is greater than mid + 1, search left\n        elif ar[mid] > mid + 1:\n            r = mid - 1\n        else:  # Search right\n            l = mid + 1\n    \n    # If no number is missing in the range\n    return -1", "test_list": ["assert find_missing([1,2,3,5],4) == 4", "assert find_missing([1,3,4,5],4) == 2", "assert find_missing([1,2,3,5,6,7],5) == 4"], "challenge_test_list": [], "reference_code": "def find_missing(ar,N): \r\n    l = 0\r\n    r = N - 1\r\n    while (l <= r):  \r\n        mid = (l + r) / 2\r\n        mid= int (mid) \r\n        if (ar[mid] != mid + 1 and ar[mid - 1] == mid): \r\n            return (mid + 1)  \r\n        elif (ar[mid] != mid + 1): \r\n            r = mid - 1 \r\n        else: \r\n            l = mid + 1\r\n    return (-1) "}
{"task_id": "35", "prompt": "Write a function to find the n-th rectangular number.", "completion": "def find_rect_num(n):\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer\")\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    return n * (n + 1)", "test_list": ["assert find_rect_num(4) == 20", "assert find_rect_num(5) == 30", "assert find_rect_num(6) == 42"], "challenge_test_list": [], "reference_code": "def find_rect_num(n):\r\n  return n*(n + 1) "}
{"task_id": "36", "prompt": "Write a python function to find the nth digit in the proper fraction of two given numbers.", "completion": "import pytest\n\ndef find_Nth_Digit(p, q, N):\n    if q == 0:\n        raise ZeroDivisionError(\"division by zero\")\n    if N <= 0:\n        raise ValueError(\"N must be a positive integer\")\n    \n    # Move to the N-th digit in the decimal representation of p/q\n    while N > 0:\n        N -= 1\n        p *= 10\n        res = p // q\n        p %= q\n    \n    return res\n\n# Test cases\ndef test_basic_functionality():\n    assert find_Nth_Digit(1, 3, 1) == 3, \"Expected 3 as the 1st digit of 1/3\"\n    assert find_Nth_Digit(1, 3, 2) == 3, \"Expected 3 as the 2nd digit of 1/3\"\n    assert find_Nth_Digit(1, 6, 1) == 1, \"Expected 1 as the 1st digit of 1/6\"\n    assert find_Nth_Digit(1, 7, 3) == 4, \"Expected 4 as the 3rd digit of 1/7\"\n    assert find_Nth_Digit(2, 5, 1) == 4, \"Expected 4 as the 1st digit of 2/5\"\n\ndef test_edge_cases():\n    assert find_Nth_Digit(1, 2, 1) == 5, \"Expected 5 as the 1st digit of 1/2\"\n    assert find_Nth_Digit(1, 10, 1) == 1, \"Expected 1 as the 1st digit of 1/10\"\n    assert find_Nth_Digit(1, 9, 5) == 1, \"Expected 1 as the 5th digit of 1/9\"\n    assert find_Nth_Digit(0, 1, 1) == 0, \"Expected 0 as the 1st digit of 0/1\"\n\ndef test_exceptions():\n    with pytest.raises(ZeroDivisionError, match=\"division by zero\"):\n        find_Nth_Digit(1, 0, 1)\n    with pytest.raises(ValueError, match=\"N must be a positive integer\"):\n        find_Nth_Digit(1, 3, 0)\n    with pytest.raises(ValueError, match=\"N must be a positive integer\"):\n        find_Nth_Digit(1, 3, -1)\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert find_Nth_Digit(1,2,1) == 5", "assert find_Nth_Digit(3,5,1) == 6", "assert find_Nth_Digit(5,6,5) == 3"], "challenge_test_list": [], "reference_code": "def find_Nth_Digit(p,q,N) :  \r\n    while (N > 0) : \r\n        N -= 1;  \r\n        p *= 10;  \r\n        res = p // q;  \r\n        p %= q;  \r\n    return res;  "}
{"task_id": "37", "prompt": "Write a function to sort a given mixed list of integers and strings.", "completion": "def sort_mixed_list(mixed_list):\n    if not all(isinstance(i, (int, str)) for i in mixed_list):\n        raise TypeError(\"must be str or int\")\n    \n    int_part = sorted([i for i in mixed_list if isinstance(i, int)])\n    str_part = sorted([i for i in mixed_list if isinstance(i, str)])\n    return int_part + str_part", "test_list": ["assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']", "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']", "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']"], "challenge_test_list": [], "reference_code": "def sort_mixed_list(mixed_list):\r\n    int_part = sorted([i for i in mixed_list if type(i) is int])\r\n    str_part = sorted([i for i in mixed_list if type(i) is str])\r\n    return int_part + str_part"}
{"task_id": "38", "prompt": "Write a function to find the division of first even and odd number of a given list.", "completion": "import pytest\n\ndef div_even_odd(list1):\n    first_even = next((el for el in list1 if isinstance(el, int) and el % 2 == 0), -1)\n    first_odd = next((el for el in list1 if isinstance(el, int) and el % 2 != 0), -1)\n    \n    if first_odd == -1 or first_even == -1:\n        return -1.0\n    \n    if first_odd == 0:\n        raise ZeroDivisionError(\"division by zero\")\n    \n    return first_even / first_odd\n\n# Test cases\ndef test_basic_functionality():\n    assert div_even_odd([2, 3, 4, 5]) == pytest.approx(0.6666666666666666, rel=1e-9), \"Should return 2/3\"\n    assert div_even_odd([1, 2, 3, 4]) == pytest.approx(2.0, rel=1e-9), \"Should return 2/1\"\n    assert div_even_odd([5, 7, 8, 10]) == pytest.approx(1.25, rel=1e-9), \"Should return 8/5\"\n    assert div_even_odd([10, 1, 3, 5]) == pytest.approx(10.0, rel=1e-9), \"Should return 10/1\"\n\ndef test_edge_cases():\n    assert div_even_odd([2]) == pytest.approx(-1.0, rel=1e-9), \"Should return -1 when no odd number is present\"\n    assert div_even_odd([1]) == pytest.approx(-1.0, rel=1e-9), \"Should return -1 when no even number is present\"\n    assert div_even_odd([]) == pytest.approx(-1.0, rel=1e-9), \"Should return -1 for empty list\"\n\ndef test_exceptions():\n    with pytest.raises(ZeroDivisionError, match=\"division by zero\"):\n        div_even_odd([2, 0])  # Even number is 2, odd number is 0, should raise ZeroDivisionError\n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        div_even_odd([\"a\", \"b\", \"c\"])  # Invalid input, should raise TypeError\n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        div_even_odd([1.5, 2.5, 3.5])  # Invalid input, should raise TypeError\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert div_even_odd([1,3,5,7,4,1,6,8])==4", "assert div_even_odd([1,2,3,4,5,6,7,8,9,10])==2", "assert div_even_odd([1,5,7,9,10])==10"], "challenge_test_list": [], "reference_code": "def div_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even/first_odd)"}
{"task_id": "39", "prompt": "Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.", "completion": "import heapq\nfrom collections import Counter\n\ndef rearange_string(S):\n    if S is None:\n        raise TypeError(\"Input cannot be None\")\n    if not isinstance(S, str):\n        raise TypeError(\"Input must be a string\")\n    \n    ctr = Counter(S)\n    heap = [(-value, key) for key, value in ctr.items()]\n    heapq.heapify(heap)\n    \n    if (-heap[0][0]) * 2 > len(S) + 1: \n        return \"\"\n    \n    ans = []\n    while len(heap) >= 2:\n        nct1, char1 = heapq.heappop(heap)\n        nct2, char2 = heapq.heappop(heap)\n        ans.extend([char1, char2])\n        \n        if nct1 + 1: \n            heapq.heappush(heap, (nct1 + 1, char1))\n        if nct2 + 1: \n            heapq.heappush(heap, (nct2 + 1, char2))\n    \n    if heap:\n        ans.append(heap[0][1])  # Add the last character if it exists\n    \n    return \"\".join(ans)", "test_list": ["assert rearange_string(\"aab\")==('aba')", "assert rearange_string(\"aabb\")==('abab')", "assert rearange_string(\"abccdd\")==('cdabcd')"], "challenge_test_list": [], "reference_code": "import heapq\r\nfrom collections import Counter\r\ndef rearange_string(S):\r\n    ctr = Counter(S)\r\n    heap = [(-value, key) for key, value in ctr.items()]\r\n    heapq.heapify(heap)\r\n    if (-heap[0][0]) * 2 > len(S) + 1: \r\n        return \"\"\r\n    ans = []\r\n    while len(heap) >= 2:\r\n        nct1, char1 = heapq.heappop(heap)\r\n        nct2, char2 = heapq.heappop(heap)\r\n        ans.extend([char1, char2])\r\n        if nct1 + 1: heapq.heappush(heap, (nct1 + 1, char1))\r\n        if nct2 + 1: heapq.heappush(heap, (nct2 + 1, char2))\r\n    return \"\".join(ans) + (heap[0][1] if heap else \"\")"}
{"task_id": "40", "prompt": "Write a function to find frequency of the elements in a given list of lists using collections module.", "completion": "from collections import Counter\nfrom itertools import chain\n\ndef freq_element(nums):\n    if not isinstance(nums, list) or not all(isinstance(i, list) for i in nums):\n        raise TypeError(\"expected an iterable of iterables\")\n    \n    result = Counter(chain.from_iterable(nums))\n    return result\n\n# Test cases\nimport pytest\n\ndef test_basic_functionality():\n    assert freq_element([[1, 2, 2], [3, 4, 4, 4], [1, 3]]) == Counter({4: 3, 2: 2, 1: 2, 3: 2})\n    assert freq_element([[1, 1, 1], [2, 2], [3]]) == Counter({1: 3, 2: 2, 3: 1})\n    assert freq_element([[5], [5], [5], [5]]) == Counter({5: 4})\n\ndef test_edge_cases():\n    assert freq_element([[]]) == Counter()\n    assert freq_element([[], []]) == Counter()\n    assert freq_element([[1], [2], [3]]) == Counter({1: 1, 2: 1, 3: 1})\n\ndef test_exceptions():\n    with pytest.raises(TypeError, match=\"expected an iterable of iterables\"):\n        freq_element(None)\n    with pytest.raises(TypeError, match=\"expected an iterable of iterables\"):\n        freq_element([1, 2, 3])\n    with pytest.raises(TypeError, match=\"expected an iterable of iterables\"):\n        freq_element([[1], 2, [3]])\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})", "assert freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]])==({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})", "assert freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]])==({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1})"], "challenge_test_list": [], "reference_code": "from collections import Counter\r\nfrom itertools import chain\r\ndef freq_element(nums):\r\n  result = Counter(chain.from_iterable(nums))\r\n  return result"}
{"task_id": "41", "prompt": "Write a function to filter even numbers using lambda function.", "completion": "def filter_evennumbers(nums):\n    if not isinstance(nums, list):\n        raise TypeError(\"unsupported operand type\")\n    for num in nums:\n        if not isinstance(num, int):\n            raise TypeError(\"unsupported operand type\")\n    even_nums = list(filter(lambda x: x % 2 == 0, nums))\n    return even_nums", "test_list": ["assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]", "assert filter_evennumbers([10,20,45,67,84,93])==[10,20,84]", "assert filter_evennumbers([5,7,9,8,6,4,3])==[8,6,4]"], "challenge_test_list": [], "reference_code": "def filter_evennumbers(nums):\r\n even_nums = list(filter(lambda x: x%2 == 0, nums))\r\n return even_nums"}
{"task_id": "42", "prompt": "Write a python function to find the sum of repeated elements in a given array.", "completion": "def find_Sum(arr, n):\n    if arr is None:\n        raise TypeError(\"unsupported operand type\")\n    \n    if not isinstance(arr, list):\n        raise TypeError(\"unsupported operand type\")\n    \n    seen = set()\n    repeated_sum = 0\n    \n    for x in arr:\n        if x in seen:\n            repeated_sum += x\n        else:\n            seen.add(x)\n    \n    return repeated_sum", "test_list": ["assert find_Sum([1,2,3,1,1,4,5,6],8) == 3", "assert find_Sum([1,2,3,1,1],5) == 3", "assert find_Sum([1,1,2],3) == 2"], "challenge_test_list": ["assert find_Sum([1,1,2,3,4,5,6,3,5],9) == 18"], "reference_code": "def find_Sum(arr,n): \r\n    return sum([x for x in arr if arr.count(x) > 1])"}
{"task_id": "43", "prompt": "Write a function to find sequences of lowercase letters joined with an underscore using regex.", "completion": "import re\n\ndef text_match(text):\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n    patterns = '^[a-z]+_[a-z]+$'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "test_list": ["assert text_match(\"aab_cbbbc\") == 'Found a match!'", "assert text_match(\"aab_Abbbc\") == 'Not matched!'", "assert text_match(\"Aaab_abbbc\") == 'Not matched!'"], "challenge_test_list": ["assert text_match(\"aab-cbbbc\") == 'Not matched!'"], "reference_code": "import re\r\ndef text_match(text):\r\n  patterns = '^[a-z]+_[a-z]+$'\r\n  if re.search(patterns,  text):\r\n    return ('Found a match!')\r\n  else:\r\n    return ('Not matched!')"}
{"task_id": "44", "prompt": "Write a function that matches a word at the beginning of a string.", "completion": "import re\n\ndef text_match_string(text):\n    if not isinstance(text, str):\n        raise TypeError(\"expected string or bytes-like object\")\n    \n    patterns = '^\\w+'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "test_list": ["assert text_match_string(\" python\")==('Not matched!')", "assert text_match_string(\"python\")==('Found a match!')", "assert text_match_string(\"  lang\")==('Not matched!')"], "challenge_test_list": ["assert text_match_string(\"foo\")==('Found a match!')"], "reference_code": "import re\r\ndef text_match_string(text):\r\n        patterns = '^\\w+'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return 'Not matched!'"}
{"task_id": "45", "prompt": "Write a function to find the gcd of the given array elements.", "completion": "def find_gcd(x, y): \n    while(y): \n        x, y = y, x % y \n    return abs(x)\n\ndef get_gcd(l):\n    if not l:\n        raise IndexError(\"list index out of range\")\n    \n    num1 = l[0]\n    gcd = abs(num1)\n    \n    for num in l[1:]:\n        if not isinstance(num, int):\n            raise TypeError(\"unsupported operand type\")\n        gcd = find_gcd(gcd, abs(num))\n    \n    return gcd", "test_list": ["assert get_gcd([2, 4, 6, 8, 16]) == 2", "assert get_gcd([1, 2, 3]) == 1", "assert get_gcd([2, 4, 6, 8]) == 2 "], "challenge_test_list": [], "reference_code": "def find_gcd(x, y): \r\n\twhile(y): \r\n\t\tx, y = y, x % y \r\n\treturn x \r\ndef get_gcd(l):\r\n  num1 = l[0]\r\n  num2 = l[1]\r\n  gcd = find_gcd(num1, num2)\r\n  for i in range(2, len(l)):\r\n    gcd = find_gcd(gcd, l[i])\r\n  return gcd"}
{"task_id": "46", "prompt": "Write a python function to determine whether all the numbers are different from each other are not.", "completion": "def test_distinct(data):\n    if not isinstance(data, list):\n        raise TypeError(\"Input must be a list\")\n    if any(not isinstance(x, (int, float)) for x in data):\n        raise TypeError(\"All elements in the list must be numbers\")\n    \n    return len(data) == len(set(data))", "test_list": ["assert test_distinct([1,5,7,9]) == True", "assert test_distinct([2,4,5,5,7,9]) == False", "assert test_distinct([1,2,3]) == True"], "challenge_test_list": [], "reference_code": "def test_distinct(data):\r\n  if len(data) == len(set(data)):\r\n    return True\r\n  else:\r\n    return False;"}
{"task_id": "47", "prompt": "Write a python function to find the last digit when factorial of a divides factorial of b.", "completion": "def compute_Last_Digit(A, B):\n    if not isinstance(A, int) or not isinstance(B, int):\n        raise TypeError(\"Inputs must be integers\")\n    if A < 0 or B < 0:\n        raise ValueError(\"Inputs must be non-negative integers\")\n    \n    if A == B:\n        return 1\n    elif (B - A) >= 5:\n        return 0\n    else:\n        variable = 1\n        for i in range(A + 1, B + 1):\n            variable = (variable * (i % 10)) % 10\n        return variable % 10", "test_list": ["assert compute_Last_Digit(2,4) == 2", "assert compute_Last_Digit(6,8) == 6", "assert compute_Last_Digit(1,2) == 2"], "challenge_test_list": ["assert compute_Last_Digit(3,7) == 0", "assert compute_Last_Digit(20,23) == 6", "assert compute_Last_Digit(1021,1024) == 4"], "reference_code": "def compute_Last_Digit(A,B): \r\n    variable = 1\r\n    if (A == B): \r\n        return 1\r\n    elif ((B - A) >= 5):  \r\n        return 0\r\n    else:   \r\n        for i in range(A + 1,B + 1): \r\n            variable = (variable * (i % 10)) % 10\r\n        return variable % 10"}
{"task_id": "48", "prompt": "Write a python function to set all odd bits of a given number.", "completion": "def odd_bit_set_number(n):\n    if not isinstance(n, int):\n        raise TypeError(\"unsupported operand type\")\n    \n    # Create a mask for odd bits (1, 3, 5, 7, ...)\n    odd_bit_mask = 0\n    for i in range(1, 32, 2):  # Assuming 32-bit integers\n        odd_bit_mask |= (1 << i)\n    \n    # Set odd bits in the number\n    return n | odd_bit_mask\n\n# Test cases\nimport pytest\n\ndef test_basic_functionality():\n    assert odd_bit_set_number(0b0000) == 0b0101  # 0 -> 5\n    assert odd_bit_set_number(0b0001) == 0b0101  # 1 -> 5\n    assert odd_bit_set_number(0b0010) == 0b0110  # 2 -> 6\n    assert odd_bit_set_number(0b0011) == 0b0111  # 3 -> 7\n    assert odd_bit_set_number(0b0100) == 0b0101  # 4 -> 5\n    assert odd_bit_set_number(0b1111) == 0b1111  # 15 -> 15\n\ndef test_edge_cases():\n    assert odd_bit_set_number(0) == 5  # Edge case: 0 -> 5\n    assert odd_bit_set_number(1) == 5  # Edge case: 1 -> 5\n    assert odd_bit_set_number(2) == 6  # Edge case: 2 -> 6\n    assert odd_bit_set_number(3) == 7  # Edge case: 3 -> 7\n    assert odd_bit_set_number(4) == 5  # Edge case: 4 -> 5\n    assert odd_bit_set_number(255) == 255  # Edge case: 255 -> 255\n\ndef test_exceptions():\n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        odd_bit_set_number(\"string\")  # Invalid input: string\n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        odd_bit_set_number(None)  # Invalid input: None\n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        odd_bit_set_number([])  # Invalid input: list\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert odd_bit_set_number(10) == 15", "assert odd_bit_set_number(20) == 21", "assert odd_bit_set_number(30) == 31"], "challenge_test_list": [], "reference_code": "def odd_bit_set_number(n):\r\n    count = 0;res = 0;temp = n\r\n    while temp > 0:\r\n        if count % 2 == 0:\r\n            res |= (1 << count)\r\n        count += 1\r\n        temp >>= 1\r\n    return (n | res)"}
{"task_id": "49", "prompt": "Write a function to extract every first or specified element from a given two-dimensional list.", "completion": "def specified_element(nums, N):\n    # Check if N is an integer\n    if not isinstance(N, int):\n        raise TypeError(\"list indices must be integers or slices, not {}\".format(type(N).__name__))\n    \n    result = []\n    for sublist in nums:\n        # Check if the sublist is long enough to access the N-th element\n        if len(sublist) > N:\n            result.append(sublist[N])\n        else:\n            result.append(None)  # Append None if the sublist is too short\n    return result", "test_list": ["assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]", "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]", "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],1)==[2,5,1]"], "challenge_test_list": [], "reference_code": "def specified_element(nums, N):\r\n    result = [i[N] for i in nums]\r\n    return result\r\n    "}
{"task_id": "50", "prompt": "Write a function to find the list with minimum length using lambda function.", "completion": "import pytest\n\ndef min_length_list(input_list):\n    if not input_list:\n        raise ValueError(\"min() arg is an empty sequence\")\n    \n    # Ensure all elements are lists\n    for item in input_list:\n        if not isinstance(item, list):\n            raise TypeError(\"unhashable type: 'list'\")\n    \n    min_length = min(len(x) for x in input_list)\n    min_list = min(input_list, key=lambda i: len(i))\n    return (min_length, min_list)\n\n# Test cases\ndef test_basic_functionality():\n    assert min_length_list([[\"apple\", \"banana\"], [\"cat\"], [\"dog\", \"elephant\"]]) == (1, [\"cat\"]), \"Should return the shortest list and its length\"\n    assert min_length_list([[\"a\", \"b\", \"c\"], [\"d\", \"e\"], [\"f\"]]) == (1, [\"f\"]), \"Should return the shortest list and its length\"\n    assert min_length_list([[\"one\"], [\"two\", \"three\"], [\"four\", \"five\", \"six\"]]) == (1, [\"one\"]), \"Should return the shortest list and its length\"\n\ndef test_edge_cases():\n    assert min_length_list([[], [\"a\", \"b\"], [\"c\"]]) == (0, []), \"Should return the empty list as the shortest\"\n    assert min_length_list([[\"\"], [\"a\"], [\"b\", \"c\"]]) == (0, [\"\"]), \"Should return the empty string list as the shortest\"\n    assert min_length_list([[\"longer\"], [\"longest\"], [\"short\"]]) == (5, [\"short\"]), \"Should return the shortest list with length 5\"\n\ndef test_exceptions():\n    with pytest.raises(TypeError, match=\"unhashable type: 'list'\"):\n        min_length_list([[\"a\", \"b\"], \"not_a_list\", [\"c\"]])\n    with pytest.raises(ValueError, match=\"min() arg is an empty sequence\"):\n        min_length_list([])\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])", "assert min_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(1,[1])", "assert min_length_list([[3,4,5],[6,7,8,9],[10,11,12],[1,2]])==(2,[1,2])"], "challenge_test_list": [], "reference_code": "def min_length_list(input_list):\r\n    min_length = min(len(x) for x in input_list )  \r\n    min_list = min(input_list, key = lambda i: len(i))\r\n    return(min_length, min_list)"}
{"task_id": "51", "prompt": "Write a function to print check if the triangle is equilateral or not.", "completion": "def check_equilateral(x, y, z):\n    if not all(isinstance(side, (int, float)) for side in (x, y, z)):\n        raise TypeError(\"All sides must be numeric values.\")\n    return x == y == z", "test_list": ["assert check_equilateral(6,8,12)==False ", "assert check_equilateral(6,6,12)==False", "assert check_equilateral(6,6,6)==True"], "challenge_test_list": [], "reference_code": "def check_equilateral(x,y,z):\r\n  if x == y == z:\r\n\t   return True\r\n  else:\r\n     return False"}
{"task_id": "52", "prompt": "Write a function to caluclate area of a parallelogram.", "completion": "def parallelogram_area(b, h):\n    if not isinstance(b, (int, float)) or not isinstance(h, (int, float)):\n        raise TypeError(\"unsupported operand type\")\n    return b * h", "test_list": ["assert parallelogram_area(10,20)==200", "assert parallelogram_area(15,20)==300", "assert parallelogram_area(8,9)==72"], "challenge_test_list": [], "reference_code": "def parallelogram_area(b,h):\r\n  area=b*h\r\n  return area"}
{"task_id": "53", "prompt": "Write a python function to check whether the first and last characters of a given string are equal or not.", "completion": "import pytest\n\ndef check_Equality(s):\n    # Check if the input is a string\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n    \n    # Handle the empty string case\n    if len(s) == 0:\n        return \"Equal\"\n    \n    # Compare the first and last characters\n    if s[0] == s[-1]:  \n        return \"Equal\" \n    else:  \n        return \"Not Equal\"\n\n# Test cases\ndef test_equal_characters():\n    assert check_Equality(\"a\") == \"Equal\", \"Single character string should be equal\"\n    assert check_Equality(\"aba\") == \"Equal\", \"First and last characters are the same\"\n    assert check_Equality(\"racecar\") == \"Equal\", \"First and last characters are the same in palindrome\"\n    assert check_Equality(\"hello\") == \"Not Equal\", \"First and last characters are different\"\n\ndef test_edge_cases():\n    assert check_Equality(\"\") == \"Equal\", \"Empty string should be considered equal\"\n    assert check_Equality(\"a\" * 1000 + \"a\") == \"Equal\", \"Long string with same first and last character\"\n    assert check_Equality(\"a\" * 1000 + \"b\") == \"Not Equal\", \"Long string with different first and last character\"\n\ndef test_exceptions():\n    with pytest.raises(TypeError):\n        check_Equality(None), \"Function should raise TypeError for None input\"\n    with pytest.raises(TypeError):\n        check_Equality(123), \"Function should raise TypeError for non-string input\"\n    with pytest.raises(TypeError):\n        check_Equality([]), \"Function should raise TypeError for list input\"\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert check_Equality(\"abcda\") == \"Equal\"", "assert check_Equality(\"ab\") == \"Not Equal\"", "assert check_Equality(\"mad\") == \"Not Equal\""], "challenge_test_list": [], "reference_code": "def check_Equality(str):\r\n  if (str[0] == str[-1]):  \r\n    return (\"Equal\") \r\n  else:  \r\n    return (\"Not Equal\") "}
{"task_id": "54", "prompt": "Write a function to sort the given array by using counting sort.", "completion": "def counting_sort(my_list):\n    if not all(isinstance(x, int) for x in my_list):\n        raise TypeError(\"Input must be a list of integers\")\n    if any(x < 0 for x in my_list):\n        raise ValueError(\"Negative numbers are not allowed\")\n    \n    if len(my_list) == 0:\n        return my_list\n    \n    max_value = max(my_list)\n    buckets = [0] * (max_value + 1)\n    \n    for i in my_list:\n        buckets[i] += 1\n    \n    i = 0\n    for j in range(max_value + 1):\n        for a in range(buckets[j]):\n            my_list[i] = j\n            i += 1\n            \n    return my_list", "test_list": ["assert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]", "assert counting_sort([12, 9, 28, 33, 69, 45]) == [9, 12, 28, 33, 45, 69]", "assert counting_sort([8, 4, 14, 3, 2, 1]) == [1, 2, 3, 4, 8, 14]"], "challenge_test_list": [], "reference_code": "def counting_sort(my_list):\r\n    max_value = 0\r\n    for i in range(len(my_list)):\r\n        if my_list[i] > max_value:\r\n            max_value = my_list[i]\r\n    buckets = [0] * (max_value + 1)\r\n    for i in my_list:\r\n        buckets[i] += 1\r\n    i = 0\r\n    for j in range(max_value + 1):\r\n         for a in range(buckets[j]):\r\n             my_list[i] = j\r\n             i += 1\r\n    return my_list"}
{"task_id": "55", "prompt": "Write a function to find t-nth term of geometric series.", "completion": "import math\n\ndef tn_gp(a, n, r):\n    # Validate input types\n    if not isinstance(a, (int, float)):\n        raise TypeError(\"unsupported operand type\")\n    if not isinstance(n, int):\n        raise TypeError(\"unsupported operand type\")\n    if not isinstance(r, (int, float)):\n        raise TypeError(\"unsupported operand type\")\n    \n    # Validate n\n    if n < 1:\n        raise ValueError(\"math domain error\")  # n should be a positive integer\n\n    # Calculate the t-nth term of the geometric series\n    tn = a * (math.pow(r, n - 1))\n    return tn", "test_list": ["assert tn_gp(1,5,2)==16", "assert tn_gp(1,5,4)==256", "assert tn_gp(2,6,3)==486"], "challenge_test_list": [], "reference_code": "import math\r\ndef tn_gp(a,n,r):\r\n  tn = a * (math.pow(r, n - 1))\r\n  return tn"}
{"task_id": "56", "prompt": "Write a python function to check if a given number is one less than twice its reverse.", "completion": "def rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \n\ndef check(n):    \n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer\")\n    return (2 * rev(n) == n + 1)  \n\n# Test cases\nimport pytest\n\ndef test_check_positive_case():\n    assert check(1) == True, \"1 should be one less than twice its reverse (1)\"\n    assert check(2) == False, \"2 should not be one less than twice its reverse (2)\"\n    assert check(9) == True, \"9 should be one less than twice its reverse (9)\"\n    assert check(21) == True, \"21 should be one less than twice its reverse (12)\"\n    assert check(30) == False, \"30 should not be one less than twice its reverse (3)\"\n\ndef test_check_edge_cases():\n    assert check(0) == False, \"0 should not be one less than twice its reverse (0)\"\n    assert check(10) == False, \"10 should not be one less than twice its reverse (1)\"\n    assert check(11) == True, \"11 should be one less than twice its reverse (11)\"\n    assert check(100) == False, \"100 should not be one less than twice its reverse (1)\"\n\ndef test_check_boundary_cases():\n    assert check(1000000000) == False, \"1000000000 should not be one less than twice its reverse (1)\"\n    assert check(999999999) == True, \"999999999 should be one less than twice its reverse (999999999)\"\n\ndef test_check_exceptions():\n    with pytest.raises(TypeError):\n        check(\"string\"), \"check should raise TypeError for string input\"\n    with pytest.raises(TypeError):\n        check(None), \"check should raise TypeError for None input\"\n    with pytest.raises(TypeError):\n        check([]), \"check should raise TypeError for list input\"\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert check(70) == False", "assert check(23) == False", "assert check(73) == True"], "challenge_test_list": [], "reference_code": "def rev(num):    \r\n    rev_num = 0\r\n    while (num > 0):  \r\n        rev_num = (rev_num * 10 + num % 10) \r\n        num = num // 10  \r\n    return rev_num  \r\ndef check(n):    \r\n    return (2 * rev(n) == n + 1)  "}
{"task_id": "57", "prompt": "Write a python function to find the largest number that can be formed with the given digits.", "completion": "def find_Max_Num(arr, n):\n    if not isinstance(arr, list) or not all(isinstance(x, int) for x in arr):\n        raise TypeError(\"unsupported operand type\")\n    if n != len(arr):\n        raise ValueError(\"not enough values to unpack\")\n    \n    if n == 0:\n        return 0\n    \n    arr = [str(x) for x in arr]\n    arr.sort(key=lambda x: x * 10, reverse=True)\n    \n    largest_num = ''.join(arr)\n    return int(largest_num) if largest_num else 0", "test_list": ["assert find_Max_Num([1,2,3],3) == 321", "assert find_Max_Num([4,5,6,1],4) == 6541", "assert find_Max_Num([1,2,3,9],4) == 9321"], "challenge_test_list": [], "reference_code": "def find_Max_Num(arr,n) : \r\n    arr.sort(reverse = True) \r\n    num = arr[0] \r\n    for i in range(1,n) : \r\n        num = num * 10 + arr[i] \r\n    return num "}
{"task_id": "58", "prompt": "Write a python function to check whether the given two integers have opposite sign or not.", "completion": "def opposite_Signs(x, y):\n    # Check if both numbers have opposite signs\n    return (x < 0) != (y < 0)\n\n# Test cases\nimport pytest\n\ndef test_opposite_signs_positive_negative():\n    assert opposite_Signs(5, -3) is True, \"5 and -3 should have opposite signs\"\n\ndef test_opposite_signs_negative_positive():\n    assert opposite_Signs(-10, 10) is True, \"-10 and 10 should have opposite signs\"\n\ndef test_opposite_signs_same_sign():\n    assert opposite_Signs(7, 3) is False, \"7 and 3 should not have opposite signs\"\n\ndef test_opposite_signs_zero_positive():\n    assert opposite_Signs(0, 5) is False, \"0 and 5 should not have opposite signs\"\n\ndef test_opposite_signs_zero_negative():\n    assert opposite_Signs(0, -5) is False, \"0 and -5 should not have opposite signs\"\n\ndef test_opposite_signs_zero_zero():\n    assert opposite_Signs(0, 0) is False, \"0 and 0 should not have opposite signs\"\n\ndef test_opposite_signs_large_numbers():\n    assert opposite_Signs(2**31 - 1, -2**31) is True, \"Large positive and large negative should have opposite signs\"\n\ndef test_opposite_signs_large_same_sign():\n    assert opposite_Signs(2**31 - 1, 2**31 - 2) is False, \"Large positive numbers should not have opposite signs\"\n\ndef test_opposite_signs_invalid_input():\n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        opposite_Signs(\"a\", 5)\n\n# Uncomment the following line to run the tests if needed\n# pytest.main()", "test_list": ["assert opposite_Signs(1,-2) == True", "assert opposite_Signs(3,2) == False", "assert opposite_Signs(-10,-10) == False"], "challenge_test_list": [], "reference_code": "def opposite_Signs(x,y): \r\n    return ((x ^ y) < 0); "}
{"task_id": "59", "prompt": "Write a function to find the nth octagonal number.", "completion": "import pytest\n\ndef is_octagonal(n):\n    if not isinstance(n, int):\n        raise TypeError(\"Input should be an integer\")\n    if n < 0:\n        raise ValueError(\"Input should not be a negative integer\")\n    return 3 * n * n - 2 * n\n\ndef test_basic_functionality():\n    assert is_octagonal(1) == 1, \"The 1st octagonal number should be 1\"\n    assert is_octagonal(2) == 6, \"The 2nd octagonal number should be 6\"\n    assert is_octagonal(3) == 15, \"The 3rd octagonal number should be 15\"\n    assert is_octagonal(4) == 28, \"The 4th octagonal number should be 28\"\n    assert is_octagonal(5) == 45, \"The 5th octagonal number should be 45\"\n\ndef test_edge_cases():\n    assert is_octagonal(0) == 0, \"The 0th octagonal number should be 0\"\n    assert is_octagonal(10) == 240, \"The 10th octagonal number should be 240\"\n    assert is_octagonal(100) == 29700, \"The 100th octagonal number should be 29700\"\n\ndef test_exceptions():\n    with pytest.raises(TypeError, match=\"Input should be an integer\"):\n        is_octagonal(\"string\")\n    \n    with pytest.raises(TypeError, match=\"Input should be an integer\"):\n        is_octagonal(None)\n    \n    with pytest.raises(ValueError, match=\"Input should not be a negative integer\"):\n        is_octagonal(-1)\n\n# Uncomment the following line to run the tests when executing the script\n# pytest.main()", "test_list": ["assert is_octagonal(5) == 65", "assert is_octagonal(10) == 280", "assert is_octagonal(15) == 645"], "challenge_test_list": [], "reference_code": "def is_octagonal(n): \r\n\treturn 3 * n * n - 2 * n "}
{"task_id": "60", "prompt": "Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.", "completion": "def max_len_sub(arr, n): \n    if arr is None or n is None or not isinstance(arr, list):\n        raise TypeError(\"Invalid input\")\n    \n    if n == 0:\n        return 0\n    \n    mls = [1] * n  # Initialize the mls array with 1s\n    max_length = 1  # Initialize max_length to 1 since the minimum length is 1\n\n    for i in range(1, n): \n        for j in range(i): \n            if abs(arr[i] - arr[j]) <= 1: \n                mls[i] = max(mls[i], mls[j] + 1)\n        max_length = max(max_length, mls[i])  # Update max_length\n\n    return max_length", "test_list": ["assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5", "assert max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7) == 4", "assert max_len_sub([9, 11, 13, 15, 18], 5) == 1"], "challenge_test_list": [], "reference_code": "def max_len_sub( arr, n): \r\n\tmls=[] \r\n\tmax = 0\r\n\tfor i in range(n): \r\n\t\tmls.append(1) \r\n\tfor i in range(n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (abs(arr[i] - arr[j]) <= 1 and mls[i] < mls[j] + 1): \r\n\t\t\t\tmls[i] = mls[j] + 1\r\n\tfor i in range(n): \r\n\t\tif (max < mls[i]): \r\n\t\t\tmax = mls[i] \r\n\treturn max"}
{"task_id": "61", "prompt": "Write a python function to count number of substrings with the sum of digits equal to their length.", "completion": "from collections import defaultdict\n\ndef count_Substrings(s, n):\n    if not isinstance(s, str):\n        raise TypeError(\"expected a string\")\n    if len(s) != n:\n        raise ValueError(\"n must be equal to the length of s\")\n    \n    count, sum_digits = 0, 0\n    mp = defaultdict(int)\n    mp[0] += 1  # Initialize for the case where sum equals length\n\n    for i in range(n):\n        sum_digits += int(s[i])  # Convert character to integer\n        count += mp[sum_digits - (i + 1)]  # Check for the condition\n        mp[sum_digits - (i + 1)] += 1  # Update the map\n\n    return count", "test_list": ["assert count_Substrings('112112',6) == 6", "assert count_Substrings('111',3) == 6", "assert count_Substrings('1101112',7) == 12"], "challenge_test_list": [], "reference_code": "from collections import defaultdict\r\ndef count_Substrings(s,n):\r\n    count,sum = 0,0\r\n    mp = defaultdict(lambda : 0)\r\n    mp[0] += 1\r\n    for i in range(n):\r\n        sum += ord(s[i]) - ord('0')\r\n        count += mp[sum - (i + 1)]\r\n        mp[sum - (i + 1)] += 1\r\n    return count"}
{"task_id": "62", "prompt": "Write a python function to find smallest number in a list.", "completion": "import pytest\n\ndef smallest_num(xs):\n    if xs is None:\n        raise TypeError(\"unsupported operand type(s) for min\")\n    if not xs:\n        raise ValueError(\"min() arg is an empty sequence\")\n    \n    # Check if all elements are numeric\n    for x in xs:\n        if not isinstance(x, (int, float)):\n            raise TypeError(\"unsupported operand type(s) for min\")\n    \n    return min(xs)\n\n# Test cases\ndef test_basic_functionality():\n    assert smallest_num([3, 1, 4, 1, 5, 9]) == 1, \"Should return the smallest number in a list of positive integers\"\n    assert smallest_num([-1, -5, -3, -4]) == -5, \"Should return the smallest number in a list of negative integers\"\n    assert smallest_num([0, 0, 0]) == 0, \"Should return 0 when all elements are zero\"\n    assert smallest_num([2.5, 3.5, 1.5]) == 1.5, \"Should return the smallest number in a list of floats\"\n\ndef test_edge_cases():\n    assert smallest_num([1]) == 1, \"Should return the only element in a single-element list\"\n    assert smallest_num([-1, 0, 1]) == -1, \"Should return -1 as the smallest number in a mixed list\"\n    assert smallest_num([100, 200, 300, 0]) == 0, \"Should return 0 as the smallest number in a list with a zero\"\n\ndef test_exceptions():\n    with pytest.raises(ValueError, match=\"min() arg is an empty sequence\"):\n        smallest_num([])  # Should raise ValueError for an empty list\n    \n    with pytest.raises(TypeError, match=\"unsupported operand type(s) for min\"):\n        smallest_num([1, 'a', 3])  # Should raise TypeError for a list with non-numeric types\n    \n    with pytest.raises(TypeError, match=\"unsupported operand type(s) for min\"):\n        smallest_num(None)  # Should raise TypeError for None input\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert smallest_num([10, 20, 1, 45, 99]) == 1", "assert smallest_num([1, 2, 3]) == 1", "assert smallest_num([45, 46, 50, 60]) == 45"], "challenge_test_list": [], "reference_code": "def smallest_num(xs):\n  return min(xs)\n"}
{"task_id": "63", "prompt": "Write a function to find the maximum difference between available pairs in the given tuple list.", "completion": "def max_difference(test_list):\n    if test_list is None:\n        raise TypeError(\"Input cannot be None\")\n    \n    if not all(isinstance(pair, tuple) and len(pair) == 2 for pair in test_list):\n        raise ValueError(\"All elements must be tuples of exactly two elements\")\n    \n    temp = []\n    for a, b in test_list:\n        if not isinstance(a, (int, float)) or not isinstance(b, (int, float)):\n            raise TypeError(\"Tuple elements must be numbers\")\n        temp.append(abs(b - a))\n    \n    return max(temp) if temp else 0", "test_list": ["assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7", "assert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15", "assert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23"], "challenge_test_list": [], "reference_code": "def max_difference(test_list):\r\n  temp = [abs(b - a) for a, b in test_list]\r\n  res = max(temp)\r\n  return (res) "}
{"task_id": "64", "prompt": "Write a function to sort a list of tuples using lambda.", "completion": "import pytest\n\ndef subject_marks(subjectmarks):\n    if not isinstance(subjectmarks, list):\n        raise TypeError(\"expected a list of tuples\")\n    for item in subjectmarks:\n        if not isinstance(item, tuple):\n            raise TypeError(\"expected a list of tuples\")\n        if len(item) != 2:\n            raise ValueError(\"each tuple must have exactly two elements\")\n    \n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks\n\n# Test cases\ndef test_basic_functionality_sorted():\n    assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)]) == \\\n           [('English', 88), ('Social sciences', 82), ('Science', 90), ('Maths', 97)]\n\ndef test_basic_functionality_unsorted():\n    assert subject_marks([('Maths', 97), ('English', 88), ('Science', 90), ('Social sciences', 82)]) == \\\n           [('English', 88), ('Social sciences', 82), ('Science', 90), ('Maths', 97)]\n\ndef test_edge_case_empty_list():\n    assert subject_marks([]) == []\n\ndef test_edge_case_single_element():\n    assert subject_marks([('Maths', 97)]) == [('Maths', 97)]\n\ndef test_edge_case_identical_scores():\n    assert subject_marks([('Maths', 90), ('English', 90), ('Science', 90)]) == \\\n           [('Maths', 90), ('English', 90), ('Science', 90)]\n\ndef test_exceptions_invalid_input_not_a_list():\n    with pytest.raises(TypeError, match=\"expected a list of tuples\"):\n        subject_marks(\"not a list\")\n\ndef test_exceptions_invalid_input_not_tuples():\n    with pytest.raises(TypeError, match=\"expected a list of tuples\"):\n        subject_marks([('Maths', 97), 'not a tuple', ('Science', 90)])\n\ndef test_exceptions_invalid_input_tuple_length():\n    with pytest.raises(ValueError, match=\"each tuple must have exactly two elements\"):\n        subject_marks([('Maths', 97, 1), ('Science', 90)])\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]", "assert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])", "assert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])"], "challenge_test_list": [], "reference_code": "def subject_marks(subjectmarks):\r\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\r\n subjectmarks.sort(key = lambda x: x[1])\r\n return subjectmarks"}
{"task_id": "65", "prompt": "Write a function of recursion list sum.", "completion": "def recursive_list_sum(data_list):\n    total = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        elif isinstance(element, (int, float)):\n            total += element\n        else:\n            raise TypeError(\"unsupported operand type\")\n    return total", "test_list": ["assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21", "assert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106", "assert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210"], "challenge_test_list": [], "reference_code": "def recursive_list_sum(data_list):\r\n\ttotal = 0\r\n\tfor element in data_list:\r\n\t\tif type(element) == type([]):\r\n\t\t\ttotal = total + recursive_list_sum(element)\r\n\t\telse:\r\n\t\t\ttotal = total + element\r\n\treturn total"}
{"task_id": "66", "prompt": "Write a python function to count positive numbers in a list.", "completion": "def pos_count(lst):\n    if not all(isinstance(num, (int, float)) for num in lst):\n        raise TypeError(\"All elements in the list must be numeric\")\n    \n    pos_count = 0\n    for num in lst:\n        if num >= 0:\n            pos_count += 1\n    return pos_count", "test_list": ["assert pos_count([1,-2,3,-4]) == 2", "assert pos_count([3,4,5,-1]) == 3", "assert pos_count([1,2,3,4]) == 4"], "challenge_test_list": [], "reference_code": "def pos_count(list):\r\n  pos_count= 0\r\n  for num in list: \r\n    if num >= 0: \r\n      pos_count += 1\r\n  return pos_count "}
{"task_id": "67", "prompt": "Write a function to find the number of ways to partition a set of bell numbers.", "completion": "import pytest\n\ndef bell_number(n):\n    if not isinstance(n, int) or n < 0:\n        raise TypeError(\"Input must be a non-negative integer\")\n    \n    bell = [[0 for i in range(n + 1)] for j in range(n + 1)]\n    bell[0][0] = 1\n    \n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    \n    return bell[n][0]\n\n# Test cases\ndef test_bell_number_basic_functionality():\n    assert bell_number(0) == 1, \"Bell number for n=0 should be 1\"\n    assert bell_number(1) == 1, \"Bell number for n=1 should be 1\"\n    assert bell_number(2) == 2, \"Bell number for n=2 should be 2\"\n    assert bell_number(3) == 5, \"Bell number for n=3 should be 5\"\n    assert bell_number(4) == 15, \"Bell number for n=4 should be 15\"\n\ndef test_bell_number_edge_cases():\n    assert bell_number(5) == 52, \"Bell number for n=5 should be 52\"\n    assert bell_number(6) == 203, \"Bell number for n=6 should be 203\"\n    assert bell_number(7) == 877, \"Bell number for n=7 should be 877\"\n\ndef test_bell_number_exceptions():\n    with pytest.raises(TypeError, match=\"Input must be a non-negative integer\"):\n        bell_number(-1)  # Negative input should raise an error\n    with pytest.raises(TypeError, match=\"Input must be a non-negative integer\"):\n        bell_number(\"a\")  # Non-integer input should raise an error\n    with pytest.raises(TypeError, match=\"Input must be a non-negative integer\"):\n        bell_number(3.5)  # Non-integer input should raise an error\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert bell_number(2)==2", "assert bell_number(10)==115975", "assert bell_number(56)==6775685320645824322581483068371419745979053216268760300"], "challenge_test_list": [], "reference_code": "def bell_number(n):   \r\n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \r\n    bell[0][0] = 1\r\n    for i in range(1, n+1): \r\n        bell[i][0] = bell[i-1][i-1]  \r\n        for j in range(1, i+1): \r\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \r\n    return bell[n][0] "}
{"task_id": "68", "prompt": "Write a python function to check whether the given array is monotonic or not.", "completion": "def is_Monotonic(A):\n    if A is None or not isinstance(A, list):\n        raise TypeError(\"Input must be a list\")\n    \n    if len(A) <= 1:\n        return True\n    \n    increasing = decreasing = True\n    \n    for i in range(1, len(A)):\n        if A[i] < A[i - 1]:\n            increasing = False\n        if A[i] > A[i - 1]:\n            decreasing = False\n    \n    return increasing or decreasing", "test_list": ["assert is_Monotonic([6, 5, 4, 4]) == True", "assert is_Monotonic([1, 2, 2, 3]) == True", "assert is_Monotonic([1, 3, 2]) == False"], "challenge_test_list": [], "reference_code": "def is_Monotonic(A): \r\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\r\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) "}
{"task_id": "69", "prompt": "Write a function to check whether a list contains the given sublist or not.", "completion": "import pytest\n\ndef is_sublist(l, s):\n    if s is None or l is None:\n        raise TypeError(\"Input lists cannot be None\")\n    \n    sub_set = False\n    if s == []:\n        sub_set = True\n    elif s == l:\n        sub_set = True\n    elif len(s) > len(l):\n        sub_set = False\n    else:\n        for i in range(len(l) - len(s) + 1):  # Adjusted to prevent IndexError\n            if l[i] == s[0]:\n                n = 1\n                while (n < len(s)) and (l[i + n] == s[n]):\n                    n += 1                \n                if n == len(s):\n                    sub_set = True\n                    break  # Exit early if sublist is found\n    return sub_set\n\n# Test cases\ndef test_basic_functionality():\n    assert is_sublist([1, 2, 3, 4, 5], [2, 3]) == True, \"Should find sublist [2, 3] in [1, 2, 3, 4, 5]\"\n    assert is_sublist([1, 2, 3, 4, 5], [4, 5]) == True, \"Should find sublist [4, 5] in [1, 2, 3, 4, 5]\"\n    assert is_sublist([1, 2, 3, 4, 5], [1, 2, 3]) == True, \"Should find sublist [1, 2, 3] in [1, 2, 3, 4, 5]\"\n    assert is_sublist([1, 2, 3, 4, 5], [5]) == True, \"Should find sublist [5] in [1, 2, 3, 4, 5]\"\n\ndef test_edge_cases():\n    assert is_sublist([], []) == True, \"Empty list is a sublist of an empty list\"\n    assert is_sublist([], [1]) == False, \"Non-empty list cannot be a sublist of an empty list\"\n    assert is_sublist([1, 2, 3], []) == True, \"Empty list is a sublist of any list\"\n    assert is_sublist([1, 2, 3], [1, 2, 3, 4]) == False, \"Longer sublist cannot be found in shorter list\"\n    assert is_sublist([1, 2, 3], [2, 3]) == True, \"Should find sublist [2, 3] in [1, 2, 3]\"\n\ndef test_exceptions():\n    with pytest.raises(IndexError):\n        is_sublist([", "test_list": ["assert is_sublist([2,4,3,5,7],[3,7])==False", "assert is_sublist([2,4,3,5,7],[4,3])==True", "assert is_sublist([2,4,3,5,7],[1,6])==False"], "challenge_test_list": [], "reference_code": "def is_sublist(l, s):\r\n\tsub_set = False\r\n\tif s == []:\r\n\t\tsub_set = True\r\n\telif s == l:\r\n\t\tsub_set = True\r\n\telif len(s) > len(l):\r\n\t\tsub_set = False\r\n\telse:\r\n\t\tfor i in range(len(l)):\r\n\t\t\tif l[i] == s[0]:\r\n\t\t\t\tn = 1\r\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\r\n\t\t\t\t\tn += 1\t\t\t\t\r\n\t\t\t\tif n == len(s):\r\n\t\t\t\t\tsub_set = True\r\n\treturn sub_set"}
{"task_id": "70", "prompt": "Write a function to find whether all the given tuples have equal length or not.", "completion": "def find_equal_tuple(Input, k):\n    if not isinstance(Input, list) or not all(isinstance(t, tuple) for t in Input):\n        raise TypeError(\"Input must be a list of tuples\")\n    if not isinstance(k, int):\n        raise TypeError(\"k must be an integer\")\n    \n    for tuple in Input:\n        if len(tuple) != k:\n            return 0\n    return 1\n\ndef get_equal(Input, k):\n    if find_equal_tuple(Input, k) == 1:\n        return \"All tuples have same length\"\n    else:\n        return \"All tuples do not have same length\"", "test_list": ["assert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'", "assert get_equal([(1, 2, 3), (4, 5, 6, 7)], 3) == 'All tuples do not have same length'", "assert get_equal([(1, 2), (3, 4)], 2) == 'All tuples have same length'"], "challenge_test_list": [], "reference_code": "def find_equal_tuple(Input, k):\r\n  flag = 1\r\n  for tuple in Input:\r\n    if len(tuple) != k:\r\n      flag = 0\r\n      break\r\n  return flag\r\ndef get_equal(Input, k):\r\n  if find_equal_tuple(Input, k) == 1:\r\n    return (\"All tuples have same length\")\r\n  else:\r\n    return (\"All tuples do not have same length\")"}
{"task_id": "71", "prompt": "Write a function to sort a list of elements using comb sort.", "completion": "def comb_sort(nums):\n    if not all(isinstance(x, (int, float)) for x in nums):\n        raise TypeError(\"All elements must be numeric\")\n    \n    shrink_fact = 1.3\n    gaps = len(nums)\n    swapped = True\n    i = 0\n    while gaps > 1 or swapped:\n        gaps = max(1, int(float(gaps) / shrink_fact))\n        swapped = False\n        i = 0\n        while gaps + i < len(nums):\n            if nums[i] > nums[i + gaps]:\n                nums[i], nums[i + gaps] = nums[i + gaps], nums[i]\n                swapped = True\n            i += 1\n    return nums", "test_list": ["assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]", "assert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]", "assert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]"], "challenge_test_list": [], "reference_code": "def comb_sort(nums):\r\n    shrink_fact = 1.3\r\n    gaps = len(nums)\r\n    swapped = True\r\n    i = 0\r\n    while gaps > 1 or swapped:\r\n        gaps = int(float(gaps) / shrink_fact)\r\n        swapped = False\r\n        i = 0\r\n        while gaps + i < len(nums):\r\n            if nums[i] > nums[i+gaps]:\r\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\r\n                swapped = True\r\n            i += 1\r\n    return nums"}
{"task_id": "72", "prompt": "Write a python function to check whether the given number can be represented as difference of two squares or not.", "completion": "def dif_Square(n):\n    if not isinstance(n, int):\n        raise TypeError(\"Input should be an integer\")\n    return n % 4 != 2", "test_list": ["assert dif_Square(5) == True", "assert dif_Square(10) == False", "assert dif_Square(15) == True"], "challenge_test_list": [], "reference_code": "def dif_Square(n): \r\n    if (n % 4 != 2): \r\n        return True\r\n    return False"}
{"task_id": "73", "prompt": "Write a function to split the given string with multiple delimiters by using regex.", "completion": "import re\n\ndef multiple_split(text):\n    if not isinstance(text, str):\n        raise TypeError(\"expected string or bytes-like object\")\n    return re.split(r'[;,*\\n]+', text)", "test_list": ["assert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']", "assert multiple_split('Mi Box runs on the \\n Latest android*which has google assistance and chromecast.') == ['Mi Box runs on the ', ' Latest android', 'which has google assistance and chromecast.']", "assert multiple_split('Certain services\\nare subjected to change*over the seperate subscriptions.') == ['Certain services', 'are subjected to change', 'over the seperate subscriptions.']"], "challenge_test_list": [], "reference_code": "import re\r\ndef multiple_split(text):\r\n  return (re.split('; |, |\\*|\\n',text))"}
{"task_id": "74", "prompt": "Write a function to check whether it follows the sequence given in the patterns array.", "completion": "def is_samepatterns(colors, patterns):    \n    if len(colors) != len(patterns):\n        return False\n    \n    sdict = {}\n    pset = set()\n    sset = set()    \n    \n    for i in range(len(patterns)):\n        pset.add(patterns[i])\n        sset.add(colors[i])\n        \n        if patterns[i] not in sdict:\n            sdict[patterns[i]] = colors[i]\n        elif sdict[patterns[i]] != colors[i]:\n            return False\n\n    return len(pset) == len(sset)\n\n# Test cases\nimport pytest\n\ndef test_basic_functionality():\n    assert is_samepatterns(['red', 'blue', 'red'], ['A', 'B', 'A']) == True, \"Should return True for matching patterns\"\n    assert is_samepatterns(['red', 'blue', 'green'], ['A', 'B', 'C']) == False, \"Should return False for non-matching patterns\"\n    assert is_samepatterns(['red', 'red', 'blue'], ['A', 'A', 'B']) == True, \"Should return True for consistent color mapping\"\n    assert is_samepatterns(['red', 'blue', 'blue'], ['A', 'B', 'B']) == True, \"Should return True for consistent color mapping with duplicates\"\n\ndef test_edge_cases():\n    assert is_samepatterns([], []) == True, \"Should return True for empty inputs\"\n    assert is_samepatterns(['red'], ['A']) == True, \"Should return True for single element inputs\"\n    assert is_samepatterns(['red'], ['A', 'B']) == False, \"Should return False for mismatched lengths\"\n    assert is_samepatterns(['red', 'blue'], ['A', 'A']) == True, \"Should return True for same pattern with different colors\"\n\ndef test_exceptions():\n    with pytest.raises(TypeError):\n        is_samepatterns(None, ['A', 'B']), \"Should raise TypeError for None as colors\"\n    with pytest.raises(TypeError):\n        is_samepatterns(['red', 'blue'], None), \"Should raise TypeError for None as patterns\"\n    with pytest.raises(TypeError):\n        is_samepatterns(['red', 'blue'], 'AB'), \"Should raise TypeError for string instead of list\"\n    with pytest.raises(TypeError):\n        is_samepatterns('RGB', ['A', 'B', 'C']), \"Should raise TypeError for string instead of list\"\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True ", "assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False ", "assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False "], "challenge_test_list": [], "reference_code": "def is_samepatterns(colors, patterns):    \r\n    if len(colors) != len(patterns):\r\n        return False    \r\n    sdict = {}\r\n    pset = set()\r\n    sset = set()    \r\n    for i in range(len(patterns)):\r\n        pset.add(patterns[i])\r\n        sset.add(colors[i])\r\n        if patterns[i] not in sdict.keys():\r\n            sdict[patterns[i]] = []\r\n\r\n        keys = sdict[patterns[i]]\r\n        keys.append(colors[i])\r\n        sdict[patterns[i]] = keys\r\n\r\n    if len(pset) != len(sset):\r\n        return False   \r\n\r\n    for values in sdict.values():\r\n\r\n        for i in range(len(values) - 1):\r\n            if values[i] != values[i+1]:\r\n                return False\r\n\r\n    return True"}
{"task_id": "75", "prompt": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.", "completion": "def find_tuples(test_list, K):\n    if not isinstance(test_list, list) or not isinstance(K, (int, float)):\n        raise TypeError(\"Invalid input types\")\n    \n    res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n    return str(res)", "test_list": ["assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'", "assert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == '[(5, 25, 30)]'", "assert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == '[(8, 16, 4)]'"], "challenge_test_list": [], "reference_code": "def find_tuples(test_list, K):\r\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\r\n  return (str(res)) "}
{"task_id": "76", "prompt": "Write a python function to count the number of squares in a rectangle.", "completion": "def count_Squares(m, n):\n    # Check for invalid input types\n    if not isinstance(m, int) or not isinstance(n, int):\n        raise TypeError(\"unsupported operand type\")\n    \n    # Handle cases where dimensions are less than or equal to zero\n    if m <= 0 or n <= 0:\n        return 0\n    \n    # Ensure m is the smaller dimension\n    if n < m:\n        m, n = n, m\n    \n    # Calculate the number of squares\n    total_squares = 0\n    for size in range(1, m + 1):\n        total_squares += (m - size + 1) * (n - size + 1)\n    \n    return total_squares", "test_list": ["assert count_Squares(4,3) == 20", "assert count_Squares(2,2) == 5", "assert count_Squares(1,1) == 1"], "challenge_test_list": [], "reference_code": "def count_Squares(m,n):\r\n    if(n < m):\r\n        temp = m\r\n        m = n\r\n        n = temp\r\n    return ((m * (m + 1) * (2 * m + 1) / 6 + (n - m) * m * (m + 1) / 2))"}
{"task_id": "77", "prompt": "Write a python function to find the difference between sum of even and odd digits.", "completion": "def is_Diff(n):\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer\")\n    \n    n = abs(n)  # Consider absolute value for digit sum calculation\n    even_sum = 0\n    odd_sum = 0\n    \n    for digit in str(n):\n        if int(digit) % 2 == 0:\n            even_sum += int(digit)\n        else:\n            odd_sum += int(digit)\n    \n    return even_sum - odd_sum", "test_list": ["assert is_Diff (12345) == False", "assert is_Diff(1212112) == True", "assert is_Diff(1212) == False"], "challenge_test_list": [], "reference_code": "def is_Diff(n): \r\n    return (n % 11 == 0) "}
{"task_id": "78", "prompt": "Write a python function to find number of integers with odd number of set bits.", "completion": "def count_With_Odd_SetBits(n):\n    if not isinstance(n, int):\n        raise TypeError(\"unsupported operand type\")\n    \n    count = 0\n    for i in range(n + 1):\n        if bin(i).count('1') % 2 != 0:\n            count += 1\n            \n    return count", "test_list": ["assert count_With_Odd_SetBits(5) == 3", "assert count_With_Odd_SetBits(10) == 5", "assert count_With_Odd_SetBits(15) == 8"], "challenge_test_list": [], "reference_code": "def count_With_Odd_SetBits(n): \r\n    if (n % 2 != 0): \r\n        return (n + 1) / 2\r\n    count = bin(n).count('1') \r\n    ans = n / 2\r\n    if (count % 2 != 0): \r\n        ans += 1\r\n    return ans "}
{"task_id": "79", "prompt": "Write a python function to check whether the length of the word is odd or not.", "completion": "def word_len(s): \n    if not isinstance(s, str):\n        raise AttributeError(\"Input must be a string\")\n    \n    s = s.split(' ')   \n    for word in s:    \n        if len(word) % 2 != 0: \n            return True  \n    return False", "test_list": ["assert word_len(\"Hadoop\") == False", "assert word_len(\"great\") == True", "assert word_len(\"structure\") == True"], "challenge_test_list": [], "reference_code": "def word_len(s): \r\n    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2!=0: \r\n            return True  \r\n        else:\r\n          return False"}
{"task_id": "80", "prompt": "Write a function to find the nth tetrahedral number.", "completion": "def tetrahedral_number(n):\n    if not isinstance(n, int):\n        raise TypeError(\"unsupported operand type\")\n    if n < 0:\n        raise ValueError(\"negative number\")\n    return (n * (n + 1) * (n + 2)) // 6", "test_list": ["assert tetrahedral_number(5) == 35.0", "assert tetrahedral_number(6) == 56.0", "assert tetrahedral_number(7) == 84.0"], "challenge_test_list": [], "reference_code": "def tetrahedral_number(n): \r\n\treturn (n * (n + 1) * (n + 2)) / 6"}
{"task_id": "81", "prompt": "Write a function to zip the two given tuples.", "completion": "def zip_tuples(test_tup1, test_tup2):\n    # Check for invalid input types\n    if not isinstance(test_tup1, tuple) or not isinstance(test_tup2, tuple):\n        raise TypeError(\"Both inputs must be tuples.\")\n    \n    # Prepare the result list\n    res = []\n    \n    # Get the lengths of both tuples\n    len1, len2 = len(test_tup1), len(test_tup2)\n    \n    # Handle the case where both tuples are empty\n    if len1 == 0 and len2 == 0:\n        return res\n    \n    # Iterate through the first tuple\n    for i in range(len1):\n        # Use the second tuple's elements, cycling if necessary\n        if len2 > 0:\n            res.append((test_tup1[i], test_tup2[i % len2]))\n        else:\n            res.append((test_tup1[i], None))  # If second tuple is empty, append None\n    \n    return res", "test_list": ["assert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]", "assert zip_tuples((8, 9, 5, 6, 10, 11),(2, 6, 7) ) == [(8, 2), (9, 6), (5, 7), (6, 2), (10, 6), (11, 7)]", "assert zip_tuples((9, 10, 6, 7, 11, 12),(3, 7, 8) ) == [(9, 3), (10, 7), (6, 8), (7, 3), (11, 7), (12, 8)]"], "challenge_test_list": [], "reference_code": "def zip_tuples(test_tup1, test_tup2):\r\n  res = []\r\n  for i, j in enumerate(test_tup1):\r\n    res.append((j, test_tup2[i % len(test_tup2)])) \r\n  return (res) "}
{"task_id": "82", "prompt": "Write a function to find the volume of a sphere.", "completion": "import math\n\ndef volume_sphere(r):\n    if not isinstance(r, (int, float)):\n        raise TypeError(\"must be a number\")\n    if r < 0:\n        raise ValueError(\"Radius cannot be negative\")\n    return (4/3) * math.pi * r**3", "test_list": ["assert volume_sphere(10)==4188.790204786391", "assert volume_sphere(25)==65449.84694978735", "assert volume_sphere(20)==33510.32163829113"], "challenge_test_list": [], "reference_code": "import math\r\ndef volume_sphere(r):\r\n  volume=(4/3)*math.pi*r*r*r\r\n  return volume"}
{"task_id": "83", "prompt": "Write a python function to find the character made by adding all the characters of the given string.", "completion": "def get_Char(strr):\n    if not isinstance(strr, str):\n        raise TypeError(\"string expected\")\n    \n    summ = 0\n    for char in strr:\n        if 'a' <= char <= 'z':  # Ensure only lowercase letters are processed\n            summ += (ord(char) - ord('a') + 1)\n    \n    if summ == 0:  # If the sum is zero (empty string or no valid characters)\n        return 'a'\n    \n    summ = summ % 26\n    if summ == 0:\n        return 'z'\n    else:\n        return chr(ord('a') + summ - 1)\n\n# Test cases\nimport pytest\n\ndef test_basic_functionality():\n    assert get_Char(\"abc\") == 'c', \"Expected 'c' for input 'abc'\"\n    assert get_Char(\"xyz\") == 'z', \"Expected 'z' for input 'xyz'\"\n    assert get_Char(\"hello\") == 'o', \"Expected 'o' for input 'hello'\"\n    assert get_Char(\"a\") == 'a', \"Expected 'a' for input 'a'\"\n    assert get_Char(\"z\") == 'z', \"Expected 'z' for input 'z'\"\n\ndef test_edge_cases():\n    assert get_Char(\"\") == 'a', \"Expected 'a' for empty input\"\n    assert get_Char(\"a\" * 25) == 'y', \"Expected 'y' for input of 25 'a's\"\n    assert get_Char(\"a\" * 26) == 'z', \"Expected 'z' for input of 26 'a's\"\n    assert get_Char(\"a\" * 27) == 'a', \"Expected 'a' for input of 27 'a's\"\n\ndef test_exceptions():\n    with pytest.raises(TypeError, match=\"string expected\"):\n        get_Char(123)\n    with pytest.raises(TypeError, match=\"string expected\"):\n        get_Char(None)\n    with pytest.raises(TypeError, match=\"string expected\"):\n        get_Char([\"a\", \"b\", \"c\"])\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert get_Char(\"abc\") == \"f\"", "assert get_Char(\"gfg\") == \"t\"", "assert get_Char(\"ab\") == \"c\""], "challenge_test_list": [], "reference_code": "def get_Char(strr):  \r\n    summ = 0\r\n    for i in range(len(strr)): \r\n        summ += (ord(strr[i]) - ord('a') + 1)  \r\n    if (summ % 26 == 0): \r\n        return ord('z') \r\n    else: \r\n        summ = summ % 26\r\n        return chr(ord('a') + summ - 1)"}
{"task_id": "84", "prompt": "Write a function to find the n-th number in newman conway sequence.", "completion": "def sequence(n):\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n    \n    # Initialize the sequence list with the first two values\n    seq = [0, 1, 1]  # seq[0] is unused, seq[1] = 1, seq[2] = 1\n    \n    for i in range(3, n + 1):\n        # Calculate the n-th number in the Newman-Conway sequence\n        seq.append(seq[seq[i - 1]] + seq[i - seq[i - 1]])\n    \n    return seq[n]", "test_list": ["assert sequence(10) == 6", "assert sequence(2) == 1", "assert sequence(3) == 2"], "challenge_test_list": [], "reference_code": "def sequence(n): \r\n\tif n == 1 or n == 2: \r\n\t\treturn 1\r\n\telse: \r\n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))"}
{"task_id": "85", "prompt": "Write a function to find the surface area of a sphere.", "completion": "import math\n\ndef surfacearea_sphere(r):\n    if r < 0:\n        raise ValueError(\"Radius cannot be negative\")\n    return 4 * math.pi * r * r", "test_list": ["assert surfacearea_sphere(10)==1256.6370614359173", "assert surfacearea_sphere(15)==2827.4333882308138", "assert surfacearea_sphere(20)==5026.548245743669"], "challenge_test_list": [], "reference_code": "import math\r\ndef surfacearea_sphere(r):\r\n  surfacearea=4*math.pi*r*r\r\n  return surfacearea"}
{"task_id": "86", "prompt": "Write a function to find nth centered hexagonal number.", "completion": "import pytest\n\ndef centered_hexagonal_number(n):\n    if not isinstance(n, int):\n        raise TypeError(\"unsupported operand type\")\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    \n    return 3 * n * (n - 1) + 1\n\ndef test_basic_functionality():\n    assert centered_hexagonal_number(1) == 1, \"Failed for n=1\"\n    assert centered_hexagonal_number(2) == 7, \"Failed for n=2\"\n    assert centered_hexagonal_number(3) == 19, \"Failed for n=3\"\n    assert centered_hexagonal_number(4) == 37, \"Failed for n=4\"\n    assert centered_hexagonal_number(5) == 61, \"Failed for n=5\"\n\ndef test_edge_cases():\n    assert centered_hexagonal_number(1) == 1, \"Failed for n=1 (should return 1)\"\n    assert centered_hexagonal_number(10) == 271, \"Failed for n=10\"\n    assert centered_hexagonal_number(100) == 29901, \"Failed for n=100\"\n\ndef test_exceptions():\n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        centered_hexagonal_number(\"string\")\n    \n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        centered_hexagonal_number(None)\n    \n    with pytest.raises(ValueError, match=\"n must be a positive integer\"):\n        centered_hexagonal_number(0)\n    \n    with pytest.raises(ValueError, match=\"n must be a positive integer\"):\n        centered_hexagonal_number(-1)\n    \n    with pytest.raises(ValueError, match=\"n must be a positive integer\"):\n        centered_hexagonal_number(-10)\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert centered_hexagonal_number(10) == 271", "assert centered_hexagonal_number(2) == 7", "assert centered_hexagonal_number(9) == 217"], "challenge_test_list": [], "reference_code": "def centered_hexagonal_number(n):\r\n  return 3 * n * (n - 1) + 1"}
{"task_id": "87", "prompt": "Write a function to merge three dictionaries into a single expression.", "completion": "def merge_dictionaries_three(dict1, dict2, dict3):\n    if not all(isinstance(d, dict) for d in (dict1, dict2, dict3)):\n        raise TypeError(\"expected a dictionary\")\n    return {**dict1, **dict2, **dict3}", "test_list": ["assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}", "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}", "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}"], "challenge_test_list": [], "reference_code": "import collections as ct\r\ndef merge_dictionaries_three(dict1,dict2, dict3):\r\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\r\n    return merged_dict"}
{"task_id": "88", "prompt": "Write a function to get the frequency of the elements in a list.", "completion": "import collections\n\ndef freq_count(list1):\n    if any(isinstance(i, list) for i in list1):\n        raise TypeError(\"unhashable type: 'list'\")\n    return collections.Counter(list1)", "test_list": ["assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) ", "assert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3}) ", "assert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2}) "], "challenge_test_list": [], "reference_code": "import collections\r\ndef freq_count(list1):\r\n  freq_count= collections.Counter(list1)\r\n  return freq_count"}
{"task_id": "89", "prompt": "Write a function to find the closest smaller number than n.", "completion": "def closest_num(N):\n    if not isinstance(N, (int, float)):\n        raise TypeError(\"unsupported operand type\")\n    return N - 1", "test_list": ["assert closest_num(11) == 10", "assert closest_num(7) == 6", "assert closest_num(12) == 11"], "challenge_test_list": [], "reference_code": "def closest_num(N):\r\n  return (N - 1)"}
{"task_id": "90", "prompt": "Write a python function to find the length of the longest word.", "completion": "def len_log(list1):\n    if not list1:\n        raise IndexError(\"list index out of range\")\n    \n    max_length = 0\n    for word in list1:\n        if not isinstance(word, str):\n            raise TypeError(f\"object of type '{type(word).__name__}' has no len()\")\n        max_length = max(max_length, len(word))\n    \n    return max_length", "test_list": ["assert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7", "assert len_log([\"a\",\"ab\",\"abc\"]) == 3", "assert len_log([\"small\",\"big\",\"tall\"]) == 5"], "challenge_test_list": [], "reference_code": "def len_log(list1):\r\n    max=len(list1[0])\r\n    for i in list1:\r\n        if len(i)>max:\r\n            max=len(i)\r\n    return max"}
{"task_id": "91", "prompt": "Write a function to check if a substring is present in a given list of string values.", "completion": "def find_substring(str1, sub_str):\n    if not isinstance(str1, list) or not all(isinstance(s, str) for s in str1):\n        raise TypeError(\"expected str or list\")\n    if not isinstance(sub_str, str):\n        raise TypeError(\"expected str or list\")\n    \n    return any(sub_str in s for s in str1)", "test_list": ["assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True", "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False", "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")==True"], "challenge_test_list": [], "reference_code": "def find_substring(str1, sub_str):\r\n   if any(sub_str in s for s in str1):\r\n       return True\r\n   return False"}
{"task_id": "92", "prompt": "Write a function to check whether the given number is undulating or not.", "completion": "import pytest\n\ndef is_undulating(n):\n    if not isinstance(n, list) or any(not isinstance(x, (int, float)) for x in n):\n        raise TypeError(\"Input must be a list of numbers.\")\n    \n    if len(n) < 3:\n        return False\n    \n    for i in range(2, len(n)):\n        if n[i - 2] == n[i]:\n            return False\n    return True\n\n# Test cases\ndef test_basic_functionality():\n    assert is_undulating([1, 2, 1, 2]) == True, \"Should be undulating\"\n    assert is_undulating([1, 2, 1, 2, 1]) == True, \"Should be undulating\"\n    assert is_undulating([1, 1, 1]) == False, \"Should not be undulating\"\n    assert is_undulating([1, 2, 3]) == False, \"Should not be undulating\"\n    assert is_undulating([2, 1, 2, 1]) == True, \"Should be undulating\"\n\ndef test_edge_cases():\n    assert is_undulating([1]) == False, \"Single element should not be undulating\"\n    assert is_undulating([]) == False, \"Empty list should not be undulating\"\n    assert is_undulating([1, 2]) == False, \"Two elements should not be undulating\"\n    assert is_undulating([1, 2, 1]) == True, \"Three elements should be undulating\"\n\ndef test_exceptions():\n    with pytest.raises(TypeError):\n        is_undulating(None)\n    with pytest.raises(TypeError):\n        is_undulating(\"123\")\n    with pytest.raises(TypeError):\n        is_undulating(123)\n    with pytest.raises(TypeError):\n        is_undulating([1, 2, \"3\"])\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert is_undulating(\"1212121\") == True", "assert is_undulating(\"1991\") == False", "assert is_undulating(\"121\") == True"], "challenge_test_list": [], "reference_code": "def is_undulating(n): \r\n\tif (len(n) <= 2): \r\n\t\treturn False\r\n\tfor i in range(2, len(n)): \r\n\t\tif (n[i - 2] != n[i]): \r\n\t\t\treturn False\r\n\treturn True"}
{"task_id": "93", "prompt": "Write a function to calculate the value of 'a' to the power 'b'.", "completion": "def power(a, b):\n    if not isinstance(a, (int, float)) or not isinstance(b, (int, float)):\n        raise TypeError(\"unsupported operand type\")\n    \n    if b == 0:\n        return 1\n    elif a == 0:\n        return 0\n    elif b < 0:\n        return 1 / power(a, -b)\n    elif b == 1:\n        return a\n    else:\n        return a * power(a, b - 1)", "test_list": ["assert power(3,4) == 81", "assert power(2,3) == 8", "assert power(5,5) == 3125"], "challenge_test_list": [], "reference_code": "def power(a,b):\r\n\tif b==0:\r\n\t\treturn 1\r\n\telif a==0:\r\n\t\treturn 0\r\n\telif b==1:\r\n\t\treturn a\r\n\telse:\r\n\t\treturn a*power(a,b-1)"}
{"task_id": "94", "prompt": "Write a function to extract the index minimum value record from the given tuples.", "completion": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    if not test_list:\n        return None  # Handle empty list gracefully\n    res = min(test_list, key=itemgetter(1))[0]\n    return res \n\nimport pytest\n\ndef test_basic_functionality():\n    assert index_minimum([('a', 2), ('b', 1), ('c', 3)]) == 'b', \"Should return 'b' as it has the minimum value 1\"\n    assert index_minimum([('x', 5), ('y', 0), ('z', 2)]) == 'y', \"Should return 'y' as it has the minimum value 0\"\n    assert index_minimum([('apple', 10), ('banana', 5), ('cherry', 5)]) == 'banana', \"Should return 'banana' as it appears first with the minimum value 5\"\n\ndef test_edge_cases():\n    assert index_minimum([('single', 1)]) == 'single', \"Should return 'single' for a single element list\"\n    assert index_minimum([('first', 0), ('second', 0)]) == 'first', \"Should return 'first' as it appears first with the minimum value 0\"\n    assert index_minimum([]) == None, \"Should handle empty list gracefully\"\n\ndef test_exceptions():\n    with pytest.raises(ValueError, match=\"min() arg is an empty sequence\"):\n        index_minimum([])\n\n    with pytest.raises(TypeError, match=\"unhashable type: 'list'\"):\n        index_minimum([('a', [1, 2]), ('b', 1)])\n\n    with pytest.raises(TypeError, match=\"unhashable type: 'dict'\"):\n        index_minimum([('a', {'key': 'value'}), ('b', 1)])\n\n# Run the tests\npytest.main()", "test_list": ["assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'", "assert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'", "assert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'"], "challenge_test_list": [], "reference_code": "from operator import itemgetter \r\ndef index_minimum(test_list):\r\n  res = min(test_list, key = itemgetter(1))[0]\r\n  return (res) "}
{"task_id": "95", "prompt": "Write a python function to find the minimum length of sublist.", "completion": "import pytest\n\ndef Find_Min_Length(lst):\n    if not lst:\n        raise ValueError(\"min() arg is an empty sequence\")\n    \n    minLength = float('inf')\n    \n    for sublist in lst:\n        if not isinstance(sublist, list):\n            raise TypeError(\"object of type 'int' has no len()\")\n        minLength = min(minLength, len(sublist))\n    \n    return minLength if minLength != float('inf') else 0\n\n# Test cases\ndef test_basic_functionality():\n    assert Find_Min_Length([[1, 2, 3], [4, 5], [6]]) == 1, \"Expected minimum length is 1\"\n    assert Find_Min_Length([[1], [2], [3], [4]]) == 1, \"Expected minimum length is 1\"\n    assert Find_Min_Length([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == 2, \"Expected minimum length is 2\"\n\ndef test_edge_cases():\n    assert Find_Min_Length([[], [1, 2, 3], [4, 5]]) == 0, \"Expected minimum length is 0 for empty sublist\"\n    assert Find_Min_Length([[], [], []]) == 0, \"Expected minimum length is 0 for all empty sublists\"\n    assert Find_Min_Length([[], [1], [2, 3]]) == 0, \"Expected minimum length is 0 for one empty sublist\"\n\ndef test_exceptions():\n    with pytest.raises(ValueError, match=\"min() arg is an empty sequence\"):\n        Find_Min_Length([])  # Testing with an empty list of lists\n    with pytest.raises(TypeError, match=\"object of type 'int' has no len()\"):\n        Find_Min_Length([[1, 2], 3, [4]])  # Testing with a non-list element\n    with pytest.raises(TypeError, match=\"object of type 'int' has no len()\"):\n        Find_Min_Length([[1, 2], [3, 4], 5])  # Testing with a non-list element\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert Find_Min_Length([[1],[1,2]]) == 1", "assert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2", "assert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3"], "challenge_test_list": [], "reference_code": "def Find_Min_Length(lst):  \r\n    minLength = min(len(x) for x in lst )\r\n    return minLength "}
{"task_id": "96", "prompt": "Write a python function to find the number of divisors of a given integer.", "completion": "def divisor(n):\n    if not isinstance(n, int):\n        raise TypeError(\"unsupported operand type\")\n    if n < 1:\n        return 0\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count", "test_list": ["assert divisor(15) == 4 ", "assert divisor(12) == 6", "assert divisor(9) == 3"], "challenge_test_list": [], "reference_code": "def divisor(n):\r\n  for i in range(n):\r\n    x = len([i for i in range(1,n+1) if not n % i])\r\n  return x"}
{"task_id": "97", "prompt": "Write a function to find frequency count of list of lists.", "completion": "def frequency_lists(list1):\n    if not isinstance(list1, list) or any(not isinstance(sublist, list) for sublist in list1):\n        raise TypeError(\"expected list of lists\")\n    \n    list1 = [item for sublist in list1 for item in sublist]\n    dic_data = {}\n    for num in list1:\n        dic_data[num] = dic_data.get(num, 0) + 1\n    return dic_data", "test_list": ["assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}", "assert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}", "assert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}"], "challenge_test_list": [], "reference_code": "def frequency_lists(list1):\r\n    list1 = [item for sublist in list1 for item in sublist]\r\n    dic_data = {}\r\n    for num in list1:\r\n        if num in dic_data.keys():\r\n            dic_data[num] += 1\r\n        else:\r\n            key = num\r\n            value = 1\r\n            dic_data[key] = value\r\n    return dic_data\r\n"}
{"task_id": "98", "prompt": "Write a function to multiply all the numbers in a list and divide with the length of the list.", "completion": "import pytest\n\ndef multiply_num(numbers):\n    if len(numbers) == 0:\n        raise ZeroDivisionError(\"division by zero\")\n    \n    total = 1\n    for x in numbers:\n        total *= x\n    \n    return total / len(numbers)\n\n# Test cases\ndef test_basic_functionality():\n    assert multiply_num([1, 2, 3, 4]) == pytest.approx(6.0, rel=1e-9), \"Should return 6.0 for [1, 2, 3, 4]\"\n    assert multiply_num([2, 5]) == pytest.approx(5.0, rel=1e-9), \"Should return 5.0 for [2, 5]\"\n    assert multiply_num([10]) == 10.0, \"Should return 10.0 for single element list [10]\"\n\ndef test_edge_cases():\n    assert multiply_num([0, 1, 2, 3]) == 0.0, \"Should return 0.0 for list containing zero\"\n    assert multiply_num([-1, -2, -3]) == pytest.approx(-2.0, rel=1e-9), \"Should return -2.0 for [-1, -2, -3]\"\n    assert multiply_num([1.5, 2.5]) == pytest.approx(3.75, rel=1e-9), \"Should return 3.75 for [1.5, 2.5]\"\n\ndef test_boundary_cases():\n    assert multiply_num([]) == 0.0, \"Should return 0.0 for empty list\"\n    assert multiply_num([1]) == 1.0, \"Should return 1.0 for single element list [1]\"\n    assert multiply_num([1, 2, 3, 4, 5]) == pytest.approx(15.0, rel=1e-9), \"Should return 15.0 for [1, 2, 3, 4, 5]\"\n\ndef test_exceptions():\n    with pytest.raises(ZeroDivisionError, match=\"division by zero\"):\n        multiply_num([])  # Should raise ZeroDivisionError for empty list\n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        multiply_num([1, 'a', 3])  # Should raise TypeError for invalid input", "test_list": ["assert multiply_num((8, 2, 3, -1, 7))==-67.2", "assert multiply_num((-10,-20,-30))==-2000.0", "assert multiply_num((19,15,18))==1710.0"], "challenge_test_list": [], "reference_code": "def multiply_num(numbers):  \r\n    total = 1\r\n    for x in numbers:\r\n        total *= x  \r\n    return total/len(numbers) "}
{"task_id": "99", "prompt": "Write a function to convert the given decimal number to its binary equivalent.", "completion": "def decimal_to_binary(n):\n    if not isinstance(n, int):\n        raise TypeError(\"Invalid input type\")\n    if n < 0:\n        raise ValueError(\"Negative values are not supported\")\n    return bin(n).replace(\"0b\", \"\")", "test_list": ["assert decimal_to_binary(8) == '1000'", "assert decimal_to_binary(18) == '10010'", "assert decimal_to_binary(7) == '111' "], "challenge_test_list": [], "reference_code": "def decimal_to_binary(n): \r\n    return bin(n).replace(\"0b\",\"\") "}
{"task_id": "100", "prompt": "Write a function to find the next smallest palindrome of a specified number.", "completion": "import sys\n\ndef next_smallest_palindrome(num):\n    if not isinstance(num, int):\n        raise TypeError(\"unsupported operand type(s) for +: 'int' and 'str'\")\n    if num < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    \n    num += 1  # Start searching from the next number\n    while True:\n        if str(num) == str(num)[::-1]:\n            return num\n        num += 1", "test_list": ["assert next_smallest_palindrome(99)==101", "assert next_smallest_palindrome(1221)==1331", "assert next_smallest_palindrome(120)==121"], "challenge_test_list": [], "reference_code": "import sys\r\ndef next_smallest_palindrome(num):\r\n    numstr = str(num)\r\n    for i in range(num+1,sys.maxsize):\r\n        if str(i) == str(i)[::-1]:\r\n            return i"}
{"task_id": "101", "prompt": "Write a function to find the kth element in the given array.", "completion": "def kth_element(arr, n, k):\n    if arr is None or k <= 0 or k > n:\n        raise IndexError(\"list index out of range\")\n    \n    # Implementing a simple bubble sort to sort the array\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    \n    return arr[k-1]", "test_list": ["assert kth_element([12,3,5,7,19], 5, 2) == 3", "assert kth_element([17,24,8,23], 4, 3) == 8", "assert kth_element([16,21,25,36,4], 5, 4) == 36"], "challenge_test_list": [], "reference_code": "def kth_element(arr, n, k):\r\n  for i in range(n):\r\n    for j in range(0, n-i-1):\r\n      if arr[j] > arr[j+1]:\r\n        arr[j], arr[j+1] == arr[j+1], arr[j]\r\n  return arr[k-1]"}
{"task_id": "102", "prompt": "Write a function to convert snake case string to camel case string.", "completion": "import re\n\ndef snake_to_camel(word):\n    if not isinstance(word, str):\n        raise TypeError(\"expected string or bytes-like object\")\n    \n    # Split the string by underscores and capitalize each part\n    parts = word.split('_')\n    # Filter out empty parts that may result from leading, trailing, or multiple underscores\n    parts = [x.capitalize() for x in parts if x]\n    \n    # Join the parts together to form the camel case string\n    return ''.join(parts)", "test_list": ["assert snake_to_camel('python_program')=='PythonProgram'", "assert snake_to_camel('python_language')==('PythonLanguage')", "assert snake_to_camel('programming_language')==('ProgrammingLanguage')"], "challenge_test_list": [], "reference_code": "def snake_to_camel(word):\r\n        import re\r\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))"}
{"task_id": "103", "prompt": "Write a function to find eulerian number a(n, m).", "completion": "def eulerian_num(n, m): \n    if not isinstance(n, int) or not isinstance(m, int):\n        raise TypeError(\"Both n and m must be integers.\")\n    if n < 0 or m < 0:\n        raise ValueError(\"Both n and m must be non-negative.\")\n    \n    if m >= n or n == 0: \n        return 0 \n    if m == 0: \n        return 1 \n    \n    return ((n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m))", "test_list": ["assert eulerian_num(3, 1) == 4", "assert eulerian_num(4, 1) == 11", "assert eulerian_num(5, 3) == 26"], "challenge_test_list": [], "reference_code": "def eulerian_num(n, m): \r\n\tif (m >= n or n == 0): \r\n\t\treturn 0 \r\n\tif (m == 0): \r\n\t\treturn 1 \r\n\treturn ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))"}
{"task_id": "104", "prompt": "Write a function to sort each sublist of strings in a given list of lists using lambda function.", "completion": "def sort_sublists(input_list):\n    # Check if all elements in the input_list are lists\n    if not all(isinstance(sublist, list) for sublist in input_list):\n        raise TypeError(\"All elements of input_list must be lists\")\n    \n    # Sort each sublist\n    result = [sorted(x) for x in input_list]\n    return result", "test_list": ["assert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]", "assert sort_sublists(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]", "assert sort_sublists(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]"], "challenge_test_list": [], "reference_code": "def sort_sublists(input_list):\r\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \r\n    return result\r"}
{"task_id": "105", "prompt": "Write a python function to count true booleans in the given list.", "completion": "def count(lst):\n    # Count only boolean True values in the list\n    if not all(isinstance(x, (bool, int)) for x in lst):\n        raise TypeError(\"unsupported operand type\")\n    \n    return sum(1 for x in lst if isinstance(x, bool) and x)\n\n# Test cases\nimport pytest\n\ndef test_basic_functionality():\n    assert count([True, False, True]) == 2, \"Should count 2 true values\"\n    assert count([False, False, False]) == 0, \"Should count 0 true values\"\n    assert count([True, True, True]) == 3, \"Should count 3 true values\"\n    assert count([True, False, True, False, True]) == 3, \"Should count 3 true values\"\n\ndef test_edge_cases():\n    assert count([]) == 0, \"Should count 0 true values in an empty list\"\n    assert count([None, False, True]) == 1, \"Should count 1 true value among None and False\"\n    assert count([1, 0, 1]) == 2, \"Should count 2 true values (1 is treated as True)\"\n    assert count([0, 0, 0]) == 0, \"Should count 0 true values (0 is treated as False)\"\n\ndef test_exceptions():\n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        count([True, \"string\", False]), \"Should raise TypeError for invalid input types\"\n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        count([True, None, False]), \"Should raise TypeError for None in the list\"\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert count([True,False,True]) == 2", "assert count([False,False]) == 0", "assert count([True,True,True]) == 3"], "challenge_test_list": [], "reference_code": "def count(lst):   \r\n    return sum(lst) "}
{"task_id": "106", "prompt": "Write a function to add the given list to the given tuples.", "completion": "import pytest\n\ndef add_lists(test_list, test_tup):\n    if not isinstance(test_list, list):\n        raise TypeError(\"first argument must be a list\")\n    if not isinstance(test_tup, tuple):\n        raise TypeError(\"second argument must be a tuple\")\n    \n    res = tuple(list(test_tup) + test_list)\n    return res\n\n# Test cases\ndef test_basic_functionality():\n    assert add_lists([1, 2, 3], (4, 5, 6)) == (4, 5, 6, 1, 2, 3), \"Should concatenate list to tuple\"\n    assert add_lists(['a', 'b'], ('c', 'd')) == ('c', 'd', 'a', 'b'), \"Should concatenate list to tuple with strings\"\n    assert add_lists([], (1, 2, 3)) == (1, 2, 3), \"Should return tuple unchanged when list is empty\"\n\ndef test_edge_cases():\n    assert add_lists([], ()) == (), \"Should return empty tuple when both inputs are empty\"\n    assert add_lists([None], (1, 2)) == (1, 2, None), \"Should handle None in list correctly\"\n    assert add_lists([1.5], (2.5,)) == (2.5, 1.5), \"Should handle floating point numbers correctly\"\n\ndef test_exceptions():\n    with pytest.raises(TypeError, match=\"first argument must be a list\"):\n        add_lists((1, 2), (3, 4))  # Invalid input: first argument should be a list\n    with pytest.raises(TypeError, match=\"first argument must be a list\"):\n        add_lists('not_a_list', (1, 2))  # Invalid input: first argument should be a list\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)", "assert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)", "assert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)"], "challenge_test_list": [], "reference_code": "def add_lists(test_list, test_tup):\r\n  res = tuple(list(test_tup) + test_list)\r\n  return (res) "}
{"task_id": "107", "prompt": "Write a python function to count hexadecimal numbers for a given range.", "completion": "import pytest\n\ndef count_Hexadecimal(L, R):\n    if not isinstance(L, int) or not isinstance(R, int):\n        raise TypeError(\"Both L and R must be integers.\")\n    if L < 0 or R < 0:\n        raise ValueError(\"Both L and R must be non-negative.\")\n    if L > R:\n        raise ValueError(\"L must be less than or equal to R.\")\n\n    count = 0\n    for i in range(L, R + 1):\n        if i >= 10:\n            count += 1\n    return count\n\n# Test cases\ndef test_basic_functionality():\n    assert count_Hexadecimal(0, 15) == 6, \"Should count 6 hexadecimal numbers between 0 and 15\"\n    assert count_Hexadecimal(10, 20) == 7, \"Should count 7 hexadecimal numbers between 10 and 20\"\n    assert count_Hexadecimal(16, 31) == 16, \"Should count 16 hexadecimal numbers between 16 and 31\"\n    assert count_Hexadecimal(1, 9) == 0, \"Should count 0 hexadecimal numbers between 1 and 9\"\n\ndef test_edge_cases():\n    assert count_Hexadecimal(15, 15) == 1, \"Should count 1 hexadecimal number (15) between 15 and 15\"\n    assert count_Hexadecimal(10, 10) == 1, \"Should count 1 hexadecimal number (10) between 10 and 10\"\n    assert count_Hexadecimal(0, 0) == 0, \"Should count 0 hexadecimal numbers between 0 and 0\"\n    assert count_Hexadecimal(16, 16) == 1, \"Should count 1 hexadecimal number (16) between 16 and 16\"\n    assert count_Hexadecimal(31, 31) == 1, \"Should count 1 hexadecimal number (31) between 31 and 31\"\n\ndef test_exceptions():\n    with pytest.raises(TypeError):\n        count_Hexadecimal(\"a\", 10)\n    with pytest.raises(TypeError):\n        count_Hexadecimal(10, \"b\")\n    with pytest.raises(ValueError):\n        count_Hexadecimal(-1, 10)\n    with pytest.raises(ValueError):\n        count_Hexadecimal(10, -1)\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert count_Hexadecimal(10,15) == 6", "assert count_Hexadecimal(2,4) == 0", "assert count_Hexadecimal(15,16) == 1"], "challenge_test_list": [], "reference_code": "def count_Hexadecimal(L,R) :  \r\n    count = 0;  \r\n    for i in range(L,R + 1) : \r\n        if (i >= 10 and i <= 15) : \r\n            count += 1;  \r\n        elif (i > 15) : \r\n            k = i;  \r\n            while (k != 0) :  \r\n                if (k % 16 >= 10) : \r\n                    count += 1;  \r\n                k = k // 16;  \r\n    return count;  "}
{"task_id": "108", "prompt": "Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.", "completion": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    if not all(isinstance(lst, list) for lst in [num1, num2, num3]):\n        raise TypeError(\"expected an iterable\")\n    \n    result = heapq.merge(sorted(num1), sorted(num2), sorted(num3))\n    return list(result)", "test_list": ["assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]", "assert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]", "assert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]"], "challenge_test_list": [], "reference_code": "import heapq\r\ndef merge_sorted_list(num1,num2,num3):\r\n  num1=sorted(num1)\r\n  num2=sorted(num2)\r\n  num3=sorted(num3)\r\n  result = heapq.merge(num1,num2,num3)\r\n  return list(result)"}
{"task_id": "109", "prompt": "Write a python function to find the count of rotations of a binary string with odd value.", "completion": "def odd_Equivalent(s, n):\n    if not isinstance(s, str) or not isinstance(n, int):\n        raise TypeError(\"string index out of range\")\n    if n < 0 or n != len(s):\n        raise TypeError(\"string index out of range\")\n    \n    count = 0\n    for i in range(n):\n        if s[i] == '1':\n            count += 1\n    return count", "test_list": ["assert odd_Equivalent(\"011001\",6) == 3", "assert odd_Equivalent(\"11011\",5) == 4", "assert odd_Equivalent(\"1010\",4) == 2"], "challenge_test_list": [], "reference_code": "def odd_Equivalent(s,n): \r\n    count=0\r\n    for i in range(0,n): \r\n        if (s[i] == '1'): \r\n            count = count + 1\r\n    return count "}
{"task_id": "110", "prompt": "Write a function to extract the ranges that are missing from the given list with the given start range and end range values.", "completion": "def extract_missing(test_list, strt_val, stop_val):\n    if test_list is None or strt_val is None or stop_val is None:\n        raise TypeError(\"unsupported operand type\")\n\n    res = []\n    current_start = strt_val\n\n    for sub in sorted(test_list):\n        if sub[0] > current_start:\n            res.append((current_start, sub[0]))\n        current_start = max(current_start, sub[1])\n\n    if current_start < stop_val:\n        res.append((current_start, stop_val))\n\n    return res", "test_list": ["assert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]", "assert extract_missing([(7, 2), (15, 19), (38, 50)], 5, 60) == [(5, 7), (2, 60), (2, 15), (19, 60), (19, 38), (50, 60)]", "assert extract_missing([(7, 2), (15, 19), (38, 50)], 1, 52) == [(1, 7), (2, 52), (2, 15), (19, 52), (19, 38), (50, 52)]"], "challenge_test_list": [], "reference_code": "def extract_missing(test_list, strt_val, stop_val):\r\n  res = []\r\n  for sub in test_list:\r\n    if sub[0] > strt_val:\r\n      res.append((strt_val, sub[0]))\r\n      strt_val = sub[1]\r\n    if strt_val < stop_val:\r\n      res.append((strt_val, stop_val))\r\n  return (res) "}
{"task_id": "111", "prompt": "Write a function to find common elements in given nested lists. * list item * list item * list item * list item", "completion": "def common_in_nested_lists(nestedlist):\n    if not isinstance(nestedlist, list) or any(not isinstance(lst, list) for lst in nestedlist):\n        raise TypeError(\"expected an iterable of lists\")\n    \n    if not nestedlist:\n        return []\n    \n    result = list(set.intersection(*map(set, nestedlist)))\n    return result", "test_list": ["assert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]", "assert common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]])==[5,23]", "assert common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]])==[4]"], "challenge_test_list": [], "reference_code": "def common_in_nested_lists(nestedlist):\r\n    result = list(set.intersection(*map(set, nestedlist)))\r\n    return result"}
{"task_id": "112", "prompt": "Write a python function to find the perimeter of a cylinder.", "completion": "def perimeter(diameter, height):\n    if not isinstance(diameter, (int, float)) or not isinstance(height, (int, float)):\n        raise TypeError(\"unsupported operand type\")\n    return 2 * (diameter + height)", "test_list": ["assert perimeter(2,4) == 12", "assert perimeter(1,2) == 6", "assert perimeter(3,1) == 8"], "challenge_test_list": [], "reference_code": "def perimeter(diameter,height) : \r\n    return 2*(diameter+height)  "}
{"task_id": "113", "prompt": "Write a function to check if a string represents an integer or not.", "completion": "def check_integer(text):\n    if text is None or len(text.strip()) == 0:\n        return None\n    \n    text = text.strip()\n    \n    if len(text) < 1:\n        return None\n    elif all(text[i] in \"0123456789\" for i in range(len(text))):\n        return True\n    elif (text[0] in \"+-\") and \\\n         all(text[i] in \"0123456789\" for i in range(1, len(text))):\n        return True\n    else:\n        return False", "test_list": ["assert check_integer(\"python\")==False", "assert check_integer(\"1\")==True", "assert check_integer(\"12345\")==True"], "challenge_test_list": [], "reference_code": "def check_integer(text):\r\n text = text.strip()\r\n if len(text) < 1:\r\n    return None\r\n else:\r\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\r\n          return True\r\n     elif (text[0] in \"+-\") and \\\r\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\r\n         return True\r\n     else:\r\n        return False"}
{"task_id": "114", "prompt": "Write a function to assign frequency to each tuple in the given tuple list.", "completion": "from collections import Counter \n\ndef assign_freq(test_list):\n    if test_list is None or not isinstance(test_list, list) or not all(isinstance(t, tuple) for t in test_list):\n        raise TypeError(\"Input must be a list of tuples\")\n    \n    res = [(*key, val) for key, val in Counter(test_list).items()]\n    return str(res)", "test_list": ["assert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'", "assert assign_freq([(4, 2, 4), (7, 1), (4, 8), (4, 2, 4), (9, 2), (7, 1)] ) == '[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]'", "assert assign_freq([(11, 13, 10), (17, 21), (4, 2, 3), (17, 21), (9, 2), (4, 2, 3)] ) == '[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]'"], "challenge_test_list": [], "reference_code": "from collections import Counter \r\ndef assign_freq(test_list):\r\n  res = [(*key, val) for key, val in Counter(test_list).items()]\r\n  return (str(res)) "}
{"task_id": "115", "prompt": "Write a function to check whether all dictionaries in a list are empty or not.", "completion": "def empty_dit(list1):\n    if not isinstance(list1, list):\n        raise TypeError(\"expected list\")\n    if any(not isinstance(d, dict) for d in list1):\n        raise TypeError(\"expected dictionary\")\n    return all(not d for d in list1)", "test_list": ["assert empty_dit([{},{},{}])==True", "assert empty_dit([{1,2},{},{}])==False", "assert empty_dit({})==True"], "challenge_test_list": [], "reference_code": "def empty_dit(list1):\r\n empty_dit=all(not d for d in list1)\r\n return empty_dit"}
{"task_id": "116", "prompt": "Write a function to convert a given tuple of positive integers into an integer.", "completion": "def tuple_to_int(nums):\n    if not all(isinstance(x, int) for x in nums):\n        raise TypeError(\"tuple indices must be integers or slices, not str\")\n    return int(''.join(map(str, nums)))", "test_list": ["assert tuple_to_int((1,2,3))==123", "assert tuple_to_int((4,5,6))==456", "assert tuple_to_int((5,6,7))==567"], "challenge_test_list": [], "reference_code": "def tuple_to_int(nums):\r\n    result = int(''.join(map(str,nums)))\r\n    return result"}
{"task_id": "117", "prompt": "Write a function to convert all possible convertible elements in the list to float.", "completion": "def list_to_float(test_list):\n    res = []\n    for tup in test_list:\n        temp = []\n        for ele in tup:\n            if ele is None or ele.isalpha():\n                temp.append(ele)\n            else:\n                try:\n                    temp.append(float(ele))\n                except ValueError:\n                    raise ValueError(\"Value error occurred\")\n        res.append(tuple(temp)) \n    return str(res)", "test_list": ["assert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'", "assert list_to_float( [(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")] ) == '[(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]'", "assert list_to_float( [(\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")] ) == '[(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]'"], "challenge_test_list": [], "reference_code": "def list_to_float(test_list):\r\n  res = []\r\n  for tup in test_list:\r\n    temp = []\r\n    for ele in tup:\r\n      if ele.isalpha():\r\n        temp.append(ele)\r\n      else:\r\n        temp.append(float(ele))\r\n    res.append((temp[0],temp[1])) \r\n  return (str(res)) "}
{"task_id": "118", "prompt": "[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.", "completion": "import pytest\n\ndef string_to_list(string):\n    if not isinstance(string, str):\n        raise TypeError(\"expected a string\")\n    \n    # Split the string by whitespace and filter out empty strings\n    lst = string.split()\n    \n    return lst\n\n# Test cases\ndef test_basic_functionality_single_word():\n    assert string_to_list(\"hello\") == [\"hello\"], \"Should return a list with a single word\"\n\ndef test_basic_functionality_multiple_words():\n    assert string_to_list(\"hello world\") == [\"hello\", \"world\"], \"Should return a list with multiple words\"\n\ndef test_basic_functionality_leading_trailing_spaces():\n    assert string_to_list(\"  hello world  \") == [\"hello\", \"world\"], \"Should ignore leading and trailing spaces\"\n\ndef test_edge_case_empty_string():\n    assert string_to_list(\"\") == [], \"Should return an empty list for an empty string\"\n\ndef test_edge_case_single_space():\n    assert string_to_list(\" \") == [], \"Should return an empty list for a single space\"\n\ndef test_edge_case_multiple_spaces():\n    assert string_to_list(\"   \") == [], \"Should return an empty list for multiple spaces\"\n\ndef test_exception_non_string_input():\n    with pytest.raises(TypeError, match=\"expected a string\"):\n        string_to_list(123)\n\ndef test_exception_none_input():\n    with pytest.raises(TypeError, match=\"expected a string\"):\n        string_to_list(None)\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert string_to_list(\"python programming\")==['python','programming']", "assert string_to_list(\"lists tuples strings\")==['lists','tuples','strings']", "assert string_to_list(\"write a program\")==['write','a','program']"], "challenge_test_list": [], "reference_code": "def string_to_list(string): \r\n    lst = list(string.split(\" \")) \r\n    return lst"}
{"task_id": "119", "prompt": "Write a python function to find the element that appears only once in a sorted array.", "completion": "import pytest\n\ndef search(arr, n):\n    if arr is None:\n        raise TypeError(\"Input array cannot be None\")\n    if not all(isinstance(x, (int, float)) for x in arr):\n        raise TypeError(\"All elements in the array must be numbers\")\n    \n    if n == 0:\n        return 0  # Handle empty array gracefully\n    \n    # Since the array is sorted, we can use a binary search approach\n    left, right = 0, n - 1\n    \n    while left < right:\n        mid = left + (right - left) // 2\n        \n        # Check if mid is even or odd\n        if mid % 2 == 0:\n            if arr[mid] == arr[mid + 1]:\n                left = mid + 2  # Move to the right half\n            else:\n                right = mid  # Move to the left half\n        else:\n            if arr[mid] == arr[mid - 1]:\n                left = mid + 1  # Move to the right half\n            else:\n                right = mid  # Move to the left half\n    \n    return arr[left]\n\n# Test cases\ndef test_basic_functionality():\n    assert search([1, 1, 2, 2, 3, 3, 4, 4, 5], 9) == 5, \"Should return the element that appears only once\"\n    assert search([0, 0, 1, 1, 2, 2, 3, 3, 4], 9) == 4, \"Should return the element that appears only once\"\n    assert search([2, 2, 3, 3, 4, 4, 5, 5, 6], 9) == 6, \"Should return the element that appears only once\"\n\ndef test_edge_cases():\n    assert search([1], 1) == 1, \"Should return the only element in the array\"\n    assert search([1, 2, 2], 3) == 1, \"Should return the element that appears only once\"\n    assert search([1, 1, 2], 3) == 2, \"Should return the element that appears only once\"\n    assert search([], 0) == 0, \"Should handle empty array gracefully\"\n\ndef test_exceptions():\n    with pytest.raises(TypeError, match=\"Input array cannot be None\"):\n        search(None, 0)\n    with pytest.raises(TypeError, match=\"All elements in the array must be numbers\"):\n        search([1, 2, 'a'], 3)\n    with pytest.raises(ValueError, match=\"not enough values to unpack\"):\n        search([1, 1], 2)\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert search([1,1,2,2,3],5) == 3", "assert search([1,1,3,3,4,4,5,5,7,7,8],11) == 8", "assert search([1,2,2,3,3,4,4],7) == 1"], "challenge_test_list": [], "reference_code": "def search(arr,n) :\r\n    XOR = 0\r\n    for i in range(n) :\r\n        XOR = XOR ^ arr[i]\r\n    return (XOR)"}
{"task_id": "120", "prompt": "Write a function to find the maximum product from the pairs of tuples within a given list.", "completion": "import pytest\n\ndef max_product_tuple(list1):\n    if not isinstance(list1, list):\n        raise TypeError(\"object is not iterable\")\n    \n    if not list1:\n        return 0  # Handle empty list case\n\n    result_max = float('-inf')\n    \n    for item in list1:\n        if not isinstance(item, tuple) or len(item) != 2:\n            raise ValueError(\"not enough values to unpack\")\n        \n        x, y = item\n        \n        if not isinstance(x, (int, float)) or not isinstance(y, (int, float)):\n            raise TypeError(\"unsupported operand type\")\n        \n        product = x * y\n        if product > result_max:\n            result_max = product\n    \n    return result_max if result_max != float('-inf') else 0\n\n# Test cases\ndef test_basic_functionality():\n    assert max_product_tuple([(1, 2), (3, 4), (5, 6)]) == 30, \"Should return the maximum product 30 from (5, 6)\"\n    assert max_product_tuple([(0, 1), (2, 3), (4, 5)]) == 20, \"Should return the maximum product 20 from (4, 5)\"\n    assert max_product_tuple([(-1, -2), (-3, -4), (-5, -6)]) == 30, \"Should return the maximum product 30 from (-5, -6)\"\n    assert max_product_tuple([(1, -2), (-3, 4), (5, -6)]) == 30, \"Should return the maximum product 30 from (5, -6)\"\n\ndef test_edge_cases():\n    assert max_product_tuple([(0, 0), (0, 0)]) == 0, \"Should return 0 for all zero tuples\"\n    assert max_product_tuple([(1, 1)]) == 1, \"Should return 1 for single tuple (1, 1)\"\n    assert max_product_tuple([(1, -1), (-1, 1)]) == 1, \"Should return 1 for tuples with negatives\"\n\ndef test_exceptions():\n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        max_product_tuple([(1, 2), (3, 'a')]), \"Should raise TypeError for invalid tuple element\"\n    \n    with pytest.raises(ValueError, match=\"not enough values to unpack\"):\n        max_product_tuple([(1, 2), (3,)]), \"Should raise ValueError for tuples with insufficient elements\"\n    \n    with pytest.raises(TypeError, match=\"object is not iterable\"):\n        max_product_tuple(None), \"Should raise TypeError for None input\"\n    \n    with pytest.raises(TypeError, match=\"object is not iterable\"):\n        max_product_tuple(123), \"Should raise TypeError for non-iterable input\"\n\n# Uncomment the following line to", "test_list": ["assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36", "assert max_product_tuple([(10,20), (15,2), (5,10)] )==200", "assert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484"], "challenge_test_list": [], "reference_code": "def max_product_tuple(list1):\r\n    result_max = max([abs(x * y) for x, y in list1] )\r\n    return result_max"}
{"task_id": "121", "prompt": "Write a function to find the triplet with sum of the given array", "completion": "import pytest\n\ndef check_triplet(A, n, target_sum, count):\n    if count == 3 and target_sum == 0:\n        return True\n    if count == 3 or n == 0:\n        return False\n    return check_triplet(A, n - 1, target_sum - A[n - 1], count + 1) or\\\n           check_triplet(A, n - 1, target_sum, count)\n\n# Test cases\ndef test_basic_functionality():\n    assert check_triplet([1, 2, 3, 4, 5], 5, 6, 0) == True, \"Should find triplet (1, 2, 3) with sum 6\"\n    assert check_triplet([0, -1, 2, -3, 1], 5, 0, 0) == True, \"Should find triplet (0, -1, 1) with sum 0\"\n    assert check_triplet([1, 2, 3, 4, 5], 5, 10, 0) == True, \"Should find triplet (2, 3, 5) with sum 10\"\n    assert check_triplet([1, 2, 3, 4, 5], 5, 15, 0) == True, \"Should find triplet (3, 4, 5) with sum 15\"\n\ndef test_edge_cases():\n    assert check_triplet([], 0, 0, 0) == False, \"Empty array should return False\"\n    assert check_triplet([1], 1, 1, 0) == False, \"Single element array should return False\"\n    assert check_triplet([1, 2], 2, 3, 0) == False, \"Two elements array should return False\"\n    assert check_triplet([-1, 1, 0], 3, 0, 0) == True, \"Should find triplet (-1, 1, 0) with sum 0\"\n\ndef test_exceptions():\n    with pytest.raises(TypeError):\n        check_triplet(None, 0, 0, 0)\n    with pytest.raises(TypeError):\n        check_triplet([1, 2, 3], '3', 0, 0)\n    with pytest.raises(TypeError):\n        check_triplet([1, 2, 3], 3, 0, '0')\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True", "assert check_triplet([1, 4, 5, 6, 7, 8, 5, 9], 8, 6, 0) == False", "assert check_triplet([10, 4, 2, 3, 5], 5, 15, 0) == True"], "challenge_test_list": [], "reference_code": "def check_triplet(A, n, sum, count):\r\n    if count == 3 and sum == 0:\r\n        return True\r\n    if count == 3 or n == 0 or sum < 0:\r\n        return False\r\n    return check_triplet(A, n - 1, sum - A[n - 1], count + 1) or\\\r\n           check_triplet(A, n - 1, sum, count)"}
{"task_id": "122", "prompt": "Write a function to find n’th smart number.", "completion": "import pytest\n\nMAX = 3000 \n\ndef smartNumber(n): \n    if not isinstance(n, int) or n <= 0:\n        raise IndexError(\"Invalid input, should be a positive integer\")\n    if n > MAX:\n        raise IndexError(\"Out of bounds, should be less than or equal to 3000\")\n    \n    primes = [0] * MAX \n    result = [] \n    for i in range(2, MAX): \n        if primes[i] == 0: \n            primes[i] = 1 \n            j = i * 2 \n            while j < MAX: \n                primes[j] += 1 \n                if primes[j] == 3: \n                    result.append(j) \n                j += i \n    result.sort() \n    return result[n - 1] \n\ndef test_basic_functionality():\n    assert smartNumber(1) == 4, \"Expected the 1st smart number to be 4\"\n    assert smartNumber(2) == 6, \"Expected the 2nd smart number to be 6\"\n    assert smartNumber(3) == 8, \"Expected the 3rd smart number to be 8\"\n    assert smartNumber(4) == 9, \"Expected the 4th smart number to be 9\"\n    assert smartNumber(5) == 10, \"Expected the 5th smart number to be 10\"\n\ndef test_edge_cases():\n    assert smartNumber(10) == 12, \"Expected the 10th smart number to be 12\"\n    assert smartNumber(20) == 16, \"Expected the 20th smart number to be 16\"\n    assert smartNumber(100) == 64, \"Expected the 100th smart number to be 64\"\n\ndef test_exceptions():\n    with pytest.raises(IndexError, match=\"Invalid input, should be a positive integer\"):\n        smartNumber(0)  # Invalid input, should raise an error\n    with pytest.raises(IndexError, match=\"Out of bounds, should be less than or equal to 3000\"):\n        smartNumber(3001)  # Out of bounds, should raise an error\n    with pytest.raises(TypeError):\n        smartNumber(\"five\")  # Invalid type, should raise an error\n    with pytest.raises(TypeError):\n        smartNumber(None)  # Invalid type, should raise an error\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert smartNumber(1) == 30", "assert smartNumber(50) == 273", "assert smartNumber(1000) == 2664"], "challenge_test_list": [], "reference_code": "MAX = 3000 \r\ndef smartNumber(n): \r\n\tprimes = [0] * MAX \r\n\tresult = [] \r\n\tfor i in range(2, MAX): \r\n\t\tif (primes[i] == 0): \r\n\t\t\tprimes[i] = 1 \r\n\t\t\tj = i * 2 \r\n\t\t\twhile (j < MAX): \r\n\t\t\t\tprimes[j] -= 1 \r\n\t\t\t\tif ( (primes[j] + 3) == 0): \r\n\t\t\t\t\tresult.append(j) \r\n\t\t\t\tj = j + i \r\n\tresult.sort() \r\n\treturn result[n - 1] "}
{"task_id": "123", "prompt": "Write a function to sum all amicable numbers from 1 to a specified number.", "completion": "def amicable_numbers_sum(limit):\n    if not isinstance(limit, int):\n        raise TypeError(\"Input is not an integer!\")\n    if limit < 1:\n        raise ValueError(\"Input must be bigger than 0!\")\n    \n    def sum_of_divisors(n):\n        return sum(fact for fact in range(1, n) if n % fact == 0)\n\n    amicables = set()\n    for num in range(2, limit + 1):\n        if num in amicables:\n            continue\n        sum_fact = sum_of_divisors(num)\n        sum_fact2 = sum_of_divisors(sum_fact)\n        if num == sum_fact2 and num != sum_fact:\n            amicables.add(num)\n            amicables.add(sum_fact)\n\n    return sum(amicables)", "test_list": ["assert amicable_numbers_sum(999)==504", "assert amicable_numbers_sum(9999)==31626", "assert amicable_numbers_sum(99)==0"], "challenge_test_list": [], "reference_code": "def amicable_numbers_sum(limit):\r\n    if not isinstance(limit, int):\r\n        return \"Input is not an integer!\"\r\n    if limit < 1:\r\n        return \"Input must be bigger than 0!\"\r\n    amicables = set()\r\n    for num in range(2, limit+1):\r\n        if num in amicables:\r\n            continue\r\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\r\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\r\n        if num == sum_fact2 and num != sum_fact:\r\n            amicables.add(num)\r\n            amicables.add(sum_fact2)\r\n    return sum(amicables)"}
{"task_id": "124", "prompt": "Write a function to get the angle of a complex number.", "completion": "import cmath\n\ndef angle_complex(a, b):\n    if not isinstance(a, (int, float)) or not isinstance(b, (int, float)):\n        raise TypeError(\"can't convert complex to float\")\n    cn = complex(a, b)\n    angle = cmath.phase(cn)\n    return angle", "test_list": ["assert angle_complex(0,1j)==1.5707963267948966 ", "assert angle_complex(2,1j)==0.4636476090008061", "assert angle_complex(0,2j)==1.5707963267948966"], "challenge_test_list": [], "reference_code": "import cmath\r\ndef angle_complex(a,b):\r\n  cn=complex(a,b)\r\n  angle=cmath.phase(a+b)\r\n  return angle"}
{"task_id": "125", "prompt": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.", "completion": "import pytest\n\ndef find_length(string, n):\n    # Validate input\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a binary string\")\n    if any(char not in '01' for char in string):\n        raise ValueError(\"string must be a binary string\")\n\n    current_sum = 0\n    max_sum = 0\n    \n    for i in range(n):\n        current_sum += (1 if string[i] == '0' else -1)\n        max_sum = max(max_sum, current_sum)\n        if current_sum < 0:\n            current_sum = 0\n            \n    return max_sum\n\n# Test cases\ndef test_basic_functionality():\n    assert find_length(\"001100\", 6) == 2, \"Expected max difference is 2 for input '001100'\"\n    assert find_length(\"1100\", 4) == 0, \"Expected max difference is 0 for input '1100'\"\n    assert find_length(\"000111\", 6) == 0, \"Expected max difference is 0 for input '000111'\"\n    assert find_length(\"000\", 3) == 3, \"Expected max difference is 3 for input '000'\"\n    assert find_length(\"111\", 3) == 0, \"Expected max difference is 0 for input '111'\"\n\ndef test_edge_cases():\n    assert find_length(\"\", 0) == 0, \"Expected max difference is 0 for empty input\"\n    assert find_length(\"0\", 1) == 1, \"Expected max difference is 1 for single '0'\"\n    assert find_length(\"1\", 1) == 0, \"Expected max difference is 0 for single '1'\"\n    assert find_length(\"01\", 2) == 0, \"Expected max difference is 0 for input '01'\"\n    assert find_length(\"10\", 2) == 0, \"Expected max difference is 0 for input '10'\"\n\ndef test_exceptions():\n    with pytest.raises(TypeError, match=\"string must be a binary string\"):\n        find_length(12345, 5)\n    with pytest.raises(ValueError, match=\"string must be a binary string\"):\n        find_length(\"abc\", 3)\n    with pytest.raises(ValueError, match=\"string must be a binary string\"):\n        find_length(\"01a0\", 4)\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert find_length(\"11000010001\", 11) == 6", "assert find_length(\"10111\", 5) == 1", "assert find_length(\"11011101100101\", 14) == 2 "], "challenge_test_list": [], "reference_code": "def find_length(string, n): \r\n\tcurrent_sum = 0\r\n\tmax_sum = 0\r\n\tfor i in range(n): \r\n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \r\n\t\tif current_sum < 0: \r\n\t\t\tcurrent_sum = 0\r\n\t\tmax_sum = max(current_sum, max_sum) \r\n\treturn max_sum if max_sum else 0"}
{"task_id": "126", "prompt": "Write a python function to find the sum of common divisors of two given numbers.", "completion": "import pytest\n\ndef sum_of_common_divisors(a, b):\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise TypeError(\"unsupported operand type\")\n    \n    if a == 0 or b == 0:\n        return 0\n    \n    common_sum = 0\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            common_sum += i\n    return common_sum\n\ndef test_basic_functionality_common_divisors():\n    assert sum_of_common_divisors(12, 18) == 6, \"Expected sum of common divisors of 12 and 18 to be 6\"\n    assert sum_of_common_divisors(10, 20) == 10, \"Expected sum of common divisors of 10 and 20 to be 10\"\n    assert sum_of_common_divisors(15, 25) == 5, \"Expected sum of common divisors of 15 and 25 to be 5\"\n\ndef test_basic_functionality_no_common_divisors():\n    assert sum_of_common_divisors(7, 9) == 1, \"Expected sum of common divisors of 7 and 9 to be 1 (only 1 is common)\"\n    assert sum_of_common_divisors(8, 15) == 1, \"Expected sum of common divisors of 8 and 15 to be 1 (only 1 is common)\"\n\ndef test_edge_cases():\n    assert sum_of_common_divisors(1, 1) == 1, \"Expected sum of common divisors of 1 and 1 to be 1\"\n    assert sum_of_common_divisors(0, 5) == 0, \"Expected sum of common divisors of 0 and 5 to be 0\"\n    assert sum_of_common_divisors(5, 0) == 0, \"Expected sum of common divisors of 5 and 0 to be 0\"\n    assert sum_of_common_divisors(0, 0) == 0, \"Expected sum of common divisors of 0 and 0 to be 0\"\n\ndef test_exceptions():\n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        sum_of_common_divisors(\"a\", 5)\n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        sum_of_common_divisors(5, \"b\")\n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        sum_of_common_divisors(None, 5)\n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        sum_of_common_divisors(5, None)\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert sum(10,15) == 6", "assert sum(100,150) == 93", "assert sum(4,6) == 3"], "challenge_test_list": [], "reference_code": "def sum(a,b): \r\n    sum = 0\r\n    for i in range (1,min(a,b)): \r\n        if (a % i == 0 and b % i == 0): \r\n            sum += i \r\n    return sum"}
{"task_id": "127", "prompt": "Write a function to multiply two integers without using the * operator in python.", "completion": "import pytest\n\ndef multiply_int(x, y):\n    if not isinstance(x, int) or not isinstance(y, int):\n        raise TypeError(\"unsupported operand type\")\n    \n    if y < 0:\n        return -multiply_int(x, -y)\n    elif y == 0:\n        return 0\n    elif y == 1:\n        return x\n    else:\n        return x + multiply_int(x, y - 1)\n\n# Test cases\ndef test_basic_functionality():\n    assert multiply_int(3, 4) == 12, \"Expected 3 * 4 to equal 12\"\n    assert multiply_int(5, 6) == 30, \"Expected 5 * 6 to equal 30\"\n    assert multiply_int(-2, 3) == -6, \"Expected -2 * 3 to equal -6\"\n    assert multiply_int(7, -3) == -21, \"Expected 7 * -3 to equal -21\"\n    assert multiply_int(-4, -5) == 20, \"Expected -4 * -5 to equal 20\"\n\ndef test_edge_cases():\n    assert multiply_int(0, 5) == 0, \"Expected 0 * 5 to equal 0\"\n    assert multiply_int(5, 0) == 0, \"Expected 5 * 0 to equal 0\"\n    assert multiply_int(1, 1) == 1, \"Expected 1 * 1 to equal 1\"\n    assert multiply_int(1, -1) == -1, \"Expected 1 * -1 to equal -1\"\n    assert multiply_int(-1, 1) == -1, \"Expected -1 * 1 to equal -1\"\n\ndef test_boundary_conditions():\n    assert multiply_int(1, 1000000) == 1000000, \"Expected 1 * 1000000 to equal 1000000\"\n    assert multiply_int(1000000, 1) == 1000000, \"Expected 1000000 * 1 to equal 1000000\"\n    assert multiply_int(0, 0) == 0, \"Expected 0 * 0 to equal 0\"\n\ndef test_exceptions():\n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        multiply_int(\"a\", 5)\n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        multiply_int(5, \"b\")\n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        multiply_int(None, 5)\n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        multiply_int(5, None)\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert multiply_int(10,20)==200", "assert multiply_int(5,10)==50", "assert multiply_int(4,8)==32"], "challenge_test_list": [], "reference_code": "def multiply_int(x, y):\r\n    if y < 0:\r\n        return -multiply_int(x, -y)\r\n    elif y == 0:\r\n        return 0\r\n    elif y == 1:\r\n        return x\r\n    else:\r\n        return x + multiply_int(x, y - 1)"}
{"task_id": "128", "prompt": "Write a function to shortlist words that are longer than n from a given list of words.", "completion": "def long_words(n, str):\n    if not isinstance(n, int):\n        raise TypeError(\"must be an integer\")\n    if not isinstance(str, str):\n        raise TypeError(\"must be a string\")\n    \n    word_len = []\n    txt = str.split()\n    for x in txt:\n        if len(x) > n:\n            word_len.append(x)\n    return word_len", "test_list": ["assert long_words(3,\"python is a programming language\")==['python','programming','language']", "assert long_words(2,\"writing a program\")==['writing','program']", "assert long_words(5,\"sorting list\")==['sorting']"], "challenge_test_list": [], "reference_code": "def long_words(n, str):\r\n    word_len = []\r\n    txt = str.split(\" \")\r\n    for x in txt:\r\n        if len(x) > n:\r\n            word_len.append(x)\r\n    return word_len\t"}
{"task_id": "129", "prompt": "Write a function to calculate magic square.", "completion": "def magic_square_test(my_matrix):\n    if not my_matrix or len(my_matrix) != len(my_matrix[0]):\n        return False\n    \n    iSize = len(my_matrix)\n    magic_sum = sum(my_matrix[0])\n    \n    # Check rows\n    for row in my_matrix:\n        if sum(row) != magic_sum:\n            return False\n    \n    # Check columns\n    for col in range(iSize):\n        if sum(my_matrix[row][col] for row in range(iSize)) != magic_sum:\n            return False\n    \n    # Check diagonals\n    if sum(my_matrix[i][i] for i in range(iSize)) != magic_sum:\n        return False\n    if sum(my_matrix[i][iSize - 1 - i] for i in range(iSize)) != magic_sum:\n        return False\n    \n    return True", "test_list": ["assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True", "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True", "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False"], "challenge_test_list": [], "reference_code": "def magic_square_test(my_matrix):\r\n    iSize = len(my_matrix[0])\r\n    sum_list = []\r\n    sum_list.extend([sum (lines) for lines in my_matrix])   \r\n    for col in range(iSize):\r\n        sum_list.append(sum(row[col] for row in my_matrix))\r\n    result1 = 0\r\n    for i in range(0,iSize):\r\n        result1 +=my_matrix[i][i]\r\n    sum_list.append(result1)      \r\n    result2 = 0\r\n    for i in range(iSize-1,-1,-1):\r\n        result2 +=my_matrix[i][i]\r\n    sum_list.append(result2)\r\n    if len(set(sum_list))>1:\r\n        return False\r\n    return True"}
{"task_id": "130", "prompt": "Write a function to find the item with maximum frequency in a given list.", "completion": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    if nums is None or not hasattr(nums, '__iter__'):\n        raise TypeError(\"Input must be an iterable\")\n    \n    if not nums:\n        raise ValueError(\"max() arg is an empty sequence\")\n    \n    frequency_dict = defaultdict(int)\n    for i in nums:\n        frequency_dict[i] += 1\n    \n    result = max(frequency_dict.items(), key=lambda x: x[1]) \n    return result", "test_list": ["assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)", "assert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,16,18])==(8, 2)", "assert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==(20, 3)"], "challenge_test_list": [], "reference_code": "from collections import defaultdict\r\ndef max_occurrences(nums):\r\n    dict = defaultdict(int)\r\n    for i in nums:\r\n        dict[i] += 1\r\n    result = max(dict.items(), key=lambda x: x[1]) \r\n    return result"}
{"task_id": "131", "prompt": "Write a python function to reverse only the vowels of a given string.", "completion": "def reverse_vowels(str1):\n    if not isinstance(str1, str):\n        raise TypeError(\"expected a string\")\n    \n    vowels = [char for char in str1 if char in \"aeiouAEIOU\"]\n    result_string = \"\"\n    vowel_index = len(vowels) - 1\n    \n    for char in str1:\n        if char in \"aeiouAEIOU\":\n            result_string += vowels[vowel_index]\n            vowel_index -= 1\n        else:\n            result_string += char\n            \n    return result_string", "test_list": ["assert reverse_vowels(\"Python\") == \"Python\"", "assert reverse_vowels(\"USA\") == \"ASU\"", "assert reverse_vowels(\"ab\") == \"ab\""], "challenge_test_list": [], "reference_code": "def reverse_vowels(str1):\r\n\tvowels = \"\"\r\n\tfor char in str1:\r\n\t\tif char in \"aeiouAEIOU\":\r\n\t\t\tvowels += char\r\n\tresult_string = \"\"\r\n\tfor char in str1:\r\n\t\tif char in \"aeiouAEIOU\":\r\n\t\t\tresult_string += vowels[-1]\r\n\t\t\tvowels = vowels[:-1]\r\n\t\telse:\r\n\t\t\tresult_string += char\r\n\treturn result_string"}
{"task_id": "132", "prompt": "Write a function to convert tuple to a string.", "completion": "def tup_string(tup1):\n    if not all(isinstance(i, str) for i in tup1):\n        raise TypeError(\"sequence item 0: expected str instance, {} found\".format(type(tup1[0]).__name__))\n    return ''.join(tup1)", "test_list": ["assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")", "assert tup_string(('p','y','t','h','o','n'))==(\"python\")", "assert tup_string(('p','r','o','g','r','a','m'))==(\"program\")"], "challenge_test_list": [], "reference_code": "def tup_string(tup1):\r\n  str =  ''.join(tup1)\r\n  return str"}
{"task_id": "133", "prompt": "Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.", "completion": "def sum_negativenum(nums):\n    if not all(isinstance(x, (int, float)) for x in nums):\n        raise TypeError(\"unsupported operand type\")\n    return sum(filter(lambda x: x < 0, nums))", "test_list": ["assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32", "assert sum_negativenum([10,15,-14,13,-18,12,-20])==-52", "assert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894"], "challenge_test_list": [], "reference_code": "def sum_negativenum(nums):\r\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\r\n  return sum(sum_negativenum)"}
{"task_id": "134", "prompt": "Write a python function to check whether the last element of given array is even or odd after performing an operation p times.", "completion": "def check_last(arr, n, p):\n    if arr is None or not isinstance(p, int):\n        raise TypeError(\"Invalid input\")\n    \n    if n == 0:\n        return \"EVEN\"\n    \n    last_element = arr[-1]\n    \n    if p % 2 == 1:  # If p is odd, the last element remains unchanged\n        if last_element % 2 == 0:\n            return \"ODD\"\n        else:\n            return \"EVEN\"\n    else:  # If p is even, the last element will be considered as even\n        return \"EVEN\"", "test_list": ["assert check_last([5,7,10],3,1) == \"ODD\"", "assert check_last([2,3],2,3) == \"EVEN\"", "assert check_last([1,2,3],3,1) == \"ODD\""], "challenge_test_list": [], "reference_code": "def check_last (arr,n,p): \r\n    _sum = 0\r\n    for i in range(n): \r\n        _sum = _sum + arr[i] \r\n    if p == 1: \r\n        if _sum % 2 == 0: \r\n            return \"ODD\"\r\n        else: \r\n            return \"EVEN\"\r\n    return \"EVEN\"\r\n      "}
{"task_id": "135", "prompt": "Write a function to find the nth hexagonal number.", "completion": "import pytest\n\ndef hexagonal_num(n):\n    if not isinstance(n, int):\n        raise TypeError(\"unsupported operand type\")\n    if n < 0:\n        raise ValueError(\"negative integer\")\n    return n * (2 * n - 1)\n\ndef test_basic_functionality():\n    assert hexagonal_num(1) == 1, \"The 1st hexagonal number should be 1\"\n    assert hexagonal_num(2) == 6, \"The 2nd hexagonal number should be 6\"\n    assert hexagonal_num(3) == 15, \"The 3rd hexagonal number should be 15\"\n    assert hexagonal_num(4) == 28, \"The 4th hexagonal number should be 28\"\n    assert hexagonal_num(5) == 45, \"The 5th hexagonal number should be 45\"\n\ndef test_edge_cases():\n    assert hexagonal_num(0) == 0, \"The 0th hexagonal number should be 0\"\n    assert hexagonal_num(10) == 271, \"The 10th hexagonal number should be 271\"\n    assert hexagonal_num(100) == 19900, \"The 100th hexagonal number should be 19900\"\n\ndef test_exceptions():\n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        hexagonal_num(\"a\")\n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        hexagonal_num(None)\n    with pytest.raises(ValueError, match=\"negative integer\"):\n        hexagonal_num(-1)\n\n# Run the tests\nif __name__ == \"__main__\":\n    pytest.main()", "test_list": ["assert hexagonal_num(10) == 190", "assert hexagonal_num(5) == 45", "assert hexagonal_num(7) == 91"], "challenge_test_list": [], "reference_code": "def hexagonal_num(n): \r\n\treturn n*(2*n - 1) "}
{"task_id": "136", "prompt": "Write a function to calculate electricity bill.", "completion": "import pytest\n\ndef cal_electbill(units):\n    if not isinstance(units, (int, float)):\n        raise TypeError(\"unsupported operand type\")\n    if units < 0:\n        raise ValueError(\"negative units not allowed\")\n    \n    if units < 50:\n        amount = units * 2.60\n        surcharge = 25\n    elif units <= 100:\n        amount = 130 + ((units - 50) * 3.25)\n        surcharge = 35\n    elif units <= 200:\n        amount = 130 + 162.50 + ((units - 100) * 5.26)\n        surcharge = 45\n    else:\n        amount = 130 + 162.50 + 526 + ((units - 200) * 8.45)\n        surcharge = 75\n    \n    total = amount + surcharge\n    return total", "test_list": ["assert cal_electbill(75)==246.25", "assert cal_electbill(265)==1442.75", "assert cal_electbill(100)==327.5"], "challenge_test_list": [], "reference_code": "def cal_electbill(units):\r\n if(units < 50):\r\n    amount = units * 2.60\r\n    surcharge = 25\r\n elif(units <= 100):\r\n    amount = 130 + ((units - 50) * 3.25)\r\n    surcharge = 35\r\n elif(units <= 200):\r\n    amount = 130 + 162.50 + ((units - 100) * 5.26)\r\n    surcharge = 45\r\n else:\r\n    amount = 130 + 162.50 + 526 + ((units - 200) * 8.45)\r\n    surcharge = 75\r\n total = amount + surcharge\r\n return total"}
{"task_id": "137", "prompt": "Write a function to find the ration of zeroes in an array of integers.", "completion": "def zero_count(nums):\n    if not isinstance(nums, list):\n        raise TypeError(\"unsupported operand type\")\n    n = len(nums)\n    if n == 0:\n        return 0.0\n    n1 = 0\n    for x in nums:\n        if not isinstance(x, int):\n            raise TypeError(\"unsupported operand type\")\n        if x == 0:\n            n1 += 1\n    return round(n1 / n, 2)", "test_list": ["assert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15", "assert zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.00", "assert zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.00"], "challenge_test_list": [], "reference_code": "from array import array\r\ndef zero_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x == 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)"}
{"task_id": "138", "prompt": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.", "completion": "def is_Sum_Of_Powers_Of_Two(n): \n    if n < 0:\n        return False\n    if n == 0:\n        return True  # 0 can be considered as the sum of zero non-zero powers of 2\n    # Check if n can be represented as a sum of distinct powers of 2\n    # This is equivalent to checking if n can be expressed in binary without any '0's\n    return (n & (n - 1)) == 0 or n > 0\n\n# Test cases\nimport pytest\n\ndef test_basic_functionality_even_numbers():\n    assert is_Sum_Of_Powers_Of_Two(2) == True, \"2 should be representable as sum of non-zero powers of 2\"\n    assert is_Sum_Of_Powers_Of_Two(4) == True, \"4 should be representable as sum of non-zero powers of 2\"\n    assert is_Sum_Of_Powers_Of_Two(8) == True, \"8 should be representable as sum of non-zero powers of 2\"\n    assert is_Sum_Of_Powers_Of_Two(16) == True, \"16 should be representable as sum of non-zero powers of 2\"\n\ndef test_basic_functionality_odd_numbers():\n    assert is_Sum_Of_Powers_Of_Two(1) == False, \"1 should not be representable as sum of non-zero powers of 2\"\n    assert is_Sum_Of_Powers_Of_Two(3) == False, \"3 should not be representable as sum of non-zero powers of 2\"\n    assert is_Sum_Of_Powers_Of_Two(5) == False, \"5 should not be representable as sum of non-zero powers of 2\"\n    assert is_Sum_Of_Powers_Of_Two(7) == False, \"7 should not be representable as sum of non-zero powers of 2\"\n\ndef test_edge_cases():\n    assert is_Sum_Of_Powers_Of_Two(0) == True, \"0 should be representable as sum of non-zero powers of 2 (trivially)\"\n    assert is_Sum_Of_Powers_Of_Two(2**31) == True, \"2^31 should be representable as sum of non-zero powers of 2\"\n    assert is_Sum_Of_Powers_Of_Two(2**31 - 1) == False, \"2^31 - 1 should not be representable as sum of non-zero powers of 2\"\n\ndef test_exceptions():\n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        is_Sum_Of_Powers_Of_Two(\"string\")\n    with pytest.raises(TypeError, match=\"unsupported operand type\"):", "test_list": ["assert is_Sum_Of_Powers_Of_Two(10) == True", "assert is_Sum_Of_Powers_Of_Two(7) == False", "assert is_Sum_Of_Powers_Of_Two(14) == True"], "challenge_test_list": [], "reference_code": "def is_Sum_Of_Powers_Of_Two(n): \r\n    if (n % 2 == 1): \r\n        return False\r\n    else: \r\n        return True"}
{"task_id": "139", "prompt": "Write a function to find the circumference of a circle.", "completion": "import math\n\ndef circle_circumference(r):\n    if not isinstance(r, (int, float)):\n        raise TypeError(\"must be a number\")\n    if r < 0:\n        raise ValueError(\"must be a non-negative number\")\n    \n    perimeter = 2 * math.pi * r\n    return perimeter", "test_list": ["assert circle_circumference(10)==62.830000000000005", "assert circle_circumference(5)==31.415000000000003", "assert circle_circumference(4)==25.132"], "challenge_test_list": [], "reference_code": "def circle_circumference(r):\r\n  perimeter=2*3.1415*r\r\n  return perimeter"}
{"task_id": "140", "prompt": "Write a function to extract elements that occur singly in the given tuple list.", "completion": "def extract_singly(test_list):\n    if test_list is None:\n        raise TypeError(\"Input cannot be None\")\n    \n    res = []\n    count = {}\n    \n    # Count occurrences of each element\n    for inner in test_list:\n        if not isinstance(inner, tuple):\n            raise TypeError(\"All inner elements must be tuples\")\n        for ele in inner:\n            if not isinstance(ele, (int, float, str)):  # Adjust based on expected types\n                raise TypeError(\"Elements must be of type int, float, or str\")\n            count[ele] = count.get(ele, 0) + 1\n    \n    # Extract elements that occur only once\n    for ele in count:\n        if count[ele] == 1:\n            res.append(ele)\n    \n    return res", "test_list": ["assert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]", "assert extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)]) == [1, 2, 3, 4, 7, 8]", "assert extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)]) == [7, 8, 9, 10, 11, 12]"], "challenge_test_list": [], "reference_code": "def extract_singly(test_list):\r\n  res = []\r\n  temp = set()\r\n  for inner in test_list:\r\n    for ele in inner:\r\n      if not ele in temp:\r\n        temp.add(ele)\r\n        res.append(ele)\r\n  return (res) "}
{"task_id": "141", "prompt": "Write a function to sort a list of elements using pancake sort.", "completion": "def pancake_sort(nums):\n    if not isinstance(nums, list):\n        raise TypeError(\"must be a list\")\n    \n    arr_len = len(nums)\n    while arr_len > 1:\n        # Find the index of the maximum element in the current unsorted portion\n        mi = nums.index(max(nums[0:arr_len]))\n        \n        # If the maximum element is not already in the last position\n        if mi != arr_len - 1:\n            # If the maximum element is not at the front, flip it to the front\n            if mi != 0:\n                nums = nums[mi::-1] + nums[mi + 1:arr_len] + nums[arr_len:]\n            # Now flip the maximum element to its correct position\n            nums = nums[arr_len - 1::-1] + nums[arr_len:]\n        \n        arr_len -= 1\n    \n    return nums", "test_list": ["assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]", "assert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]", "assert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]"], "challenge_test_list": [], "reference_code": "def pancake_sort(nums):\r\n    arr_len = len(nums)\r\n    while arr_len > 1:\r\n        mi = nums.index(max(nums[0:arr_len]))\r\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\r\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\r\n        arr_len -= 1\r\n    return nums"}
{"task_id": "142", "prompt": "Write a function to count the same pair in three given lists.", "completion": "def count_samepair(list1, list2, list3):\n    if not all(isinstance(x, type(list1[0])) for x in list1) or not all(isinstance(x, type(list2[0])) for x in list2) or not all(isinstance(x, type(list3[0])) for x in list3):\n        raise TypeError(\"All elements in the lists must be of the same type\")\n    \n    result = sum(m == n == o for m, n, o in zip(list1, list2, list3))\n    return result", "test_list": ["assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3", "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4", "assert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5"], "challenge_test_list": [], "reference_code": "def count_samepair(list1,list2,list3):\r\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\r\n    return result"}
{"task_id": "143", "prompt": "Write a function to find number of lists present in the given tuple.", "completion": "def find_lists(Input):\n    if not isinstance(Input, (tuple, list)):\n        raise TypeError(\"Input must be a tuple or a list\")\n    \n    if isinstance(Input, list):\n        return 1\n    \n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count", "test_list": ["assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2", "assert find_lists(([1, 2], [3, 4], [5, 6]))  == 3", "assert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1"], "challenge_test_list": [], "reference_code": "def find_lists(Input): \r\n\tif isinstance(Input, list): \r\n\t\treturn 1\r\n\telse: \r\n\t\treturn len(Input) "}
{"task_id": "144", "prompt": "Write a python function to find the sum of absolute differences in all pairs of the given array.", "completion": "def sum_Pairs(arr, n):\n    if arr is None or not isinstance(arr, list):\n        raise TypeError(\"unsupported operand type\")\n    if len(arr) != n:\n        raise ValueError(\"not enough values to unpack\")\n    \n    sum_diff = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            sum_diff += abs(arr[i] - arr[j])\n    \n    return sum_diff", "test_list": ["assert sum_Pairs([1,8,9,15,16],5) == 74", "assert sum_Pairs([1,2,3,4],4) == 10", "assert sum_Pairs([1,2,3,4,5,7,9,11,14],9) == 188"], "challenge_test_list": [], "reference_code": "def sum_Pairs(arr,n): \r\n    sum = 0\r\n    for i in range(n - 1,-1,-1): \r\n        sum += i*arr[i] - (n-1-i) * arr[i] \r\n    return sum"}
{"task_id": "145", "prompt": "Write a python function to find the maximum difference between any two elements in a given array.", "completion": "import pytest\n\ndef max_Abs_Diff(arr, n):\n    if n == 0:\n        raise IndexError(\"list index out of range\")\n    if not isinstance(arr, list):\n        raise TypeError(\"object of type 'int' has no len()\")\n    if not isinstance(arr, list) or isinstance(arr, str):\n        raise TypeError(\"object of type 'str' has no len()\")\n    \n    minEle = arr[0]\n    maxEle = arr[0]\n    \n    for i in range(1, n):\n        minEle = min(minEle, arr[i])\n        maxEle = max(maxEle, arr[i])\n    \n    return maxEle - minEle\n\n# Test cases\ndef test_basic_functionality():\n    assert max_Abs_Diff([1, 2, 3, 4, 5], 5) == 4, \"Should be 4 (5 - 1)\"\n    assert max_Abs_Diff([-1, -2, -3, -4, -5], 5) == 4, \"Should be 4 (-1 - -5)\"\n    assert max_Abs_Diff([10, 20, 30, 40, 50], 5) == 40, \"Should be 40 (50 - 10)\"\n    assert max_Abs_Diff([5], 1) == 0, \"Should be 0 (only one element)\"\n\ndef test_edge_cases():\n    assert max_Abs_Diff([1, 1, 1, 1], 4) == 0, \"Should be 0 (all elements are the same)\"\n    assert max_Abs_Diff([0, 0, 0, 0], 4) == 0, \"Should be 0 (all elements are zero)\"\n    assert max_Abs_Diff([-10, 0, 10], 3) == 20, \"Should be 20 (10 - -10)\"\n\ndef test_exceptions():\n    with pytest.raises(IndexError, match=\"list index out of range\"):\n        max_Abs_Diff([], 0)\n    with pytest.raises(TypeError, match=\"object of type 'int' has no len()\"):\n        max_Abs_Diff(123, 3)\n    with pytest.raises(TypeError, match=\"object of type 'str' has no len()\"):\n        max_Abs_Diff(\"string\", 6)\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert max_Abs_Diff((2,1,5,3),4) == 4", "assert max_Abs_Diff((9,3,2,5,1),5) == 8", "assert max_Abs_Diff((3,2,1),3) == 2"], "challenge_test_list": [], "reference_code": "def max_Abs_Diff(arr,n): \r\n    minEle = arr[0] \r\n    maxEle = arr[0] \r\n    for i in range(1, n): \r\n        minEle = min(minEle,arr[i]) \r\n        maxEle = max(maxEle,arr[i]) \r\n    return (maxEle - minEle) "}
{"task_id": "146", "prompt": "Write a function to find the ascii value of total characters in a string.", "completion": "def ascii_value_string(str1):\n    if not isinstance(str1, str):\n        raise TypeError(\"expected a string\")\n    \n    total_ascii_value = 0\n    for char in str1:\n        total_ascii_value += ord(char)\n    \n    return total_ascii_value", "test_list": ["assert ascii_value_string(\"python\")==112", "assert ascii_value_string(\"Program\")==80", "assert ascii_value_string(\"Language\")==76"], "challenge_test_list": [], "reference_code": "def ascii_value_string(str1):\r\n  for i in range(len(str1)):\r\n   return ord(str1[i])"}
{"task_id": "147", "prompt": "Write a function to find the maximum total path sum in the given triangle.", "completion": "def max_path_sum(tri, m, n):\n    if not tri or m == 0 or n == 0:\n        raise IndexError(\"Triangle is empty or dimensions are invalid\")\n    \n    for i in range(m - 2, -1, -1):  # Start from the second last row\n        for j in range(i + 1):  # Iterate through each element in the row\n            # Update the current element with the max path sum from below\n            tri[i][j] += max(tri[i + 1][j], tri[i + 1][j + 1])\n    \n    return tri[0][0]  # The top element now contains the max path sum\n\n# Test cases\nimport pytest\n\ndef test_basic_functionality():\n    assert max_path_sum([[2], [3, 4], [6, 5, 7], [4, 1, 8, 3]], 4, 3) == 18, \"Should be 18\"\n    assert max_path_sum([[1], [2, 3], [4, 5, 6]], 3, 2) == 10, \"Should be 10\"\n    assert max_path_sum([[5], [9, 6], [4, 6, 8], [0, 7, 1, 5]], 4, 3) == 27, \"Should be 27\"\n\ndef test_edge_cases():\n    assert max_path_sum([[1]], 1, 0) == 1, \"Single element triangle should return that element\"\n    assert max_path_sum([[1], [2, 3]], 2, 1) == 4, \"Should be 4 (1 + 3)\"\n    assert max_path_sum([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10]], 4, 3) == 20, \"Should be 20 (1 + 3 + 6 + 10)\"\n\ndef test_exceptions():\n    with pytest.raises(IndexError):\n        max_path_sum([], 0, 0), \"Should raise IndexError for empty triangle\"\n    with pytest.raises(IndexError):\n        max_path_sum([[1]], 1, 1), \"Should raise IndexError for invalid dimensions\"\n    with pytest.raises(TypeError):\n        max_path_sum(None, 0, 0), \"Should raise TypeError for None input\"\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14", "assert max_path_sum([[13, 0, 0], [7, 4, 0], [2, 4, 6]], 2, 2) == 24 ", "assert max_path_sum([[2, 0, 0], [11, 18, 0], [21, 25, 33]], 2, 2) == 53"], "challenge_test_list": [], "reference_code": "def max_path_sum(tri, m, n): \r\n\tfor i in range(m-1, -1, -1): \r\n\t\tfor j in range(i+1): \r\n\t\t\tif (tri[i+1][j] > tri[i+1][j+1]): \r\n\t\t\t\ttri[i][j] += tri[i+1][j] \r\n\t\t\telse: \r\n\t\t\t\ttri[i][j] += tri[i+1][j+1] \r\n\treturn tri[0][0]"}
{"task_id": "148", "prompt": "Write a function to divide a number into two parts such that the sum of digits is maximum.", "completion": "def sum_digits_single(x):\n    ans = 0\n    while x:\n        ans += x % 10\n        x //= 10\n    return ans\n\ndef closest(x):\n    ans = 0\n    while (ans * 10 + 9 <= x):\n        ans = ans * 10 + 9\n    return ans\n\ndef sum_digits_twoparts(N):\n    if not isinstance(N, int):\n        raise TypeError(\"Input must be an integer\")\n    if N < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    \n    if N == 0:\n        return 0\n    \n    A = closest(N)\n    return sum_digits_single(A) + sum_digits_single(N - A)\n\n# Test cases\nimport pytest\n\ndef test_basic_functionality():\n    assert sum_digits_twoparts(10) == 1, \"Failed for input 10\"\n    assert sum_digits_twoparts(20) == 2, \"Failed for input 20\"\n    assert sum_digits_twoparts(99) == 18, \"Failed for input 99\"\n    assert sum_digits_twoparts(123) == 6, \"Failed for input 123\"\n    assert sum_digits_twoparts(456) == 15, \"Failed for input 456\"\n\ndef test_edge_cases():\n    assert sum_digits_twoparts(0) == 0, \"Failed for input 0\"\n    assert sum_digits_twoparts(1) == 1, \"Failed for input 1\"\n    assert sum_digits_twoparts(9) == 9, \"Failed for input 9\"\n    assert sum_digits_twoparts(10) == 1, \"Failed for input 10\"\n    assert sum_digits_twoparts(100) == 1, \"Failed for input 100\"\n\ndef test_large_numbers():\n    assert sum_digits_twoparts(999999999) == 81, \"Failed for input 999999999\"\n    assert sum_digits_twoparts(1000000000) == 1, \"Failed for input 1000000000\"\n\ndef test_exceptions():\n    with pytest.raises(TypeError):\n        sum_digits_twoparts(\"string\")\n    with pytest.raises(TypeError):\n        sum_digits_twoparts(None)\n    with pytest.raises(ValueError):\n        sum_digits_twoparts(-1)\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert sum_digits_twoparts(35)==17", "assert sum_digits_twoparts(7)==7", "assert sum_digits_twoparts(100)==19"], "challenge_test_list": [], "reference_code": "def sum_digits_single(x) : \r\n    ans = 0\r\n    while x : \r\n        ans += x % 10\r\n        x //= 10  \r\n    return ans \r\ndef closest(x) : \r\n    ans = 0\r\n    while (ans * 10 + 9 <= x) : \r\n        ans = ans * 10 + 9  \r\n    return ans   \r\ndef sum_digits_twoparts(N) : \r\n    A = closest(N)  \r\n    return sum_digits_single(A) + sum_digits_single(N - A) "}
{"task_id": "149", "prompt": "Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.", "completion": "def longest_subseq_with_diff_one(arr, n):\n    if arr is None or n is None or not isinstance(arr, list):\n        raise TypeError(\"Invalid input\")\n\n    if n == 0:\n        return 0\n\n    dp = [1 for _ in range(n)]\n    \n    for i in range(1, n):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) == 1:\n                dp[i] = max(dp[i], dp[j] + 1)\n    \n    result = max(dp)\n    return result", "test_list": ["assert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6", "assert longest_subseq_with_diff_one([10, 9, 4, 5, 4, 8, 6], 7) == 3", "assert longest_subseq_with_diff_one([1, 2, 3, 2, 3, 7, 2, 1], 8) == 7"], "challenge_test_list": [], "reference_code": "def longest_subseq_with_diff_one(arr, n): \r\n\tdp = [1 for i in range(n)] \r\n\tfor i in range(n): \r\n\t\tfor j in range(i): \r\n\t\t\tif ((arr[i] == arr[j]+1) or (arr[i] == arr[j]-1)): \r\n\t\t\t\tdp[i] = max(dp[i], dp[j]+1) \r\n\tresult = 1\r\n\tfor i in range(n): \r\n\t\tif (result < dp[i]): \r\n\t\t\tresult = dp[i] \r\n\treturn result"}
{"task_id": "150", "prompt": "Write a python function to find whether the given number is present in the infinite sequence or not.", "completion": "def does_Contain_B(a, b, c):\n    # Check if inputs are integers\n    if not all(isinstance(x, int) for x in (a, b, c)):\n        raise TypeError(\"All inputs must be integers\")\n    \n    # If a equals b, then b is contained in the sequence\n    if a == b:\n        return True\n    \n    # If c is zero, we can only reach b if a is equal to b\n    if c == 0:\n        return False\n    \n    # Check if (b - a) is divisible by c and the signs of (b - a) and c are the same\n    return (b - a) % c == 0 and (b - a) * c > 0", "test_list": ["assert does_Contain_B(1,7,3) == True", "assert does_Contain_B(1,-3,5) == False", "assert does_Contain_B(3,2,5) == False"], "challenge_test_list": [], "reference_code": "def does_Contain_B(a,b,c): \r\n    if (a == b): \r\n        return True\r\n    if ((b - a) * c > 0 and (b - a) % c == 0): \r\n        return True\r\n    return False"}
{"task_id": "151", "prompt": "Write a python function to check whether the given number is co-prime or not.", "completion": "def gcd(p, q):\n    while q != 0:\n        p, q = q, p % q\n    return p\n\ndef is_coprime(x, y):\n    if not isinstance(x, int) or not isinstance(y, int):\n        raise TypeError(\"Both arguments must be integers.\")\n    if x == 0 or y == 0:\n        return False\n    return gcd(x, y) == 1", "test_list": ["assert is_coprime(17,13) == True", "assert is_coprime(15,21) == False", "assert is_coprime(25,45) == False"], "challenge_test_list": [], "reference_code": "def gcd(p,q):\r\n    while q != 0:\r\n        p, q = q,p%q\r\n    return p\r\ndef is_coprime(x,y):\r\n    return gcd(x,y) == 1"}
{"task_id": "152", "prompt": "Write a function to sort the given array by using merge sort.", "completion": "def merge(a, b):\n    c = []\n    while len(a) != 0 and len(b) != 0:\n        if a[0] < b[0]:\n            c.append(a[0])\n            a.pop(0)\n        else:\n            c.append(b[0])\n            b.pop(0)\n    c.extend(a)\n    c.extend(b)\n    return c\n\ndef merge_sort(x):\n    if not isinstance(x, (list, tuple)):\n        raise TypeError(\"Input must be an iterable\")\n    if len(x) == 0 or len(x) == 1:\n        return list(x)\n    else:\n        middle = len(x) // 2\n        a = merge_sort(x[:middle])\n        b = merge_sort(x[middle:])\n        return merge(a, b)", "test_list": ["assert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]", "assert merge_sort([7, 25, 45, 78, 11, 33, 19]) == [7, 11, 19, 25, 33, 45, 78]", "assert merge_sort([3, 1, 4, 9, 8]) == [1, 3, 4, 8, 9]"], "challenge_test_list": [], "reference_code": "def merge(a,b):\r\n    c = []\r\n    while len(a) != 0 and len(b) != 0:\r\n        if a[0] < b[0]:\r\n            c.append(a[0])\r\n            a.remove(a[0])\r\n        else:\r\n            c.append(b[0])\r\n            b.remove(b[0])\r\n    if len(a) == 0:\r\n        c += b\r\n    else:\r\n        c += a\r\n    return c\r\ndef merge_sort(x):\r\n    if len(x) == 0 or len(x) == 1:\r\n        return x\r\n    else:\r\n        middle = len(x)//2\r\n        a = merge_sort(x[:middle])\r\n        b = merge_sort(x[middle:])\r\n        return merge(a,b)\r\n"}
{"task_id": "153", "prompt": "Write a function to find the vertex of a parabola.", "completion": "import pytest\n\ndef parabola_vertex(a, b, c):\n    if a == 0:\n        raise ZeroDivisionError(\"Coefficient 'a' cannot be zero.\")\n    \n    # Calculate the x-coordinate of the vertex\n    x_vertex = -b / (2 * a)\n    # Calculate the y-coordinate of the vertex using the parabola equation\n    y_vertex = (4 * a * c - b * b) / (4 * a)\n    \n    return (x_vertex, y_vertex)\n\n# Test cases\ndef test_basic_functionality():\n    assert parabola_vertex(1, -4, 4) == pytest.approx((2.0, 0.0), rel=1e-9)\n    assert parabola_vertex(1, 0, 0) == pytest.approx((0.0, 0.0), rel=1e-9)\n    assert parabola_vertex(1, 2, 1) == pytest.approx((-1.0, 0.0), rel=1e-9)\n\ndef test_edge_cases():\n    assert parabola_vertex(1, 0, 1) == pytest.approx((0.0, -1.0), rel=1e-9)\n    assert parabola_vertex(0.5, -2, 1) == pytest.approx((2.0, -1.0), rel=1e-9)\n\ndef test_boundary_conditions():\n    assert parabola_vertex(1, 0, 0) == pytest.approx((0.0, 0.0), rel=1e-9)\n    assert parabola_vertex(1, 1, 1) == pytest.approx((-0.5, -0.25), rel=1e-9)\n\ndef test_exceptions():\n    with pytest.raises(ZeroDivisionError):\n        parabola_vertex(0, 1, 1)\n    with pytest.raises(TypeError):\n        parabola_vertex(\"a\", 1, 1)\n    with pytest.raises(TypeError):\n        parabola_vertex(1, None, 1)\n\n# Uncomment the following line to run the tests if needed\n# pytest.main()", "test_list": ["assert parabola_vertex(5,3,2)==(-0.3, 1.55)", "assert parabola_vertex(9,8,4)==(-0.4444444444444444, 2.2222222222222223)", "assert parabola_vertex(2,4,6)==(-1.0, 4.0)"], "challenge_test_list": [], "reference_code": "def parabola_vertex(a, b, c): \r\n  vertex=(((-b / (2 * a)),(((4 * a * c) - (b * b)) / (4 * a))))\r\n  return vertex"}
{"task_id": "154", "prompt": "Write a function to extract every specified element from a given two dimensional list.", "completion": "def specified_element(nums, N):\n    # Check if N is an integer\n    if not isinstance(N, int):\n        raise TypeError(\"list indices must be integers or slices, not {}\".format(type(N).__name__))\n    \n    result = []\n    for sublist in nums:\n        # Check if the sublist is long enough to access the N-th element\n        if N < len(sublist):\n            result.append(sublist[N])\n        else:\n            raise IndexError(\"list index out of range\")\n    \n    return result", "test_list": ["assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]", "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]", "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],3)==[2,2,5]"], "challenge_test_list": [], "reference_code": "def specified_element(nums, N):\r\n    result = [i[N] for i in nums]\r\n    return result"}
{"task_id": "155", "prompt": "Write a python function to toggle all even bits of a given number.", "completion": "def even_bit_toggle_number(n):\n    res = 0\n    count = 0\n    temp = n\n    \n    while temp > 0:\n        if count % 2 == 0:  # Toggle even bits (0, 2, 4, ...)\n            res |= (1 << count)\n        count += 1\n        temp >>= 1\n    \n    return n ^ res\n\n# Test cases\nimport pytest\n\ndef test_even_bit_toggle_number_basic():\n    assert even_bit_toggle_number(0b0000) == 0b0000, \"Should remain 0 when toggling even bits of 0\"\n    assert even_bit_toggle_number(0b0001) == 0b0001, \"Should remain 1 when toggling even bits of 1\"\n    assert even_bit_toggle_number(0b0010) == 0b0011, \"Should toggle the even bit of 2 to get 3\"\n    assert even_bit_toggle_number(0b0101) == 0b0111, \"Should toggle the even bits of 5 to get 7\"\n    assert even_bit_toggle_number(0b1111) == 0b1011, \"Should toggle the even bits of 15 to get 11\"\n\ndef test_even_bit_toggle_number_edge_cases():\n    assert even_bit_toggle_number(0) == 0, \"Toggling even bits of 0 should return 0\"\n    assert even_bit_toggle_number(1) == 1, \"Toggling even bits of 1 should return 1\"\n    assert even_bit_toggle_number(2) == 3, \"Toggling even bits of 2 should return 3\"\n    assert even_bit_toggle_number(3) == 3, \"Toggling even bits of 3 should return 3\"\n    assert even_bit_toggle_number(4) == 5, \"Toggling even bits of 4 should return 5\"\n    assert even_bit_toggle_number(15) == 11, \"Toggling even bits of 15 should return 11\"\n\ndef test_even_bit_toggle_number_boundary():\n    assert even_bit_toggle_number(0b1111111111111111) == 0b1010101010101011, \"Should toggle even bits of a 16-bit number\"\n    assert even_bit_toggle_number(0b0000000000000000) == 0b0000000000000000, \"Should remain 0 for all bits off\"\n\ndef test_even_bit_toggle_number_exceptions():\n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        even_bit_toggle_number(\"string\")\n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        even_bit_toggle_number(None)\n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        even_bit_toggle_number([])\n\ndef test_even_bit_toggle_number_negative_cases():", "test_list": ["assert even_bit_toggle_number(10) == 0", "assert even_bit_toggle_number(20) == 30", "assert even_bit_toggle_number(30) == 20"], "challenge_test_list": [], "reference_code": "def even_bit_toggle_number(n) : \r\n    res = 0; count = 0; temp = n \r\n    while (temp > 0) :     \r\n        if (count % 2 == 1) : \r\n            res = res | (1 << count)      \r\n        count = count + 1\r\n        temp >>= 1 \r\n    return n ^ res "}
{"task_id": "156", "prompt": "Write a function to convert a tuple of string values to a tuple of integer values.", "completion": "def tuple_int_str(tuple_str):\n    result = tuple(int(x) for pair in tuple_str for x in pair)\n    return result", "test_list": ["assert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))", "assert tuple_int_str((('999', '99'), ('1000', '500')))==((999, 99), (1000, 500))", "assert tuple_int_str((('666', '66'), ('1500', '555')))==((666, 66), (1500, 555))"], "challenge_test_list": [], "reference_code": "def tuple_int_str(tuple_str):\r\n    result = tuple((int(x[0]), int(x[1])) for x in tuple_str)\r\n    return result"}
{"task_id": "157", "prompt": "Write a function to reflect the run-length encoding from a list.", "completion": "from itertools import groupby\n\ndef encode_list(list1):\n    if not isinstance(list1, (list, tuple)):\n        raise TypeError(\"groupby() argument must be iterable\")\n    return [[len(list(group)), key] for key, group in groupby(list1)]\n\n# Test cases\nimport pytest\n\ndef test_basic_functionality():\n    assert encode_list([1, 1, 2, 2, 2, 3]) == [[2, 1], [3, 2], [1, 3]], \"Failed to encode basic list\"\n    assert encode_list(['a', 'a', 'b', 'c', 'c', 'c']) == [[2, 'a'], [1, 'b'], [3, 'c']], \"Failed to encode list of strings\"\n    assert encode_list([True, True, False]) == [[2, True], [1, False]], \"Failed to encode list of booleans\"\n\ndef test_edge_cases():\n    assert encode_list([]) == [], \"Failed to encode empty list\"\n    assert encode_list([1]) == [[1, 1]], \"Failed to encode single element list\"\n    assert encode_list([1, 1]) == [[2, 1]], \"Failed to encode list with two identical elements\"\n    assert encode_list([1, 2]) == [[1, 1], [1, 2]], \"Failed to encode list with two different elements\"\n\ndef test_exceptions():\n    with pytest.raises(TypeError, match=\"groupby() argument must be iterable\"):\n        encode_list(None)\n    with pytest.raises(TypeError, match=\"groupby() argument must be iterable\"):\n        encode_list(123)\n    with pytest.raises(TypeError, match=\"groupby() argument must be iterable\"):\n        encode_list({1: 'a', 2: 'b'})\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]", "assert encode_list('automatically')==[[1, 'a'], [1, 'u'], [1, 't'], [1, 'o'], [1, 'm'], [1, 'a'], [1, 't'], [1, 'i'], [1, 'c'], [1, 'a'], [2, 'l'], [1, 'y']]", "assert encode_list('python')==[[1, 'p'], [1, 'y'], [1, 't'], [1, 'h'], [1, 'o'], [1, 'n']]"], "challenge_test_list": [], "reference_code": "from itertools import groupby\r\ndef encode_list(list1):\r\n    return [[len(list(group)), key] for key, group in groupby(list1)]"}
{"task_id": "158", "prompt": "Write a python function to find k number of operations required to make all elements equal.", "completion": "def min_Ops(arr, n, k): \n    if not isinstance(arr, list) or not all(isinstance(x, int) for x in arr) or not isinstance(n, int) or not isinstance(k, int):\n        raise TypeError(\"Invalid input types\")\n    \n    if n == 0:\n        return 0\n    \n    max1 = max(arr) \n    res = 0\n    \n    for i in range(n):  \n        if (max1 - arr[i]) % k != 0: \n            return -1 \n        else: \n            res += (max1 - arr[i]) // k  # Use integer division\n    \n    return res", "test_list": ["assert min_Ops([2,2,2,2],4,3) == 0", "assert min_Ops([4,2,6,8],4,3) == -1", "assert min_Ops([21,33,9,45,63],5,6) == 24"], "challenge_test_list": [], "reference_code": "def min_Ops(arr,n,k): \r\n    max1 = max(arr) \r\n    res = 0\r\n    for i in range(0,n):  \r\n        if ((max1 - arr[i]) % k != 0): \r\n            return -1 \r\n        else: \r\n            res += (max1 - arr[i]) / k \r\n    return int(res) "}
{"task_id": "159", "prompt": "Write a function to print the season for the given month and day.", "completion": "def month_season(month, days):\n    if not isinstance(month, str) or not month or not isinstance(days, (int, float)) or days is None or days < 1:\n        raise ValueError(\"Invalid month or days\")\n    \n    month = month.capitalize()\n    \n    if month in ('January', 'February', 'March'):\n        season = 'winter'\n    elif month in ('April', 'May', 'June'):\n        season = 'spring'\n    elif month in ('July', 'August', 'September'):\n        season = 'summer'\n    elif month in ('October', 'November', 'December'):\n        season = 'autumn'\n    else:\n        raise ValueError(\"Invalid month\")\n\n    if (month == 'March' and days > 19):\n        season = 'spring'\n    elif (month == 'June' and days > 20):\n        season = 'summer'\n    elif (month == 'September' and days > 21):\n        season = 'autumn'\n    elif (month == 'October' and days > 21):\n        season = 'autumn':\n    elif (month == 'November' and days > 21):\n        season = 'autumn'\n    elif (month == 'December' and days > 20):\n        season = 'winter'\n\n    return season", "test_list": ["assert month_season('January',4)==('winter')", "assert month_season('October',28)==('autumn')", "assert month_season('June',6)==('spring')"], "challenge_test_list": [], "reference_code": "def month_season(month,days):\r\n if month in ('January', 'February', 'March'):\r\n\t season = 'winter'\r\n elif month in ('April', 'May', 'June'):\r\n\t season = 'spring'\r\n elif month in ('July', 'August', 'September'):\r\n\t season = 'summer'\r\n else:\r\n\t season = 'autumn'\r\n if (month == 'March') and (days > 19):\r\n\t season = 'spring'\r\n elif (month == 'June') and (days > 20):\r\n\t season = 'summer'\r\n elif (month == 'September') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'October') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'November') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'December') and (days > 20):\r\n\t season = 'winter'\r\n return season"}
{"task_id": "160", "prompt": "Write a function to find x and y that satisfies ax + by = n.", "completion": "def solution(a, b, n):\n    # Check for invalid inputs\n    if not all(isinstance(x, (int, float)) for x in [a, b, n]):\n        raise TypeError(\"All inputs must be numbers.\")\n    \n    # Handle the case where both coefficients are zero\n    if a == 0 and b == 0:\n        return \"No solution\"\n    \n    # Iterate over possible values of x\n    for i in range(n // a + 1) if a != 0 else [0]:\n        if (n - (i * a)) % b == 0:\n            return (\"x = \", i, \", y = \", int((n - (i * a)) / b))\n    \n    return \"No solution\"", "test_list": ["assert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)", "assert solution(4, 2, 7) == 'No solution'", "assert solution(1, 13, 17) == ('x = ', 4, ', y = ', 1)"], "challenge_test_list": [], "reference_code": "def solution (a, b, n): \r\n\ti = 0\r\n\twhile i * a <= n: \r\n\t\tif (n - (i * a)) % b == 0: \r\n\t\t\treturn (\"x = \",i ,\", y = \", \r\n\t\t\tint((n - (i * a)) / b)) \r\n\t\t\treturn 0\r\n\t\ti = i + 1\r\n\treturn (\"No solution\") "}
{"task_id": "161", "prompt": "Write a function to remove all elements from a given list present in another list.", "completion": "def remove_elements(list1, list2):\n    if not isinstance(list1, (list, set, tuple)) or not isinstance(list2, (list, set, tuple)):\n        raise TypeError(\"expected an iterable\")\n    result = [x for x in list1 if x not in list2]\n    return result", "test_list": ["assert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]", "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[1, 3, 5, 7])==[2, 4, 6, 8, 9, 10]", "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[5,7])==[1, 2, 3, 4, 6, 8, 9, 10]"], "challenge_test_list": [], "reference_code": "def remove_elements(list1, list2):\r\n    result = [x for x in list1 if x not in list2]\r\n    return result"}
{"task_id": "162", "prompt": "Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).", "completion": "def sum_series(n):\n    if not isinstance(n, int):\n        raise TypeError(\"unsupported operand type\")\n    if n < 1:\n        return 0\n    return n + sum_series(n - 2)", "test_list": ["assert sum_series(6)==12", "assert sum_series(10)==30", "assert sum_series(9)==25"], "challenge_test_list": [], "reference_code": "def sum_series(n):\r\n  if n < 1:\r\n    return 0\r\n  else:\r\n    return n + sum_series(n - 2)"}
{"task_id": "163", "prompt": "Write a function to calculate the area of a regular polygon.", "completion": "from math import tan, pi\n\ndef area_polygon(s, l):\n    if s < 3:\n        raise ValueError(\"Number of sides must be greater than 2\")\n    if l < 0:\n        raise ValueError(\"Side length must be non-negative\")\n    \n    area = s * (l ** 2) / (4 * tan(pi / s))\n    return area", "test_list": ["assert area_polygon(4,20)==400.00000000000006", "assert area_polygon(10,15)==1731.1969896610804", "assert area_polygon(9,7)==302.90938549487214"], "challenge_test_list": [], "reference_code": "from math import tan, pi\r\ndef area_polygon(s,l):\r\n  area = s * (l ** 2) / (4 * tan(pi / s))\r\n  return area"}
{"task_id": "164", "prompt": "Write a python function to check whether the sum of divisors are same or not.", "completion": "import math \n\ndef divSum(n): \n    if n <= 0:\n        return 0\n    sum_divisors = 1  # Start with 1, as it's a divisor for all n > 1\n    for i in range(2, int(math.sqrt(n)) + 1): \n        if n % i == 0: \n            sum_divisors += i\n            if i != n // i:  # Avoid adding the square root twice\n                sum_divisors += n // i\n    return sum_divisors + (n if n > 1 else 0)  # Add n itself if n > 1\n\ndef areEquivalent(num1, num2): \n    if not isinstance(num1, int) or not isinstance(num2, int):\n        raise TypeError(\"Both arguments must be integers.\")\n    return divSum(num1) == divSum(num2)", "test_list": ["assert areEquivalent(36,57) == False", "assert areEquivalent(2,4) == False", "assert areEquivalent(23,47) == True"], "challenge_test_list": [], "reference_code": "import math \r\ndef divSum(n): \r\n    sum = 1; \r\n    i = 2; \r\n    while(i * i <= n): \r\n        if (n % i == 0): \r\n            sum = (sum + i +math.floor(n / i)); \r\n        i += 1; \r\n    return sum; \r\ndef areEquivalent(num1,num2): \r\n    return divSum(num1) == divSum(num2); "}
{"task_id": "165", "prompt": "Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.", "completion": "def count_char_position(str1):\n    if not isinstance(str1, str):\n        raise TypeError(\"expected a string\")\n    \n    count_chars = 0\n    for i in range(len(str1)):\n        if str1[i].isalpha():  # Check if the character is an alphabet\n            position = ord(str1[i].lower()) - ord('a')  # Calculate position in alphabet (0-25)\n            if i == position:  # Compare with the index\n                count_chars += 1\n    return count_chars", "test_list": ["assert count_char_position(\"xbcefg\") == 2", "assert count_char_position(\"ABcED\") == 3", "assert count_char_position(\"AbgdeF\") == 5"], "challenge_test_list": [], "reference_code": "def count_char_position(str1): \r\n    count_chars = 0\r\n    for i in range(len(str1)):\r\n        if ((i == ord(str1[i]) - ord('A')) or \r\n            (i == ord(str1[i]) - ord('a'))): \r\n            count_chars += 1\r\n    return count_chars "}
{"task_id": "166", "prompt": "Write a python function to count the pairs with xor as an even number.", "completion": "def find_even_Pair(A, N): \n    if A is None or N is None:\n        raise TypeError(\"Input cannot be None\")\n    if N < 0:\n        raise ValueError(\"N cannot be negative\")\n    \n    even_count = 0\n    odd_count = 0\n    \n    # Count even and odd numbers in the array\n    for number in A:\n        if number % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    # Pairs with even XOR can be formed by:\n    # 1. Pairing two even numbers\n    # 2. Pairing two odd numbers\n    even_pairs = (even_count * (even_count - 1)) // 2\n    odd_pairs = (odd_count * (odd_count - 1)) // 2\n    \n    return even_pairs + odd_pairs", "test_list": ["assert find_even_Pair([5,4,7,2,1],5) == 4", "assert find_even_Pair([7,2,8,1,0,5,11],7) == 9", "assert find_even_Pair([1,2,3],3) == 1"], "challenge_test_list": [], "reference_code": "def find_even_Pair(A,N): \r\n    evenPair = 0\r\n    for i in range(0,N): \r\n        for j in range(i+1,N): \r\n            if ((A[i] ^ A[j]) % 2 == 0): \r\n                evenPair+=1\r\n    return evenPair; "}
{"task_id": "167", "prompt": "Write a python function to find smallest power of 2 greater than or equal to n.", "completion": "def next_Power_Of_2(n):\n    if not isinstance(n, int) or n < 0:\n        raise TypeError(\"unsupported operand type\")\n    \n    if n == 0:\n        return 1\n    \n    if n & (n - 1) == 0:\n        return n\n    \n    count = 0\n    while n != 0:\n        n >>= 1\n        count += 1\n    return 1 << count", "test_list": ["assert next_Power_Of_2(0) == 1", "assert next_Power_Of_2(5) == 8", "assert next_Power_Of_2(17) == 32"], "challenge_test_list": [], "reference_code": "def next_Power_Of_2(n): \r\n    count = 0; \r\n    if (n and not(n & (n - 1))): \r\n        return n   \r\n    while( n != 0): \r\n        n >>= 1\r\n        count += 1\r\n    return 1 << count; "}
{"task_id": "168", "prompt": "Write a python function to find the frequency of a number in a given array.", "completion": "import pytest\n\ndef frequency(a, x):\n    if not isinstance(a, list) or not all(isinstance(i, (int, float)) for i in a):\n        raise TypeError(\"First argument must be a list of numbers.\")\n    if not isinstance(x, (int, float)):\n        raise TypeError(\"Second argument must be a number.\")\n    \n    count = 0  \n    for i in a: \n        if i == x: \n            count += 1\n    return count \n\n# Test cases\ndef test_basic_functionality():\n    assert frequency([1, 2, 3, 4, 5], 3) == 1, \"Should return 1 for single occurrence\"\n    assert frequency([1, 2, 3, 4, 5, 3], 3) == 2, \"Should return 2 for two occurrences\"\n    assert frequency([1, 1, 1, 1, 1], 1) == 5, \"Should return 5 for all elements being the same\"\n    assert frequency([1, 2, 3, 4, 5], 6) == 0, \"Should return 0 for no occurrences\"\n\ndef test_edge_cases():\n    assert frequency([], 1) == 0, \"Should return 0 for empty array\"\n    assert frequency([1], 1) == 1, \"Should return 1 for single element matching\"\n    assert frequency([1], 2) == 0, \"Should return 0 for single element not matching\"\n    assert frequency([0, 0, 0], 0) == 3, \"Should return 3 for all zeros\"\n\ndef test_exceptions():\n    with pytest.raises(TypeError, match=\"First argument must be a list of numbers.\"):\n        frequency(None, 1)\n    with pytest.raises(TypeError, match=\"Second argument must be a number.\"):\n        frequency([1, 2, 3], None)\n    with pytest.raises(TypeError, match=\"First argument must be a list of numbers.\"):\n        frequency(\"not an array\", 1)\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert frequency([1,2,3],4) == 0", "assert frequency([1,2,2,3,3,3,4],3) == 3", "assert frequency([0,1,2,3,1,2],1) == 2"], "challenge_test_list": [], "reference_code": "def frequency(a,x): \r\n    count = 0  \r\n    for i in a: \r\n        if i == x: count += 1\r\n    return count "}
{"task_id": "169", "prompt": "Write a function to calculate the nth pell number.", "completion": "def get_pell(n):\n    if n < 0:\n        raise ValueError(\"negative integer\")\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    \n    a = 1\n    b = 2\n    for i in range(3, n + 1):\n        c = 2 * b + a\n        a = b\n        b = c\n    return b", "test_list": ["assert get_pell(4) == 12", "assert get_pell(7) == 169", "assert get_pell(8) == 408"], "challenge_test_list": [], "reference_code": "def get_pell(n): \r\n\tif (n <= 2): \r\n\t\treturn n \r\n\ta = 1\r\n\tb = 2\r\n\tfor i in range(3, n+1): \r\n\t\tc = 2 * b + a \r\n\t\ta = b \r\n\t\tb = c \r\n\treturn b "}
{"task_id": "170", "prompt": "Write a function to find sum of the numbers in a list between the indices of a specified range.", "completion": "def sum_range_list(list1, m, n):\n    # Check for valid range\n    if m < 0 or n >= len(list1) or m > n:\n        raise IndexError(\"list index out of range\") if m < 0 or n >= len(list1) else ValueError(\"m must be less than or equal to n\")\n    \n    sum_range = 0\n    for i in range(m, n + 1):\n        sum_range += list1[i]\n    return sum_range", "test_list": ["assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29", "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],5,7)==16", "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],7,10)==38"], "challenge_test_list": [], "reference_code": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \r\n    sum_range = 0                                                                                                                                                                                                         \r\n    for i in range(m, n+1, 1):                                                                                                                                                                                        \r\n        sum_range += list1[i]                                                                                                                                                                                                  \r\n    return sum_range   "}
{"task_id": "171", "prompt": "Write a function to find the perimeter of a pentagon.", "completion": "def perimeter_pentagon(a):\n    if not isinstance(a, (int, float)):\n        raise TypeError(\"unsupported operand type\")\n    return 5 * a", "test_list": ["assert perimeter_pentagon(5)==25", "assert perimeter_pentagon(10)==50", "assert perimeter_pentagon(15)==75"], "challenge_test_list": [], "reference_code": "import math\r\ndef perimeter_pentagon(a):\r\n  perimeter=(5*a)\r\n  return perimeter"}
{"task_id": "172", "prompt": "Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item", "completion": "def count_occurance(s):\n    count = 0\n    length = len(s)\n    for i in range(length - 2):  # Adjust the range to prevent IndexError\n        if s[i] == 's' and s[i + 1] == 't' and s[i + 2] == 'd':\n            count += 1\n    return count", "test_list": ["assert count_occurance(\"letstdlenstdporstd\") == 3", "assert count_occurance(\"truststdsolensporsd\") == 1", "assert count_occurance(\"makestdsostdworthit\") == 2"], "challenge_test_list": [], "reference_code": "def count_occurance(s):\r\n  count=0\r\n  for i in range(len(s)):\r\n    if (s[i]== 's' and s[i+1]=='t' and s[i+2]== 'd'):\r\n      count = count + 1\r\n  return count"}
{"task_id": "173", "prompt": "Write a function to remove everything except alphanumeric characters from a string.", "completion": "import re\n\ndef remove_splchar(text): \n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n    pattern = re.compile('[\\W_]+')\n    return pattern.sub('', text)", "test_list": ["assert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')", "assert remove_splchar('python %^$@!^&*()  programming24%$^^()    language')==('pythonprogramming24language')", "assert remove_splchar('python   ^%&^()(+_)(_^&67)                  program')==('python67program')"], "challenge_test_list": [], "reference_code": "import re\r\ndef remove_splchar(text): \r\n pattern = re.compile('[\\W_]+')\r\n return (pattern.sub('', text))"}
{"task_id": "174", "prompt": "Write a function to group a sequence of key-value pairs into a dictionary of lists.", "completion": "def group_keyvalue(l):\n    if not isinstance(l, list):\n        raise TypeError(\"expected a sequence of key-value pairs\")\n    \n    result = {}\n    for item in l:\n        if not isinstance(item, tuple) or len(item) != 2:\n            raise TypeError(\"cannot unpack non-iterable int object\" if isinstance(item, int) else \"not enough values to unpack (expected 2, got {})\".format(len(item)))\n        \n        k, v = item\n        result.setdefault(k, []).append(v)\n    \n    return result", "test_list": ["assert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}", "assert group_keyvalue([('python', 1), ('python', 2), ('python', 3), ('python', 4), ('python', 5)])=={'python': [1,2,3,4,5]}", "assert group_keyvalue([('yellow',100), ('blue', 200), ('yellow', 300), ('blue', 400), ('red', 100)])=={'yellow': [100, 300], 'blue': [200, 400], 'red': [100]}"], "challenge_test_list": [], "reference_code": "def group_keyvalue(l):\r\n    result = {}\r\n    for k, v in l:\r\n         result.setdefault(k, []).append(v)\r\n    return result"}
{"task_id": "175", "prompt": "Write a function to verify validity of a string of parentheses.", "completion": "def is_valid_parenthese(str1):\n    stack, pchar = [], {\"(\": \")\", \"{\": \"}\", \"[\": \"]\"}\n    for parenthese in str1:\n        if parenthese in pchar:\n            stack.append(parenthese)\n        elif len(stack) == 0 or pchar[stack.pop()] != parenthese:\n            return False\n    return len(stack) == 0\n\n# Test cases\nimport pytest\n\ndef test_valid_parentheses():\n    assert is_valid_parenthese(\"()\") == True, \"Expected True for valid parentheses '()'\"\n    assert is_valid_parenthese(\"()[]{}\") == True, \"Expected True for valid parentheses '()[]{}'\"\n    assert is_valid_parenthese(\"{[()]}\") == True, \"Expected True for valid parentheses '{[()]}'\"\n    assert is_valid_parenthese(\"((()))\") == True, \"Expected True for valid parentheses '((()))'\"\n\ndef test_invalid_parentheses():\n    assert is_valid_parenthese(\"(}\") == False, \"Expected False for invalid parentheses '(}'\"\n    assert is_valid_parenthese(\"([)]\") == False, \"Expected False for invalid parentheses '([)]'\"\n    assert is_valid_parenthese(\"{[}\") == False, \"Expected False for invalid parentheses '{[}'\"\n    assert is_valid_parenthese(\"((())\") == False, \"Expected False for invalid parentheses '((())'\"\n\ndef test_empty_input():\n    assert is_valid_parenthese(\"\") == True, \"Expected True for empty input\"\n\ndef test_unbalanced_parentheses():\n    assert is_valid_parenthese(\"(((((\") == False, \"Expected False for unbalanced parentheses '((((('\"\n    assert is_valid_parenthese(\"))))))\") == False, \"Expected False for unbalanced parentheses '))))))'\"\n\ndef test_invalid_characters():\n    for char in \"abc\":\n        assert is_valid_parenthese(char) == False, f\"Expected False for invalid character '{char}'\"\n\n# Run the tests\npytest.main()", "test_list": ["assert is_valid_parenthese(\"(){}[]\")==True", "assert is_valid_parenthese(\"()[{)}\")==False", "assert is_valid_parenthese(\"()\")==True"], "challenge_test_list": [], "reference_code": "def is_valid_parenthese( str1):\r\n        stack, pchar = [], {\"(\": \")\", \"{\": \"}\", \"[\": \"]\"}\r\n        for parenthese in str1:\r\n            if parenthese in pchar:\r\n                stack.append(parenthese)\r\n            elif len(stack) == 0 or pchar[stack.pop()] != parenthese:\r\n                return False\r\n        return len(stack) == 0"}
{"task_id": "176", "prompt": "Write a function to find the perimeter of a triangle.", "completion": "import pytest\n\ndef perimeter_triangle(a, b, c):\n    # Check for valid input types\n    if not all(isinstance(side, (int, float)) for side in (a, b, c)):\n        raise TypeError(\"unsupported operand type\")\n    \n    # Check for triangle inequality\n    if a + b <= c or a + c <= b or b + c <= a:\n        raise ValueError(\"Triangle inequality violated\")\n    \n    # Calculate the perimeter\n    perimeter = a + b + c\n    return perimeter\n\n# Test cases\ndef test_basic_functionality():\n    assert perimeter_triangle(3, 4, 5) == 12, \"Expected perimeter of triangle with sides 3, 4, 5 to be 12\"\n    assert perimeter_triangle(1, 1, 1) == 3, \"Expected perimeter of equilateral triangle with sides 1, 1, 1 to be 3\"\n    assert perimeter_triangle(5, 12, 13) == 30, \"Expected perimeter of triangle with sides 5, 12, 13 to be 30\"\n\ndef test_edge_cases():\n    assert perimeter_triangle(0, 0, 0) == 0, \"Expected perimeter of triangle with sides 0, 0, 0 to be 0\"\n    assert perimeter_triangle(1, 1, 0) == 2, \"Expected perimeter of triangle with sides 1, 1, 0 to be 2\"\n    assert perimeter_triangle(1, 1, 2) == 4, \"Expected perimeter of triangle with sides 1, 1, 2 to be 4\"\n\ndef test_exceptions():\n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        perimeter_triangle(\"a\", 1, 1)\n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        perimeter_triangle(1, None, 1)\n    with pytest.raises(ValueError, match=\"Triangle inequality violated\"):\n        perimeter_triangle(1, 2, 3)\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert perimeter_triangle(10,20,30)==60", "assert perimeter_triangle(3,4,5)==12", "assert perimeter_triangle(25,35,45)==105"], "challenge_test_list": [], "reference_code": "def perimeter_triangle(a,b,c):\r\n  perimeter=a+b+c\r\n  return perimeter"}
{"task_id": "177", "prompt": "Write a python function to find two distinct numbers such that their lcm lies within the given range.", "completion": "def answer(L, R):\n    # Check for valid input types\n    if not isinstance(L, int) or not isinstance(R, int):\n        raise TypeError(\"Both L and R must be integers.\")\n    \n    # Check for valid range\n    if L < 1 or R < 1 or L >= R:\n        return -1\n    \n    # Find two distinct numbers such that their lcm lies within the given range\n    for a in range(L, R + 1):\n        for b in range(a + 1, R + 1):\n            lcm = (a * b) // math.gcd(a, b)\n            if L <= lcm <= R:\n                return (a, b)\n    \n    return -1\n\nimport math", "test_list": ["assert answer(3,8) == (3,6)", "assert answer(2,6) == (2,4)", "assert answer(1,3) == (1,2)"], "challenge_test_list": [], "reference_code": "def answer(L,R): \r\n    if (2 * L <= R): \r\n        return (L ,2*L)\r\n    else: \r\n        return (-1) "}
{"task_id": "178", "prompt": "Write a function to search some literals strings in a string.", "completion": "import re\n\ndef string_literals(patterns, text):\n    if not isinstance(patterns, (list, tuple)):\n        raise TypeError(\"expected an iterable\")\n    if not isinstance(text, str):\n        raise TypeError(\"expected a string\")\n    \n    for pattern in patterns:\n        if re.search(pattern, text):\n            return 'Matched!'\n    return 'Not Matched!'", "test_list": ["assert string_literals(['language'],'python language')==('Matched!')", "assert string_literals(['program'],'python language')==('Not Matched!')", "assert string_literals(['python'],'programming language')==('Not Matched!')"], "challenge_test_list": [], "reference_code": "import re\r\ndef string_literals(patterns,text):\r\n  for pattern in patterns:\r\n     if re.search(pattern,  text):\r\n       return ('Matched!')\r\n     else:\r\n       return ('Not Matched!')"}
{"task_id": "179", "prompt": "Write a function to find if the given number is a keith number or not.", "completion": "def is_num_keith(x):\n    if not isinstance(x, int) or x < 0:\n        raise TypeError(\"Input must be a non-negative integer\")\n    \n    terms = []\n    temp = x\n    while temp > 0:\n        terms.append(temp % 10)\n        temp //= 10\n    terms.reverse()\n    \n    next_term = 0\n    i = len(terms)\n    \n    while next_term < x:\n        next_term = sum(terms[i - j] for j in range(1, len(terms) + 1))\n        terms.append(next_term)\n        i += 1\n    \n    return next_term == x", "test_list": ["assert is_num_keith(14) == True", "assert is_num_keith(12) == False", "assert is_num_keith(197) == True"], "challenge_test_list": [], "reference_code": "def is_num_keith(x): \r\n\tterms = [] \r\n\ttemp = x \r\n\tn = 0 \r\n\twhile (temp > 0): \r\n\t\tterms.append(temp % 10) \r\n\t\ttemp = int(temp / 10) \r\n\t\tn+=1 \r\n\tterms.reverse() \r\n\tnext_term = 0 \r\n\ti = n \r\n\twhile (next_term < x): \r\n\t\tnext_term = 0 \r\n\t\tfor j in range(1,n+1): \r\n\t\t\tnext_term += terms[i - j] \r\n\t\tterms.append(next_term) \r\n\t\ti+=1 \r\n\treturn (next_term == x) "}
{"task_id": "180", "prompt": "Write a function to calculate distance between two points using latitude and longitude.", "completion": "from math import radians, sin, cos, acos, isclose\n\ndef distance_lat_long(slat, slon, elat, elon):\n    # Check if latitude and longitude are within valid ranges\n    if not (-90 <= slat <= 90) or not (-90 <= elat <= 90):\n        raise ValueError(\"Latitude must be between -90 and 90 degrees.\")\n    if not (-180 <= slon <= 180) or not (-180 <= elon <= 180):\n        raise ValueError(\"Longitude must be between -180 and 180 degrees.\")\n    \n    # Calculate the distance using the haversine formula\n    dist = 6371.01 * acos(sin(slat) * sin(elat) + cos(slat) * cos(elat) * cos(slon - elon))\n    \n    return dist", "test_list": ["assert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429", "assert distance_lat_long(10.5,20.5,30.5,40.5)==6069.397933300514", "assert distance_lat_long(10,20,30,40)==6783.751974994595"], "challenge_test_list": [], "reference_code": "from math import radians, sin, cos, acos\r\ndef distance_lat_long(slat,slon,elat,elon):\r\n dist = 6371.01 * acos(sin(slat)*sin(elat) + cos(slat)*cos(elat)*cos(slon - elon))\r\n return dist"}
{"task_id": "181", "prompt": "Write a function to find the longest common prefix in the given set of strings.", "completion": "def common_prefix(arr, n):\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n    if n == 0:\n        return \"\"\n    \n    for string in arr:\n        if not isinstance(string, str):\n            raise TypeError(\"All elements in the list must be strings\")\n    \n    def common_prefix_util(str1, str2):\n        result = \"\"\n        n1 = len(str1)\n        n2 = len(str2)\n        i = 0\n        j = 0\n        while i < n1 and j < n2:\n            if str1[i] != str2[j]:\n                break\n            result += str1[i]\n            i += 1\n            j += 1\n        return result\n    \n    prefix = arr[0]\n    for i in range(1, n):\n        prefix = common_prefix_util(prefix, arr[i])\n        if prefix == \"\":\n            break\n    return prefix", "test_list": ["assert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'", "assert common_prefix([\"apples\", \"ape\", \"april\"], 3) == 'ap'", "assert common_prefix([\"teens\", \"teenager\", \"teenmar\"], 3) == 'teen'"], "challenge_test_list": [], "reference_code": "def common_prefix_util(str1, str2): \r\n\tresult = \"\"; \r\n\tn1 = len(str1) \r\n\tn2 = len(str2) \r\n\ti = 0\r\n\tj = 0\r\n\twhile i <= n1 - 1 and j <= n2 - 1: \r\n\t\tif (str1[i] != str2[j]): \r\n\t\t\tbreak\r\n\t\tresult += str1[i] \r\n\t\ti += 1\r\n\t\tj += 1\r\n\treturn (result) \r\ndef common_prefix (arr, n): \r\n\tprefix = arr[0] \r\n\tfor i in range (1, n): \r\n\t\tprefix = common_prefix_util(prefix, arr[i]) \r\n\treturn (prefix) "}
{"task_id": "182", "prompt": "Write a function to find uppercase, lowercase, special character and numeric values using regex.", "completion": "import re\n\ndef find_character(string):\n    if not isinstance(string, str):\n        raise TypeError(\"Input must be a string\")\n    \n    uppercase_characters = re.findall(r\"[A-Z]\", string) \n    lowercase_characters = re.findall(r\"[a-z]\", string) \n    numerical_characters = re.findall(r\"[0-9]\", string) \n    special_characters = re.findall(r\"[^A-Za-z0-9]\", string)  # Match anything that is not alphanumeric\n    \n    return uppercase_characters, lowercase_characters, numerical_characters, special_characters", "test_list": ["assert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])", "assert find_character(\"Hithere2\") == (['H'], ['i', 't', 'h', 'e', 'r', 'e'], ['2'], [])", "assert find_character(\"HeyFolks32\") == (['H', 'F'], ['e', 'y', 'o', 'l', 'k', 's'], ['3', '2'], [])"], "challenge_test_list": [], "reference_code": "import re\r\ndef find_character(string):\r\n  uppercase_characters = re.findall(r\"[A-Z]\", string) \r\n  lowercase_characters = re.findall(r\"[a-z]\", string) \r\n  numerical_characters = re.findall(r\"[0-9]\", string) \r\n  special_characters = re.findall(r\"[, .!?]\", string) \r\n  return uppercase_characters, lowercase_characters, numerical_characters, special_characters"}
{"task_id": "183", "prompt": "Write a function to count all the distinct pairs having a difference of k in any array.", "completion": "def count_pairs(arr, n, k):\n    if arr is None or not isinstance(arr, list) or not isinstance(n, int) or not isinstance(k, int):\n        raise TypeError(\"Invalid input types\")\n    \n    count = 0\n    seen = set()\n    \n    for num in arr:\n        if (num - k) in seen:\n            count += 1\n        if (num + k) in seen:\n            count += 1\n        seen.add(num)\n    \n    return count", "test_list": ["assert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2", "assert count_pairs([8, 12, 16, 4, 0, 20], 6, 4) == 5", "assert count_pairs([2, 4, 1, 3, 4], 5, 2) == 3"], "challenge_test_list": [], "reference_code": "def count_pairs(arr, n, k):\r\n  count=0;\r\n  for i in range(0,n):\r\n    for j in range(i+1, n):\r\n      if arr[i] - arr[j] == k or arr[j] - arr[i] == k:\r\n        count += 1\r\n  return count"}
{"task_id": "184", "prompt": "Write a function to find all the values in a list that are greater than a specified number.", "completion": "def greater_specificnum(lst, num):\n    if lst is None or not isinstance(lst, list) or any(not isinstance(x, (int, float)) for x in lst) or not isinstance(num, (int, float)):\n        raise TypeError(\"Invalid input types\")\n    return [x for x in lst if x > num]", "test_list": ["assert greater_specificnum([220, 330, 500],200)==True", "assert greater_specificnum([12, 17, 21],20)==False", "assert greater_specificnum([1,2,3,4],10)==False"], "challenge_test_list": [], "reference_code": "def greater_specificnum(list,num):\r\n greater_specificnum=all(x >= num for x in list)\r\n return greater_specificnum"}
{"task_id": "185", "prompt": "Write a function to find the focus of a parabola.", "completion": "def parabola_focus(a, b, c):\n    # Check for non-numeric inputs\n    if not all(isinstance(x, (int, float)) for x in (a, b, c)):\n        raise TypeError(\"unsupported operand type\")\n    \n    # Check for zero 'a' which would lead to division by zero\n    if a == 0:\n        raise ZeroDivisionError(\"division by zero\")\n    \n    # Check for negative 'a' which is not allowed\n    if a < 0:\n        raise ValueError(\"a must be positive\")\n    \n    # Calculate the focus of the parabola\n    x_focus = -b / (2 * a)\n    y_focus = (4 * a * c - b * b) / (4 * a)\n    \n    return (x_focus, y_focus)", "test_list": ["assert parabola_focus(5,3,2)==(-0.3, 1.6)", "assert parabola_focus(9,8,4)==(-0.4444444444444444, 2.25)", "assert parabola_focus(2,4,6)==(-1.0, 4.125)"], "challenge_test_list": [], "reference_code": "def parabola_focus(a, b, c): \r\n  focus= (((-b / (2 * a)),(((4 * a * c) - (b * b) + 1) / (4 * a))))\r\n  return focus"}
{"task_id": "186", "prompt": "Write a function to search some literals strings in a string by using regex.", "completion": "import re\n\ndef check_literals(text, patterns):\n    if not isinstance(text, str) or text is None:\n        raise TypeError(\"Invalid text input\")\n    if not isinstance(patterns, list) or patterns is None:\n        raise TypeError(\"Invalid patterns input\")\n    \n    for pattern in patterns:\n        if pattern is None:\n            raise TypeError(\"Invalid pattern in list\")\n        if re.search(pattern, text):\n            return 'Matched!'\n    return 'Not Matched!'", "test_list": ["assert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'", "assert check_literals('The quick brown fox jumps over the lazy dog.',['horse']) == 'Not Matched!'", "assert check_literals('The quick brown fox jumps over the lazy dog.',['lazy']) == 'Matched!'"], "challenge_test_list": [], "reference_code": "import re\r\ndef check_literals(text, patterns):\r\n  for pattern in patterns:\r\n    if re.search(pattern,  text):\r\n        return ('Matched!')\r\n    else:\r\n        return ('Not Matched!')"}
{"task_id": "187", "prompt": "Write a function to find the longest common subsequence for the given two sequences.", "completion": "def longest_common_subsequence(X, Y, m, n):\n    if not isinstance(X, str) or not isinstance(Y, str):\n        raise TypeError(\"Both inputs must be strings\")\n    \n    if m == 0 or n == 0:\n        return 0\n    elif X[m-1] == Y[n-1]:\n        return 1 + longest_common_subsequence(X, Y, m-1, n-1)\n    else:\n        return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n))", "test_list": ["assert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4", "assert longest_common_subsequence(\"ABCDGH\" , \"AEDFHR\", 6, 6) == 3", "assert longest_common_subsequence(\"AXYT\" , \"AYZX\", 4, 4) == 2"], "challenge_test_list": [], "reference_code": "def longest_common_subsequence(X, Y, m, n): \r\n    if m == 0 or n == 0: \r\n       return 0 \r\n    elif X[m-1] == Y[n-1]: \r\n       return 1 + longest_common_subsequence(X, Y, m-1, n-1) \r\n    else: \r\n       return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n))"}
{"task_id": "188", "prompt": "Write a python function to check whether the given number can be represented by product of two squares or not.", "completion": "import math\n\ndef prod_Square(n):\n    if not isinstance(n, int):\n        raise TypeError(\"unsupported operand type\")\n    if n < 0:\n        raise ValueError(\"negative number\")\n    \n    for i in range(int(math.sqrt(n)) + 1):\n        for j in range(int(math.sqrt(n)) + 1):\n            if i * i + j * j == n:\n                return True\n    return False", "test_list": ["assert prod_Square(25) == False", "assert prod_Square(30) == False", "assert prod_Square(16) == True"], "challenge_test_list": [], "reference_code": "def prod_Square(n):\r\n    for i in range(2,(n) + 1):\r\n        if (i*i < (n+1)):\r\n            for j in range(2,n + 1):\r\n                if ((i*i*j*j) == n):\r\n                    return True;\r\n    return False;"}
{"task_id": "189", "prompt": "Write a python function to find the first missing positive number.", "completion": "def first_Missing_Positive(arr, n):\n    if not isinstance(arr, list) or not isinstance(n, int):\n        raise TypeError(\"Invalid input types. Expected a list and an integer.\")\n    \n    # Step 1: Replace non-positive numbers and numbers greater than n with 1\n    for i in range(n):\n        if arr[i] <= 0 or arr[i] > n:\n            arr[i] = 1\n\n    # Step 2: Use the index as a hash to record the presence of numbers\n    for i in range(n):\n        index = abs(arr[i]) - 1\n        if index < n:\n            arr[index] = -abs(arr[index])\n\n    # Step 3: Find the first index that has a positive value\n    for i in range(n):\n        if arr[i] > 0:\n            return i + 1\n\n    # If all indices are negative, then the first missing positive is n + 1\n    return n + 1", "test_list": ["assert first_Missing_Positive([1,2,3,-1,5],5) == 4", "assert first_Missing_Positive([0,-1,-2,1,5,8],6) == 2", "assert first_Missing_Positive([0,1,2,5,-8],5) == 3"], "challenge_test_list": [], "reference_code": "def first_Missing_Positive(arr,n): \r\n    ptr = 0\r\n    for i in range(n):\r\n        if arr[i] == 1:\r\n            ptr = 1\r\n            break\r\n    if ptr == 0:\r\n        return(1)\r\n    for i in range(n):\r\n        if arr[i] <= 0 or arr[i] > n:\r\n            arr[i] = 1\r\n    for i in range(n):\r\n        arr[(arr[i] - 1) % n] += n\r\n    for i in range(n):\r\n        if arr[i] <= n:\r\n            return(i + 1)\r\n    return(n + 1)"}
{"task_id": "190", "prompt": "Write a python function to count the number of integral co-ordinates that lie inside a square.", "completion": "def count_Intgral_Points(x1, y1, x2, y2): \n    # Ensure that the coordinates are in the correct order\n    if x1 >= x2 or y1 >= y2:\n        return 0\n    \n    # Calculate the number of integral points inside the square\n    return (x2 - x1 - 1) * (y2 - y1 - 1)\n\n# The following code is for testing purposes and should not be included in the final implementation.\nimport pytest\n\ndef test_basic_functionality():\n    assert count_Intgral_Points(0, 0, 3, 3) == 4, \"Should be 4 integral points inside the square\"\n    assert count_Intgral_Points(1, 1, 5, 5) == 9, \"Should be 9 integral points inside the square\"\n    assert count_Intgral_Points(-2, -2, 2, 2) == 16, \"Should be 16 integral points inside the square\"\n    assert count_Intgral_Points(0, 0, 1, 1) == 0, \"Should be 0 integral points inside the square\"\n\ndef test_edge_cases():\n    assert count_Intgral_Points(0, 0, 2, 2) == 0, \"Should be 0 integral points for a square of size 2x2\"\n    assert count_Intgral_Points(1, 1, 1, 1) == 0, \"Should be 0 integral points for a point square\"\n    assert count_Intgral_Points(0, 0, 0, 0) == 0, \"Should be 0 integral points for an empty square\"\n    assert count_Intgral_Points(-1, -1, 1, 1) == 4, \"Should be 4 integral points inside the square\"\n\ndef test_exceptions():\n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        count_Intgral_Points(\"a\", 0, 1, 1)\n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        count_Intgral_Points(0, 0, \"b\", 1)\n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        count_Intgral_Points(0, 0, 1, \"c\")\n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        count_Intgral_Points(\"a\", \"b\", \"c\", \"d\")\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert count_Intgral_Points(1,1,4,4) == 4", "assert count_Intgral_Points(1,2,1,2) == 1", "assert count_Intgral_Points(4,2,6,4) == 1"], "challenge_test_list": [], "reference_code": "def count_Intgral_Points(x1,y1,x2,y2): \r\n    return ((y2 - y1 - 1) * (x2 - x1 - 1)) "}
{"task_id": "191", "prompt": "Write a function to check whether the given month name contains 30 days or not.", "completion": "def check_monthnumber(monthname3):\n    if not isinstance(monthname3, str):\n        raise TypeError(\"Input must be a string\")\n    \n    monthname3 = monthname3.strip()\n    \n    if monthname3 == \"\":\n        return False\n    \n    return monthname3 in [\"April\", \"June\", \"September\", \"November\"]", "test_list": ["assert check_monthnumber(\"February\")==False", "assert check_monthnumber(\"June\")==True", "assert check_monthnumber(\"April\")==True"], "challenge_test_list": [], "reference_code": "def check_monthnumber(monthname3):\r\n  if monthname3 ==\"April\" or monthname3== \"June\" or monthname3== \"September\" or monthname3== \"November\":\r\n    return True\r\n  else:\r\n    return False"}
{"task_id": "192", "prompt": "Write a python function to check whether a string has atleast one letter and one number.", "completion": "def check_String(s): \n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n    \n    flag_l = False\n    flag_n = False\n    for i in s: \n        if i.isalpha(): \n            flag_l = True  \n        if i.isdigit(): \n            flag_n = True\n        if flag_l and flag_n:  # Early exit if both flags are True\n            return True\n            \n    return flag_l and flag_n", "test_list": ["assert check_String('thishasboth29') == True", "assert check_String('python') == False", "assert check_String ('string') == False"], "challenge_test_list": [], "reference_code": "def check_String(str): \r\n    flag_l = False\r\n    flag_n = False\r\n    for i in str: \r\n        if i.isalpha(): \r\n            flag_l = True  \r\n        if i.isdigit(): \r\n            flag_n = True\r\n    return flag_l and flag_n "}
{"task_id": "193", "prompt": "Write a function to remove the duplicates from the given tuple.", "completion": "def remove_tuple(test_tup):\n    if not isinstance(test_tup, tuple):\n        raise TypeError(\"Input must be a tuple\")\n    res = tuple(dict.fromkeys(test_tup))\n    return res", "test_list": ["assert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)", "assert remove_tuple((2, 3, 4, 4, 5, 6, 6, 7, 8, 8)) == (2, 3, 4, 5, 6, 7, 8)", "assert remove_tuple((11, 12, 13, 11, 11, 12, 14, 13)) == (11, 12, 13, 14)"], "challenge_test_list": [], "reference_code": "def remove_tuple(test_tup):\r\n  res = tuple(set(test_tup))\r\n  return (res) "}
{"task_id": "194", "prompt": "Write a python function to convert octal number to decimal number.", "completion": "import pytest\n\ndef octal_To_Decimal(n):\n    # Check if the input is a valid octal number\n    if isinstance(n, str):\n        if not n.isdigit() or any(digit not in '01234567' for digit in n):\n            raise ValueError(f\"invalid literal for int() with base 10: '{n}'\")\n        n = int(n)\n    elif n < 0 or any(digit in str(n) for digit in '89'):\n        raise ValueError(f\"invalid literal for int() with base 10: '{n}'\")\n    \n    num = n\n    dec_value = 0\n    base = 1\n    temp = num\n    while temp:\n        last_digit = temp % 10\n        temp = int(temp / 10)\n        dec_value += last_digit * base\n        base = base * 8\n    return dec_value\n\n# Test cases\ndef test_basic_functionality():\n    assert octal_To_Decimal(10) == 8, \"Should convert octal 10 to decimal 8\"\n    assert octal_To_Decimal(17) == 15, \"Should convert octal 17 to decimal 15\"\n    assert octal_To_Decimal(20) == 16, \"Should convert octal 20 to decimal 16\"\n    assert octal_To_Decimal(77) == 63, \"Should convert octal 77 to decimal 63\"\n    assert octal_To_Decimal(100) == 64, \"Should convert octal 100 to decimal 64\"\n\ndef test_edge_cases():\n    assert octal_To_Decimal(0) == 0, \"Should convert octal 0 to decimal 0\"\n    assert octal_To_Decimal(1) == 1, \"Should convert octal 1 to decimal 1\"\n    assert octal_To_Decimal(7) == 7, \"Should convert octal 7 to decimal 7\"\n    assert octal_To_Decimal(10) == 8, \"Should convert octal 10 to decimal 8\"\n    assert octal_To_Decimal(1000) == 512, \"Should convert octal 1000 to decimal 512\"\n\ndef test_exceptions():\n    with pytest.raises(ValueError, match=\"invalid literal for int() with base 10: 'abc'\"):\n        octal_To_Decimal('abc')\n    \n    with pytest.raises(ValueError, match=\"invalid literal for int() with base 10: '-10'\"):\n        octal_To_Decimal(-10)\n    \n    with pytest.raises(ValueError, match=\"invalid literal for int() with base 10: '8'\"):\n        octal_To_Decimal(8)\n    \n    with pytest.raises(ValueError, match=\"invalid literal for int()", "test_list": ["assert octal_To_Decimal(25) == 21", "assert octal_To_Decimal(30) == 24", "assert octal_To_Decimal(40) == 32"], "challenge_test_list": [], "reference_code": "def octal_To_Decimal(n):  \r\n    num = n; \r\n    dec_value = 0; \r\n    base = 1; \r\n    temp = num; \r\n    while (temp): \r\n        last_digit = temp % 10; \r\n        temp = int(temp / 10); \r\n        dec_value += last_digit*base; \r\n        base = base * 8; \r\n    return dec_value; "}
{"task_id": "195", "prompt": "Write a python function to find the first position of an element in a sorted array.", "completion": "def first(arr, x, n):\n    if arr is None or x is None or n is None:\n        raise TypeError(\"Arguments cannot be None\")\n    \n    low = 0\n    high = n - 1\n    res = -1  \n    while low <= high:\n        mid = (low + high) // 2 \n        if arr[mid] > x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            res = mid\n            high = mid - 1\n    return res", "test_list": ["assert first([1,2,3,4,5,6,6],6,6) == 5", "assert first([1,2,2,2,3,2,2,4,2],2,9) == 1", "assert first([1,2,3],1,3) == 0"], "challenge_test_list": [], "reference_code": "def first(arr,x,n): \r\n    low = 0\r\n    high = n - 1\r\n    res = -1  \r\n    while (low <= high):\r\n        mid = (low + high) // 2 \r\n        if arr[mid] > x:\r\n            high = mid - 1\r\n        elif arr[mid] < x:\r\n            low = mid + 1\r\n        else:\r\n            res = mid\r\n            high = mid - 1\r\n    return res"}
{"task_id": "196", "prompt": "Write a function to remove all the tuples with length k.", "completion": "def remove_tuples(test_list, K):\n    if not isinstance(test_list, list) or not isinstance(K, int):\n        raise TypeError(\"Invalid input types\")\n    res = [ele for ele in test_list if len(ele) != K]\n    return res", "test_list": ["assert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]", "assert remove_tuples([(4, 5), (4,5), (6, 7), (1, 2, 3), (3, 4, 6, 7)] ,2) == [(1, 2, 3), (3, 4, 6, 7)]", "assert remove_tuples([(1, 4, 4), (4, 3), (8, 6, 7), (1, ), (3, 6, 7)] , 3) == [(4, 3), (1,)]"], "challenge_test_list": [], "reference_code": "def remove_tuples(test_list, K):\r\n  res = [ele for ele in test_list if len(ele) != K]\r\n  return (res) "}
{"task_id": "197", "prompt": "Write a function to perform the exponentiation of the given two tuples.", "completion": "def find_exponentio(test_tup1, test_tup2):\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"not enough values to unpack\")\n    res = tuple(ele1 ** ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n    return res", "test_list": ["assert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)", "assert find_exponentio((11, 5, 6, 7), (6, 7, 8, 6)) == (1771561, 78125, 1679616, 117649)", "assert find_exponentio((12, 6, 7, 8), (7, 8, 9, 7)) == (35831808, 1679616, 40353607, 2097152)"], "challenge_test_list": [], "reference_code": "def find_exponentio(test_tup1, test_tup2):\r\n  res = tuple(ele1 ** ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res)\r\n"}
{"task_id": "198", "prompt": "Write a function to find the largest triangle that can be inscribed in an ellipse.", "completion": "import math\n\ndef largest_triangle(a, b): \n    if a < 0 or b < 0: \n        return -1 \n    # The area of the largest triangle inscribed in an ellipse is given by the formula:\n    area = (3 * math.sqrt(3) * a * b) / 4\n    return area", "test_list": ["assert largest_triangle(4,2)==10.392304845413264", "assert largest_triangle(5,7)==4.639421805988064", "assert largest_triangle(9,1)==105.2220865598093"], "challenge_test_list": [], "reference_code": "import math\r\ndef largest_triangle(a,b): \r\n    if (a < 0 or b < 0): \r\n        return -1 \r\n    area = (3 * math.sqrt(3) * pow(a, 2)) / (4 * b);  \r\n    return area "}
{"task_id": "199", "prompt": "Write a python function to find highest power of 2 less than or equal to given number.", "completion": "def highest_Power_of_2(n):\n    if not isinstance(n, int):\n        raise TypeError(\"unsupported operand type\")\n    \n    if n < 1:\n        return 0\n    \n    power = 1\n    while power <= n:\n        power <<= 1\n    return power >> 1", "test_list": ["assert highest_Power_of_2(10) == 8", "assert highest_Power_of_2(19) == 16", "assert highest_Power_of_2(32) == 32"], "challenge_test_list": [], "reference_code": "def highest_Power_of_2(n): \r\n    res = 0; \r\n    for i in range(n, 0, -1):  \r\n        if ((i & (i - 1)) == 0): \r\n            res = i; \r\n            break;      \r\n    return res; "}
{"task_id": "200", "prompt": "Write a function to find all index positions of the maximum values in a given list.", "completion": "def position_max(list1):\n    if not isinstance(list1, list):\n        raise TypeError(\"object is not iterable\")\n    \n    if len(list1) == 0:\n        return []\n    \n    try:\n        max_val = max(list1)\n    except TypeError:\n        raise TypeError(\"unsupported operand type(s) for max()\")\n    \n    max_result = [i for i, j in enumerate(list1) if j == max_val]\n    return max_result", "test_list": ["assert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]", "assert position_max([1,2,2,2,4,4,4,5,5,5,5])==[7,8,9,10]", "assert position_max([2,1,5,6,8,3,4,9,10,11,8,12])==[11]"], "challenge_test_list": [], "reference_code": "def position_max(list1):\r\n    max_val = max(list1)\r\n    max_result = [i for i, j in enumerate(list1) if j == max_val]\r\n    return max_result"}
{"task_id": "201", "prompt": "Write a python function to check whether the elements in a list are same or not.", "completion": "def chkList(lst):\n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list\")\n    return len(set(lst)) <= 1", "test_list": ["assert chkList(['one','one','one']) == True", "assert chkList(['one','Two','Three']) == False", "assert chkList(['bigdata','python','Django']) == False"], "challenge_test_list": [], "reference_code": "def chkList(lst): \r\n    return len(set(lst)) == 1"}
{"task_id": "202", "prompt": "Write a function to remove even characters in a string.", "completion": "def remove_even(str1):\n    if not isinstance(str1, str):\n        raise TypeError(f\"must be str, not {type(str1).__name__}\")\n    \n    return ''.join(str1[i] for i in range(len(str1)) if i % 2 == 0)", "test_list": ["assert remove_even(\"python\")==(\"pto\")", "assert remove_even(\"program\")==(\"porm\")", "assert remove_even(\"language\")==(\"lnug\")"], "challenge_test_list": [], "reference_code": "def remove_even(str1):\r\n str2 = ''\r\n for i in range(1, len(str1) + 1):\r\n    if(i % 2 != 0):\r\n        str2 = str2 + str1[i - 1]\r\n return str2"}
{"task_id": "203", "prompt": "Write a python function to find the hamming distance between given two integers.", "completion": "def hamming_Distance(n1, n2):\n    if not isinstance(n1, int) or not isinstance(n2, int):\n        raise TypeError(\"unsupported operand type(s) for ^: 'int' and 'str'\")\n    \n    x = n1 ^ n2  \n    setBits = 0\n    while x > 0: \n        setBits += x & 1\n        x >>= 1\n    return setBits", "test_list": ["assert hamming_Distance(4,8) == 2", "assert hamming_Distance(2,4) == 2", "assert hamming_Distance(1,2) == 2"], "challenge_test_list": [], "reference_code": "def hamming_Distance(n1,n2) : \r\n    x = n1 ^ n2  \r\n    setBits = 0\r\n    while (x > 0) : \r\n        setBits += x & 1\r\n        x >>= 1\r\n    return setBits  "}
{"task_id": "204", "prompt": "Write a python function to count the occurrence of a given character in a string.", "completion": "def count(s, c):\n    if not isinstance(s, str) or not isinstance(c, str) or len(c) != 1:\n        raise TypeError(\"string indices must be integers\")\n    \n    return s.count(c)", "test_list": ["assert count(\"abcc\",\"c\") == 2", "assert count(\"ababca\",\"a\") == 3", "assert count(\"mnmm0pm\",\"m\") == 4"], "challenge_test_list": [], "reference_code": "def count(s,c) : \r\n    res = 0 \r\n    for i in range(len(s)) : \r\n        if (s[i] == c): \r\n            res = res + 1\r\n    return res "}
{"task_id": "205", "prompt": "Write a function to find the inversions of tuple elements in the given tuple list.", "completion": "def inversion_elements(test_tup):\n    if not all(isinstance(x, int) for x in test_tup):\n        raise TypeError(\"unsupported operand type\")\n    return tuple(-x - 1 for x in test_tup)", "test_list": ["assert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)", "assert inversion_elements((2, 4, 5, 6, 1, 7)) == (-3, -5, -6, -7, -2, -8)", "assert inversion_elements((8, 9, 11, 14, 12, 13)) == (-9, -10, -12, -15, -13, -14)"], "challenge_test_list": [], "reference_code": "def inversion_elements(test_tup):\r\n  res = tuple(list(map(lambda x: ~x, list(test_tup))))\r\n  return (res) "}
{"task_id": "206", "prompt": "Write a function to perform the adjacent element concatenation in the given tuples.", "completion": "def concatenate_elements(test_tup):\n    if len(test_tup) < 2:\n        return ()\n    if any(not isinstance(i, str) for i in test_tup):\n        raise TypeError(\"can't concat str to int\")\n    res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n    return res", "test_list": ["assert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')", "assert concatenate_elements((\"RES \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"QESR\")) == ('RES IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL QESR')", "assert concatenate_elements((\"MSAM\", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"SKD\")) == ('MSAMIS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL SKD')"], "challenge_test_list": [], "reference_code": "def concatenate_elements(test_tup):\r\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) "}
{"task_id": "207", "prompt": "Write a function to count the longest repeating subsequences such that the two subsequences don’t have same string characters at same positions.", "completion": "def find_longest_repeating_subseq(str):\n    if not isinstance(str, str):\n        raise TypeError(\"expected a string\")\n    \n    n = len(str)\n    dp = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    \n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if str[i - 1] == str[j - 1] and i != j:\n                dp[i][j] = 1 + dp[i - 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i - 1][j])\n    \n    return dp[n][n]", "test_list": ["assert find_longest_repeating_subseq(\"AABEBCDD\") == 3", "assert find_longest_repeating_subseq(\"aabb\") == 2", "assert find_longest_repeating_subseq(\"aab\") == 1"], "challenge_test_list": [], "reference_code": "def find_longest_repeating_subseq(str): \r\n\tn = len(str) \r\n\tdp = [[0 for k in range(n+1)] for l in range(n+1)] \r\n\tfor i in range(1, n+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\tif (str[i-1] == str[j-1] and i != j): \r\n\t\t\t\tdp[i][j] = 1 + dp[i-1][j-1] \r\n\t\t\telse: \r\n\t\t\t\tdp[i][j] = max(dp[i][j-1], dp[i-1][j]) \r\n\treturn dp[n][n]"}
{"task_id": "208", "prompt": "Write a function to check the given decimal with a precision of 2 by using regex.", "completion": "import re\n\ndef is_decimal(num):\n    num_fetch = re.compile(r\"^(0|[1-9][0-9]*)(\\.[0-9]{1,2})?$\")\n    result = num_fetch.match(num)\n    return bool(result)", "test_list": ["assert is_decimal('123.11') == True", "assert is_decimal('0.21') == True", "assert is_decimal('123.1214') == False"], "challenge_test_list": [], "reference_code": "import re\r\ndef is_decimal(num):\r\n  num_fetch = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\r\n  result = num_fetch.search(num)\r\n  return bool(result)"}
{"task_id": "209", "prompt": "Write a function to delete the smallest element from the given heap and then insert a new item.", "completion": "import heapq as hq\n\ndef heap_replace(heap, a):\n    if not isinstance(heap, list):\n        raise TypeError(\"must be a list\")\n    if len(heap) == 0:\n        raise ValueError(\"heap is empty\")\n    \n    hq.heapify(heap)\n    return hq.heapreplace(heap, a)", "test_list": ["assert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]", "assert heap_replace([25, 44, 68, 21, 39, 23, 89],110)== [23, 25, 68, 44, 39, 110, 89]", "assert heap_replace([25, 44, 68, 21, 39, 23, 89],500)==[23, 25, 68, 44, 39, 500, 89]"], "challenge_test_list": [], "reference_code": "import heapq as hq\r\ndef heap_replace(heap,a):\r\n  hq.heapify(heap)\r\n  hq.heapreplace(heap, a)\r\n  return heap"}
{"task_id": "210", "prompt": "Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.", "completion": "import re\n\ndef is_allowed_specific_char(string):\n    if not isinstance(string, str):\n        raise TypeError(\"expected string or bytes-like object\")\n    get_char = re.compile(r'[^a-zA-Z0-9.]')\n    return not bool(get_char.search(string))", "test_list": ["assert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True", "assert is_allowed_specific_char(\"*&%@#!}{\") == False", "assert is_allowed_specific_char(\"HELLOhowareyou98765\") == True"], "challenge_test_list": [], "reference_code": "import re\r\ndef is_allowed_specific_char(string):\r\n    get_char = re.compile(r'[^a-zA-Z0-9.]')\r\n    string = get_char.search(string)\r\n    return not bool(string)"}
{"task_id": "211", "prompt": "Write a python function to count numbers whose oth and nth bits are set.", "completion": "import pytest\n\ndef count_Num(n):\n    if n < 0:\n        raise ValueError(\"negative integer\")\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    # The number of valid numbers with both 0th and nth bits set is 2^(n-2)\n    count = pow(2, n - 2)\n    return count\n\n# Test cases\ndef test_basic_functionality():\n    assert count_Num(1) == 1, \"Should return 1 for n=1\"\n    assert count_Num(2) == 1, \"Should return 1 for n=2\"\n    assert count_Num(3) == 2, \"Should return 2 for n=3\"\n    assert count_Num(4) == 4, \"Should return 4 for n=4\"\n    assert count_Num(5) == 8, \"Should return 8 for n=5\"\n\ndef test_edge_cases():\n    assert count_Num(0) == 0, \"Should return 0 for n=0 (no bits set)\"\n    assert count_Num(10) == 256, \"Should return 256 for n=10\"\n    assert count_Num(20) == 1048576, \"Should return 1048576 for n=20\"\n\ndef test_exceptions():\n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        count_Num(\"string\")\n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        count_Num(None)\n    with pytest.raises(ValueError, match=\"negative integer\"):\n        count_Num(-1)\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert count_Num(2) == 1", "assert count_Num(3) == 2", "assert count_Num(1) == 1"], "challenge_test_list": [], "reference_code": "def count_Num(n): \r\n    if (n == 1): \r\n        return 1\r\n    count = pow(2,n - 2) \r\n    return count "}
{"task_id": "212", "prompt": "Write a python function to find the sum of fourth power of n natural numbers.", "completion": "def fourth_Power_Sum(n):\n    if not isinstance(n, int) or n < 0:\n        raise TypeError(\"unsupported operand type\")\n    \n    return sum(i**4 for i in range(1, n + 1))", "test_list": ["assert fourth_Power_Sum(2) == 17", "assert fourth_Power_Sum(4) == 354", "assert fourth_Power_Sum(6) == 2275"], "challenge_test_list": [], "reference_code": "import math  \r\ndef fourth_Power_Sum(n): \r\n    sum = 0\r\n    for i in range(1,n+1) : \r\n        sum = sum + (i*i*i*i) \r\n    return sum"}
{"task_id": "213", "prompt": "Write a function to perform the concatenation of two string tuples.", "completion": "def concatenate_strings(test_tup1, test_tup2):\n    # Check if both inputs are tuples\n    if not isinstance(test_tup1, tuple) or not isinstance(test_tup2, tuple):\n        raise TypeError(\"tuple indices must be integers or slices, not str\")\n    \n    # Check if both tuples have the same length\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"not enough values to unpack\")\n    \n    # Perform concatenation of corresponding elements\n    res = tuple(str(ele1) + str(ele2) for ele1, ele2 in zip(test_tup1, test_tup2))\n    return res", "test_list": ["assert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')", "assert concatenate_strings((\"Shaik\", \"Ayesha\", \"Sanya\"), (\" Dawood\", \" Begum\", \" Singh\")) == ('Shaik Dawood', 'Ayesha Begum', 'Sanya Singh')", "assert concatenate_strings((\"Harpreet\", \"Priyanka\", \"Muskan\"), (\"Kour\", \" Agarwal\", \"Sethi\")) == ('HarpreetKour', 'Priyanka Agarwal', 'MuskanSethi')"], "challenge_test_list": [], "reference_code": "def concatenate_strings(test_tup1, test_tup2):\r\n  res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) "}
{"task_id": "214", "prompt": "Write a function to convert radians to degrees.", "completion": "import math\n\ndef degree_radian(radian):\n    if not isinstance(radian, (int, float)):\n        raise TypeError(\"unsupported operand type(s) for *: 'float' and 'str'\")\n    degree = radian * (180 / math.pi)\n    return degree", "test_list": ["assert degree_radian(90)==5156.620156177409", "assert degree_radian(60)==3437.746770784939", "assert degree_radian(120)==6875.493541569878"], "challenge_test_list": [], "reference_code": "import math\r\ndef degree_radian(radian):\r\n degree = radian*(180/math.pi)\r\n return degree"}
{"task_id": "215", "prompt": "Write a function to decode a run-length encoded given list.", "completion": "def decode_list(alist):\n    if not isinstance(alist, list):\n        raise TypeError(\"expected a list or a valid run-length encoding format\")\n    \n    result = []\n    i = 0\n    while i < len(alist):\n        if isinstance(alist[i], int) and i + 1 < len(alist) and isinstance(alist[i + 1], str):\n            count = alist[i]\n            char = alist[i + 1]\n            if count < 0:\n                raise ValueError(\"count must be non-negative\")\n            result.extend([char] * count)\n            i += 2\n        else:\n            raise TypeError(\"expected a list or a valid run-length encoding format\")\n    \n    return result", "test_list": ["assert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]", "assert decode_list(['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y'])==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y']", "assert decode_list(['p', 'y', 't', 'h', 'o', 'n'])==['p', 'y', 't', 'h', 'o', 'n']"], "challenge_test_list": [], "reference_code": "def decode_list(alist):\r\n    def aux(g):\r\n        if isinstance(g, list):\r\n            return [(g[1], range(g[0]))]\r\n        else:\r\n            return [(g, [0])]\r\n    return [x for g in alist for x, R in aux(g) for i in R]"}
{"task_id": "216", "prompt": "Write a function to check if a nested list is a subset of another nested list.", "completion": "def check_subset_list(list1, list2):\n    if not isinstance(list1, list) or not isinstance(list2, list):\n        raise TypeError(\"Both arguments must be lists.\")\n    \n    for item in list1:\n        if not isinstance(item, list):\n            raise TypeError(\"All elements of the first list must be lists.\")\n    \n    for item in list2:\n        if not isinstance(item, list):\n            raise TypeError(\"All elements of the second list must be lists.\")\n    \n    return all(item in list2 for item in list1)", "test_list": ["assert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False", "assert check_subset_list([[2, 3, 1], [4, 5], [6, 8]],[[4, 5], [6, 8]])==True", "assert check_subset_list([['a', 'b'], ['e'], ['c', 'd']],[['g']])==False"], "challenge_test_list": [], "reference_code": "def check_subset_list(list1, list2): \r\n    l1, l2 = list1[0], list2[0] \r\n    exist = True\r\n    for i in list2: \r\n        if i not in list1: \r\n            exist = False\r\n    return exist "}
{"task_id": "217", "prompt": "Write a python function to find the first repeated character in a given string.", "completion": "def first_Repeated_Char(s):\n    if not isinstance(s, str):\n        raise TypeError(\"expected a string\")\n    \n    h = {}\n    for ch in s:\n        if ch in h:\n            return ch\n        else:\n            h[ch] = 0\n    return '\\0'", "test_list": ["assert first_Repeated_Char(\"Google\") == \"o\"", "assert first_Repeated_Char(\"data\") == \"a\"", "assert first_Repeated_Char(\"python\") == '\\0'"], "challenge_test_list": [], "reference_code": "def first_Repeated_Char(str): \r\n    h = {}\r\n    for ch in str:\r\n        if ch in h: \r\n            return ch;\r\n        else: \r\n            h[ch] = 0\r\n    return '\\0'"}
{"task_id": "218", "prompt": "Write a python function to find the minimum operations required to make two numbers equal.", "completion": "import math\n\ndef min_Operations(A, B):\n    # Handle edge cases where either A or B is zero\n    if A == 0 and B == 0:\n        return 0\n    if A == 0 or B == 0:\n        return 0  # If one is zero, we ignore it as per the requirements\n\n    # Ensure A is the smaller number\n    if A > B:\n        A, B = B, A\n\n    # Calculate the number of operations needed\n    # We need to find how many times we can subtract A from B until they are equal\n    # This is equivalent to finding the difference divided by the gcd\n    operations = (B - A) // math.gcd(A, B)\n    \n    return operations\n\n# Test cases\nimport pytest\n\ndef test_basic_functionality():\n    assert min_Operations(5, 10) == 1, \"Expected 1 operation to make 5 and 10 equal\"\n    assert min_Operations(10, 5) == 1, \"Expected 1 operation to make 10 and 5 equal\"\n    assert min_Operations(6, 9) == 2, \"Expected 2 operations to make 6 and 9 equal\"\n    assert min_Operations(1, 1) == 0, \"Expected 0 operations for equal numbers\"\n    assert min_Operations(2, 4) == 1, \"Expected 1 operation to make 2 and 4 equal\"\n\ndef test_edge_cases():\n    assert min_Operations(0, 0) == 0, \"Expected 0 operations for both numbers being zero\"\n    assert min_Operations(1, 0) == 0, \"Expected 0 operations for 1 and 0 (0 is ignored)\"\n    assert min_Operations(0, 1) == 0, \"Expected 0 operations for 0 and 1 (0 is ignored)\"\n    assert min_Operations(1, 2) == 1, \"Expected 1 operation to make 1 and 2 equal\"\n    assert min_Operations(1000000, 2000000) == 1, \"Expected 1 operation for large numbers\"\n\ndef test_exceptions():\n    with pytest.raises(TypeError):\n        min_Operations(\"a\", 5)\n    with pytest.raises(TypeError):\n        min_Operations(5, \"b\")\n    with pytest.raises(TypeError):\n        min_Operations(None, 5)\n    with pytest.raises(TypeError):\n        min_Operations(5, None)\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert min_Operations(2,4) == 1", "assert min_Operations(4,10) == 4", "assert min_Operations(1,4) == 3"], "challenge_test_list": [], "reference_code": "import math   \r\ndef min_Operations(A,B):  \r\n    if (A > B): \r\n        swap(A,B)  \r\n    B = B // math.gcd(A,B);  \r\n    return B - 1"}
{"task_id": "219", "prompt": "Write a function to extract maximum and minimum k elements in the given tuple.", "completion": "def extract_min_max(test_tup, K):\n    if not isinstance(test_tup, tuple):\n        raise TypeError(\"tuple expected\")\n    if K < 0:\n        raise ValueError(\"K must be a positive integer\")\n    if K > len(test_tup) // 2:\n        raise ValueError(\"K must be less than or equal to half the size of the tuple\")\n\n    if K == 0 or len(test_tup) == 0:\n        return ()\n\n    sorted_tup = sorted(test_tup)\n    min_elements = sorted_tup[:K]\n    max_elements = sorted_tup[-K:]\n    \n    res = tuple(min_elements + max_elements)\n    return res", "test_list": ["assert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)", "assert extract_min_max((4, 5, 6, 1, 2, 7), 3) == (1, 2, 4, 5, 6, 7)", "assert extract_min_max((2, 3, 4, 8, 9, 11, 7), 4) == (2, 3, 4, 7, 8, 9, 11)"], "challenge_test_list": [], "reference_code": "\r\ndef extract_min_max(test_tup, K):\r\n  res = []\r\n  test_tup = list(test_tup)\r\n  temp = sorted(test_tup)\r\n  for idx, val in enumerate(temp):\r\n    if idx < K or idx >= len(temp) - K:\r\n      res.append(val)\r\n  res = tuple(res)\r\n  return (res) "}
{"task_id": "220", "prompt": "Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.", "completion": "import re\n\ndef replace_max_specialchar(text, n):\n    if not isinstance(text, str):\n        raise TypeError(\"expected a string for 'text'\")\n    if not isinstance(n, int):\n        raise TypeError(\"expected an integer for 'n'\")\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    \n    # Use a counter to track how many replacements have been made\n    def replacement(match):\n        nonlocal count\n        if count < n:\n            count += 1\n            return ':'\n        return match.group(0)  # return the original character if limit is reached\n\n    count = 0\n    return re.sub(r\"[ ,.]\", replacement, text)", "test_list": ["assert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')", "assert replace_max_specialchar('a b c,d e f',3)==('a:b:c:d e f')", "assert replace_max_specialchar('ram reshma,ram rahim',1)==('ram:reshma,ram rahim')"], "challenge_test_list": [], "reference_code": "import re\r\ndef replace_max_specialchar(text,n):\r\n return (re.sub(\"[ ,.]\", \":\", text, n))"}
{"task_id": "221", "prompt": "Write a python function to find the first even number in a given list of numbers.", "completion": "def first_even(nums):\n    if not isinstance(nums, list):\n        raise TypeError(\"Input must be a list\")\n    return next((el for el in nums if isinstance(el, (int, float)) and el % 2 == 0), -1)", "test_list": ["assert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4", "assert first_even([2, 3, 4]) == 2", "assert first_even([5, 6, 7]) == 6"], "challenge_test_list": [], "reference_code": "def first_even(nums):\r\n    first_even = next((el for el in nums if el%2==0),-1)\r\n    return first_even"}
{"task_id": "222", "prompt": "Write a function to check if all the elements in tuple have same data type or not.", "completion": "def check_type(test_tuple):\n    if not isinstance(test_tuple, tuple):\n        raise TypeError(\"Input must be a tuple\")\n    \n    if len(test_tuple) == 0:\n        return True\n    \n    first_type = type(test_tuple[0])\n    for ele in test_tuple:\n        if not isinstance(ele, first_type):\n            return False\n    return True", "test_list": ["assert check_type((5, 6, 7, 3, 5, 6) ) == True", "assert check_type((1, 2, \"4\") ) == False", "assert check_type((3, 2, 1, 4, 5) ) == True"], "challenge_test_list": [], "reference_code": "def check_type(test_tuple):\r\n  res = True\r\n  for ele in test_tuple:\r\n    if not isinstance(ele, type(test_tuple[0])):\r\n      res = False\r\n      break\r\n  return (res) "}
{"task_id": "223", "prompt": "Write a function to check for majority element in the given sorted array.", "completion": "def is_majority(arr, n, x):\n    if n == 0:\n        return False\n    i = binary_search(arr, 0, n - 1, x)\n    if i == -1:\n        return False\n    # Check if the element at index i is a majority element\n    if (i + n // 2) < n and arr[i + n // 2] == x:\n        return True\n    return False\n\ndef binary_search(arr, low, high, x):\n    if high >= low:\n        mid = (low + high) // 2\n        if (mid == 0 or x > arr[mid - 1]) and (arr[mid] == x):\n            return mid\n        elif x > arr[mid]:\n            return binary_search(arr, mid + 1, high, x)\n        else:\n            return binary_search(arr, low, mid - 1, x)\n    return -1", "test_list": ["assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True", "assert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False", "assert is_majority([1, 1, 1, 2, 2], 5, 1) == True"], "challenge_test_list": [], "reference_code": "def is_majority(arr, n, x):\r\n\ti = binary_search(arr, 0, n-1, x)\r\n\tif i == -1:\r\n\t\treturn False\r\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\r\n\t\treturn True\r\n\telse:\r\n\t\treturn False\r\ndef binary_search(arr, low, high, x):\r\n\tif high >= low:\r\n\t\tmid = (low + high)//2 \r\n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\r\n\t\t\treturn mid\r\n\t\telif x > arr[mid]:\r\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\r\n\t\telse:\r\n\t\t\treturn binary_search(arr, low, (mid -1), x)\r\n\treturn -1"}
{"task_id": "224", "prompt": "Write a python function to count set bits of a given number.", "completion": "def count_Set_Bits(n):\n    if not isinstance(n, int):\n        raise TypeError(\"unsupported operand type\")\n    \n    if n < 0:\n        n = (1 << 32) + n  # Convert negative number to its 32-bit unsigned equivalent\n    \n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count", "test_list": ["assert count_Set_Bits(2) == 1", "assert count_Set_Bits(4) == 1", "assert count_Set_Bits(6) == 2"], "challenge_test_list": [], "reference_code": "def count_Set_Bits(n): \r\n    count = 0\r\n    while (n): \r\n        count += n & 1\r\n        n >>= 1\r\n    return count "}
{"task_id": "225", "prompt": "Write a python function to find the minimum element in a sorted and rotated array.", "completion": "import pytest\n\ndef find_Min(arr, low, high):\n    if arr is None or low > high:\n        return None  # Handle None input and invalid range\n\n    while low < high:\n        mid = low + (high - low) // 2\n        if arr[mid] == arr[high]:\n            high -= 1\n        elif arr[mid] > arr[high]:\n            low = mid + 1\n        else:\n            high = mid\n\n    return arr[low]  # Return the minimum element\n\n# Test cases\ndef test_basic_functionality_sorted_rotated():\n    assert find_Min([4, 5, 6, 7, 0, 1, 2], 0, 6) == 0, \"Should return the minimum element in a rotated sorted array\"\n    assert find_Min([1, 2, 3, 4, 5], 0, 4) == 1, \"Should return the minimum element in a sorted array\"\n    assert find_Min([3, 4, 5, 1, 2], 0, 4) == 1, \"Should return the minimum element in a rotated sorted array\"\n\ndef test_edge_cases():\n    assert find_Min([1], 0, 0) == 1, \"Should return the only element in a single-element array\"\n    assert find_Min([], 0, -1) == None, \"Should handle empty array gracefully\"\n    assert find_Min([2, 2, 2, 2, 2], 0, 4) == 2, \"Should return the minimum element in an array with all identical elements\"\n\ndef test_exceptions():\n    with pytest.raises(IndexError, match=\"list index out of range\"):\n        find_Min(None, 0, 0)  # Should raise an exception for None input\n    with pytest.raises(IndexError, match=\"list index out of range\"):\n        find_Min([1, 2, 3], 0, 5)  # Should raise an exception for invalid high index\n\n# Run tests\npytest.main()", "test_list": ["assert find_Min([1,2,3,4,5],0,4) == 1", "assert find_Min([4,6,8],0,2) == 4", "assert find_Min([2,3,5,7,9],0,4) == 2"], "challenge_test_list": [], "reference_code": "def find_Min(arr,low,high): \r\n    while (low < high): \r\n        mid = low + (high - low) // 2;   \r\n        if (arr[mid] == arr[high]): \r\n            high -= 1; \r\n        elif (arr[mid] > arr[high]): \r\n            low = mid + 1; \r\n        else: \r\n            high = mid; \r\n    return arr[high]; "}
{"task_id": "226", "prompt": "Write a python function to remove the characters which have odd index values of a given string.", "completion": "def odd_values_string(s):\n    if not isinstance(s, str):\n        raise TypeError(\"expected a string\")\n    \n    result = \"\"\n    for i in range(len(s)):\n        if i % 2 == 0:\n            result += s[i]\n    return result", "test_list": ["assert odd_values_string('abcdef') == 'ace'", "assert odd_values_string('python') == 'pto'", "assert odd_values_string('data') == 'dt'"], "challenge_test_list": [], "reference_code": "def odd_values_string(str):\r\n  result = \"\" \r\n  for i in range(len(str)):\r\n    if i % 2 == 0:\r\n      result = result + str[i]\r\n  return result"}
{"task_id": "227", "prompt": "Write a function to find minimum of three numbers.", "completion": "def min_of_three(a, b, c):\n    if not all(isinstance(x, (int, float)) for x in (a, b, c)):\n        raise TypeError(\"unsupported operand type\")\n    \n    if (a <= b) and (a <= c):\n        return a\n    elif (b <= a) and (b <= c):\n        return b\n    else:\n        return c", "test_list": ["assert min_of_three(10,20,0)==0", "assert min_of_three(19,15,18)==15", "assert min_of_three(-10,-20,-30)==-30"], "challenge_test_list": [], "reference_code": "def min_of_three(a,b,c): \r\n      if (a <= b) and (a <= c): \r\n        smallest = a \r\n      elif (b <= a) and (b <= c): \r\n        smallest = b \r\n      else: \r\n        smallest = c \r\n      return smallest "}
{"task_id": "228", "prompt": "Write a python function to check whether all the bits are unset in the given range or not.", "completion": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    if l > r:\n        raise ValueError(\"Invalid range\")\n    \n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1))\n    new_num = n & num\n    return new_num == 0", "test_list": ["assert all_Bits_Set_In_The_Given_Range(4,1,2) == True", "assert all_Bits_Set_In_The_Given_Range(17,2,4) == True", "assert all_Bits_Set_In_The_Given_Range(39,4,6) == False"], "challenge_test_list": [], "reference_code": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \r\n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \r\n    new_num = n & num\r\n    if (new_num == 0): \r\n        return True\r\n    return False"}
{"task_id": "229", "prompt": "Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.", "completion": "def re_arrange_array(arr, n):\n    if arr is None or not isinstance(arr, list):\n        raise TypeError(\"unsupported operand type\")\n    if len(arr) != n:\n        raise ValueError(\"not enough values to unpack\")\n    \n    j = 0\n    for i in range(0, n):\n        if arr[i] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            j += 1\n    return arr", "test_list": ["assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]", "assert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]", "assert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]"], "challenge_test_list": [], "reference_code": "def re_arrange_array(arr, n):\r\n  j=0\r\n  for i in range(0, n):\r\n    if (arr[i] < 0):\r\n      temp = arr[i]\r\n      arr[i] = arr[j]\r\n      arr[j] = temp\r\n      j = j + 1\r\n  return arr"}
{"task_id": "230", "prompt": "Write a function to replace blank spaces with any character in a string.", "completion": "import pytest\n\ndef replace_blank(str1, char):\n    if not isinstance(str1, str):\n        raise TypeError(f\"replace_blank() argument 1 must be str, not {type(str1).__name__}\")\n    if not isinstance(char, str):\n        raise TypeError(f\"replace_blank() argument 2 must be str, not {type(char).__name__}\")\n    \n    str2 = str1.replace(' ', char)\n    return str2\n\n# Test cases\ndef test_basic_functionality():\n    assert replace_blank(\"Hello World\", \"*\") == \"Hello*World\", \"Should replace space with '*'\"\n    assert replace_blank(\"Python is great\", \"-\") == \"Python-is-great\", \"Should replace space with '-'\"\n    assert replace_blank(\"Test 123\", \"#\") == \"Test#123\", \"Should replace space with '#'\"\n\ndef test_edge_cases():\n    assert replace_blank(\"\", \"*\") == \"\", \"Empty string should return empty string\"\n    assert replace_blank(\"NoSpacesHere\", \"*\") == \"NoSpacesHere\", \"String with no spaces should remain unchanged\"\n    assert replace_blank(\"   \", \"*\") == \"***\", \"String with only spaces should be replaced with '*'\"\n\ndef test_exceptions():\n    with pytest.raises(TypeError, match=\"replace_blank() argument 1 must be str, not int\"):\n        replace_blank(123, \"*\")\n    with pytest.raises(TypeError, match=\"replace_blank() argument 2 must be str, not int\"):\n        replace_blank(\"Hello World\", 1)\n    with pytest.raises(TypeError, match=\"replace_blank() missing 1 required positional argument: 'char'\"):\n        replace_blank(\"Hello World\")\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert replace_blank(\"hello people\",'@')==(\"hello@people\")", "assert replace_blank(\"python program language\",'$')==(\"python$program$language\")", "assert replace_blank(\"blank space\",\"-\")==(\"blank-space\")"], "challenge_test_list": [], "reference_code": "def replace_blank(str1,char):\r\n str2 = str1.replace(' ', char)\r\n return str2"}
{"task_id": "231", "prompt": "Write a function to find the maximum sum in the given right triangle of numbers.", "completion": "def max_sum(tri, n):\n    if n == 0:\n        raise IndexError(\"Triangle is empty\")\n    if n == 1:\n        return tri[0][0]\n    \n    # Check for incomplete triangle\n    for i in range(n):\n        if len(tri[i]) != i + 1:\n            raise IndexError(\"Incomplete triangle\")\n\n    # Start from the second last row and move upwards\n    for i in range(n - 2, -1, -1):\n        for j in range(i + 1):\n            # Update the current cell with the maximum sum path\n            tri[i][j] += max(tri[i + 1][j], tri[i + 1][j + 1])\n    \n    return tri[0][0]\n\n# Test cases\nimport pytest\n\ndef test_basic_functionality():\n    assert max_sum([[3], [7, 4], [2, 4, 6], [8, 5, 9, 3]], 4) == 23, \"Should be 23\"\n    assert max_sum([[2], [4, 1], [1, 2, 3]], 3) == 7, \"Should be 7\"\n    assert max_sum([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10]], 4) == 22, \"Should be 22\"\n\ndef test_edge_cases():\n    assert max_sum([[1]], 1) == 1, \"Single element triangle should return that element\"\n    assert max_sum([[1], [2, 3]], 2) == 4, \"Should be 4 (1 + 3)\"\n    assert max_sum([[1], [2, 3], [4, 5, 6]], 3) == 10, \"Should be 10 (1 + 3 + 6)\"\n\ndef test_exceptions():\n    with pytest.raises(IndexError):\n        max_sum([], 0), \"Should raise IndexError for empty triangle\"\n    with pytest.raises(IndexError):\n        max_sum([[1]], 2), \"Should raise IndexError for incomplete triangle\"\n    with pytest.raises(TypeError):\n        max_sum(None, 1), \"Should raise TypeError for None input\"\n    with pytest.raises(TypeError):\n        max_sum([[1], [2, 'a']], 2), \"Should raise TypeError for invalid number in triangle\"\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert max_sum([[1], [2,1], [3,3,2]], 3) == 6", "assert max_sum([[1], [1, 2], [4, 1, 12]], 3) == 15 ", "assert max_sum([[2], [3,2], [13,23,12]], 3) == 28"], "challenge_test_list": [], "reference_code": "def max_sum(tri, n): \r\n\tif n > 1: \r\n\t\ttri[1][1] = tri[1][1]+tri[0][0] \r\n\t\ttri[1][0] = tri[1][0]+tri[0][0] \r\n\tfor i in range(2, n): \r\n\t\ttri[i][0] = tri[i][0] + tri[i-1][0] \r\n\t\ttri[i][i] = tri[i][i] + tri[i-1][i-1] \r\n\t\tfor j in range(1, i): \r\n\t\t\tif tri[i][j]+tri[i-1][j-1] >= tri[i][j]+tri[i-1][j]: \r\n\t\t\t\ttri[i][j] = tri[i][j] + tri[i-1][j-1] \r\n\t\t\telse: \r\n\t\t\t\ttri[i][j] = tri[i][j]+tri[i-1][j] \r\n\treturn (max(tri[n-1]))"}
{"task_id": "232", "prompt": "Write a function to get the n largest items from a dataset.", "completion": "import heapq\n\ndef larg_nnum(list1, n):\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"n must be a positive integer\")\n    \n    if n == 0:\n        return []\n    \n    return heapq.nlargest(n, list1) if n <= len(list1) else sorted(list1, reverse=True)", "test_list": ["assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]", "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[100,90,80,70,60]", "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[100,90,80]"], "challenge_test_list": [], "reference_code": "import heapq\r\ndef larg_nnum(list1,n):\r\n largest=heapq.nlargest(n,list1)\r\n return largest"}
{"task_id": "233", "prompt": "Write a function to find the lateral surface area of a cylinder.", "completion": "import math\n\ndef lateralsuface_cylinder(r, h):\n    if not isinstance(r, (int, float)) or not isinstance(h, (int, float)):\n        raise TypeError(\"unsupported operand type\")\n    if r < 0 or h < 0:\n        return 0\n    lateralsurface = 2 * math.pi * r * h\n    return lateralsurface", "test_list": ["assert lateralsuface_cylinder(10,5)==314.15000000000003", "assert lateralsuface_cylinder(4,5)==125.66000000000001", "assert lateralsuface_cylinder(4,10)==251.32000000000002"], "challenge_test_list": [], "reference_code": "def lateralsuface_cylinder(r,h):\r\n  lateralsurface= 2*3.1415*r*h\r\n  return lateralsurface"}
{"task_id": "234", "prompt": "Write a function to find the volume of a cube.", "completion": "def volume_cube(l):\n    if not isinstance(l, (int, float)):\n        raise TypeError(\"unsupported operand type(s) for ** or pow(): 'str' and 'int'\")\n    return l ** 3", "test_list": ["assert volume_cube(3)==27", "assert volume_cube(2)==8", "assert volume_cube(5)==125"], "challenge_test_list": [], "reference_code": "def volume_cube(l):\r\n  volume = l * l * l\r\n  return volume"}
{"task_id": "235", "prompt": "Write a python function to set all even bits of a given number.", "completion": "def even_bit_set_number(n):\n    if not isinstance(n, int):\n        raise TypeError(\"unsupported operand type\")\n    \n    # Create a mask for even bits\n    mask = 0\n    for i in range(0, 32, 2):  # Assuming a 32-bit integer\n        mask |= (1 << i)\n    \n    # Set even bits in the number\n    return n | mask\n\n# Test cases\nimport pytest\n\ndef test_basic_functionality_even_bits_set():\n    assert even_bit_set_number(0b0000) == 0b0101  # 0 -> 5\n    assert even_bit_set_number(0b0001) == 0b0101  # 1 -> 5\n    assert even_bit_set_number(0b0010) == 0b0110  # 2 -> 6\n    assert even_bit_set_number(0b0011) == 0b0111  # 3 -> 7\n    assert even_bit_set_number(0b0101) == 0b0101  # 5 -> 5\n    assert even_bit_set_number(0b1111) == 0b1111  # 15 -> 15\n\ndef test_edge_cases():\n    assert even_bit_set_number(0) == 5  # Edge case: 0 -> 5\n    assert even_bit_set_number(1) == 5  # Edge case: 1 -> 5\n    assert even_bit_set_number(2) == 6  # Edge case: 2 -> 6\n    assert even_bit_set_number(3) == 7  # Edge case: 3 -> 7\n    assert even_bit_set_number(15) == 15  # Edge case: 15 -> 15\n    assert even_bit_set_number(16) == 21  # Edge case: 16 -> 21\n\ndef test_exceptions():\n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        even_bit_set_number(\"string\")  # Invalid input: string\n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        even_bit_set_number(None)  # Invalid input: None\n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        even_bit_set_number([])  # Invalid input: list\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert even_bit_set_number(10) == 10", "assert even_bit_set_number(20) == 30", "assert even_bit_set_number(30) == 30"], "challenge_test_list": [], "reference_code": "def even_bit_set_number(n): \r\n    count = 0;res = 0;temp = n \r\n    while(temp > 0): \r\n        if (count % 2 == 1): \r\n            res |= (1 << count)\r\n        count+=1\r\n        temp >>= 1\r\n    return (n | res) "}
{"task_id": "236", "prompt": "Write a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.", "completion": "def No_of_Triangle(N, K):\n    if N < K or K <= 0 or N <= 0:\n        return -1\n    \n    # Calculate the number of K-sized triangles that can fit in an N-sized triangle\n    Tri_up = ((N - K + 1) * (N - K + 2)) // 2\n    Tri_down = ((N - 2 * K + 1) * (N - 2 * K + 2)) // 2 if N >= 2 * K else 0\n    \n    return Tri_up + Tri_down\n\n# Test cases\nimport pytest\n\ndef test_basic_functionality():\n    assert No_of_Triangle(5, 1) == 15, \"Should be 15 for N=5, K=1\"\n    assert No_of_Triangle(5, 2) == 10, \"Should be 10 for N=5, K=2\"\n    assert No_of_Triangle(6, 1) == 21, \"Should be 21 for N=6, K=1\"\n    assert No_of_Triangle(6, 2) == 15, \"Should be 15 for N=6, K=2\"\n    assert No_of_Triangle(7, 3) == 10, \"Should be 10 for N=7, K=3\"\n\ndef test_edge_cases():\n    assert No_of_Triangle(1, 1) == 0, \"Should be 0 for N=1, K=1\"\n    assert No_of_Triangle(2, 1) == 1, \"Should be 1 for N=2, K=1\"\n    assert No_of_Triangle(3, 1) == 3, \"Should be 3 for N=3, K=1\"\n    assert No_of_Triangle(3, 2) == 1, \"Should be 1 for N=3, K=2\"\n    assert No_of_Triangle(4, 2) == 3, \"Should be 3 for N=4, K=2\"\n\ndef test_exceptions():\n    assert No_of_Triangle(2, 3) == -1, \"Should return -1 for N < K\"\n    assert No_of_Triangle(-1, 1) == -1, \"Should return -1 for negative N\"\n    assert No_of_Triangle(5, -1) == -1, \"Should return -1 for negative K\"\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert No_of_Triangle(4,2) == 7", "assert No_of_Triangle(4,3) == 3", "assert No_of_Triangle(1,3) == -1"], "challenge_test_list": [], "reference_code": "def No_of_Triangle(N,K):\r\n    if (N < K):\r\n        return -1;\r\n    else:\r\n        Tri_up = 0;\r\n        Tri_up = ((N - K + 1) *(N - K + 2)) // 2;\r\n        Tri_down = 0;\r\n        Tri_down = ((N - 2 * K + 1) *(N - 2 * K + 2)) // 2;\r\n        return Tri_up + Tri_down;"}
{"task_id": "237", "prompt": "Write a function to check the occurrences of records which occur similar times in the given tuples.", "completion": "from collections import Counter \n\ndef check_occurences(test_list):\n    if test_list is None:\n        raise TypeError(\"Input cannot be None\")\n    \n    # Check for valid tuples in the list\n    for ele in test_list:\n        if not isinstance(ele, tuple):\n            raise TypeError(\"All elements in the list must be tuples\")\n        for item in ele:\n            if not isinstance(item, (int, float)):\n                raise TypeError(\"All items in the tuples must be numbers\")\n    \n    # Count occurrences of sorted tuples\n    res = dict(Counter(tuple(sorted(ele)) for ele in test_list))\n    return res", "test_list": ["assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}", "assert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}", "assert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}"], "challenge_test_list": [], "reference_code": "from collections import Counter \r\ndef check_occurences(test_list):\r\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\r\n  return  (res) "}
{"task_id": "238", "prompt": "Write a python function to count number of non-empty substrings of a given string.", "completion": "def number_of_substrings(s):\n    if not isinstance(s, str):\n        raise TypeError(\"expected a string\")\n    str_len = len(s)\n    return int(str_len * (str_len + 1) / 2)", "test_list": ["assert number_of_substrings(\"abc\") == 6", "assert number_of_substrings(\"abcd\") == 10", "assert number_of_substrings(\"abcde\") == 15"], "challenge_test_list": [], "reference_code": "def number_of_substrings(str): \r\n\tstr_len = len(str); \r\n\treturn int(str_len * (str_len + 1) / 2); "}
{"task_id": "239", "prompt": "Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.", "completion": "def get_total_number_of_sequences(m, n):\n    if m < 0 or n <= 0:\n        raise IndexError(\"Invalid input: m must be non-negative and n must be positive.\")\n    \n    T = [[0 for _ in range(n + 1)] for _ in range(m + 1)]\n    \n    for i in range(m + 1):\n        T[i][1] = i  # For sequences of length 1, we can use any number from 0 to m\n    \n    for j in range(2, n + 1):  # Start from sequences of length 2\n        for i in range(m + 1):\n            # We need to find the valid starting points for the current length j\n            for k in range(i + 1):  # k is the last element in the previous sequence\n                if k * 2 <= i:  # Check if the next element can be at least double the previous\n                    T[i][j] += T[k][j - 1]  # Add the number of sequences of length j-1 ending with k\n    \n    return T[m][n]", "test_list": ["assert get_total_number_of_sequences(10, 4) == 4", "assert get_total_number_of_sequences(5, 2) == 6", "assert get_total_number_of_sequences(16, 3) == 84"], "challenge_test_list": [], "reference_code": "def get_total_number_of_sequences(m,n): \r\n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \r\n\tfor i in range(m+1): \r\n\t\tfor j in range(n+1): \r\n\t\t\tif i==0 or j==0: \r\n\t\t\t\tT[i][j]=0\r\n\t\t\telif i<j: \r\n\t\t\t\tT[i][j]=0\r\n\t\t\telif j==1: \r\n\t\t\t\tT[i][j]=i \r\n\t\t\telse: \r\n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \r\n\treturn T[m][n]"}
{"task_id": "240", "prompt": "Write a function to replace the last element of the list with another list.", "completion": "def replace_list(list1, list2):\n    if not isinstance(list1, list):\n        raise TypeError(\"list indices must be integers or slices, not str\")\n    if not isinstance(list2, list):\n        raise TypeError(\"list indices must be integers or slices, not str\")\n    \n    list1[-1:] = list2\n    return list1", "test_list": ["assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]", "assert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]", "assert replace_list([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"]"], "challenge_test_list": [], "reference_code": "def replace_list(list1,list2):\r\n list1[-1:] = list2\r\n replace_list=list1\r\n return replace_list\r\n"}
{"task_id": "241", "prompt": "Write a function to generate a 3d array having each element as '*'.", "completion": "import pytest\n\ndef array_3d(m, n, o):\n    # Validate inputs\n    if not all(isinstance(x, int) for x in (m, n, o)):\n        raise TypeError(\"All dimensions must be integers.\")\n    if any(x < 0 for x in (m, n, o)):\n        raise ValueError(\"Dimensions must be non-negative.\")\n\n    # Generate the 3D array\n    return [[['*' for _ in range(m)] for _ in range(n)] for _ in range(o)]\n\n# Test cases\ndef test_basic_functionality():\n    result = array_3d(2, 2, 2)\n    expected = [[['*', '*'], ['*', '*']], [['*', '*'], ['*', '*']]]\n    assert result == expected, f\"Expected {expected}, but got {result}\"\n\ndef test_single_dimension():\n    result = array_3d(1, 1, 1)\n    expected = [[['*']]]\n    assert result == expected, f\"Expected {expected}, but got {result}\"\n\ndef test_two_dimensions():\n    result = array_3d(3, 2, 1)\n    expected = [[['*', '*', '*'], ['*', '*', '*']]]\n    assert result == expected, f\"Expected {expected}, but got {result}\"\n\ndef test_edge_case_empty_input():\n    result = array_3d(0, 0, 0)\n    expected = []\n    assert result == expected, f\"Expected {expected}, but got {result}\"\n\ndef test_edge_case_zero_rows():\n    result = array_3d(2, 2, 0)\n    expected = []\n    assert result == expected, f\"Expected {expected}, but got {result}\"\n\ndef test_edge_case_zero_columns():\n    result = array_3d(0, 2, 2)\n    expected = []\n    assert result == expected, f\"Expected {expected}, but got {result}\"\n\ndef test_exceptions_negative_input():\n    with pytest.raises(ValueError):\n        array_3d(-1, 2, 2)\n\ndef test_exceptions_non_integer_input():\n    with pytest.raises(TypeError):\n        array_3d(2.5, 2, 2)\n    with pytest.raises(TypeError):\n        array_3d(2, '2', 2)\n    with pytest.raises(TypeError):\n        array_3d(2, 2, None)\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]", "assert array_3d(5,3,4)==[[['*', '*', '*', '*', '*'], ['*', '*', '*', '*','*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'],['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']]]", "assert array_3d(1,2,3)==[[['*'],['*']],[['*'],['*']],[['*'],['*']]]"], "challenge_test_list": [], "reference_code": "def array_3d(m,n,o):\r\n array_3d = [[ ['*' for col in range(m)] for col in range(n)] for row in range(o)]\r\n return array_3d"}
{"task_id": "242", "prompt": "Write a function to count total characters in a string.", "completion": "def count_charac(str1):\n    if not isinstance(str1, str):\n        raise TypeError(\"expected a string\")\n    return len(str1)", "test_list": ["assert count_charac(\"python programming\")==18", "assert count_charac(\"language\")==8", "assert count_charac(\"words\")==5"], "challenge_test_list": [], "reference_code": "def count_charac(str1):\r\n total = 0\r\n for i in str1:\r\n    total = total + 1\r\n return total"}
{"task_id": "243", "prompt": "Write a function to sort the given list based on the occurrence of first element of tuples.", "completion": "def sort_on_occurence(lst):\n    if not all(isinstance(item, tuple) and len(item) == 2 for item in lst):\n        raise TypeError(\"All items in the list must be tuples of length 2.\")\n    \n    dct = {}\n    for i, j in lst:\n        dct.setdefault(i, []).append(j)\n    \n    return [(i, *dict.fromkeys(j), len(j)) for i, j in sorted(dct.items(), key=lambda x: -len(x[1]))]", "test_list": ["assert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]", "assert sort_on_occurence([('b', 'ball'), ('a', 'arm'), ('b', 'b'), ('a', 'ant')]) == [('b', 'ball', 'b', 2), ('a', 'arm', 'ant', 2)]", "assert sort_on_occurence([(2, 'Mark'), (3, 'Maze'), (2, 'Sara')]) == [(2, 'Mark', 'Sara', 2), (3, 'Maze', 1)]"], "challenge_test_list": [], "reference_code": "def sort_on_occurence(lst): \r\n\tdct = {} \r\n\tfor i, j in lst: \r\n\t\tdct.setdefault(i, []).append(j) \r\n\treturn ([(i, *dict.fromkeys(j), len(j)) \r\n\t\t\t\tfor i, j in dct.items()]) "}
{"task_id": "244", "prompt": "Write a python function to find the next perfect square greater than a given number.", "completion": "import math\n\ndef next_Perfect_Square(N):\n    if not isinstance(N, (int, float)) or N < 0:\n        raise TypeError(\"Input must be a non-negative number\")\n    \n    nextN = math.floor(math.sqrt(N)) + 1\n    return nextN * nextN", "test_list": ["assert next_Perfect_Square(35) == 36", "assert next_Perfect_Square(6) == 9", "assert next_Perfect_Square(9) == 16"], "challenge_test_list": [], "reference_code": "import math  \r\ndef next_Perfect_Square(N): \r\n    nextN = math.floor(math.sqrt(N)) + 1\r\n    return nextN * nextN "}
{"task_id": "245", "prompt": "Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.", "completion": "def max_sum(arr, n):\n    if arr is None or not isinstance(arr, list) or not isinstance(n, int):\n        raise TypeError(\"Invalid input\")\n    \n    if n == 0:\n        return float(\"-Inf\")\n    \n    # Step 1: Calculate maximum sum increasing subsequence (MSIS)\n    MSIBS = arr[:]  # Copy of the original array\n    for i in range(n):\n        for j in range(i):\n            if arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]:\n                MSIBS[i] = MSIBS[j] + arr[i]\n\n    # Step 2: Calculate maximum sum decreasing subsequence (MSDS)\n    MSDBS = arr[:]  # Copy of the original array\n    for i in range(n - 1, -1, -1):\n        for j in range(n - 1, i, -1):\n            if arr[i] > arr[j] and MSDBS[i] < MSDBS[j] + arr[i]:\n                MSDBS[i] = MSDBS[j] + arr[i]\n\n    # Step 3: Calculate the maximum sum of bi-tonic subsequence\n    max_sum = float(\"-Inf\")\n    for i in range(n):\n        max_sum = max(max_sum, MSIBS[i] + MSDBS[i] - arr[i])\n\n    return max_sum", "test_list": ["assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194", "assert max_sum([80, 60, 30, 40, 20, 10], 6) == 210", "assert max_sum([2, 3 ,14, 16, 21, 23, 29, 30], 8) == 138"], "challenge_test_list": [], "reference_code": "def max_sum(arr, n): \r\n\tMSIBS = arr[:] \r\n\tfor i in range(n): \r\n\t\tfor j in range(0, i): \r\n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \r\n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \r\n\tMSDBS = arr[:] \r\n\tfor i in range(1, n + 1): \r\n\t\tfor j in range(1, i): \r\n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \r\n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \r\n\tmax_sum = float(\"-Inf\") \r\n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \r\n\t\tmax_sum = max(max_sum, i + j - k) \r\n\treturn max_sum"}
{"task_id": "246", "prompt": "Write a function for computing square roots using the babylonian method.", "completion": "def babylonian_squareroot(number):\n    if not isinstance(number, (int, float)):\n        raise TypeError(\"unsupported operand type\")\n    if number < 0:\n        raise ValueError(\"math domain error\")\n    if number == 0:\n        return 0\n    g = number / 2.0\n    g2 = g + 1\n    while g != g2:\n        n = number / g\n        g2 = g\n        g = (g + n) / 2\n    return g", "test_list": ["assert babylonian_squareroot(10)==3.162277660168379", "assert babylonian_squareroot(2)==1.414213562373095", "assert babylonian_squareroot(9)==3.0"], "challenge_test_list": [], "reference_code": "def babylonian_squareroot(number):\r\n    if(number == 0):\r\n        return 0;\r\n    g = number/2.0;\r\n    g2 = g + 1;\r\n    while(g != g2):\r\n        n = number/ g;\r\n        g2 = g;\r\n        g = (g + n)/2;\r\n    return g;"}
{"task_id": "247", "prompt": "Write a function to find the longest palindromic subsequence in the given string.", "completion": "def lps(s):\n    if not isinstance(s, str):\n        raise TypeError(\"expected a string\")\n    \n    n = len(s)\n    if n == 0:\n        return 0\n    \n    L = [[0 for x in range(n)] for y in range(n)]\n    \n    for i in range(n):\n        L[i][i] = 1\n        \n    for cl in range(2, n + 1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if s[i] == s[j] and cl == 2:\n                L[i][j] = 2\n            elif s[i] == s[j]:\n                L[i][j] = L[i + 1][j - 1] + 2\n            else:\n                L[i][j] = max(L[i][j - 1], L[i + 1][j])\n    \n    return L[0][n - 1]", "test_list": ["assert lps(\"TENS FOR TENS\") == 5 ", "assert lps(\"CARDIO FOR CARDS\") == 7", "assert lps(\"PART OF THE JOURNEY IS PART\") == 9 "], "challenge_test_list": [], "reference_code": "def lps(str): \r\n\tn = len(str) \r\n\tL = [[0 for x in range(n)] for x in range(n)] \r\n\tfor i in range(n): \r\n\t\tL[i][i] = 1\r\n\tfor cl in range(2, n+1): \r\n\t\tfor i in range(n-cl+1): \r\n\t\t\tj = i+cl-1\r\n\t\t\tif str[i] == str[j] and cl == 2: \r\n\t\t\t\tL[i][j] = 2\r\n\t\t\telif str[i] == str[j]: \r\n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\r\n\t\t\telse: \r\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \r\n\treturn L[0][n-1]"}
{"task_id": "248", "prompt": "Write a function to calculate the harmonic sum of n-1.", "completion": "def harmonic_sum(n):\n    if n < 1:\n        raise ValueError(\"Input must be a positive integer.\")\n    return sum(1 / i for i in range(1, n))\n\n# The following tests can be used to verify the implementation\nimport pytest\n\ndef test_harmonic_sum_basic_case():\n    assert harmonic_sum(3) == pytest.approx(1.8333333333333333), \"Harmonic sum of 2 should be approximately 1.8333\"\n\ndef test_harmonic_sum_larger_n():\n    assert harmonic_sum(5) == pytest.approx(2.283333333333333), \"Harmonic sum of 4 should be approximately 2.2833\"\n\ndef test_harmonic_sum_edge_case_n_equals_1():\n    assert harmonic_sum(1) == 0, \"Harmonic sum of 0 should return 0\"\n\ndef test_harmonic_sum_edge_case_n_equals_2():\n    assert harmonic_sum(2) == 1, \"Harmonic sum of 1 should return 1\"\n\ndef test_harmonic_sum_negative_input():\n    with pytest.raises(ValueError, match=\"Input must be a positive integer.\"):\n        harmonic_sum(-1)\n\ndef test_harmonic_sum_zero_input():\n    with pytest.raises(ValueError, match=\"Input must be a positive integer.\"):\n        harmonic_sum(0)\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert harmonic_sum(7) == 2.5928571428571425", "assert harmonic_sum(4) == 2.083333333333333", "assert harmonic_sum(19) == 3.547739657143682"], "challenge_test_list": [], "reference_code": "def harmonic_sum(n):\r\n  if n < 2:\r\n    return 1\r\n  else:\r\n    return 1 / n + (harmonic_sum(n - 1)) "}
{"task_id": "249", "prompt": "Write a function to find the intersection of two arrays using lambda function.", "completion": "def intersection_array(array_nums1, array_nums2):\n    if not isinstance(array_nums1, list) or not isinstance(array_nums2, list):\n        raise TypeError(\"Both arguments must be lists\")\n    \n    result = list(filter(lambda x: x in array_nums1, array_nums2))\n    return result", "test_list": ["assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]", "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]", "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]"], "challenge_test_list": [], "reference_code": "def intersection_array(array_nums1,array_nums2):\r\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \r\n return result"}
{"task_id": "250", "prompt": "Write a python function to count the occcurences of an element in a tuple.", "completion": "def count_X(tup, x): \n    if not isinstance(tup, tuple):\n        raise TypeError(\"tuple expected\")\n    return tup.count(x)", "test_list": ["assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0", "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3", "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4"], "challenge_test_list": [], "reference_code": "def count_X(tup, x): \r\n    count = 0\r\n    for ele in tup: \r\n        if (ele == x): \r\n            count = count + 1\r\n    return count "}
{"task_id": "251", "prompt": "Write a function to insert an element before each element of a list.", "completion": "def insert_element(lst, element):\n    if not hasattr(lst, '__iter__'):\n        raise TypeError(\"expected an iterable\")\n    return [v for elt in lst for v in (element, elt)]", "test_list": ["assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] ", "assert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java'] ", "assert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad'] "], "challenge_test_list": [], "reference_code": "def insert_element(list,element):\r\n list = [v for elt in list for v in (element, elt)]\r\n return list"}
{"task_id": "252", "prompt": "Write a python function to convert complex numbers to polar coordinates.", "completion": "import cmath  \n\ndef convert(numbers):    \n    if not isinstance(numbers, complex):\n        raise TypeError(\"complex expected\")\n    num = cmath.polar(numbers)  \n    return num", "test_list": ["assert convert(1) == (1.0, 0.0)", "assert convert(4) == (4.0,0.0)", "assert convert(5) == (5.0,0.0)"], "challenge_test_list": [], "reference_code": "import cmath  \r\ndef convert(numbers):    \r\n  num = cmath.polar(numbers)  \r\n  return (num) "}
{"task_id": "253", "prompt": "Write a python function to count integers from a given list.", "completion": "import pytest\n\ndef count_integer(list1):\n    if not isinstance(list1, list):\n        raise TypeError(\"Input must be a list\")\n    \n    ctr = 0\n    for i in list1:\n        if isinstance(i, int):\n            ctr += 1\n    return ctr", "test_list": ["assert count_integer([1,2,'abc',1.2]) == 2", "assert count_integer([1,2,3]) == 3", "assert count_integer([1,1.2,4,5.1]) == 2"], "challenge_test_list": [], "reference_code": "def count_integer(list1):\r\n    ctr = 0\r\n    for i in list1:\r\n        if isinstance(i, int):\r\n            ctr = ctr + 1\r\n    return ctr"}
{"task_id": "254", "prompt": "Write a function to find all words starting with 'a' or 'e' in a given string.", "completion": "import re\n\ndef words_ae(text):\n    if not isinstance(text, str):\n        raise TypeError(\"expected a string\")\n    # Use regex to find words starting with 'a' or 'e' (case insensitive)\n    return re.findall(r'\\b[aeAE]\\w*', text)", "test_list": ["assert words_ae(\"python programe\")==['ame']", "assert words_ae(\"python programe language\")==['ame','anguage']", "assert words_ae(\"assert statement\")==['assert', 'atement']"], "challenge_test_list": [], "reference_code": "import re\r\ndef words_ae(text):\r\n list = re.findall(\"[ae]\\w+\", text)\r\n return list"}
{"task_id": "255", "prompt": "Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.", "completion": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    if not isinstance(l, (list, tuple)):\n        raise TypeError(\"argument must be a sequence\")\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n    \n    return list(combinations_with_replacement(l, n))", "test_list": ["assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]", "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]", "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]"], "challenge_test_list": [], "reference_code": "from itertools import combinations_with_replacement \r\ndef combinations_colors(l, n):\r\n    return list(combinations_with_replacement(l,n))\r"}
{"task_id": "256", "prompt": "Write a python function to count the number of prime numbers less than a given non-negative number.", "completion": "def count_Primes_nums(n):\n    if not isinstance(n, int) or n < 0:\n        raise TypeError(\"Input must be a non-negative integer\")\n    \n    if n < 2:\n        return 0\n    \n    ctr = 0\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            ctr += 1\n    return ctr", "test_list": ["assert count_Primes_nums(5) == 2", "assert count_Primes_nums(10) == 4", "assert count_Primes_nums(100) == 25"], "challenge_test_list": [], "reference_code": "def count_Primes_nums(n):\r\n    ctr = 0\r\n    for num in range(n):\r\n        if num <= 1:\r\n            continue\r\n        for i in range(2,num):\r\n            if (num % i) == 0:\r\n                break\r\n        else:\r\n            ctr += 1\r\n    return ctr"}
{"task_id": "257", "prompt": "Write a function to swap two numbers.", "completion": "def swap_numbers(a, b):\n    if isinstance(a, type(b)) or (a is None and b is None):\n        return (b, a)\n    else:\n        raise TypeError(\"Cannot swap values of different types\")", "test_list": ["assert swap_numbers(10,20)==(20,10)", "assert swap_numbers(15,17)==(17,15)", "assert swap_numbers(100,200)==(200,100)"], "challenge_test_list": [], "reference_code": "def swap_numbers(a,b):\r\n temp = a\r\n a = b\r\n b = temp\r\n return (a,b)"}
{"task_id": "258", "prompt": "Write a function to find number of odd elements in the given list using lambda function.", "completion": "def count_odd(array_nums):\n    # Check if the input is a list\n    if not isinstance(array_nums, list):\n        raise TypeError(\"Input must be a list\")\n    \n    # Check if all elements in the list are integers\n    if not all(isinstance(x, int) for x in array_nums):\n        raise TypeError(\"All elements in the list must be integers\")\n    \n    # Use filter and lambda to count odd numbers\n    count_odd = len(list(filter(lambda x: (x % 2 != 0), array_nums)))\n    return count_odd", "test_list": ["assert count_odd([1, 2, 3, 5, 7, 8, 10])==4", "assert count_odd([10,15,14,13,-18,12,-20])==2", "assert count_odd([1, 2, 4, 8, 9])==2"], "challenge_test_list": [], "reference_code": "def count_odd(array_nums):\r\n   count_odd = len(list(filter(lambda x: (x%2 != 0) , array_nums)))\r\n   return count_odd"}
{"task_id": "259", "prompt": "Write a function to maximize the given two tuples.", "completion": "def maximize_elements(test_tup1, test_tup2):\n    if not isinstance(test_tup1, tuple) or not isinstance(test_tup2, tuple):\n        raise TypeError(\"unsupported operand type\")\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"not enough values to unpack\")\n    \n    res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\n                for tup1, tup2 in zip(test_tup1, test_tup2))\n    return res", "test_list": ["assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))", "assert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))", "assert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))"], "challenge_test_list": [], "reference_code": "def maximize_elements(test_tup1, test_tup2):\r\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) "}
{"task_id": "260", "prompt": "Write a function to find the nth newman–shanks–williams prime number.", "completion": "def newman_prime(n):\n    if not isinstance(n, int) or n < 0:\n        raise TypeError(\"unsupported operand type\")\n    \n    if n == 0 or n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 8\n    elif n == 5:\n        return 16\n    elif n == 6:\n        return 32\n    elif n == 7:\n        return 64\n    elif n == 8:\n        return 128\n    \n    # For n > 8, we can use a loop to calculate the values\n    primes = [1, 1, 2, 4, 8, 16, 32, 64, 128]\n    for i in range(9, n + 1):\n        next_prime = 2 * primes[i - 1] + primes[i - 2]\n        primes.append(next_prime)\n    \n    return primes[n]", "test_list": ["assert newman_prime(3) == 7 ", "assert newman_prime(4) == 17", "assert newman_prime(5) == 41"], "challenge_test_list": [], "reference_code": "def newman_prime(n): \r\n\tif n == 0 or n == 1: \r\n\t\treturn 1\r\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)"}
{"task_id": "261", "prompt": "Write a function to perform mathematical division operation across the given tuples.", "completion": "def division_elements(test_tup1, test_tup2):\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"not enough values to unpack\")\n    \n    res = []\n    for ele1, ele2 in zip(test_tup1, test_tup2):\n        if ele2 == 0:\n            raise ZeroDivisionError(\"division by zero\")\n        res.append(ele1 // ele2)\n    \n    return tuple(res)", "test_list": ["assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)", "assert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)", "assert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)"], "challenge_test_list": [], "reference_code": "def division_elements(test_tup1, test_tup2):\r\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) "}
{"task_id": "262", "prompt": "Write a function to split a given list into two parts where the length of the first part of the list is given.", "completion": "def split_two_parts(list1, L):\n    if not isinstance(list1, list):\n        raise TypeError(\"unsupported operand type\")\n    if not isinstance(L, int):\n        raise TypeError(\"unsupported operand type\")\n    if L < 0 or L > len(list1):\n        raise IndexError(\"list index out of range\")\n    return list1[:L], list1[L:]", "test_list": ["assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])", "assert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])", "assert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])"], "challenge_test_list": [], "reference_code": "def split_two_parts(list1, L):\r\n    return list1[:L], list1[L:]"}
{"task_id": "263", "prompt": "Write a function to merge two dictionaries.", "completion": "# Import necessary modules\nimport pytest\n\ndef merge_dict(d1, d2):\n    # Create a new dictionary to hold the merged result\n    d = d1.copy()\n    \n    # Iterate through the second dictionary\n    for key, value in d2.items():\n        # Check if the value is a dictionary or a list\n        if isinstance(value, dict) or isinstance(value, list):\n            raise TypeError(f\"unhashable type: '{type(value).__name__}'\")\n        # Update the merged dictionary with the value from the second dictionary\n        d[key] = value\n    \n    return d\n\n# Test cases\ndef test_basic_functionality():\n    assert merge_dict({'a': 1, 'b': 2}, {'b': 3, 'c': 4}) == {'a': 1, 'b': 3, 'c': 4}, \"Should merge dictionaries with overlapping keys\"\n    assert merge_dict({'x': 10}, {'y': 20}) == {'x': 10, 'y': 20}, \"Should merge dictionaries with no overlapping keys\"\n    assert merge_dict({}, {'a': 1}) == {'a': 1}, \"Should return second dictionary when first is empty\"\n    assert merge_dict({'a': 1}, {}) == {'a': 1}, \"Should return first dictionary when second is empty\"\n\ndef test_edge_cases():\n    assert merge_dict({}, {}) == {}, \"Should return an empty dictionary when both inputs are empty\"\n    assert merge_dict({'a': None}, {'b': None}) == {'a': None, 'b': None}, \"Should handle None values correctly\"\n    assert merge_dict({'a': 1.5}, {'b': 2.5}) == {'a': 1.5, 'b': 2.5}, \"Should handle floating point numbers correctly\"\n\ndef test_exceptions():\n    with pytest.raises(TypeError, match=\"unhashable type: 'dict'\"):\n        merge_dict({'a': 1}, {'b': {}})  # second dict has a dict as a value\n    with pytest.raises(TypeError, match=\"unhashable type: 'list'\"):\n        merge_dict({'a': 1}, {'b': [1, 2, 3]})  # second dict has a list as a value\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}", "assert merge_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})=={'a':900,'b':900,'d':900,'a':900,'b':900,'d':900}", "assert merge_dict({'a':10,'b':20},{'x':30,'y':40})=={'x':30,'y':40,'a':10,'b':20}"], "challenge_test_list": [], "reference_code": "def merge_dict(d1,d2):\r\n d = d1.copy()\r\n d.update(d2)\r\n return d"}
{"task_id": "264", "prompt": "Write a function to calculate a dog's age in dog's years.", "completion": "def dog_age(h_age):\n    if h_age < 0:\n        exit()\n    elif h_age <= 2:\n        d_age = h_age * 10.5\n    else:\n        d_age = 21 + (h_age - 2) * 4\n    return d_age", "test_list": ["assert dog_age(12)==61", "assert dog_age(15)==73", "assert dog_age(24)==109"], "challenge_test_list": [], "reference_code": "def dog_age(h_age):\r\n if h_age < 0:\r\n \texit()\r\n elif h_age <= 2:\r\n\t d_age = h_age * 10.5\r\n else:\r\n\t d_age = 21 + (h_age - 2)*4\r\n return d_age"}
{"task_id": "265", "prompt": "Write a function to split a list for every nth element.", "completion": "import pytest\n\ndef list_split(S, step):\n    if not isinstance(S, list):\n        raise TypeError(\"S must be a list\")\n    if not isinstance(step, int):\n        raise TypeError(\"step must be an integer\")\n    if step <= 0:\n        raise ValueError(\"step must be a positive integer\")\n\n    return [S[i::step] for i in range(step)]\n\n# Test cases\ndef test_basic_functionality():\n    assert list_split([1, 2, 3, 4, 5], 2) == [[1, 3, 5], [2, 4]]\n    assert list_split(['a', 'b', 'c', 'd', 'e'], 3) == [['a', 'd'], ['b', 'e'], ['c']]\n    assert list_split([10, 20, 30, 40, 50, 60], 1) == [[10, 20, 30, 40, 50, 60]]\n    assert list_split([1, 2, 3], 3) == [[1], [2], [3]]\n\ndef test_edge_cases():\n    assert list_split([], 1) == [[]]\n    assert list_split([], 0) == [[]]\n    assert list_split([1, 2, 3, 4, 5], 0) == [[]]\n    assert list_split([1, 2, 3, 4, 5], 5) == [[1], [2], [3], [4], [5]]\n\ndef test_exceptions():\n    with pytest.raises(IndexError, match=\"list index out of range\"):\n        list_split([1, 2, 3], -1)\n    with pytest.raises(ValueError, match=\"step must be a positive integer\"):\n        list_split([1, 2, 3], 0)\n    with pytest.raises(TypeError, match=\"step must be an integer\"):\n        list_split([1, 2, 3], 'a')\n    with pytest.raises(TypeError, match=\"S must be a list\"):\n        list_split('not_a_list', 2)\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] ", "assert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]] ", "assert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']] "], "challenge_test_list": [], "reference_code": "def list_split(S, step):\r\n    return [S[i::step] for i in range(step)]"}
{"task_id": "266", "prompt": "Write a function to find the lateral surface area of a cube.", "completion": "import pytest\n\ndef lateralsurface_cube(l):\n    if not isinstance(l, (int, float)):\n        raise TypeError(\"unsupported operand type(s) for *: 'int' and 'str'\")\n    if l < 0:\n        raise ValueError(\"Length must be a non-negative number\")\n    \n    LSA = 4 * (l * l)\n    return LSA\n\n# Test cases\ndef test_basic_functionality_positive_integer():\n    assert lateralsurface_cube(3) == 36, \"Expected lateral surface area for side length 3 is 36\"\n\ndef test_basic_functionality_positive_float():\n    assert lateralsurface_cube(2.5) == 25.0, \"Expected lateral surface area for side length 2.5 is 25.0\"\n\ndef test_edge_case_zero():\n    assert lateralsurface_cube(0) == 0, \"Expected lateral surface area for side length 0 is 0\"\n\ndef test_edge_case_one():\n    assert lateralsurface_cube(1) == 4, \"Expected lateral surface area for side length 1 is 4\"\n\ndef test_exceptions_negative_input():\n    with pytest.raises(ValueError, match=\"Length must be a non-negative number\"):\n        lateralsurface_cube(-1)\n\ndef test_exceptions_non_numeric_input():\n    with pytest.raises(TypeError, match=\"unsupported operand type(s) for *: 'int' and 'str'\"):\n        lateralsurface_cube(\"a\")\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert lateralsurface_cube(5)==100", "assert lateralsurface_cube(9)==324", "assert lateralsurface_cube(10)==400"], "challenge_test_list": [], "reference_code": "def lateralsurface_cube(l):\r\n  LSA = 4 * (l * l)\r\n  return LSA"}
{"task_id": "267", "prompt": "Write a python function to find the sum of squares of first n odd natural numbers.", "completion": "def square_Sum(n):\n    if not isinstance(n, int):\n        raise TypeError(\"unsupported operand type\")\n    if n < 0:\n        raise ValueError(\"negative number\")\n    \n    return int(n * (2 * n - 1) * (2 * n + 1) / 3)\n\n# Test cases\nimport pytest\n\ndef test_basic_functionality_positive_integers():\n    assert square_Sum(1) == 1, \"Failed for n=1\"\n    assert square_Sum(2) == 5, \"Failed for n=2\"\n    assert square_Sum(3) == 14, \"Failed for n=3\"\n    assert square_Sum(4) == 30, \"Failed for n=4\"\n    assert square_Sum(5) == 55, \"Failed for n=5\"\n\ndef test_edge_cases():\n    assert square_Sum(0) == 0, \"Failed for n=0 (edge case)\"\n    assert square_Sum(10) == 385, \"Failed for n=10 (larger input)\"\n    assert square_Sum(100) == 338350, \"Failed for n=100 (large input)\"\n\ndef test_exceptions():\n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        square_Sum(\"string\")\n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        square_Sum(None)\n    with pytest.raises(ValueError, match=\"negative number\"):\n        square_Sum(-1)\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert square_Sum(2) == 10", "assert square_Sum(3) == 35", "assert square_Sum(4) == 84"], "challenge_test_list": [], "reference_code": "def square_Sum(n):  \r\n    return int(n*(4*n*n-1)/3) "}
{"task_id": "268", "prompt": "Write a function to find the n'th star number.", "completion": "import pytest\n\ndef find_star_num(n):\n    if not isinstance(n, int):\n        raise TypeError(\"unsupported operand type\")\n    if n < 0:\n        raise ValueError(\"n must be a positive integer\")\n    return (6 * n * (n - 1) + 1)\n\ndef test_basic_functionality():\n    assert find_star_num(1) == 1, \"Expected star number for n=1 is 1\"\n    assert find_star_num(2) == 7, \"Expected star number for n=2 is 7\"\n    assert find_star_num(3) == 19, \"Expected star number for n=3 is 19\"\n    assert find_star_num(4) == 37, \"Expected star number for n=4 is 37\"\n    assert find_star_num(5) == 61, \"Expected star number for n=5 is 61\"\n\ndef test_edge_cases():\n    assert find_star_num(0) == 1, \"Expected star number for n=0 is 1\"\n    assert find_star_num(10) == 181, \"Expected star number for n=10 is 181\"\n    assert find_star_num(100) == 59901, \"Expected star number for n=100 is 59901\"\n\ndef test_exceptions():\n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        find_star_num(\"string\")\n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        find_star_num(None)\n    with pytest.raises(ValueError, match=\"n must be a positive integer\"):\n        find_star_num(-1)\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert find_star_num(3) == 37", "assert find_star_num(4) == 73", "assert find_star_num(5) == 121"], "challenge_test_list": [], "reference_code": "def find_star_num(n): \r\n\treturn (6 * n * (n - 1) + 1) "}
{"task_id": "269", "prompt": "Write a function to find the ascii value of a character.", "completion": "def ascii_value(k):\n    if not isinstance(k, str):\n        raise TypeError(\"ord() expected a character, but string of length 0 found\")\n    if len(k) != 1:\n        raise TypeError(f\"ord() expected a character, but string of length {len(k)} found\")\n    return ord(k)", "test_list": ["assert ascii_value('A')==65", "assert ascii_value('R')==82", "assert ascii_value('S')==83"], "challenge_test_list": [], "reference_code": "def ascii_value(k):\r\n  ch=k\r\n  return ord(ch)"}
{"task_id": "270", "prompt": "Write a python function to find the sum of even numbers at even positions.", "completion": "import pytest\n\ndef sum_even_and_even_index(arr, n):\n    if arr is None or not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n    if n < 0:\n        raise ValueError(\"Length of the array cannot be negative\")\n    \n    total_sum = 0\n    for i in range(0, n, 2): \n        if arr[i] % 2 == 0: \n            total_sum += arr[i]  \n    return total_sum\n\n# Test cases\ndef test_sum_even_and_even_index_basic():\n    assert sum_even_and_even_index([2, 3, 4, 5, 6], 5) == 8, \"Should be 8 (2 + 6)\"\n    assert sum_even_and_even_index([1, 2, 3, 4, 5, 6], 6) == 0, \"Should be 0 (no even numbers at even indices)\"\n    assert sum_even_and_even_index([0, 1, 2, 3, 4, 5], 6) == 4, \"Should be 4 (0 + 4)\"\n\ndef test_sum_even_and_even_index_edge_cases():\n    assert sum_even_and_even_index([], 0) == 0, \"Should be 0 for empty array\"\n    assert sum_even_and_even_index([1], 1) == 0, \"Should be 0 for single odd number\"\n    assert sum_even_and_even_index([2], 1) == 2, \"Should be 2 for single even number\"\n    assert sum_even_and_even_index([2, 3], 2) == 2, \"Should be 2 for two elements with first even\"\n    assert sum_even_and_even_index([1, 2], 2) == 0, \"Should be 0 for two elements with first odd\"\n\ndef test_sum_even_and_even_index_exceptions():\n    with pytest.raises(TypeError):\n        sum_even_and_even_index(None, 0)\n    with pytest.raises(TypeError):\n        sum_even_and_even_index(\"string\", 5)\n    with pytest.raises(ValueError):\n        sum_even_and_even_index([1, 2, 3], -1)\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30", "assert sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18],10) == 26", "assert sum_even_and_even_index([5, 6, 12, 1],4) == 12"], "challenge_test_list": [], "reference_code": "def sum_even_and_even_index(arr,n):  \r\n    i = 0\r\n    sum = 0\r\n    for i in range(0,n,2): \r\n        if (arr[i] % 2 == 0) : \r\n            sum += arr[i]  \r\n    return sum"}
{"task_id": "271", "prompt": "Write a python function to find the sum of fifth power of first n even natural numbers.", "completion": "def even_Power_Sum(n):\n    if not isinstance(n, int):\n        raise TypeError(\"must be an integer\")\n    if n < 0:\n        raise ValueError(\"must be a non-negative integer\")\n    \n    total_sum = 0\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        total_sum += even_number ** 5  # Calculate the fifth power directly\n    return total_sum", "test_list": ["assert even_Power_Sum(2) == 1056", "assert even_Power_Sum(3) == 8832", "assert even_Power_Sum(1) == 32"], "challenge_test_list": [], "reference_code": "def even_Power_Sum(n): \r\n    sum = 0; \r\n    for i in range(1,n+1): \r\n        j = 2*i; \r\n        sum = sum + (j*j*j*j*j); \r\n    return sum; "}
{"task_id": "272", "prompt": "Write a function to perfom the rear element extraction from list of tuples records.", "completion": "def rear_extract(test_list):\n    if not isinstance(test_list, list):\n        raise TypeError(\"list indices must be integers or slices, not tuple\")\n    \n    res = []\n    for lis in test_list:\n        if not isinstance(lis, tuple):\n            raise TypeError(\"list indices must be integers or slices, not tuple\")\n        if len(lis) == 0:\n            raise IndexError(\"tuple index out of range\")\n        res.append(lis[-1])\n    \n    return res", "test_list": ["assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]", "assert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]", "assert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]"], "challenge_test_list": [], "reference_code": "def rear_extract(test_list):\r\n  res = [lis[-1] for lis in test_list]\r\n  return (res) "}
{"task_id": "273", "prompt": "Write a function to substract the contents of one tuple with corresponding index of other tuple.", "completion": "def substract_elements(test_tup1, test_tup2):\n    if not isinstance(test_tup1, tuple) or not isinstance(test_tup2, tuple):\n        raise TypeError(\"unsupported operand type(s) for -: 'tuple' and 'non-tuple'\")\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"not enough values to unpack\")\n    return tuple(i - j for i, j in zip(test_tup1, test_tup2))", "test_list": ["assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)", "assert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)", "assert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)"], "challenge_test_list": [], "reference_code": "def substract_elements(test_tup1, test_tup2):\r\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\r\n  return (res) "}
{"task_id": "274", "prompt": "Write a python function to find sum of even index binomial coefficients.", "completion": "import math  \n\ndef even_binomial_Coeff_Sum(n): \n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n    \n    # The sum of binomial coefficients at even indices is given by:\n    # (1 << (n - 1)) for n > 0, and 1 for n = 0\n    if n == 0:\n        return 1\n    return (1 << (n - 1)) \n\n# Test cases\nimport pytest\n\ndef test_basic_functionality():\n    assert even_binomial_Coeff_Sum(0) == 1, \"Expected sum for n=0 is 1\"\n    assert even_binomial_Coeff_Sum(1) == 1, \"Expected sum for n=1 is 1\"\n    assert even_binomial_Coeff_Sum(2) == 1, \"Expected sum for n=2 is 1\"\n    assert even_binomial_Coeff_Sum(3) == 2, \"Expected sum for n=3 is 2\"\n    assert even_binomial_Coeff_Sum(4) == 4, \"Expected sum for n=4 is 4\"\n    assert even_binomial_Coeff_Sum(5) == 8, \"Expected sum for n=5 is 8\"\n\ndef test_edge_cases():\n    assert even_binomial_Coeff_Sum(10) == 512, \"Expected sum for n=10 is 512\"\n    assert even_binomial_Coeff_Sum(20) == 524288, \"Expected sum for n=20 is 524288\"\n\ndef test_exceptions():\n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        even_binomial_Coeff_Sum(\"string\")\n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        even_binomial_Coeff_Sum(None)\n    with pytest.raises(ValueError, match=\"n must be a non-negative integer\"):\n        even_binomial_Coeff_Sum(-1)\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert even_binomial_Coeff_Sum(4) == 8", "assert even_binomial_Coeff_Sum(6) == 32", "assert even_binomial_Coeff_Sum(2) == 2"], "challenge_test_list": [], "reference_code": "import math  \r\ndef even_binomial_Coeff_Sum( n): \r\n    return (1 << (n - 1)) "}
{"task_id": "275", "prompt": "Write a python function to find the position of the last removed element from the given array.", "completion": "def get_Position(a, n, m):\n    if a is None or not isinstance(a, list) or not isinstance(n, int) or not isinstance(m, int):\n        raise TypeError(\"Invalid input types\")\n    if m == 0:\n        raise ValueError(\"m cannot be zero\")\n    \n    for i in range(n):\n        a[i] = (a[i] // m + (a[i] % m != 0))\n    \n    result, maxx = -1, -1\n    for i in range(n - 1, -1, -1):\n        if maxx < a[i]:\n            maxx = a[i]\n            result = i\n            \n    return result + 1", "test_list": ["assert get_Position([2,5,4],3,2) == 2", "assert get_Position([4,3],2,2) == 2", "assert get_Position([1,2,3,4],4,1) == 4"], "challenge_test_list": [], "reference_code": "import math as mt \r\ndef get_Position(a,n,m): \r\n    for i in range(n): \r\n        a[i] = (a[i] // m + (a[i] % m != 0))  \r\n    result,maxx = -1,-1\r\n    for i in range(n - 1,-1,-1): \r\n        if (maxx < a[i]): \r\n            maxx = a[i] \r\n            result = i \r\n    return result + 1"}
{"task_id": "276", "prompt": "Write a function to find the volume of a cylinder.", "completion": "import pytest\n\ndef volume_cylinder(r, h):\n    if r < 0 or h < 0:\n        raise ValueError(\"Radius and height must be non-negative\")\n    volume = 3.1415 * r * r * h\n    return volume\n\n# Test cases\ndef test_volume_cylinder_positive_values():\n    assert volume_cylinder(3, 5) == pytest.approx(141.37125, rel=1e-5), \"Volume should be calculated correctly for r=3, h=5\"\n    assert volume_cylinder(1, 1) == pytest.approx(3.1415, rel=1e-5), \"Volume should be calculated correctly for r=1, h=1\"\n    assert volume_cylinder(2, 10) == pytest.approx(125.663, rel=1e-5), \"Volume should be calculated correctly for r=2, h=10\"\n\ndef test_volume_cylinder_edge_cases():\n    assert volume_cylinder(0, 5) == 0, \"Volume should be 0 when radius is 0\"\n    assert volume_cylinder(3, 0) == 0, \"Volume should be 0 when height is 0\"\n    assert volume_cylinder(0, 0) == 0, \"Volume should be 0 when both radius and height are 0\"\n\ndef test_volume_cylinder_negative_values():\n    with pytest.raises(ValueError, match=\"Radius and height must be non-negative\"):\n        volume_cylinder(-1, 5)\n    with pytest.raises(ValueError, match=\"Radius and height must be non-negative\"):\n        volume_cylinder(3, -1)\n    with pytest.raises(ValueError, match=\"Radius and height must be non-negative\"):\n        volume_cylinder(-1, -1)\n\ndef test_volume_cylinder_large_values():\n    assert volume_cylinder(1000, 1000) == pytest.approx(3141500000.0, rel=1e-5), \"Volume should be calculated correctly for large values\"", "test_list": ["assert volume_cylinder(10,5)==1570.7500000000002", "assert volume_cylinder(4,5)==251.32000000000002", "assert volume_cylinder(4,10)==502.64000000000004"], "challenge_test_list": [], "reference_code": "def volume_cylinder(r,h):\r\n  volume=3.1415*r*r*h\r\n  return volume"}
{"task_id": "277", "prompt": "Write a function to filter a dictionary based on values.", "completion": "import pytest\n\ndef dict_filter(d, n):\n    # Ensure that we only compare values that are of the same type\n    result = {key: value for key, value in d.items() if isinstance(value, (int, float)) and value >= n}\n    return result\n\n# Test cases\ndef test_basic_functionality():\n    assert dict_filter({'a': 1, 'b': 2, 'c': 3}, 2) == {'b': 2, 'c': 3}, \"Should return items with values >= 2\"\n    assert dict_filter({'x': 10, 'y': 5, 'z': 0}, 5) == {'x': 10, 'y': 5}, \"Should return items with values >= 5\"\n    assert dict_filter({'apple': 3, 'banana': 1, 'cherry': 2}, 1) == {'apple': 3, 'banana': 1, 'cherry': 2}, \"Should return all items with values >= 1\"\n\ndef test_edge_cases():\n    assert dict_filter({}, 1) == {}, \"Should return an empty dictionary for empty input\"\n    assert dict_filter({'a': 0}, 0) == {'a': 0}, \"Should return the item with value equal to the threshold\"\n    assert dict_filter({'a': -1, 'b': -2, 'c': -3}, -2) == {'a': -1, 'b': -2}, \"Should return items with values >= -2\"\n\ndef test_exceptions():\n    with pytest.raises(TypeError, match=\"unhashable type: 'dict'\"):\n        dict_filter({{'a': 1}: 1}, 1)  # Invalid key type\n    with pytest.raises(TypeError, match=\"unhashable type: 'list'\"):\n        dict_filter({[1, 2]: 1}, 1)  # Invalid key type\n    with pytest.raises(TypeError, match=\"unsupported operand type(s) for >=: 'str' and 'int'\"):\n        dict_filter({'a': '1', 'b': '2'}, 1)  # Invalid value type\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}", "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}", "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}"], "challenge_test_list": [], "reference_code": "def dict_filter(dict,n):\r\n result = {key:value for (key, value) in dict.items() if value >=n}\r\n return result"}
{"task_id": "278", "prompt": "Write a function to find the element count that occurs before the record in the given tuple.", "completion": "def count_first_elements(test_tup):\n    if not isinstance(test_tup, tuple):\n        raise TypeError(\"tuple expected\")\n    \n    for count, ele in enumerate(test_tup):\n        if isinstance(ele, tuple):\n            return count\n    return len(test_tup)", "test_list": ["assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3", "assert count_first_elements((2, 9, (5, 7), 11) ) == 2", "assert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4"], "challenge_test_list": [], "reference_code": "def count_first_elements(test_tup):\r\n  for count, ele in enumerate(test_tup):\r\n    if isinstance(ele, tuple):\r\n      break\r\n  return (count) "}
{"task_id": "279", "prompt": "Write a function to find the nth decagonal number.", "completion": "import pytest\n\ndef is_num_decagonal(n):\n    if not isinstance(n, int):\n        raise TypeError(\"Input should be an integer\")\n    if n < 0:\n        raise ValueError(\"negative number\")\n    \n    return n * (4 * n - 3) // 2\n\ndef test_basic_functionality():\n    assert is_num_decagonal(1) == 1, \"The 1st decagonal number should be 1\"\n    assert is_num_decagonal(2) == 12, \"The 2nd decagonal number should be 12\"\n    assert is_num_decagonal(3) == 35, \"The 3rd decagonal number should be 35\"\n    assert is_num_decagonal(4) == 72, \"The 4th decagonal number should be 72\"\n    assert is_num_decagonal(5) == 125, \"The 5th decagonal number should be 125\"\n\ndef test_edge_cases():\n    assert is_num_decagonal(0) == 0, \"The 0th decagonal number should be 0\"\n    assert is_num_decagonal(10) == 220, \"The 10th decagonal number should be 220\"\n    assert is_num_decagonal(100) == 39400, \"The 100th decagonal number should be 39400\"\n\ndef test_exceptions():\n    with pytest.raises(TypeError, match=\"Input should be an integer\"):\n        is_num_decagonal(\"string\")\n    \n    with pytest.raises(TypeError, match=\"Input should be an integer\"):\n        is_num_decagonal(None)\n    \n    with pytest.raises(ValueError, match=\"negative number\"):\n        is_num_decagonal(-1)\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert is_num_decagonal(3) == 27", "assert is_num_decagonal(7) == 175", "assert is_num_decagonal(10) == 370"], "challenge_test_list": [], "reference_code": "def is_num_decagonal(n): \r\n\treturn 4 * n * n - 3 * n "}
{"task_id": "280", "prompt": "Write a function to search an element in the given array by using sequential search.", "completion": "def sequential_search(dlist, item):\n    if dlist is None:\n        raise TypeError(\"unsupported operand type\")\n    \n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos += 1\n    return found, pos", "test_list": ["assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)", "assert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)", "assert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)"], "challenge_test_list": [], "reference_code": "def sequential_search(dlist, item):\r\n    pos = 0\r\n    found = False\r\n    while pos < len(dlist) and not found:\r\n        if dlist[pos] == item:\r\n            found = True\r\n        else:\r\n            pos = pos + 1\r\n    return found, pos"}
{"task_id": "281", "prompt": "Write a python function to check if the elements of a given list are unique or not.", "completion": "def all_unique(test_list):\n    if not isinstance(test_list, list):\n        raise TypeError(\"Input must be a list\")\n    return len(test_list) == len(set(test_list))", "test_list": ["assert all_unique([1,2,3]) == True", "assert all_unique([1,2,1,2]) == False", "assert all_unique([1,2,3,4,5]) == True"], "challenge_test_list": [], "reference_code": "def all_unique(test_list):\r\n    if len(test_list) > len(set(test_list)):\r\n        return False\r\n    return True"}
{"task_id": "282", "prompt": "Write a function to substaract two lists using map and lambda function.", "completion": "def sub_list(nums1, nums2):\n    # Check if both inputs are lists\n    if not isinstance(nums1, list) or not isinstance(nums2, list):\n        raise TypeError(\"Both arguments must be lists\")\n    \n    # Check if the lengths of the lists are the same\n    if len(nums1) != len(nums2):\n        raise ValueError(\"Lists must be of the same length\")\n    \n    # Use map and lambda to subtract the two lists\n    result = map(lambda x, y: x - y, nums1, nums2)\n    return list(result)", "test_list": ["assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]", "assert sub_list([1,2],[3,4])==[-2,-2]", "assert sub_list([90,120],[50,70])==[40,50]"], "challenge_test_list": [], "reference_code": "def sub_list(nums1,nums2):\r\n  result = map(lambda x, y: x - y, nums1, nums2)\r\n  return list(result)"}
{"task_id": "283", "prompt": "Write a python function to check whether the frequency of each digit is less than or equal to the digit itself.", "completion": "def validate(n):\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer.\")\n    \n    digit_count = [0] * 10  # Array to count frequency of each digit\n\n    # Count the frequency of each digit in the number\n    temp = n\n    while temp > 0:\n        digit = temp % 10\n        digit_count[digit] += 1\n        temp //= 10\n\n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for i in range(10):\n        if digit_count[i] > i:\n            return False\n\n    return True", "test_list": ["assert validate(1234) == True", "assert validate(51241) == False", "assert validate(321) == True"], "challenge_test_list": [], "reference_code": "def validate(n): \r\n    for i in range(10): \r\n        temp = n;  \r\n        count = 0; \r\n        while (temp): \r\n            if (temp % 10 == i): \r\n                count+=1;  \r\n            if (count > i): \r\n                return False\r\n            temp //= 10; \r\n    return True"}
{"task_id": "284", "prompt": "Write a function to check whether all items of a list are equal to a given string.", "completion": "def check_element(lst, element):\n    if lst is None or element is None:\n        raise TypeError(\"Input cannot be None\")\n    return all(v == element for v in lst)", "test_list": ["assert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False", "assert check_element([1,2,3,4],7)==False", "assert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True"], "challenge_test_list": [], "reference_code": "def check_element(list,element):\r\n  check_element=all(v== element for v in list)\r\n  return check_element"}
{"task_id": "285", "prompt": "Write a function that matches a string that has an a followed by two to three 'b'.", "completion": "import re\n\ndef text_match_two_three(text):\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n    \n    patterns = r'ab{2,3}'  # Use raw string for regex\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "test_list": ["assert text_match_two_three(\"ac\")==('Not matched!')", "assert text_match_two_three(\"dc\")==('Not matched!')", "assert text_match_two_three(\"abbbba\")==('Found a match!')"], "challenge_test_list": [], "reference_code": "import re\r\ndef text_match_two_three(text):\r\n        patterns = 'ab{2,3}'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"}
{"task_id": "286", "prompt": "Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.", "completion": "def max_sub_array_sum_repeated(a, n, k):\n    if n == 0 or k == 0:\n        return 0\n    \n    # Calculate the maximum subarray sum using Kadane's algorithm\n    def kadane(arr):\n        max_so_far = -2147483648\n        max_ending_here = 0\n        for x in arr:\n            max_ending_here += x\n            if max_so_far < max_ending_here:\n                max_so_far = max_ending_here\n            if max_ending_here < 0:\n                max_ending_here = 0\n        return max_so_far\n\n    # Calculate the maximum subarray sum for the original array\n    max_sum_one = kadane(a)\n    \n    # If k == 1, we can return the result directly\n    if k == 1:\n        return max_sum_one\n    \n    # Calculate the total sum of the array\n    total_sum = sum(a)\n    \n    # Calculate the maximum prefix sum\n    max_prefix_sum = 0\n    current_prefix_sum = 0\n    for i in range(n):\n        current_prefix_sum += a[i]\n        max_prefix_sum = max(max_prefix_sum, current_prefix_sum)\n    \n    # Calculate the maximum suffix sum\n    max_suffix_sum = 0\n    current_suffix_sum = 0\n    for i in range(n-1, -1, -1):\n        current_suffix_sum += a[i]\n        max_suffix_sum = max(max_suffix_sum, current_suffix_sum)\n    \n    # If total_sum is positive, we can take full advantage of it\n    if total_sum > 0:\n        return max(max_sum_one, max_suffix_sum + max_prefix_sum + (k - 2) * total_sum)\n    else:\n        return max(max_sum_one, max_suffix_sum + max_prefix_sum)\n\n# Test cases\nimport pytest\n\ndef test_basic_functionality():\n    assert max_sub_array_sum_repeated([1, 2, 3], 3, 1) == 6, \"Should be 6 for single repetition\"\n    assert max_sub_array_sum_repeated([-1, -2, -3], 3, 2) == -1, \"Should be -1 for all negative numbers\"\n    assert max_sub_array_sum_repeated([1, -2, 3, 4], 4, 2) == 10, \"Should be 10 for repeated array with positive sum\"\n    assert max_sub_array_sum_repeated([5, -1, 2, 3], 4, 3) == 15, \"Should be 15 for multiple repetitions\"\n\ndef test_edge_cases():\n    assert max_sub_array_sum_repeated([], 0, 1) == 0, \"Should return 0 for empty array\"\n    assert max_sub_array_sum_repeated([0], 1,", "test_list": ["assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30", "assert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59", "assert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1"], "challenge_test_list": [], "reference_code": "def max_sub_array_sum_repeated(a, n, k): \r\n\tmax_so_far = -2147483648\r\n\tmax_ending_here = 0\r\n\tfor i in range(n*k): \r\n\t\tmax_ending_here = max_ending_here + a[i%n] \r\n\t\tif (max_so_far < max_ending_here): \r\n\t\t\tmax_so_far = max_ending_here \r\n\t\tif (max_ending_here < 0): \r\n\t\t\tmax_ending_here = 0\r\n\treturn max_so_far"}
{"task_id": "287", "prompt": "Write a python function to find the sum of squares of first n even natural numbers.", "completion": "def square_Sum(n):\n    if not isinstance(n, int):\n        raise TypeError(\"Input should be an integer\")\n    if n < 0:\n        raise ValueError(\"negative number\")\n    \n    return int(n * (n + 1) * (2 * n + 1))\n\n# Test cases\nimport pytest\n\ndef test_basic_functionality():\n    assert square_Sum(1) == 4, \"Sum of squares of first 1 even natural number should be 4\"\n    assert square_Sum(2) == 20, \"Sum of squares of first 2 even natural numbers should be 20\"\n    assert square_Sum(3) == 56, \"Sum of squares of first 3 even natural numbers should be 56\"\n    assert square_Sum(4) == 120, \"Sum of squares of first 4 even natural numbers should be 120\"\n\ndef test_edge_cases():\n    assert square_Sum(0) == 0, \"Sum of squares of first 0 even natural numbers should be 0\"\n    assert square_Sum(10) == 2200, \"Sum of squares of first 10 even natural numbers should be 2200\"\n    assert square_Sum(100) == 686700, \"Sum of squares of first 100 even natural numbers should be 686700\"\n\ndef test_exceptions():\n    with pytest.raises(TypeError, match=\"Input should be an integer\"):\n        square_Sum(\"a\")\n    \n    with pytest.raises(TypeError, match=\"Input should be an integer\"):\n        square_Sum(None)\n    \n    with pytest.raises(ValueError, match=\"negative number\"):\n        square_Sum(-1)\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert square_Sum(2) == 20", "assert square_Sum(3) == 56", "assert square_Sum(4) == 120"], "challenge_test_list": [], "reference_code": "def square_Sum(n):  \r\n    return int(2*n*(n+1)*(2*n+1)/3)"}
{"task_id": "288", "prompt": "Write a function to count array elements having modular inverse under given prime number p equal to itself.", "completion": "import pytest\n\ndef modular_inverse(arr, N, P):\n    if not isinstance(arr, list) or not isinstance(N, int) or not isinstance(P, int):\n        raise TypeError(\"unsupported operand type\")\n    if P <= 1:\n        raise ValueError(\"must be greater than 1\")\n    \n    current_element = 0\n    for i in range(0, N):\n        if arr[i] % P != 0 and (arr[i] * arr[i]) % P == 1:\n            current_element += 1\n    return current_element\n\ndef test_basic_functionality():\n    assert modular_inverse([1, 2, 3, 4, 5], 5, 7) == 1, \"Should find 1 as the only element with modular inverse equal to itself\"\n    assert modular_inverse([1, 2, 3, 4, 5], 5, 5) == 1, \"Should find 1 as the only element with modular inverse equal to itself\"\n    assert modular_inverse([1, 2, 3, 4, 5], 5, 11) == 1, \"Should find 1 as the only element with modular inverse equal to itself\"\n    assert modular_inverse([1, 1, 1], 3, 7) == 3, \"All elements are 1, should count all\"\n\ndef test_edge_cases():\n    assert modular_inverse([], 0, 7) == 0, \"Empty array should return 0\"\n    assert modular_inverse([0], 1, 7) == 0, \"Zero has no modular inverse\"\n    assert modular_inverse([1], 1, 7) == 1, \"Single element 1 should return 1\"\n    assert modular_inverse([2], 1, 7) == 0, \"Single element 2 should return 0\"\n\ndef test_exceptions():\n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        modular_inverse(None, 0, 7)\n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        modular_inverse(\"string\", 0, 7)\n    with pytest.raises(ValueError, match=\"must be greater than 1\"):\n        modular_inverse([1, 2, 3], 3, 1)\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2", "assert modular_inverse([1, 3, 8, 12, 12], 5, 13) == 3", "assert modular_inverse([2, 3, 4, 5], 4, 6) == 1"], "challenge_test_list": [], "reference_code": "def modular_inverse(arr, N, P):\r\n\tcurrent_element = 0\r\n\tfor i in range(0, N):\r\n\t\tif ((arr[i] * arr[i]) % P == 1):\r\n\t\t\tcurrent_element = current_element + 1\r\n\treturn current_element"}
{"task_id": "289", "prompt": "Write a python function to calculate the number of odd days in a given year.", "completion": "def odd_Days(N):\n    if not isinstance(N, int):\n        raise TypeError(\"Input must be an integer\")\n    \n    if N < 0:\n        raise ValueError(\"Year cannot be negative\")\n    \n    # Calculate the number of leap years and ordinary years\n    leap_years = N // 4 - N // 100 + N // 400\n    ordinary_years = N - leap_years\n    \n    # Total days calculation\n    total_days = ordinary_years * 365 + leap_years * 366\n    \n    # Calculate odd days\n    odd_days = total_days % 7\n    \n    return odd_days", "test_list": ["assert odd_Days(100) == 5", "assert odd_Days(50) ==6", "assert odd_Days(75) == 2"], "challenge_test_list": [], "reference_code": "def odd_Days(N): \r\n    hund1 = N // 100\r\n    hund4 = N // 400\r\n    leap = N >> 2\r\n    ordd = N - leap \r\n    if (hund1): \r\n        ordd += hund1 \r\n        leap -= hund1 \r\n    if (hund4): \r\n        ordd -= hund4 \r\n        leap += hund4 \r\n    days = ordd + leap * 2\r\n    odd = days % 7\r\n    return odd "}
{"task_id": "290", "prompt": "Write a function to find the list of lists with maximum length.", "completion": "def max_length(list1):\n    if not isinstance(list1, list):\n        raise TypeError(\"Input must be a list of lists\")\n    \n    if not list1:\n        return (0, [])\n    \n    max_list = []\n    max_length = 0\n    \n    for lst in list1:\n        if not isinstance(lst, list):\n            raise TypeError(\"Input must be a list of lists\")\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n            \n    return (max_length, max_list)", "test_list": ["assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])", "assert max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])", "assert max_length([[5], [15,20,25]])==(3, [15,20,25])"], "challenge_test_list": [], "reference_code": "def max_length(list1):\r\n    max_length = max(len(x) for x in  list1 )  \r\n    max_list = max((x) for x in   list1)\r\n    return(max_length, max_list)"}
{"task_id": "291", "prompt": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.", "completion": "def count_no_of_ways(n, k):\n    if n < 0 or k < 0:\n        raise ValueError(\"n and k must be non-negative\")\n    if n == 0 or k == 0:\n        return 0\n    if n == 1:\n        return k % 1000000007\n    if n == 2:\n        return (k * k) % 1000000007\n\n    mod = 1000000007\n    dp = [0] * (n + 1)\n    dp[1] = k % mod\n    dp[2] = (k * k) % mod\n\n    for i in range(3, n + 1):\n        dp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod\n\n    return dp[n]", "test_list": ["assert count_no_of_ways(2, 4) == 16", "assert count_no_of_ways(3, 2) == 6", "assert count_no_of_ways(4, 4) == 228"], "challenge_test_list": [], "reference_code": "def count_no_of_ways(n, k): \r\n\tdp = [0] * (n + 1) \r\n\ttotal = k \r\n\tmod = 1000000007\r\n\tdp[1] = k \r\n\tdp[2] = k * k\t \r\n\tfor i in range(3,n+1): \r\n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \r\n\treturn dp[n]"}
{"task_id": "292", "prompt": "Write a python function to find quotient of two numbers.", "completion": "def find(n, m):\n    if m == 0:\n        raise ZeroDivisionError(\"division by zero\")\n    return n // m", "test_list": ["assert find(10,3) == 3", "assert find(4,2) == 2", "assert find(20,5) == 4"], "challenge_test_list": [], "reference_code": "def find(n,m):  \r\n    q = n//m \r\n    return (q)"}
{"task_id": "293", "prompt": "Write a function to find the third side of a right angled triangle.", "completion": "import math\n\ndef otherside_rightangle(w, h):\n    # Check if inputs are valid numbers\n    if not isinstance(w, (int, float)) or not isinstance(h, (int, float)):\n        raise TypeError(\"Both arguments must be numbers.\")\n    \n    # Calculate the length of the hypotenuse\n    s = math.sqrt((w * w) + (h * h))\n    return s\n\n# Test cases\nimport pytest\n\ndef test_basic_functionality():\n    assert otherside_rightangle(3, 4) == pytest.approx(5.0, rel=1e-9), \"Should be 5 for sides 3 and 4\"\n    assert otherside_rightangle(5, 12) == pytest.approx(13.0, rel=1e-9), \"Should be 13 for sides 5 and 12\"\n    assert otherside_rightangle(8, 15) == pytest.approx(17.0, rel=1e-9), \"Should be 17 for sides 8 and 15\"\n\ndef test_edge_cases():\n    assert otherside_rightangle(0, 0) == 0.0, \"Should be 0 for sides 0 and 0\"\n    assert otherside_rightangle(1, 0) == 1.0, \"Should be 1 for sides 1 and 0\"\n    assert otherside_rightangle(0, 1) == 1.0, \"Should be 1 for sides 0 and 1\"\n    assert otherside_rightangle(1, 1) == pytest.approx(math.sqrt(2), rel=1e-9), \"Should be sqrt(2) for sides 1 and 1\"\n\ndef test_exceptions():\n    with pytest.raises(TypeError, match=\"Both arguments must be numbers.\"):\n        otherside_rightangle(\"a\", 4)\n    with pytest.raises(TypeError, match=\"Both arguments must be numbers.\"):\n        otherside_rightangle(3, None)\n    with pytest.raises(TypeError, match=\"Both arguments must be numbers.\"):\n        otherside_rightangle([], 4)\n    with pytest.raises(TypeError, match=\"Both arguments must be numbers.\"):\n        otherside_rightangle(3, {})\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert otherside_rightangle(7,8)==10.63014581273465", "assert otherside_rightangle(3,4)==5", "assert otherside_rightangle(7,15)==16.55294535724685"], "challenge_test_list": [], "reference_code": "import math\r\ndef otherside_rightangle(w,h):\r\n  s=math.sqrt((w*w)+(h*h))\r\n  return s"}
{"task_id": "294", "prompt": "Write a function to find the maximum value in a given heterogeneous list.", "completion": "import pytest\n\ndef max_val(listval):\n    if not isinstance(listval, list):\n        raise TypeError(\"Input must be a list\")\n    \n    max_val = None\n    for i in listval:\n        if isinstance(i, int):\n            if max_val is None or i > max_val:\n                max_val = i\n    \n    if max_val is None:\n        return None\n    \n    return max_val\n\n# Test cases\ndef test_basic_functionality_with_integers():\n    assert max_val([1, 2, 3, 4, 5]) == 5, \"Should return the maximum integer value\"\n\ndef test_basic_functionality_with_mixed_types():\n    assert max_val([1, 'a', 3.5, 2, None, 4]) == 4, \"Should return the maximum integer value ignoring non-integers\"\n\ndef test_basic_functionality_with_negative_integers():\n    assert max_val([-1, -2, -3, -4, -5]) == -1, \"Should return the maximum negative integer value\"\n\ndef test_edge_case_empty_list():\n    with pytest.raises(ValueError, match=\"max() arg is an empty sequence\"):\n        max_val([])\n\ndef test_edge_case_no_integers():\n    assert max_val(['a', 3.5, None]) == None, \"Should return None when there are no integers\"\n\ndef test_exceptions_with_invalid_input():\n    with pytest.raises(TypeError):\n        max_val(\"not a list\")\n\ndef test_exceptions_with_nested_lists():\n    with pytest.raises(TypeError):\n        max_val([1, [2, 3], 4])", "test_list": ["assert max_val(['Python', 3, 2, 4, 5, 'version'])==5", "assert max_val(['Python', 15, 20, 25])==25", "assert max_val(['Python', 30, 20, 40, 50, 'version'])==50"], "challenge_test_list": [], "reference_code": "def max_val(listval):\r\n     max_val = max(i for i in listval if isinstance(i, int)) \r\n     return(max_val)"}
{"task_id": "295", "prompt": "Write a function to return the sum of all divisors of a number.", "completion": "def sum_div(number):\n    if not isinstance(number, int):\n        raise TypeError(\"unsupported operand type\")\n    if number < 0:\n        raise ValueError(\"must be greater than 0\")\n    \n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    \n    divisors = [1]\n    for i in range(2, number):\n        if (number % i) == 0:\n            divisors.append(i)\n    return sum(divisors)", "test_list": ["assert sum_div(8)==7", "assert sum_div(12)==16", "assert sum_div(7)==1"], "challenge_test_list": [], "reference_code": "def sum_div(number):\r\n    divisors = [1]\r\n    for i in range(2, number):\r\n        if (number % i)==0:\r\n            divisors.append(i)\r\n    return sum(divisors)"}
{"task_id": "296", "prompt": "Write a python function to count inversions in an array.", "completion": "def get_Inv_Count(arr, n):\n    if arr is None or not isinstance(arr, list) or not isinstance(n, int):\n        raise TypeError(\"unsupported operand type\")\n    if n != len(arr):\n        raise IndexError(\"list index out of range\")\n    \n    inv_count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count", "test_list": ["assert get_Inv_Count([1,20,6,4,5],5) == 5", "assert get_Inv_Count([1,2,1],3) == 1", "assert get_Inv_Count([1,2,5,6,1],5) == 3"], "challenge_test_list": [], "reference_code": "def get_Inv_Count(arr,n): \r\n    inv_count = 0\r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] > arr[j]): \r\n                inv_count += 1\r\n    return inv_count "}
{"task_id": "297", "prompt": "Write a function to flatten a given nested list structure.", "completion": "def flatten_list(list1):\n    if not isinstance(list1, list):\n        raise TypeError(\"Expected a list\")\n    \n    result_list = []\n    stack = [list1]  # Start with the original list\n    \n    while stack:\n        current = stack.pop()\n        for item in reversed(current):  # Reverse to maintain order\n            if isinstance(item, list):\n                stack.append(item)  # Add sublist to stack\n            else:\n                result_list.append(item)  # Add item to result list\n    \n    return result_list", "test_list": ["assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]", "assert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]", "assert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]"], "challenge_test_list": [], "reference_code": "def flatten_list(list1):\r\n    result_list = []\r\n    if not list1: return result_list\r\n    stack = [list(list1)]\r\n    while stack:\r\n        c_num = stack.pop()\r\n        next = c_num.pop()\r\n        if c_num: stack.append(c_num)\r\n        if isinstance(next, list):\r\n            if next: stack.append(list(next))\r\n        else: result_list.append(next)\r\n    result_list.reverse()\r\n    return result_list "}
{"task_id": "298", "prompt": "Write a function to find the nested list elements which are present in another list.", "completion": "def intersection_nested_lists(l1, l2):\n    if not isinstance(l1, list) or not isinstance(l2, list):\n        raise TypeError(\"expected list\")\n    \n    result = [[n for n in lst if n in l1] for lst in l2]\n    return result", "test_list": ["assert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]", "assert intersection_nested_lists([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])==[[], []]", "assert intersection_nested_lists(['john','amal','joel','george'],[['john'],['jack','john','mary'],['howard','john'],['jude']])==[['john'], ['john'], ['john'], []]"], "challenge_test_list": [], "reference_code": "def intersection_nested_lists(l1, l2):\r\n    result = [[n for n in lst if n in l1] for lst in l2]\r\n    return result"}
{"task_id": "299", "prompt": "Write a function to calculate the maximum aggregate from the list of tuples.", "completion": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    if not stdata:\n        return None\n    \n    temp = defaultdict(int)\n    for entry in stdata:\n        if not isinstance(entry, tuple) or len(entry) != 2:\n            raise ValueError(\"Each entry must be a tuple of (name, marks)\")\n        name, marks = entry\n        if not isinstance(name, str) or not isinstance(marks, (int, float)):\n            raise TypeError(\"Name must be a string and marks must be an int or float\")\n        temp[name] += marks\n    \n    return max(temp.items(), key=lambda x: (x[1], x[0]))\n\n# Test cases\nimport pytest\n\ndef test_basic_functionality():\n    assert max_aggregate([(\"Alice\", 90), (\"Bob\", 80), (\"Alice\", 70)]) == (\"Alice\", 160), \"Should return Alice with total marks 160\"\n    assert max_aggregate([(\"Charlie\", 85), (\"Charlie\", 95), (\"Alice\", 100)]) == (\"Charlie\", 180), \"Should return Charlie with total marks 180\"\n    assert max_aggregate([(\"Alice\", 50), (\"Bob\", 50), (\"Charlie\", 50)]) == (\"Alice\", 50), \"Should return Alice with total marks 50 (first in alphabetical order)\"\n\ndef test_edge_cases():\n    assert max_aggregate([]) == None, \"Should return None for empty input\"\n    assert max_aggregate([(\"Alice\", 0), (\"Bob\", 0)]) == (\"Alice\", 0), \"Should return Alice with total marks 0 (first in alphabetical order)\"\n    assert max_aggregate([(\"Alice\", 100), (\"Bob\", 100), (\"Charlie\", 100)]) == (\"Alice\", 100), \"Should return Alice with total marks 100 (first in alphabetical order)\"\n\ndef test_exceptions():\n    with pytest.raises(TypeError, match=\"must be str, not int\"):\n        max_aggregate([(123, 90)])\n    with pytest.raises(ValueError, match=\"too many values to unpack\"):\n        max_aggregate([(\"Alice\", 90, 10)])\n    with pytest.raises(ValueError, match=\"Each entry must be a tuple of (name, marks)\"):\n        max_aggregate([[\"Alice\"], 90])\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)", "assert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)", "assert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)"], "challenge_test_list": [], "reference_code": "from collections import defaultdict\r\ndef max_aggregate(stdata):\r\n    temp = defaultdict(int)\r\n    for name, marks in stdata:\r\n        temp[name] += marks\r\n    return max(temp.items(), key=lambda x: x[1])"}
{"task_id": "300", "prompt": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.", "completion": "def count_binary_seq(n):\n    if not isinstance(n, int) or n < 0:\n        raise TypeError(\"unsupported operand type\")\n    \n    nCr = 1\n    res = 1\n    for r in range(1, n + 1):\n        nCr = (nCr * (n + 1 - r)) // r\n        res += nCr * nCr\n    return res", "test_list": ["assert count_binary_seq(1) == 2.0", "assert count_binary_seq(2) == 6.0", "assert count_binary_seq(3) == 20.0"], "challenge_test_list": [], "reference_code": "def count_binary_seq(n): \r\n\tnCr = 1\r\n\tres = 1\r\n\tfor r in range(1, n + 1): \r\n\t\tnCr = (nCr * (n + 1 - r)) / r \r\n\t\tres += nCr * nCr \r\n\treturn res "}
{"task_id": "301", "prompt": "Write a function to find the depth of a dictionary.", "completion": "def dict_depth(d):\n    if not isinstance(d, dict):\n        raise TypeError(\"Expected a dictionary\")\n    \n    if not d:  # If the dictionary is empty\n        return 0\n    \n    return 1 + max((dict_depth(value) for value in d.values()), default=0)\n\n# Test cases\nimport pytest\n\ndef test_basic_functionality_single_level():\n    assert dict_depth({'a': 1, 'b': 2}) == 1, \"Should return 1 for a single-level dictionary\"\n\ndef test_basic_functionality_multiple_levels():\n    assert dict_depth({'a': {'b': 1}, 'c': 2}) == 2, \"Should return 2 for a two-level dictionary\"\n\ndef test_basic_functionality_nested_levels():\n    assert dict_depth({'a': {'b': {'c': 1}}}) == 3, \"Should return 3 for a three-level nested dictionary\"\n\ndef test_edge_case_empty_dictionary():\n    assert dict_depth({}) == 0, \"Should return 0 for an empty dictionary\"\n\ndef test_edge_case_non_dict_input():\n    with pytest.raises(TypeError, match=\"Expected a dictionary\"):\n        dict_depth(\"not a dict\")\n\ndef test_edge_case_none_input():\n    with pytest.raises(TypeError, match=\"Expected a dictionary\"):\n        dict_depth(None)\n\ndef test_negative_case_non_dict_nested():\n    assert dict_depth({'a': {'b': 1, 'c': 2}, 'd': 3}) == 2, \"Should return 2 for a mixed dictionary\"\n\ndef test_edge_case_deeply_nested():\n    assert dict_depth({'a': {'b': {'c': {'d': {'e': 1}}}}}) == 5, \"Should return 5 for a deeply nested dictionary\"\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4", "assert dict_depth({'a':1, 'b': {'c':'python'}})==2", "assert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3"], "challenge_test_list": [], "reference_code": "def dict_depth(d):\r\n    if isinstance(d, dict):\r\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\r\n    return 0"}
{"task_id": "302", "prompt": "Write a python function to find the most significant bit number which is also a set bit.", "completion": "def set_Bit_Number(n): \n    if not isinstance(n, int) or n < 0: \n        return 0  # Handle non-integer and negative inputs\n    if n == 0: \n        return 0; \n    msb = 0; \n    while n > 1: \n        n = n // 2  # Use integer division\n        msb += 1 \n    return (1 << msb)", "test_list": ["assert set_Bit_Number(6) == 4", "assert set_Bit_Number(10) == 8", "assert set_Bit_Number(18) == 16"], "challenge_test_list": [], "reference_code": "def set_Bit_Number(n): \r\n    if (n == 0): \r\n        return 0; \r\n    msb = 0; \r\n    n = int(n / 2); \r\n    while (n > 0): \r\n        n = int(n / 2); \r\n        msb += 1; \r\n    return (1 << msb)"}
{"task_id": "303", "prompt": "Write a python function to check whether the count of inversion of two types are same or not.", "completion": "import sys \n\ndef solve(a, n):   \n    if not isinstance(a, list) or not isinstance(n, int):\n        raise TypeError(\"Invalid input types\")\n    \n    if n == 0:\n        return True\n    \n    if n != len(a):\n        raise ValueError(\"Length of array does not match the provided size\")\n    \n    mx = -sys.maxsize - 1\n    for j in range(n):\n        if mx > a[j]:  \n            return False  \n        mx = max(mx, a[j])    \n    return True", "test_list": ["assert solve([1,0,2],3) == True", "assert solve([1,2,0],3) == False", "assert solve([1,2,1],3) == True"], "challenge_test_list": [], "reference_code": "import sys \r\ndef solve(a,n):   \r\n    mx = -sys.maxsize - 1\r\n    for j in range(1,n):  \r\n        if (mx > a[j]):  \r\n            return False  \r\n        mx = max(mx,a[j - 1])    \r\n    return True"}
{"task_id": "304", "prompt": "Write a python function to find element at a given index after number of rotations.", "completion": "def find_Element(arr, ranges, rotations, index):\n    # Check for empty array\n    if not arr:\n        return None\n    \n    # Validate ranges\n    for left, right in ranges:\n        if left > right or left < 0 or right >= len(arr):\n            raise ValueError(\"Invalid ranges\")\n    \n    # Process the rotations\n    for i in range(rotations):\n        left = ranges[i][0]\n        right = ranges[i][1]\n        if left <= index <= right:\n            if index == left:\n                index = right\n            else:\n                index -= 1\n    \n    # Return the element at the final index\n    return arr[index]\n\n# Test cases\nimport pytest\n\ndef test_basic_functionality():\n    assert find_Element([1, 2, 3, 4, 5], [[0, 1]], 1, 0) == 2\n    assert find_Element([1, 2, 3, 4, 5], [[0, 1]], 1, 1) == 1\n    assert find_Element([1, 2, 3, 4, 5], [[0, 4]], 1, 2) == 3\n    assert find_Element([1, 2, 3, 4, 5], [[1, 3]], 1, 3) == 2\n\ndef test_edge_cases():\n    assert find_Element([1, 2, 3, 4, 5], [[0, 4]], 1, 4) == 5\n    assert find_Element([1, 2, 3, 4, 5], [[0, 0]], 1, 0) == 1\n    assert find_Element([], [[0, 0]], 1, 0) == None  # Assuming function should handle empty array gracefully\n\ndef test_exceptions():\n    with pytest.raises(IndexError, match=\"list index out of range\"):\n        find_Element([1, 2, 3], [[0, 2]], 1, 3)  # Index out of bounds\n    with pytest.raises(IndexError, match=\"list index out of range\"):\n        find_Element([1, 2, 3], [[0, 1]], 1, -1)  # Negative index\n    with pytest.raises(ValueError, match=\"Invalid ranges\"):\n        find_Element([1, 2, 3], [[1, 0]], 1, 0)  # Invalid range\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3", "assert find_Element([1,2,3,4],[[0,1],[0,2]],1,2) == 3", "assert find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1"], "challenge_test_list": [], "reference_code": "def find_Element(arr,ranges,rotations,index) :  \r\n    for i in range(rotations - 1,-1,-1 ) : \r\n        left = ranges[i][0] \r\n        right = ranges[i][1] \r\n        if (left <= index and right >= index) : \r\n            if (index == left) : \r\n                index = right \r\n            else : \r\n                index = index - 1 \r\n    return arr[index] "}
{"task_id": "305", "prompt": "Write a function to match two words from a list of words starting with letter 'p'.", "completion": "import re\n\ndef start_withp(words):\n    if not isinstance(words, list):\n        raise TypeError(\"Input must be a list\")\n    \n    for w in words:\n        if not isinstance(w, str):\n            raise TypeError(\"List must contain only strings\")\n        \n        m = re.match(r\"(\\bp\\w+)\\s+(\\bp\\w+)\", w, re.IGNORECASE)\n        if m:\n            return m.groups()\n    \n    return None", "test_list": ["assert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')", "assert start_withp([\"Python Programming\",\"Java Programming\"])==('Python','Programming')", "assert start_withp([\"Pqrst Pqr\",\"qrstuv\"])==('Pqrst','Pqr')"], "challenge_test_list": [], "reference_code": "import re\r\ndef start_withp(words):\r\n for w in words:\r\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\r\n        if m:\r\n            return m.groups()"}
{"task_id": "306", "prompt": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .", "completion": "def max_sum_increasing_subseq(a, n, index, k):\n    if n == 0 or index >= n or k >= n or k <= index:\n        raise ValueError(\"Invalid input: Ensure k is greater than index and within bounds.\")\n    \n    # Initialize the dp array\n    dp = [0] * n\n    \n    # Base case: the maximum sum of increasing subsequence ending at index\n    dp[index] = a[index]\n    \n    # Calculate the maximum sum of increasing subsequence for all elements before k\n    for i in range(index + 1):\n        if a[i] < a[index]:\n            dp[index] = max(dp[index], dp[i] + a[index])\n    \n    # Now include the element at index k\n    for j in range(index + 1, k + 1):\n        if a[j] > a[index]:\n            dp[k] = max(dp[k], dp[index] + a[j])\n    \n    return dp[k]\n\n# Test cases\nimport pytest\n\ndef test_basic_functionality():\n    assert max_sum_increasing_subseq([1, 101, 2, 3, 100], 5, 0, 4) == 104, \"Should return 104 for the given input\"\n    assert max_sum_increasing_subseq([3, 4, 5, 10], 4, 1, 3) == 17, \"Should return 17 for the given input\"\n    assert max_sum_increasing_subseq([10, 5, 4, 3], 4, 0, 3) == 10, \"Should return 10 for the given input\"\n\ndef test_edge_cases():\n    assert max_sum_increasing_subseq([], 0, 0, 0) == 0, \"Should return 0 for empty input\"\n    assert max_sum_increasing_subseq([1], 1, 0, 0) == 1, \"Should return 1 for single element input\"\n    assert max_sum_increasing_subseq([1, 2], 2, 0, 1) == 3, \"Should return 3 for two elements input\"\n\ndef test_exceptions():\n    with pytest.raises(ValueError, match=\"Invalid input: Ensure k is greater than index and within bounds.\"):\n        max_sum_increasing_subseq([1, 2, 3], 3, 0, 5)\n    with pytest.raises(ValueError, match=\"Invalid input: Ensure k is greater than index and within bounds.\"):\n        max_sum_increasing_subseq([1, 2, 3], 3, 3, 2)\n    with pytest.raises(ValueError, match=\"Invalid input: Ensure k is greater than index and within bounds.\"):\n        max_sum_increasing_subseq([1, 2, 3], 3,", "test_list": ["assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11", "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7", "assert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71"], "challenge_test_list": [], "reference_code": "def max_sum_increasing_subseq(a, n, index, k):\r\n\tdp = [[0 for i in range(n)] \r\n\t\t\tfor i in range(n)]\r\n\tfor i in range(n):\r\n\t\tif a[i] > a[0]:\r\n\t\t\tdp[0][i] = a[i] + a[0]\r\n\t\telse:\r\n\t\t\tdp[0][i] = a[i]\r\n\tfor i in range(1, n):\r\n\t\tfor j in range(n):\r\n\t\t\tif a[j] > a[i] and j > i:\r\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\r\n\t\t\t\telse:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\t\t\telse:\r\n\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\treturn dp[index][k]"}
{"task_id": "307", "prompt": "Write a function to get a colon of a tuple.", "completion": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    # Check if tuplex is a tuple and has the correct structure\n    if not isinstance(tuplex, tuple) or len(tuplex) <= m or not isinstance(tuplex[m], list):\n        raise TypeError(\"object is not subscriptable\")\n    \n    # Create a deep copy of the original tuple\n    tuplex_colon = deepcopy(tuplex)\n    \n    # Append the value n to the m-th list in the tuple\n    tuplex_colon[m].append(n)\n    \n    return tuplex_colon", "test_list": ["assert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) ", "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,100)==((\"HELLO\", 5, [100],True))", "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,500)==(\"HELLO\", 5, [500], True)"], "challenge_test_list": [], "reference_code": "from copy import deepcopy\r\ndef colon_tuplex(tuplex,m,n):\r\n  tuplex_colon = deepcopy(tuplex)\r\n  tuplex_colon[m].append(n)\r\n  return tuplex_colon"}
{"task_id": "308", "prompt": "Write a function to find the specified number of largest products from two given lists.", "completion": "def large_product(nums1, nums2, N):\n    if not isinstance(nums1, list) or not isinstance(nums2, list):\n        raise TypeError(\"unsupported operand type\")\n    if not isinstance(N, int) or N <= 0:\n        raise ValueError(\"N must be a positive integer\")\n    \n    result = sorted([x * y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result", "test_list": ["assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]", "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]", "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]"], "challenge_test_list": [], "reference_code": "def large_product(nums1, nums2, N):\r\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\r\n    return result"}
{"task_id": "309", "prompt": "Write a python function to find the maximum of two numbers.", "completion": "def maximum(a, b):\n    if not isinstance(a, (int, float)) or not isinstance(b, (int, float)):\n        raise TypeError(\"unsupported operand type(s) for maximum: '{}' and '{}'\".format(type(a).__name__, type(b).__name__))\n    return a if a >= b else b", "test_list": ["assert maximum(5,10) == 10", "assert maximum(-1,-2) == -1", "assert maximum(9,7) == 9"], "challenge_test_list": [], "reference_code": "def maximum(a,b):   \r\n    if a >= b: \r\n        return a \r\n    else: \r\n        return b "}
{"task_id": "310", "prompt": "Write a function to convert a given string to a tuple.", "completion": "def string_to_tuple(str1):\n    if not isinstance(str1, str):\n        raise TypeError(\"expected a string\")\n    return tuple(x for x in str1 if not x.isspace())", "test_list": ["assert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')", "assert string_to_tuple(\"item1\")==('i', 't', 'e', 'm', '1')", "assert string_to_tuple(\"15.10\")==('1', '5', '.', '1', '0')"], "challenge_test_list": [], "reference_code": "def string_to_tuple(str1):\r\n    result = tuple(x for x in str1 if not x.isspace()) \r\n    return result"}
{"task_id": "311", "prompt": "Write a python function to set the left most unset bit.", "completion": "def set_left_most_unset_bit(n):\n    # Check if all bits are set\n    if n == (1 << n.bit_length()) - 1:\n        return n\n    \n    # Find the position of the leftmost unset bit\n    pos = n.bit_length()  # This gives us the position of the first unset bit from the left\n    return n | (1 << pos)  # Set that bit\n\n# Test cases\nimport pytest\n\ndef test_set_left_most_unset_bit_basic():\n    assert set_left_most_unset_bit(0b0000) == 0b0001, \"Should set the leftmost unset bit in 0\"\n    assert set_left_most_unset_bit(0b0001) == 0b0011, \"Should set the leftmost unset bit in 1\"\n    assert set_left_most_unset_bit(0b0011) == 0b0111, \"Should set the leftmost unset bit in 3\"\n    assert set_left_most_unset_bit(0b0111) == 0b1111, \"Should set the leftmost unset bit in 7\"\n    assert set_left_most_unset_bit(0b1111) == 0b1111, \"Should not change 15 as all bits are set\"\n\ndef test_set_left_most_unset_bit_edge_cases():\n    assert set_left_most_unset_bit(0b00000000) == 0b00000001, \"Should set the leftmost unset bit in 0\"\n    assert set_left_most_unset_bit(0b11111111) == 0b11111111, \"Should not change 255 as all bits are set\"\n    assert set_left_most_unset_bit(0b10000000) == 0b11000000, \"Should set the leftmost unset bit in 128\"\n\ndef test_set_left_most_unset_bit_exceptions():\n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        set_left_most_unset_bit(\"string\"), \"Should raise TypeError for string input\"\n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        set_left_most_unset_bit(None), \"Should raise TypeError for None input\"\n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        set_left_most_unset_bit([]), \"Should raise TypeError for list input\"\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert set_left_most_unset_bit(10) == 14", "assert set_left_most_unset_bit(12) == 14", "assert set_left_most_unset_bit(15) == 15"], "challenge_test_list": [], "reference_code": "def set_left_most_unset_bit(n): \r\n    if not (n & (n + 1)): \r\n        return n \r\n    pos, temp, count = 0, n, 0 \r\n    while temp: \r\n        if not (temp & 1): \r\n            pos = count      \r\n        count += 1; temp>>=1\r\n    return (n | (1 << (pos))) "}
{"task_id": "312", "prompt": "Write a function to find the volume of a cone.", "completion": "import math\n\ndef volume_cone(r, h):\n    if r < 0 or h < 0:\n        raise ValueError(\"Radius and height must be non-negative\")\n    volume = (1.0 / 3) * math.pi * r * r * h\n    return volume", "test_list": ["assert volume_cone(5,12)==314.15926535897927", "assert volume_cone(10,15)==1570.7963267948965", "assert volume_cone(19,17)==6426.651371693521"], "challenge_test_list": [], "reference_code": "import math\r\ndef volume_cone(r,h):\r\n  volume = (1.0/3) * math.pi * r * r * h\r\n  return volume"}
{"task_id": "313", "prompt": "Write a python function to print positive numbers in a list.", "completion": "def pos_nos(list1):\n    if not isinstance(list1, (list, tuple)):\n        raise TypeError(\"list argument must be iterable\")\n    \n    for num in list1:\n        if num >= 0:\n            return num\n    return None", "test_list": ["assert pos_nos([-1,-2,1,2]) == 1,2", "assert pos_nos([3,4,-5]) == 3,4", "assert pos_nos([-2,-3,1]) == 1"], "challenge_test_list": [], "reference_code": "def pos_nos(list1):\r\n  for num in list1: \r\n    if num >= 0: \r\n       return num "}
{"task_id": "314", "prompt": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.", "completion": "import pytest\n\ndef max_sum_rectangular_grid(grid, n):\n    if not isinstance(grid, list) or len(grid) != 2 or any(not isinstance(row, list) for row in grid):\n        raise TypeError(\"must be a list of lists\")\n    if len(grid[0]) != n or len(grid[1]) != n:\n        raise ValueError(\"must be a 2xN grid\")\n    \n    if n == 0:\n        return 0\n    \n    incl = max(grid[0][0], grid[1][0])\n    excl = 0\n    \n    for i in range(1, n):\n        excl_new = max(excl, incl)\n        incl = excl + max(grid[0][i], grid[1][i])\n        excl = excl_new\n    \n    return max(excl, incl)\n\n# Test cases\ndef test_basic_functionality():\n    assert max_sum_rectangular_grid([[1, 2, 3, 4], [5, 6, 7, 8]], 4) == 15, \"Should be 15 (5 + 6 + 4)\"\n    assert max_sum_rectangular_grid([[1, 2], [3, 4]], 2) == 4, \"Should be 4 (4 from second row)\"\n    assert max_sum_rectangular_grid([[5, 1, 2], [10, 3, 4]], 3) == 15, \"Should be 15 (10 + 5)\"\n\ndef test_edge_cases():\n    assert max_sum_rectangular_grid([[0, 0, 0], [0, 0, 0]], 3) == 0, \"Should be 0 (all zeros)\"\n    assert max_sum_rectangular_grid([[1], [2]], 1) == 2, \"Should be 2 (only one column)\"\n    assert max_sum_rectangular_grid([[10], [20]], 1) == 20, \"Should be 20 (only one column)\"\n\ndef test_exceptions():\n    with pytest.raises(IndexError, match=\"list index out of range\"):\n        max_sum_rectangular_grid([], 0)\n    with pytest.raises(ValueError, match=\"must be a 2xN grid\"):\n        max_sum_rectangular_grid([[1]], 1)\n    with pytest.raises(TypeError, match=\"must be a list of lists\"):\n        max_sum_rectangular_grid(None, 0)\n    with pytest.raises(ValueError, match=\"must be a 2xN grid\"):\n        max_sum_rectangular_grid([[1, 2], [3]], 2)\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7", "assert max_sum_rectangular_grid([ [ 1, 2, 3, 4, 5], [ 6, 7, 8, 9, 10] ], 5) == 24", "assert max_sum_rectangular_grid([ [7, 9, 11, 15, 19], [21, 25, 28, 31, 32] ], 5) == 81"], "challenge_test_list": [], "reference_code": "def max_sum_rectangular_grid(grid, n) : \r\n\tincl = max(grid[0][0], grid[1][0]) \r\n\texcl = 0\r\n\tfor i in range(1, n) : \r\n\t\texcl_new = max(excl, incl) \r\n\t\tincl = excl + max(grid[0][i], grid[1][i]) \r\n\t\texcl = excl_new \r\n\treturn max(excl, incl)"}
{"task_id": "315", "prompt": "Write a python function to find the first maximum length of even word.", "completion": "def find_Max_Len_Even(s): \n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n    \n    n = len(s) \n    currlen = 0\n    maxlen = 0\n    st = -1\n    first_even_word = \"\"\n\n    for i in range(n): \n        if s[i] == ' ' or i == n - 1: \n            if s[i] != ' ':\n                currlen += 1  # Include the last character if it's not a space\n            \n            if currlen % 2 == 0: \n                if currlen > maxlen: \n                    maxlen = currlen \n                    st = i - currlen + (1 if s[i] != ' ' else 0)\n                    first_even_word = s[st: st + maxlen]\n            currlen = 0 \n        else: \n            currlen += 1\n\n    if maxlen == 0: \n        return \"-1\" \n    return first_even_word", "test_list": ["assert find_Max_Len_Even(\"python language\") == \"language\"", "assert find_Max_Len_Even(\"maximum even length\") == \"length\"", "assert find_Max_Len_Even(\"eve\") == \"-1\""], "challenge_test_list": [], "reference_code": "def find_Max_Len_Even(str): \r\n    n = len(str) \r\n    i = 0\r\n    currlen = 0\r\n    maxlen = 0\r\n    st = -1\r\n    while (i < n): \r\n        if (str[i] == ' '): \r\n            if (currlen % 2 == 0): \r\n                if (maxlen < currlen): \r\n                    maxlen = currlen \r\n                    st = i - currlen \r\n            currlen = 0 \r\n        else : \r\n            currlen += 1\r\n        i += 1\r\n    if (currlen % 2 == 0): \r\n        if (maxlen < currlen): \r\n            maxlen = currlen \r\n            st = i - currlen \r\n    if (st == -1): \r\n        return \"-1\" \r\n    return str[st: st + maxlen] "}
{"task_id": "316", "prompt": "Write a function to find the index of the last occurrence of a given number in a sorted array.", "completion": "def find_last_occurrence(A, x):\n    if A is None or not isinstance(A, list) or (x is not None and not isinstance(x, (int, float))):\n        raise TypeError(\"Invalid input\")\n    \n    (left, right) = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            result = mid\n            left = mid + 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result", "test_list": ["assert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3", "assert find_last_occurrence([2, 3, 5, 8, 6, 6, 8, 9, 9, 9], 9) == 9", "assert find_last_occurrence([2, 2, 1, 5, 6, 6, 6, 9, 9, 9], 6) == 6"], "challenge_test_list": [], "reference_code": "def find_last_occurrence(A, x):\r\n    (left, right) = (0, len(A) - 1)\r\n    result = -1\r\n    while left <= right:\r\n        mid = (left + right) // 2\r\n        if x == A[mid]:\r\n            result = mid\r\n            left = mid + 1\r\n        elif x < A[mid]:\r\n            right = mid - 1\r\n        else:\r\n            left = mid + 1\r\n    return result "}
{"task_id": "317", "prompt": "Write a function to reflect the modified run-length encoding from a list.", "completion": "from itertools import groupby\n\ndef modified_encode(alist):\n    if not isinstance(alist, list):\n        raise TypeError(\"expected a list\")\n    \n    def ctr_ele(el):\n        if len(el) > 1:\n            return [len(el), el[0]]\n        else:\n            return el[0]\n    \n    return [ctr_ele(list(group)) for key, group in groupby(alist)]\n\n# Test cases\nimport pytest\n\ndef test_basic_functionality():\n    assert modified_encode(['a', 'a', 'b', 'b', 'b', 'c']) == [[2, 'a'], [3, 'b'], 'c'], \"Failed on basic encoding\"\n    assert modified_encode(['x', 'y', 'y', 'z', 'z', 'z', 'z']) == ['x', [2, 'y'], [4, 'z']], \"Failed on mixed encoding\"\n    assert modified_encode(['1', '1', '2', '3', '3']) == [[2, '1'], '2', [2, '3']], \"Failed on numeric encoding\"\n\ndef test_edge_cases():\n    assert modified_encode([]) == [], \"Failed on empty list\"\n    assert modified_encode(['a']) == ['a'], \"Failed on single element list\"\n    assert modified_encode(['b', 'b']) == [[2, 'b']], \"Failed on two identical elements\"\n\ndef test_exceptions():\n    with pytest.raises(TypeError, match=\"expected a list\"):\n        modified_encode(None)\n    with pytest.raises(TypeError, match=\"expected a list\"):\n        modified_encode(123)\n    with pytest.raises(TypeError, match=\"expected a list\"):\n        modified_encode(\"string\")\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]", "assert modified_encode('automatically')==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y']", "assert modified_encode('python')==['p', 'y', 't', 'h', 'o', 'n']"], "challenge_test_list": [], "reference_code": "from itertools import groupby\r\ndef modified_encode(alist):\r\n        def ctr_ele(el):\r\n            if len(el)>1: return [len(el), el[0]]\r\n            else: return el[0]\r\n        return [ctr_ele(list(group)) for key, group in groupby(alist)]"}
{"task_id": "318", "prompt": "Write a python function to find the maximum volume of a cuboid with given sum of sides.", "completion": "def max_volume(s):\n    if s < 3:\n        return 0  # No valid cuboid can be formed\n    maxvalue = 0\n    # Iterate through possible dimensions i, j, k\n    for i in range(1, s - 1): \n        for j in range(1, s - i): \n            k = s - i - j \n            if k > 0:  # Ensure k is positive\n                maxvalue = max(maxvalue, i * j * k)         \n    return maxvalue", "test_list": ["assert max_volume(8) == 18", "assert max_volume(4) == 2", "assert max_volume(1) == 0"], "challenge_test_list": [], "reference_code": "def max_volume (s): \r\n    maxvalue = 0\r\n    i = 1\r\n    for i in range(s - 1): \r\n        j = 1\r\n        for j in range(s): \r\n            k = s - i - j \r\n            maxvalue = max(maxvalue, i * j * k)         \r\n    return maxvalue "}
{"task_id": "319", "prompt": "Write a function to find all five characters long word in the given string by using regex.", "completion": "import re\n\ndef find_long_word(text):\n    if not isinstance(text, str):\n        raise TypeError(\"expected string or bytes-like object\")\n    return re.findall(r'\\b\\w{5}\\b', text)", "test_list": ["assert find_long_word('Please move back to strem') == ['strem']", "assert find_long_word('4K Ultra HD streaming player') == ['Ultra']", "assert find_long_word('Streaming Media Player') == ['Media']"], "challenge_test_list": [], "reference_code": "import re\r\ndef find_long_word(text):\r\n  return (re.findall(r\"\\b\\w{5}\\b\", text))"}
{"task_id": "320", "prompt": "Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.", "completion": "def sum_difference(n):\n    if not isinstance(n, int) or n < 0:\n        raise TypeError(\"unsupported operand type\")\n    \n    sumofsquares = 0\n    squareofsum = 0\n    for num in range(1, n + 1):\n        sumofsquares += num * num\n        squareofsum += num\n    squareofsum = squareofsum ** 2\n    return squareofsum - sumofsquares", "test_list": ["assert sum_difference(12)==5434", "assert sum_difference(20)==41230", "assert sum_difference(54)==2151270"], "challenge_test_list": [], "reference_code": "def sum_difference(n):\r\n    sumofsquares = 0\r\n    squareofsum = 0\r\n    for num in range(1, n+1):\r\n        sumofsquares += num * num\r\n        squareofsum += num\r\n    squareofsum = squareofsum ** 2\r\n    return squareofsum - sumofsquares"}
{"task_id": "321", "prompt": "Write a function to find the demlo number for the given number.", "completion": "def find_demlo(s):\n    if not isinstance(s, str):\n        raise TypeError(\"expected a string\")\n    \n    if s == \"0\" or s == \"\":\n        return \"\"\n    \n    l = int(s)\n    res = \"\"\n    \n    for i in range(1, l + 1):\n        res += str(i)\n    \n    for i in range(l - 1, 0, -1):\n        res += str(i)\n    \n    return res", "test_list": ["assert find_demlo(\"111111\") == '12345654321'", "assert find_demlo(\"1111\") == '1234321'", "assert find_demlo(\"13333122222\") == '123456789101110987654321'"], "challenge_test_list": [], "reference_code": "def find_demlo(s): \r\n\tl = len(s) \r\n\tres = \"\" \r\n\tfor i in range(1,l+1): \r\n\t\tres = res + str(i) \r\n\tfor i in range(l-1,0,-1): \r\n\t\tres = res + str(i) \r\n\treturn res \t"}
{"task_id": "322", "prompt": "Write a function to find all index positions of the minimum values in a given list.", "completion": "def position_min(list1):\n    if not isinstance(list1, list):\n        raise TypeError(\"must be a list\")\n    if not hasattr(list1, '__iter__'):\n        raise TypeError(\"object is not iterable\")\n    \n    if not list1:  # Handle empty list case\n        return []\n    \n    min_val = min(list1)\n    min_result = [i for i, j in enumerate(list1) if j == min_val]\n    return min_result", "test_list": ["assert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]", "assert position_min([1,2,2,2,4,4,4,5,5,5,5])==[0]", "assert position_min([2,1,5,6,8,3,4,9,10,11,8,12])==[1]"], "challenge_test_list": [], "reference_code": "def position_min(list1):\r\n    min_val = min(list1)\r\n    min_result = [i for i, j in enumerate(list1) if j == min_val]\r\n    return min_result"}
{"task_id": "323", "prompt": "Write a function to re-arrange the given array in alternating positive and negative items.", "completion": "def right_rotate(arr, n, out_of_place, cur):\n    temp = arr[cur]\n    for i in range(cur, out_of_place, -1):\n        arr[i] = arr[i - 1]\n    arr[out_of_place] = temp\n    return arr\n\ndef re_arrange(arr, n):\n    if arr is None or n is None or n < 0:\n        raise TypeError(\"Invalid input\")\n    \n    out_of_place = -1\n    for index in range(n):\n        if (out_of_place >= 0):\n            if ((arr[index] >= 0 and arr[out_of_place] < 0) or\n                (arr[index] < 0 and arr[out_of_place] >= 0)):\n                arr = right_rotate(arr, n, out_of_place, index)\n                if (index - out_of_place > 2):\n                    out_of_place += 2\n                else:\n                    out_of_place = -1\n        if (out_of_place == -1):\n            if ((arr[index] >= 0 and index % 2 == 0) or\n                (arr[index] < 0 and index % 2 == 1)):\n                out_of_place = index\n    return arr", "test_list": ["assert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]", "assert re_arrange([1, 2, 3, -4, -1, 4], 6) == [-4, 1, -1, 2, 3, 4]", "assert re_arrange([4, 7, 9, 77, -4, 5, -3, -9], 8) == [-4, 4, -3, 7, -9, 9, 77, 5]"], "challenge_test_list": [], "reference_code": "def right_rotate(arr, n, out_of_place, cur):\r\n\ttemp = arr[cur]\r\n\tfor i in range(cur, out_of_place, -1):\r\n\t\tarr[i] = arr[i - 1]\r\n\tarr[out_of_place] = temp\r\n\treturn arr\r\ndef re_arrange(arr, n):\r\n\tout_of_place = -1\r\n\tfor index in range(n):\r\n\t\tif (out_of_place >= 0):\r\n\t\t\tif ((arr[index] >= 0 and arr[out_of_place] < 0) or\r\n\t\t\t(arr[index] < 0 and arr[out_of_place] >= 0)):\r\n\t\t\t\tarr = right_rotate(arr, n, out_of_place, index)\r\n\t\t\t\tif (index-out_of_place > 2):\r\n\t\t\t\t\tout_of_place += 2\r\n\t\t\t\telse:\r\n\t\t\t\t\tout_of_place = - 1\r\n\t\tif (out_of_place == -1):\r\n\t\t\tif ((arr[index] >= 0 and index % 2 == 0) or\r\n\t\t\t (arr[index] < 0 and index % 2 == 1)):\r\n\t\t\t\tout_of_place = index\r\n\treturn arr"}
{"task_id": "324", "prompt": "Write a function to extract the sum of alternate chains of tuples.", "completion": "def sum_of_alternates(test_tuple):\n    sum1 = 0\n    sum2 = 0\n    for idx, ele in enumerate(test_tuple):\n        if not isinstance(ele, tuple):\n            raise TypeError(\"unsupported operand type\")\n        if idx % 2 == 0:\n            sum2 += sum(ele)\n        else:\n            sum1 += sum(ele)\n    return (sum1, sum2)", "test_list": ["assert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)", "assert sum_of_alternates((1, 2, 3, 4, 5)) == (6, 9)", "assert sum_of_alternates((6, 7, 8, 9, 4, 5)) == (21, 18)"], "challenge_test_list": [], "reference_code": "def sum_of_alternates(test_tuple):\r\n  sum1 = 0\r\n  sum2 = 0\r\n  for idx, ele in enumerate(test_tuple):\r\n    if idx % 2:\r\n      sum1 += ele\r\n    else:\r\n      sum2 += ele\r\n  return ((sum1),(sum2)) "}
{"task_id": "325", "prompt": "Write a python function to find the minimum number of squares whose sum is equal to a given number.", "completion": "def get_Min_Squares(n):\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer\")\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    \n    if n == 0:\n        return 0\n    if n <= 3:\n        return n\n    \n    res = n  # Maximum squares needed is n (1*1 + 1*1 + ...)\n    \n    for x in range(1, int(n**0.5) + 1):\n        temp = x * x\n        if temp > n:\n            break\n        else:\n            res = min(res, 1 + get_Min_Squares(n - temp))\n    \n    return res", "test_list": ["assert get_Min_Squares(6) == 3", "assert get_Min_Squares(2) == 2", "assert get_Min_Squares(4) == 1"], "challenge_test_list": [], "reference_code": "def get_Min_Squares(n):\r\n    if n <= 3:\r\n        return n;\r\n    res = n \r\n    for x in range(1,n + 1):\r\n        temp = x * x;\r\n        if temp > n:\r\n            break\r\n        else:\r\n            res = min(res,1 + get_Min_Squares(n  - temp)) \r\n    return res;"}
{"task_id": "326", "prompt": "Write a function to get the word with most number of occurrences in the given strings list.", "completion": "from collections import defaultdict \n\ndef most_occurrences(test_list):\n    if not isinstance(test_list, list):\n        raise TypeError(\"Input must be a list\")\n    \n    temp = defaultdict(int)\n    for sub in test_list:\n        if not isinstance(sub, str):\n            raise TypeError(\"All elements in the list must be strings\")\n        for wrd in sub.split():\n            temp[wrd] += 1\n            \n    if not temp:\n        return \"\"\n    \n    res = max(temp, key=temp.get)\n    return str(res)", "test_list": ["assert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'", "assert most_occurrences([\"Its been a great year\", \"this year is so worse\", \"this year is okay\"] ) == 'year'", "assert most_occurrences([\"Families can be reunited\", \"people can be reunited\", \"Tasks can be achieved \"] ) == 'can'"], "challenge_test_list": [], "reference_code": "from collections import defaultdict \r\n\r\ndef most_occurrences(test_list):\r\n  temp = defaultdict(int)\r\n  for sub in test_list:\r\n    for wrd in sub.split():\r\n      temp[wrd] += 1\r\n  res = max(temp, key=temp.get)\r\n  return (str(res)) "}
{"task_id": "327", "prompt": "Write a function to print check if the triangle is isosceles or not.", "completion": "def check_isosceles(x, y, z):\n    if not all(isinstance(side, (int, float)) for side in (x, y, z)):\n        raise TypeError(\"All sides must be numeric.\")\n    if x < 0 or y < 0 or z < 0:\n        raise ValueError(\"Sides must be non-negative.\")\n    \n    return x == y or y == z or z == x", "test_list": ["assert check_isosceles(6,8,12)==False ", "assert check_isosceles(6,6,12)==True", "assert check_isosceles(6,16,20)==False"], "challenge_test_list": [], "reference_code": "def check_isosceles(x,y,z):\r\n  if x==y or y==z or z==x:\r\n\t   return True\r\n  else:\r\n     return False"}
{"task_id": "328", "prompt": "Write a function to rotate a given list by specified number of items to the left direction.", "completion": "def rotate_left(list1, m, n):\n    # Validate input types\n    if not isinstance(m, int) or not isinstance(n, int):\n        raise TypeError(\"list indices must be integers or slices\")\n    \n    # Validate indices\n    if m < 0 or m >= len(list1):\n        raise IndexError(\"list index out of range\")\n    if n < 0 or n > len(list1):\n        raise IndexError(\"list index out of range\")\n    \n    # Perform the rotation\n    return list1[m:] + list1[:m]\n\n# Test cases\nimport pytest\n\ndef test_basic_functionality():\n    assert rotate_left([1, 2, 3, 4, 5], 1, 5) == [2, 3, 4, 5, 1], \"Should rotate left by 1\"\n    assert rotate_left([1, 2, 3, 4, 5], 2, 5) == [3, 4, 5, 1, 2], \"Should rotate left by 2\"\n    assert rotate_left([1, 2, 3, 4, 5], 0, 3) == [1, 2, 3], \"Should return first 3 elements\"\n    assert rotate_left(['a', 'b', 'c', 'd'], 1, 4) == ['b', 'c', 'd', 'a'], \"Should rotate left by 1 for strings\"\n\ndef test_edge_cases():\n    assert rotate_left([], 0, 0) == [], \"Should return empty list when input is empty\"\n    assert rotate_left([1], 0, 1) == [1], \"Should return the same single element list\"\n    assert rotate_left([1, 2], 1, 2) == [2, 1], \"Should rotate two elements\"\n    assert rotate_left([1, 2, 3], 3, 3) == [1, 2, 3], \"Should return the same list when rotating by its length\"\n\ndef test_exceptions():\n    with pytest.raises(IndexError, match=\"list index out of range\"):\n        rotate_left([1, 2, 3], 5, 3), \"Should raise IndexError for out of range m\"\n    with pytest.raises(IndexError, match=\"list index out of range\"):\n        rotate_left([1, 2, 3], 0, 5), \"Should raise IndexError for out of range n\"\n    with pytest.raises(TypeError, match=\"list indices must be integers or slices\"):\n        rotate_left([1, 2, 3], 'a', 3), \"Should raise TypeError for non-integer m\"\n    with pytest.raises(TypeError, match=\"list indices must be integers or slices\"):", "test_list": ["assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]", "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[3, 4, 5, 6, 7, 8, 9, 10, 1, 2]", "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2]"], "challenge_test_list": [], "reference_code": "def rotate_left(list1,m,n):\r\n  result =  list1[m:]+list1[:n]\r\n  return result"}
{"task_id": "329", "prompt": "Write a python function to count negative numbers in a list.", "completion": "def neg_count(lst):\n    if not isinstance(lst, list):\n        raise TypeError(\"unsupported operand type\")\n    \n    neg_count = 0\n    for num in lst:\n        if not isinstance(num, (int, float)):\n            raise TypeError(\"unsupported operand type\")\n        if num <= 0:\n            neg_count += 1\n    return neg_count", "test_list": ["assert neg_count([-1,-2,3,-4,-5]) == 4", "assert neg_count([1,2,3]) == 0", "assert neg_count([1,2,-3,-10,20]) == 2"], "challenge_test_list": [], "reference_code": "def neg_count(list):\r\n  neg_count= 0\r\n  for num in list: \r\n    if num <= 0: \r\n      neg_count += 1\r\n  return neg_count "}
{"task_id": "330", "prompt": "Write a function to find all three, four, five characters long words in the given string by using regex.", "completion": "import re\n\ndef find_char(text):\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n    return re.findall(r'\\b\\w{3,5}\\b', text)", "test_list": ["assert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']", "assert find_char('Certain service are subject to change MSR') == ['are', 'MSR']", "assert find_char('Third party legal desclaimers') == ['Third', 'party', 'legal']"], "challenge_test_list": [], "reference_code": "import re\r\ndef find_char(text):\r\n  return (re.findall(r\"\\b\\w{3,5}\\b\", text))"}
{"task_id": "331", "prompt": "Write a python function to count unset bits of a given number.", "completion": "def count_unset_bits(n):\n    if not isinstance(n, int):\n        raise TypeError(\"unsupported operand type\")\n    if n < 0:\n        raise ValueError(\"negative number\")\n    \n    count = 0\n    bits = n.bit_length()  # Get the number of bits required to represent n\n    for i in range(bits):\n        if (n & (1 << i)) == 0:\n            count += 1\n    return count + (1 if n == 0 else 0)  # Add 1 for the unset bit in case of 0", "test_list": ["assert count_unset_bits(2) == 1", "assert count_unset_bits(4) == 2", "assert count_unset_bits(6) == 1"], "challenge_test_list": [], "reference_code": "def count_unset_bits(n): \r\n    count = 0\r\n    x = 1\r\n    while(x < n + 1): \r\n        if ((x & n) == 0): \r\n            count += 1\r\n        x = x << 1\r\n    return count  "}
{"task_id": "332", "prompt": "Write a function to count character frequency of a given string.", "completion": "def char_frequency(str1):\n    if not isinstance(str1, str):\n        raise TypeError(\"expected string or bytes-like object\")\n    \n    frequency_dict = {}\n    for char in str1:\n        frequency_dict[char] = frequency_dict.get(char, 0) + 1\n    return frequency_dict", "test_list": ["assert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}", "assert char_frequency('program')=={'p': 1, 'r': 2, 'o': 1, 'g': 1, 'a': 1, 'm': 1}", "assert char_frequency('language')=={'l': 1, 'a': 2, 'n': 1, 'g': 2, 'u': 1, 'e': 1}"], "challenge_test_list": [], "reference_code": "def char_frequency(str1):\r\n    dict = {}\r\n    for n in str1:\r\n        keys = dict.keys()\r\n        if n in keys:\r\n            dict[n] += 1\r\n        else:\r\n            dict[n] = 1\r\n    return dict"}
{"task_id": "333", "prompt": "Write a python function to sort a list according to the second element in sublist.", "completion": "def Sort(sub_li):\n    if not isinstance(sub_li, list) or not all(isinstance(i, list) for i in sub_li):\n        raise TypeError(\"expected a list of lists\")\n    sub_li.sort(key=lambda x: x[1])\n    return sub_li", "test_list": ["assert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]", "assert Sort([['452', 10], ['256', 5], ['100', 20], ['135', 15]]) == [['256', 5], ['452', 10], ['135', 15], ['100', 20]]", "assert Sort([['rishi', 10], ['akhil', 5], ['ramya', 20], ['gaur', 15]]) == [['akhil', 5], ['rishi', 10], ['gaur', 15], ['ramya', 20]]"], "challenge_test_list": [], "reference_code": "def Sort(sub_li): \r\n    sub_li.sort(key = lambda x: x[1]) \r\n    return sub_li "}
{"task_id": "334", "prompt": "Write a python function to check whether the triangle is valid or not if sides are given.", "completion": "def check_Validity(a, b, c):\n    if not all(isinstance(side, (int, float)) for side in (a, b, c)):\n        raise TypeError(\"unsupported operand type\")\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n    return (a + b > c) and (a + c > b) and (b + c > a)", "test_list": ["assert check_Validity(1,2,3) == False", "assert check_Validity(2,3,5) == False", "assert check_Validity(7,10,5) == True"], "challenge_test_list": [], "reference_code": "def check_Validity(a,b,c):  \r\n    if (a + b <= c) or (a + c <= b) or (b + c <= a) : \r\n        return False\r\n    else: \r\n        return True        "}
{"task_id": "335", "prompt": "Write a function to find the sum of arithmetic progression.", "completion": "def ap_sum(a, n, d):\n    if not isinstance(a, (int, float)) or not isinstance(n, int) or not isinstance(d, (int, float)):\n        raise TypeError(\"unsupported operand type\")\n    if n < 0:\n        return 0\n    total = (n * (2 * a + (n - 1) * d)) / 2\n    return total", "test_list": ["assert ap_sum(1,5,2)==25", "assert ap_sum(2,6,4)==72", "assert ap_sum(1,4,5)==34"], "challenge_test_list": [], "reference_code": "def ap_sum(a,n,d):\r\n  total = (n * (2 * a + (n - 1) * d)) / 2\r\n  return total"}
{"task_id": "336", "prompt": "Write a function to check whether the given month name contains 28 days or not.", "completion": "import pytest\n\ndef check_monthnum(monthname1):\n    if monthname1 is None:\n        raise TypeError(\"argument of type 'NoneType' is not iterable\")\n    \n    monthname1 = monthname1.strip()  # Remove leading and trailing whitespace\n    if monthname1 == \"February\":\n        return True\n    else:\n        return False\n\n# Test cases\ndef test_basic_functionality_february():\n    assert check_monthnum(\"February\") is True, \"February should return True for 28 days\"\n\ndef test_basic_functionality_non_february():\n    assert check_monthnum(\"January\") is False, \"January should return False for 28 days\"\n    assert check_monthnum(\"March\") is False, \"March should return False for 28 days\"\n    assert check_monthnum(\"April\") is False, \"April should return False for 28 days\"\n    assert check_monthnum(\"May\") is False, \"May should return False for 28 days\"\n    assert check_monthnum(\"June\") is False, \"June should return False for 28 days\"\n    assert check_monthnum(\"July\") is False, \"July should return False for 28 days\"\n    assert check_monthnum(\"August\") is False, \"August should return False for 28 days\"\n    assert check_monthnum(\"September\") is False, \"September should return False for 28 days\"\n    assert check_monthnum(\"October\") is False, \"October should return False for 28 days\"\n    assert check_monthnum(\"November\") is False, \"November should return False for 28 days\"\n    assert check_monthnum(\"December\") is False, \"December should return False for 28 days\"\n\ndef test_edge_cases_empty_input():\n    with pytest.raises(TypeError, match=\"argument of type 'NoneType' is not iterable\"):\n        check_monthnum(None)\n\ndef test_edge_cases_invalid_input():\n    assert check_monthnum(\"\") is False, \"Empty string should return False for 28 days\"\n    assert check_monthnum(\" \") is False, \"Whitespace string should return False for 28 days\"\n    assert check_monthnum(\"Feb\") is False, \"Abbreviated month should return False for 28 days\"\n    assert check_monthnum(\"February \") is True, \"Trailing space should not affect the result\"\n\ndef test_boundary_conditions():\n    assert check_monthnum(\"February\") is True, \"February should return True for 28 days\"\n    assert check_monthnum(\"February \") is True, \"Trailing space should not affect the result\"\n    assert check_monthnum(\"February 2023\") is False, \"Invalid month format should return False\"\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert check_monthnum(\"February\")==True", "assert check_monthnum(\"January\")==False", "assert check_monthnum(\"March\")==False"], "challenge_test_list": [], "reference_code": "def check_monthnum(monthname1):\r\n  if monthname1 == \"February\":\r\n    return True\r\n  else:\r\n    return False"}
{"task_id": "337", "prompt": "Write a function that matches a word at the end of a string, with optional punctuation.", "completion": "import re\n\ndef text_match_word(text):\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n    \n    patterns = r'\\w+\\S*$'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "test_list": ["assert text_match_word(\"python.\")==('Found a match!')", "assert text_match_word(\"python.\")==('Found a match!')", "assert text_match_word(\"  lang  .\")==('Not matched!')"], "challenge_test_list": [], "reference_code": "import re\r\ndef text_match_word(text):\r\n        patterns = '\\w+\\S*$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return 'Not matched!'"}
{"task_id": "338", "prompt": "Write a python function to count the number of substrings with same first and last characters.", "completion": "def count_Substring_With_Equal_Ends(s): \n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n    \n    result = 0\n    n = len(s)\n    \n    for i in range(n):\n        count = 1  # Start with the current character\n        for j in range(i + 1, n):\n            if s[i] == s[j]:\n                count += 1\n            else:\n                break\n        result += count\n    \n    return result", "test_list": ["assert count_Substring_With_Equal_Ends('aba') == 4", "assert count_Substring_With_Equal_Ends('abcab') == 7", "assert count_Substring_With_Equal_Ends('abc') == 3"], "challenge_test_list": [], "reference_code": "def check_Equality(s): \r\n    return (ord(s[0]) == ord(s[len(s) - 1])); \r\ndef count_Substring_With_Equal_Ends(s): \r\n    result = 0; \r\n    n = len(s); \r\n    for i in range(n):\r\n        for j in range(1,n-i+1): \r\n            if (check_Equality(s[i:i+j])): \r\n                result+=1; \r\n    return result; "}
{"task_id": "339", "prompt": "Write a python function to find the maximum occuring divisor in an interval.", "completion": "def find_Divisor(x, y):\n    if not isinstance(x, int) or not isinstance(y, int):\n        raise TypeError(\"unsupported operand type\")\n    \n    if x == y:\n        return x\n    \n    start = min(x, y)\n    end = max(x, y)\n    \n    max_divisor = start\n    for i in range(start, end + 1):\n        if i == 0:\n            continue\n        if start % i == 0:\n            max_divisor = i\n    \n    return max_divisor", "test_list": ["assert find_Divisor(2,2) == 2", "assert find_Divisor(2,5) == 2", "assert find_Divisor(5,10) == 2"], "challenge_test_list": [], "reference_code": "def find_Divisor(x,y):  \r\n    if (x==y): \r\n        return y \r\n    return 2"}
{"task_id": "340", "prompt": "Write a python function to find the sum of the three lowest positive numbers from a given list of numbers.", "completion": "def sum_three_smallest_nums(lst):\n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list\")\n    if len(lst) < 3:\n        raise ValueError(\"Not enough values to unpack\")\n    \n    positive_nums = sorted(x for x in lst if x > 0)\n    return sum(positive_nums[:3]) if len(positive_nums) >= 3 else sum(positive_nums)\n\n# Test cases\nimport pytest\n\ndef test_basic_functionality():\n    assert sum_three_smallest_nums([3, 1, 2, 5, 4]) == 6, \"Should be 1 + 2 + 3 = 6\"\n    assert sum_three_smallest_nums([7, 8, 9, 1, 2, 3]) == 6, \"Should be 1 + 2 + 3 = 6\"\n    assert sum_three_smallest_nums([10, 20, 30, 1, 2, 3]) == 6, \"Should be 1 + 2 + 3 = 6\"\n    assert sum_three_smallest_nums([5, 5, 5, 5, 5]) == 15, \"Should be 5 + 5 + 5 = 15\"\n\ndef test_edge_cases():\n    assert sum_three_smallest_nums([1]) == 1, \"Should be 1\"\n    assert sum_three_smallest_nums([1, 2]) == 3, \"Should be 1 + 2 = 3\"\n    assert sum_three_smallest_nums([1, 2, 3]) == 6, \"Should be 1 + 2 + 3 = 6\"\n    assert sum_three_smallest_nums([0, -1, -2, 3, 4]) == 7, \"Should be 3 + 4 = 7\"\n\ndef test_exceptions():\n    with pytest.raises(TypeError, match=\"Input must be a list\"):\n        sum_three_smallest_nums(\"not a list\")\n    with pytest.raises(TypeError, match=\"Input must be a list\"):\n        sum_three_smallest_nums(None)\n    with pytest.raises(ValueError, match=\"Not enough values to unpack\"):\n        sum_three_smallest_nums([])\n\ndef test_negative_cases():\n    assert sum_three_smallest_nums([-1, -2, -3]) == 0, \"Should be 0 as there are no positive numbers\"\n    assert sum_three_smallest_nums([-1, 0, 0]) == 0, \"Should be 0 as there are no positive numbers\"\n    assert sum_three_smallest_nums([-5, -10, -3]) == 0, \"Should be 0 as there are no positive numbers\"\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37", "assert sum_three_smallest_nums([1,2,3,4,5]) == 6", "assert sum_three_smallest_nums([0,1,2,3,4,5]) == 6"], "challenge_test_list": [], "reference_code": "def sum_three_smallest_nums(lst):\r\n\treturn sum(sorted([x for x in lst if x > 0])[:3])"}
{"task_id": "341", "prompt": "Write a function to convert the given set into ordered tuples.", "completion": "def set_to_tuple(s):\n    if not isinstance(s, set):\n        raise TypeError(\"Input must be a set\")\n    return tuple(sorted(s, key=lambda x: (isinstance(x, str), x)))", "test_list": ["assert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)", "assert set_to_tuple({6, 7, 8, 9, 10, 11}) == (6, 7, 8, 9, 10, 11)", "assert set_to_tuple({12, 13, 14, 15, 16}) == (12, 13, 14, 15, 16)"], "challenge_test_list": [], "reference_code": "def set_to_tuple(s):\r\n  t = tuple(sorted(s))\r\n  return (t)"}
{"task_id": "342", "prompt": "Write a function to find the smallest range that includes at-least one element from each of the given arrays.", "completion": "from heapq import heappop, heappush\n\nclass Node:\n    def __init__(self, value, list_num, index):\n        self.value = value\n        self.list_num = list_num\n        self.index = index\n        \n    def __lt__(self, other):\n        return self.value < other.value\n\ndef find_minimum_range(lists):\n    if not lists or any(not lst for lst in lists):\n        raise IndexError(\"One of the lists is empty\")\n    \n    high = float('-inf')\n    p = (0, float('inf'))\n    pq = []\n    \n    # Initialize the priority queue and find the initial high value\n    for i in range(len(lists)):\n        heappush(pq, Node(lists[i][0], i, 0))\n        high = max(high, lists[i][0])\n    \n    while True:\n        top = heappop(pq)\n        low = top.value\n        i = top.list_num\n        j = top.index\n        \n        # Update the range if the current range is smaller\n        if high - low < p[1] - p[0]:\n            p = (low, high)\n        \n        # If we reached the end of one list, we cannot continue\n        if j == len(lists[i]) - 1:\n            return p\n        \n        # Push the next element from the same list into the priority queue\n        heappush(pq, Node(lists[i][j + 1], i, j + 1))\n        high = max(high, lists[i][j + 1])", "test_list": ["assert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)", "assert find_minimum_range([[ 2, 3, 4, 8, 10, 15 ], [1, 5, 12], [7, 8, 15, 16], [3, 6]]) == (4, 7)", "assert find_minimum_range([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]]) == (5, 7)"], "challenge_test_list": [], "reference_code": "from heapq import heappop, heappush\r\nclass Node:\r\n    def __init__(self, value, list_num, index):\r\n        self.value = value\r\n        self.list_num = list_num\r\n        self.index = index\r\n    def __lt__(self, other):\r\n        return self.value < other.value\r\ndef find_minimum_range(list):\r\n    high = float('-inf')\r\n    p = (0, float('inf'))\r\n    pq = []\r\n    for i in range(len(list)):\r\n        heappush(pq, Node(list[i][0], i, 0))\r\n        high = max(high, list[i][0])\r\n    while True:\r\n        top = heappop(pq)\r\n        low = top.value\r\n        i = top.list_num\r\n        j = top.index\r\n        if high - low < p[1] - p[0]:\r\n            p = (low, high)\r\n        if j == len(list[i]) - 1:\r\n            return p\r\n        heappush(pq, Node(list[i][j + 1], i, j + 1))\r\n        high = max(high, list[i][j + 1])"}
{"task_id": "343", "prompt": "Write a function to calculate the number of digits and letters in a string.", "completion": "def dig_let(s):\n    if not isinstance(s, str):\n        raise TypeError(\"expected a string\")\n    \n    d = l = 0\n    for c in s:\n        if c.isdigit():\n            d += 1\n        elif c.isalpha():\n            l += 1\n    return (l, d)", "test_list": ["assert dig_let(\"python\")==(6,0)", "assert dig_let(\"program\")==(7,0)", "assert dig_let(\"python3.0\")==(6,2)"], "challenge_test_list": [], "reference_code": "def dig_let(s):\r\n d=l=0\r\n for c in s:\r\n    if c.isdigit():\r\n        d=d+1\r\n    elif c.isalpha():\r\n        l=l+1\r\n    else:\r\n        pass\r\n return (l,d)"}
{"task_id": "344", "prompt": "Write a python function to find number of elements with odd factors in a given range.", "completion": "import math\n\ndef count_Odd_Squares(n, m):\n    if not isinstance(n, int) or not isinstance(m, int):\n        raise TypeError(\"unsupported operand type\")\n    if n < 0 or m < 0:\n        raise ValueError(\"math domain error\")\n    \n    # Calculate the number of odd squares in the range [n, m]\n    # Odd squares are squares of odd numbers: 1^2, 3^2, 5^2, ...\n    # The largest odd number whose square is <= m is floor(sqrt(m)) if it's odd, else it's floor(sqrt(m)) - 1\n    # The smallest odd number whose square is >= n is ceil(sqrt(n)) if it's odd, else it's ceil(sqrt(n)) + 1\n    \n    start = math.ceil(math.sqrt(n))\n    end = math.floor(math.sqrt(m))\n    \n    # Adjust start to be the next odd number if it's even\n    if start % 2 == 0:\n        start += 1\n    \n    # Adjust end to be the last odd number if it's even\n    if end % 2 == 0:\n        end -= 1\n    \n    # Count the odd numbers in the range [start, end]\n    if start > end:\n        return 0\n    \n    return (end - start) // 2 + 1\n\n# The tests can be run using pytest as described in the original prompt.", "test_list": ["assert count_Odd_Squares(5,100) == 8", "assert count_Odd_Squares(8,65) == 6", "assert count_Odd_Squares(2,5) == 1"], "challenge_test_list": [], "reference_code": "def count_Odd_Squares(n,m): \r\n    return int(m**0.5) - int((n-1)**0.5) "}
{"task_id": "345", "prompt": "Write a function to find the difference between two consecutive numbers in a given list.", "completion": "def diff_consecutivenums(nums):\n    if not isinstance(nums, list):\n        raise TypeError(\"unsupported operand type\")\n    for num in nums:\n        if not isinstance(num, (int, float)):\n            raise TypeError(\"unsupported operand type\")\n    result = [b - a for a, b in zip(nums[:-1], nums[1:])]\n    return result", "test_list": ["assert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]", "assert diff_consecutivenums([4, 5, 8, 9, 6, 10])==[1, 3, 1, -3, 4]", "assert diff_consecutivenums([0, 1, 2, 3, 4, 4, 4, 4, 5, 7])==[1, 1, 1, 1, 0, 0, 0, 1, 2]"], "challenge_test_list": [], "reference_code": "def diff_consecutivenums(nums):\r\n    result = [b-a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result"}
{"task_id": "346", "prompt": "Write a function to find entringer number e(n, k).", "completion": "def zigzag(n, k): \n    if not isinstance(n, int) or not isinstance(k, int):\n        raise TypeError(\"Both n and k must be integers\")\n    \n    if n < 0 or k < 0:\n        return 0\n    \n    if (n == 0 and k == 0): \n        return 1\n    if (k == 0): \n        return 0\n    if (k > n): \n        return 0\n    \n    return zigzag(n - 1, k - 1) + zigzag(n - 1, k)\n\n# Test cases\nimport pytest\n\ndef test_basic_functionality():\n    assert zigzag(0, 0) == 1, \"Expected e(0, 0) to be 1\"\n    assert zigzag(1, 1) == 1, \"Expected e(1, 1) to be 1\"\n    assert zigzag(2, 1) == 1, \"Expected e(2, 1) to be 1\"\n    assert zigzag(2, 2) == 2, \"Expected e(2, 2) to be 2\"\n    assert zigzag(3, 2) == 3, \"Expected e(3, 2) to be 3\"\n\ndef test_edge_cases():\n    assert zigzag(0, 1) == 0, \"Expected e(0, 1) to be 0\"\n    assert zigzag(1, 0) == 0, \"Expected e(1, 0) to be 0\"\n    assert zigzag(1, 2) == 0, \"Expected e(1, 2) to be 0\"\n    assert zigzag(5, 0) == 0, \"Expected e(5, 0) to be 0\"\n\ndef test_exceptions():\n    with pytest.raises(TypeError):\n        zigzag(\"a\", 1)\n    with pytest.raises(TypeError):\n        zigzag(1, \"b\")\n    with pytest.raises(TypeError):\n        zigzag(None, 1)\n    with pytest.raises(TypeError):\n        zigzag(1, None)\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert zigzag(4, 3) == 5", "assert zigzag(4, 2) == 4", "assert zigzag(3, 1) == 1"], "challenge_test_list": [], "reference_code": "def zigzag(n, k): \r\n\tif (n == 0 and k == 0): \r\n\t\treturn 1\r\n\tif (k == 0): \r\n\t\treturn 0\r\n\treturn zigzag(n, k - 1) + zigzag(n - 1, n - k)"}
{"task_id": "347", "prompt": "Write a python function to count the number of squares in a rectangle.", "completion": "def count_Squares(m, n):\n    # Check for invalid input types\n    if not isinstance(m, int) or not isinstance(n, int):\n        raise TypeError(\"unsupported operand type\")\n    \n    # Handle edge cases where dimensions are less than or equal to zero\n    if m <= 0 or n <= 0:\n        return 0\n    \n    # Ensure m is the smaller dimension\n    if m > n:\n        m, n = n, m\n    \n    # Calculate the number of squares\n    total_squares = 0\n    for size in range(1, m + 1):\n        total_squares += (n - size + 1) * (m - size + 1)\n    \n    return total_squares", "test_list": ["assert count_Squares(4,3) == 20", "assert count_Squares(1,2) == 2", "assert count_Squares(2,2) == 5"], "challenge_test_list": [], "reference_code": "def count_Squares(m,n): \r\n    if (n < m): \r\n        temp = m \r\n        m = n \r\n        n = temp \r\n    return n * (n + 1) * (3 * m - n + 1) // 6"}
{"task_id": "348", "prompt": "Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.", "completion": "def bin_coff(n, r): \n    val = 1\n    if (r > (n - r)): \n        r = (n - r) \n    for i in range(0, r): \n        val *= (n - i) \n        val //= (i + 1) \n    return val \n\ndef find_ways(M): \n    if not isinstance(M, int):\n        raise TypeError(\"unsupported operand type\")\n    if M < 0:\n        raise ValueError(\"M must be non-negative\")\n    if M % 2 != 0:\n        return 0\n    n = M // 2\n    a = bin_coff(2 * n, n) \n    b = a // (n + 1) \n    return b", "test_list": ["assert find_ways(4) == 2", "assert find_ways(6) == 5", "assert find_ways(8) == 14"], "challenge_test_list": [], "reference_code": "def bin_coff(n, r): \r\n\tval = 1\r\n\tif (r > (n - r)): \r\n\t\tr = (n - r) \r\n\tfor i in range(0, r): \r\n\t\tval *= (n - i) \r\n\t\tval //= (i + 1) \r\n\treturn val \r\ndef find_ways(M): \r\n\tn = M // 2\r\n\ta = bin_coff(2 * n, n) \r\n\tb = a // (n + 1) \r\n\treturn (b) "}
{"task_id": "349", "prompt": "Write a python function to check whether the given string is a binary string or not.", "completion": "def check(string):\n    if not isinstance(string, str):\n        raise TypeError(\"Input must be a string\")\n    \n    if string == \"\":\n        return \"No\"\n    \n    p = set(string)\n    s = {'0', '1'}\n    \n    if s == p or p == {'0'} or p == {'1'}:\n        return \"Yes\"\n    else:\n        return \"No\"", "test_list": ["assert check(\"01010101010\") == \"Yes\"", "assert check(\"name0\") == \"No\"", "assert check(\"101\") == \"Yes\""], "challenge_test_list": [], "reference_code": "def check(string) :\r\n    p = set(string) \r\n    s = {'0', '1'} \r\n    if s == p or p == {'0'} or p == {'1'}: \r\n        return (\"Yes\") \r\n    else : \r\n        return (\"No\") "}
{"task_id": "350", "prompt": "Write a python function to minimize the length of the string by removing occurrence of only one character.", "completion": "def minimum_Length(s):\n    if not isinstance(s, str):\n        raise TypeError(\"string indices must be integers\")\n    \n    maxOcc = 0\n    n = len(s)\n    arr = [0] * 26\n    \n    for i in range(n):\n        arr[ord(s[i]) - ord('a')] += 1\n    \n    for count in arr:\n        if count > maxOcc:\n            maxOcc = count\n            \n    return n - maxOcc", "test_list": ["assert minimum_Length(\"mnm\") == 1", "assert minimum_Length(\"abcda\") == 3", "assert minimum_Length(\"abcb\") == 2"], "challenge_test_list": [], "reference_code": "def minimum_Length(s) : \r\n    maxOcc = 0\r\n    n = len(s) \r\n    arr = [0]*26\r\n    for i in range(n) : \r\n        arr[ord(s[i]) -ord('a')] += 1\r\n    for i in range(26) : \r\n        if arr[i] > maxOcc : \r\n            maxOcc = arr[i] \r\n    return n - maxOcc "}
{"task_id": "351", "prompt": "Write a python function to find the first element occurring k times in a given array.", "completion": "def first_Element(arr, n, k):\n    if arr is None or not isinstance(arr, list) or not isinstance(n, int) or not isinstance(k, int):\n        raise TypeError(\"Invalid input types\")\n    if k < 1:\n        raise ValueError(\"k must be a positive integer\")\n    \n    count_map = {}\n    for i in range(n):\n        if arr[i] in count_map:\n            count_map[arr[i]] += 1\n        else:\n            count_map[arr[i]] = 1\n            \n    for i in range(n):\n        if count_map[arr[i]] == k:\n            return arr[i]\n    \n    return -1", "test_list": ["assert first_Element([0,1,2,3,4,5],6,1) == 0", "assert first_Element([1,2,1,3,4],5,2) == 1", "assert first_Element([2,3,4,3,5,7,1,2,3,5],10,2) == 2"], "challenge_test_list": [], "reference_code": "def first_Element(arr,n,k): \r\n    count_map = {}; \r\n    for i in range(0, n): \r\n        if(arr[i] in count_map.keys()): \r\n            count_map[arr[i]] += 1\r\n        else: \r\n            count_map[arr[i]] = 1\r\n        i += 1\r\n    for i in range(0, n):  \r\n        if (count_map[arr[i]] == k): \r\n            return arr[i] \r\n        i += 1 \r\n    return -1"}
{"task_id": "352", "prompt": "Write a python function to check whether all the characters in a given string are unique.", "completion": "def unique_Characters(s):\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n    \n    return len(s) == len(set(s))", "test_list": ["assert unique_Characters('aba') == False", "assert unique_Characters('abc') == True", "assert unique_Characters('abab') == False"], "challenge_test_list": [], "reference_code": "def unique_Characters(str):\r\n    for i in range(len(str)):\r\n        for j in range(i + 1,len(str)): \r\n            if (str[i] == str[j]):\r\n                return False;\r\n    return True;"}
{"task_id": "353", "prompt": "Write a function to remove a specified column from a given nested list.", "completion": "def remove_column(list1, n):\n    # Check if n is an integer\n    if not isinstance(n, int):\n        raise TypeError(\"list indices must be integers or slices, not str\")\n    \n    # Iterate through each sublist\n    for i in list1:\n        # Check if the index n is within the bounds of the sublist\n        if n < 0 or n >= len(i):\n            raise IndexError(\"list index out of range\")\n        # Remove the element at index n\n        del i[n]\n    \n    return list1", "test_list": ["assert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]", "assert remove_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[[1, 2], [-2, 4], [1, -1]]", "assert remove_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[[3], [7], [3], [15, 17], [7], [11]]"], "challenge_test_list": [], "reference_code": "def remove_column(list1, n):\r\n   for i in list1: \r\n    del i[n] \r\n   return list1"}
{"task_id": "354", "prompt": "Write a function to find t-nth term of arithemetic progression.", "completion": "import pytest\n\ndef tn_ap(a, n, d):\n    if not isinstance(a, (int, float)):\n        raise TypeError(\"First term must be an integer or float\")\n    if not isinstance(n, int):\n        raise TypeError(\"n must be an integer\")\n    if not isinstance(d, (int, float)):\n        raise TypeError(\"Difference must be an integer or float\")\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n\n    tn = a + (n - 1) * d\n    return tn\n\n# Test cases\ndef test_basic_functionality():\n    assert tn_ap(1, 1, 1) == 1, \"Should return the first term as is\"\n    assert tn_ap(1, 2, 1) == 2, \"Should return the second term\"\n    assert tn_ap(2, 3, 2) == 6, \"Should return the third term in the progression\"\n    assert tn_ap(5, 5, 3) == 17, \"Should return the fifth term in the progression\"\n\ndef test_edge_cases():\n    assert tn_ap(0, 1, 0) == 0, \"Should return 0 for the first term with zero difference\"\n    assert tn_ap(10, 1, 5) == 10, \"Should return the first term when n is 1\"\n    assert tn_ap(10, 0, 5) == 5, \"Should return the term before the first term (n=0)\"\n    assert tn_ap(10, 1000, 1) == 1009, \"Should handle large n values correctly\"\n\ndef test_exceptions():\n    with pytest.raises(TypeError):\n        tn_ap(\"a\", 1, 1), \"Should raise TypeError for non-integer first term\"\n    with pytest.raises(TypeError):\n        tn_ap(1, \"n\", 1), \"Should raise TypeError for non-integer n\"\n    with pytest.raises(TypeError):\n        tn_ap(1, 1, \"d\"), \"Should raise TypeError for non-integer difference\"\n    with pytest.raises(ValueError):\n        tn_ap(1, -1, 1), \"Should raise ValueError for negative n\"\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert tn_ap(1,5,2)==9", "assert tn_ap(2,6,4)==22", "assert tn_ap(1,4,5)==16"], "challenge_test_list": [], "reference_code": "def tn_ap(a,n,d):\r\n  tn = a + (n - 1) * d\r\n  return tn"}
{"task_id": "355", "prompt": "Write a python function to count the number of rectangles in a circle of radius r.", "completion": "import math\n\ndef count_Rectangles(radius):\n    if not isinstance(radius, (int, float)):\n        raise TypeError(\"unsupported operand type\")\n    if radius < 0:\n        raise ValueError(\"negative radius\")\n    \n    rectangles = 0\n    diameter = 2 * radius\n    diameterSquare = diameter * diameter\n    \n    # Iterate through possible rectangle dimensions\n    for a in range(1, diameter + 1):\n        for b in range(1, diameter + 1):\n            diagnalLengthSquare = (a * a + b * b)\n            if diagnalLengthSquare <= diameterSquare:\n                rectangles += 1\n                \n    return rectangles", "test_list": ["assert count_Rectangles(2) == 8", "assert count_Rectangles(1) == 1", "assert count_Rectangles(0) == 0"], "challenge_test_list": [], "reference_code": "def count_Rectangles(radius):  \r\n    rectangles = 0 \r\n    diameter = 2 * radius \r\n    diameterSquare = diameter * diameter \r\n    for a in range(1, 2 * radius):  \r\n        for b in range(1, 2 * radius): \r\n            diagnalLengthSquare = (a * a +  b * b)  \r\n            if (diagnalLengthSquare <= diameterSquare) : \r\n                rectangles += 1\r\n    return rectangles "}
{"task_id": "356", "prompt": "Write a function to find the third angle of a triangle using two angles.", "completion": "def find_angle(a, b):\n    if not (0 <= a < 180) or not (0 <= b < 180):\n        raise ValueError(\"Angles must be non-negative and less than 180\")\n    c = 180 - (a + b)\n    return c", "test_list": ["assert find_angle(47,89)==44", "assert find_angle(45,95)==40", "assert find_angle(50,40)==90"], "challenge_test_list": [], "reference_code": "def find_angle(a,b):\r\n c = 180 - (a + b)\r\n return c\r\n"}
{"task_id": "357", "prompt": "Write a function to find the maximum element of all the given tuple records.", "completion": "def find_max(test_list):\n    if not test_list:\n        raise ValueError(\"max() arg is an empty sequence\")\n    \n    flat_list = []\n    for tup in test_list:\n        if not isinstance(tup, tuple):\n            raise TypeError(\"Invalid input: expected a tuple\")\n        flat_list.extend(tup)\n    \n    if not flat_list:\n        return float('-inf')\n    \n    return max(int(x) for x in flat_list if isinstance(x, (int, float)) and not isinstance(x, bool))", "test_list": ["assert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10", "assert find_max([(3, 5), (7, 8), (6, 2), (7, 11), (9, 8)]) == 11", "assert find_max([(4, 6), (8, 9), (7, 3), (8, 12), (10, 9)]) == 12"], "challenge_test_list": [], "reference_code": "def find_max(test_list):\r\n  res = max(int(j) for i in test_list for j in i)\r\n  return (res) "}
{"task_id": "358", "prompt": "Write a function to find modulo division of two lists using map and lambda function.", "completion": "def moddiv_list(nums1, nums2):\n    if not isinstance(nums1, list) or not isinstance(nums2, list):\n        raise TypeError(\"unsupported operand type\")\n    \n    if len(nums1) != len(nums2):\n        raise ValueError(\"Input lists must have the same length\")\n    \n    result = map(lambda x, y: x % y if y != 0 else 0, nums1, nums2)\n    return list(result)", "test_list": ["assert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]", "assert moddiv_list([3,2],[1,4])==[0, 2]", "assert moddiv_list([90,120],[50,70])==[40, 50]"], "challenge_test_list": [], "reference_code": "def moddiv_list(nums1,nums2):\r\n  result = map(lambda x, y: x % y, nums1, nums2)\r\n  return list(result)"}
{"task_id": "359", "prompt": "Write a python function to check whether one root of the quadratic equation is twice of the other or not.", "completion": "def Check_Solution(a, b, c):\n    # Check for valid numeric inputs\n    if not all(isinstance(x, (int, float)) for x in (a, b, c)):\n        raise TypeError(\"All coefficients must be numeric.\")\n    \n    # Handle the case where a is zero, which is not a valid quadratic equation\n    if a == 0:\n        return \"No\"\n    \n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # If the discriminant is negative, there are no real roots\n    if discriminant < 0:\n        return \"No\"\n    \n    # Calculate the roots using the quadratic formula\n    root1 = (-b + discriminant**0.5) / (2*a)\n    root2 = (-b - discriminant**0.5) / (2*a)\n    \n    # Check if one root is twice the other\n    if root1 == 2 * root2 or root2 == 2 * root1:\n        return \"Yes\"\n    else:\n        return \"No\"", "test_list": ["assert Check_Solution(1,3,2) == \"Yes\"", "assert Check_Solution(1,2,3) == \"No\"", "assert Check_Solution(1,-5,6) == \"No\""], "challenge_test_list": [], "reference_code": "def Check_Solution(a,b,c): \r\n    if (2*b*b == 9*a*c): \r\n        return (\"Yes\"); \r\n    else: \r\n        return (\"No\"); "}
{"task_id": "360", "prompt": "Write a function to find the n’th carol number.", "completion": "def get_carol(n):\n    if not isinstance(n, int):\n        raise TypeError(\"unsupported operand type\")\n    if n < 0:\n        raise ValueError(\"negative integer\")\n    \n    result = (2 ** (n + 1)) - 2\n    return result * result - 2\n\n# Test cases\nimport pytest\n\ndef test_basic_functionality():\n    assert get_carol(0) == -2, \"Failed for n=0\"\n    assert get_carol(1) == 1, \"Failed for n=1\"\n    assert get_carol(2) == 6, \"Failed for n=2\"\n    assert get_carol(3) == 23, \"Failed for n=3\"\n    assert get_carol(4) == 70, \"Failed for n=4\"\n\ndef test_edge_cases():\n    assert get_carol(5) == 201, \"Failed for n=5\"\n    assert get_carol(10) == 4096, \"Failed for n=10\"\n    assert get_carol(15) == 98306, \"Failed for n=15\"\n\ndef test_exceptions():\n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        get_carol(\"string\")\n    \n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        get_carol(None)\n    \n    with pytest.raises(ValueError, match=\"negative integer\"):\n        get_carol(-1)\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert get_carol(2) == 7", "assert get_carol(4) == 223", "assert get_carol(5) == 959"], "challenge_test_list": [], "reference_code": "def get_carol(n): \r\n\tresult = (2**n) - 1\r\n\treturn result * result - 2"}
{"task_id": "361", "prompt": "Write a function to remove empty lists from a given list of lists.", "completion": "def remove_empty(list1):\n    if not isinstance(list1, list):\n        raise TypeError(\"object is not iterable\")\n    return [x for x in list1 if isinstance(x, list) and x]", "test_list": ["assert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']", "assert remove_empty([[], [], [],[],[], 'Green', [1,2], 'Blue', [], []])==[ 'Green', [1, 2], 'Blue']", "assert remove_empty([[], [], [], 'Python',[],[], 'programming', 'language',[],[],[], [], []])==['Python', 'programming', 'language']"], "challenge_test_list": [], "reference_code": "def remove_empty(list1):\r\n  remove_empty = [x for x in list1 if x]\r\n  return remove_empty"}
{"task_id": "362", "prompt": "Write a python function to find the item with maximum occurrences in a given list.", "completion": "def max_occurrences(nums):\n    if nums is None:\n        raise TypeError(\"Input should not be None\")\n    if len(nums) == 0:\n        return None\n    \n    max_val = 0\n    result = nums[0] \n    for i in nums:\n        occu = nums.count(i)\n        if occu > max_val:\n            max_val = occu\n            result = i \n    return result", "test_list": ["assert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2", "assert max_occurrences([1,2,6,7,0,1,0,1,0]) == 1,0", "assert max_occurrences([1,2,3,1,2,4,1]) == 1"], "challenge_test_list": [], "reference_code": "def max_occurrences(nums):\r\n    max_val = 0\r\n    result = nums[0] \r\n    for i in nums:\r\n        occu = nums.count(i)\r\n        if occu > max_val:\r\n            max_val = occu\r\n            result = i \r\n    return result"}
{"task_id": "363", "prompt": "Write a function to add the k elements to each element in the tuple.", "completion": "import pytest\n\ndef add_K_element(test_list, K):\n    if not isinstance(K, int):\n        raise TypeError(\"unsupported operand type\")\n    \n    res = []\n    for sub in test_list:\n        if not isinstance(sub, tuple):\n            raise TypeError(\"tuple index out of range\")\n        res.append(tuple(j + K for j in sub))\n    \n    return res\n\n# Test cases\ndef test_basic_functionality():\n    assert add_K_element([(1, 2), (3, 4)], 5) == [(6, 7), (8, 9)], \"Should add 5 to each element\"\n    assert add_K_element([(0, 0), (0, 0)], 10) == [(10, 10), (10, 10)], \"Should add 10 to each element\"\n    assert add_K_element([(1, -1), (-1, 1)], 3) == [(4, 2), (2, 4)], \"Should add 3 to each element\"\n\ndef test_edge_cases():\n    assert add_K_element([], 5) == [], \"Should return an empty list when input is empty\"\n    assert add_K_element([(), ()], 5) == [(5, 5), (5, 5)], \"Should handle empty tuples correctly\"\n    assert add_K_element([(1,)], 0) == [(1,)], \"Should return the same tuple when K is 0\"\n\ndef test_exceptions():\n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        add_K_element([(1, 2), (3, 4)], \"five\")\n    with pytest.raises(TypeError, match=\"tuple index out of range\"):\n        add_K_element([(1, 2), (3,)], 5)\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]", "assert add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8) == [(9, 10, 11), (12, 13, 14), (15, 16, 17)]", "assert add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9) == [(20, 21, 22), (23, 24, 25), (26, 27, 28)]"], "challenge_test_list": [], "reference_code": "def add_K_element(test_list, K):\r\n  res = [tuple(j + K for j in sub ) for sub in test_list]\r\n  return (res) "}
{"task_id": "364", "prompt": "Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.", "completion": "import pytest\n\ndef make_flip(ch): \n    return '1' if (ch == '0') else '0'\n\ndef get_flip_with_starting_character(s, expected): \n    flip_count = 0\n    for i in range(len(s)): \n        if (s[i] != expected): \n            flip_count += 1\n        expected = make_flip(expected) \n    return flip_count \n\ndef min_flip_to_make_string_alternate(s): \n    if not isinstance(s, str):\n        raise TypeError(\"expected a string\")\n    if any(c not in '01' for c in s):\n        raise ValueError(\"invalid character in string\")\n    \n    return min(get_flip_with_starting_character(s, '0'), get_flip_with_starting_character(s, '1'))\n\n# Test cases\ndef test_basic_functionality_alternating_0s_and_1s():\n    assert min_flip_to_make_string_alternate(\"010101\") == 0, \"Should require 0 flips for already alternating string\"\n    assert min_flip_to_make_string_alternate(\"101010\") == 0, \"Should require 0 flips for already alternating string\"\n\ndef test_basic_functionality_non_alternating():\n    assert min_flip_to_make_string_alternate(\"0000\") == 2, \"Should require 2 flips to make it alternating\"\n    assert min_flip_to_make_string_alternate(\"1111\") == 2, \"Should require 2 flips to make it alternating\"\n    assert min_flip_to_make_string_alternate(\"0011\") == 1, \"Should require 1 flip to make it alternating\"\n\ndef test_edge_cases_empty_string():\n    assert min_flip_to_make_string_alternate(\"\") == 0, \"Should require 0 flips for an empty string\"\n\ndef test_edge_cases_single_character():\n    assert min_flip_to_make_string_alternate(\"0\") == 0, \"Should require 0 flips for a single character\"\n    assert min_flip_to_make_string_alternate(\"1\") == 0, \"Should require 0 flips for a single character\"\n\ndef test_edge_cases_two_characters():\n    assert min_flip_to_make_string_alternate(\"00\") == 1, \"Should require 1 flip to make it alternating\"\n    assert min_flip_to_make_string_alternate(\"11\") == 1, \"Should require 1 flip to make it alternating\"\n    assert min_flip_to_make_string_alternate(\"01\") == 0, \"Should require 0 flips for already alternating string\"\n    assert min_flip_to_make_string_alternate(\"10\") == 0, \"Should require 0 flips for already alternating string\"\n\ndef test_exceptions_invalid_input():\n    with pytest.raises(TypeError, match=\"expected a string\"):\n        min_flip_to_make_string_alternate(1234)\n    with pytest.raises(TypeError, match=\"expected a string\"):\n        min_flip_to_make_string_alternate(None)\n    with", "test_list": ["assert min_flip_to_make_string_alternate(\"0001010111\") == 2", "assert min_flip_to_make_string_alternate(\"001\") == 1", "assert min_flip_to_make_string_alternate(\"010111011\") == 2 "], "challenge_test_list": [], "reference_code": "def make_flip(ch): \r\n\treturn '1' if (ch == '0') else '0'\r\ndef get_flip_with_starting_charcter(str, expected): \r\n\tflip_count = 0\r\n\tfor i in range(len( str)): \r\n\t\tif (str[i] != expected): \r\n\t\t\tflip_count += 1\r\n\t\texpected = make_flip(expected) \r\n\treturn flip_count \r\ndef min_flip_to_make_string_alternate(str): \r\n\treturn min(get_flip_with_starting_charcter(str, '0'),get_flip_with_starting_charcter(str, '1')) "}
{"task_id": "365", "prompt": "Write a python function to count the number of digits of a given number.", "completion": "def count_Digit(n):\n    if not isinstance(n, int):\n        raise TypeError(\"invalid literal for int()\")\n    \n    n = abs(n)  # Consider the absolute value for digit counting\n    if n == 0:\n        return 1  # Special case for zero\n    \n    count = 0\n    while n != 0:\n        n //= 10\n        count += 1\n    return count", "test_list": ["assert count_Digit(12345) == 5", "assert count_Digit(11223305) == 8", "assert count_Digit(4123459) == 7"], "challenge_test_list": [], "reference_code": "def count_Digit(n):\r\n    count = 0\r\n    while n != 0:\r\n        n //= 10\r\n        count += 1\r\n    return count"}
{"task_id": "366", "prompt": "Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.", "completion": "import pytest\n\ndef adjacent_num_product(list_nums):\n    if len(list_nums) < 2:\n        return 0\n    return max(a * b for a, b in zip(list_nums, list_nums[1:]))\n\n# Test cases\ndef test_basic_functionality():\n    assert adjacent_num_product([1, 2, 3, 4]) == 12, \"Should be 12 (4*3)\"\n    assert adjacent_num_product([-1, -2, -3, -4]) == 6, \"Should be 6 (-2*-3)\"\n    assert adjacent_num_product([5, 1, 2, 3]) == 15, \"Should be 15 (5*3)\"\n    assert adjacent_num_product([0, 2, 3, 4]) == 12, \"Should be 12 (3*4)\"\n\ndef test_edge_cases():\n    assert adjacent_num_product([1]) == 0, \"Should be 0 (only one element)\"\n    assert adjacent_num_product([]) == 0, \"Should be 0 (empty list)\"\n    assert adjacent_num_product([1, 0]) == 0, \"Should be 0 (1*0)\"\n    assert adjacent_num_product([-1, 0]) == 0, \"Should be 0 (-1*0)\"\n    assert adjacent_num_product([-1, 1]) == -1, \"Should be -1 (-1*1)\"\n\ndef test_exceptions():\n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        adjacent_num_product([1, 'a', 3])\n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        adjacent_num_product(None)\n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        adjacent_num_product([1, 2, 3.5])\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert adjacent_num_product([1,2,3,4,5,6]) == 30", "assert adjacent_num_product([1,2,3,4,5]) == 20", "assert adjacent_num_product([2,3]) == 6"], "challenge_test_list": [], "reference_code": "def adjacent_num_product(list_nums):\r\n    return max(a*b for a, b in zip(list_nums, list_nums[1:]))"}
{"task_id": "367", "prompt": "Write a function to check if a binary tree is balanced or not.", "completion": "def is_tree_balanced(root): \n    def check_balance(node): \n        if node is None: \n            return 0, True\n        left_height, left_balanced = check_balance(node.left) \n        right_height, right_balanced = check_balance(node.right) \n        current_height = max(left_height, right_height) + 1 \n        current_balanced = left_balanced and right_balanced and abs(left_height - right_height) <= 1 \n        return current_height, current_balanced\n    \n    _, balanced = check_balance(root) \n    return balanced", "test_list": ["assert is_tree_balanced(root) == False", "assert is_tree_balanced(root1) == True", "assert is_tree_balanced(root2) == False "], "challenge_test_list": [], "reference_code": "class Node: \r\n\tdef __init__(self, data): \r\n\t\tself.data = data \r\n\t\tself.left = None\r\n\t\tself.right = None\r\ndef get_height(root): \r\n\tif root is None: \r\n\t\treturn 0\r\n\treturn max(get_height(root.left), get_height(root.right)) + 1\r\ndef is_tree_balanced(root): \r\n\tif root is None: \r\n\t\treturn True\r\n\tlh = get_height(root.left) \r\n\trh = get_height(root.right) \r\n\tif (abs(lh - rh) <= 1) and is_tree_balanced( \r\n\troot.left) is True and is_tree_balanced( root.right) is True: \r\n\t\treturn True\r\n\treturn False"}
{"task_id": "368", "prompt": "Write a function to repeat the given tuple n times.", "completion": "def repeat_tuples(test_tup, N):\n    if not isinstance(test_tup, tuple):\n        raise TypeError(\"expected an iterable\")\n    if not isinstance(N, int) or N < 0:\n        raise ValueError(\"N must be a non-negative integer\")\n    return (test_tup,) * N", "test_list": ["assert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))", "assert repeat_tuples((1, 2), 3) == ((1, 2), (1, 2), (1, 2))", "assert repeat_tuples((3, 4), 5) == ((3, 4), (3, 4), (3, 4), (3, 4), (3, 4))"], "challenge_test_list": [], "reference_code": "def repeat_tuples(test_tup, N):\r\n  res = ((test_tup, ) * N)\r\n  return (res) "}
{"task_id": "369", "prompt": "Write a function to find the lateral surface area of cuboid", "completion": "import pytest\n\ndef lateralsurface_cuboid(l, w, h):\n    # Check for negative dimensions\n    if l < 0 or w < 0 or h < 0:\n        raise ValueError(\"negative dimensions\")\n    \n    # Check for non-numeric types\n    if not all(isinstance(dim, (int, float)) for dim in (l, w, h)):\n        raise TypeError(\"unsupported operand type\")\n    \n    # Calculate the lateral surface area\n    LSA = 2 * h * (l + w)\n    return LSA\n\n# Test cases\ndef test_basic_functionality():\n    assert lateralsurface_cuboid(2, 3, 4) == 40, \"Should be 40 for dimensions 2, 3, 4\"\n    assert lateralsurface_cuboid(1, 1, 1) == 4, \"Should be 4 for dimensions 1, 1, 1\"\n    assert lateralsurface_cuboid(5, 5, 5) == 60, \"Should be 60 for dimensions 5, 5, 5\"\n\ndef test_edge_cases():\n    assert lateralsurface_cuboid(0, 0, 0) == 0, \"Should be 0 for dimensions 0, 0, 0\"\n    assert lateralsurface_cuboid(1, 1, 0) == 0, \"Should be 0 for dimensions 1, 1, 0\"\n    assert lateralsurface_cuboid(1, 0, 1) == 0, \"Should be 0 for dimensions 1, 0, 1\"\n    assert lateralsurface_cuboid(0, 1, 1) == 0, \"Should be 0 for dimensions 0, 1, 1\"\n\ndef test_exceptions():\n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        lateralsurface_cuboid(\"a\", 3, 4)\n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        lateralsurface_cuboid(2, \"b\", 4)\n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        lateralsurface_cuboid(2, 3, \"c\")\n    with pytest.raises(ValueError, match=\"negative dimensions\"):\n        lateralsurface_cuboid(-1, 2, 3)\n    with pytest.raises(ValueError, match=\"negative dimensions\"):\n        lateralsurface_cuboid(2, -1, 3)\n    with pytest.raises(ValueError, match=\"negative dimensions\"):\n        lateralsurface_cuboid(2, 3, -1)\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert lateralsurface_cuboid(8,5,6)==156", "assert lateralsurface_cuboid(7,9,10)==320", "assert lateralsurface_cuboid(10,20,30)==1800"], "challenge_test_list": [], "reference_code": "def lateralsurface_cuboid(l,w,h):\r\n  LSA = 2*h*(l+w)\r\n  return LSA"}
{"task_id": "370", "prompt": "Write a function to sort a tuple by its float element.", "completion": "def float_sort(price):\n    sorted_price = []\n    for item in price:\n        try:\n            # Attempt to convert the second element to float\n            float_value = float(item[1])\n            sorted_price.append((item[0], float_value))\n        except ValueError:\n            raise ValueError(f\"could not convert string to float: '{item[1]}'\")\n        except TypeError:\n            raise TypeError(f\"float() argument must be a string or a number, not '{type(item[1]).__name__}'\")\n    \n    # Sort the list of tuples by the float value in descending order\n    sorted_price.sort(key=lambda x: x[1], reverse=True)\n    \n    # Return the sorted list with original string values\n    return [(item[0], str(item[1])) for item in sorted_price]", "test_list": ["assert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] ", "assert float_sort([('item1', '15'), ('item2', '10'), ('item3', '20')])==[('item3', '20'), ('item1', '15'), ('item2', '10')] ", "assert float_sort([('item1', '5'), ('item2', '10'), ('item3', '14')])==[('item3', '14'), ('item2', '10'), ('item1', '5')] "], "challenge_test_list": [], "reference_code": "def float_sort(price):\r\n  float_sort=sorted(price, key=lambda x: float(x[1]), reverse=True)\r\n  return float_sort"}
{"task_id": "371", "prompt": "Write a function to find the smallest missing element in a sorted array.", "completion": "def smallest_missing(A, left_element, right_element):\n    if A is None or not isinstance(A, list):\n        raise TypeError(\"Input must be a list\")\n    if left_element > right_element:\n        return left_element\n    mid = left_element + (right_element - left_element) // 2\n    if mid < len(A) and A[mid] == mid:\n        return smallest_missing(A, mid + 1, right_element)\n    else:\n        return smallest_missing(A, left_element, mid - 1)", "test_list": ["assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7", "assert smallest_missing([0, 1, 2, 6, 9, 11, 15], 0, 6) == 3", "assert smallest_missing([1, 2, 3, 4, 6, 9, 11, 15], 0, 7) == 0"], "challenge_test_list": [], "reference_code": "def smallest_missing(A, left_element, right_element):\r\n    if left_element > right_element:\r\n        return left_element\r\n    mid = left_element + (right_element - left_element) // 2\r\n    if A[mid] == mid:\r\n        return smallest_missing(A, mid + 1, right_element)\r\n    else:\r\n        return smallest_missing(A, left_element, mid - 1)"}
{"task_id": "372", "prompt": "Write a function to sort a given list of elements in ascending order using heap queue algorithm.", "completion": "import heapq as hq\n\ndef heap_assending(nums):\n    if not isinstance(nums, list):\n        raise TypeError(\"must be a list of numbers\")\n    if not all(isinstance(x, (int, float)) for x in nums):\n        raise TypeError(\"must be a list of numbers\")\n    \n    hq.heapify(nums)\n    s_result = [hq.heappop(nums) for _ in range(len(nums))]\n    return s_result", "test_list": ["assert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]", "assert heap_assending([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]", "assert heap_assending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"], "challenge_test_list": [], "reference_code": "import heapq as hq\r\ndef heap_assending(nums):\r\n  hq.heapify(nums)\r\n  s_result = [hq.heappop(nums) for i in range(len(nums))]\r\n  return s_result"}
{"task_id": "373", "prompt": "Write a function to find the volume of a cuboid.", "completion": "import pytest\n\ndef volume_cuboid(l, w, h):\n    # Check for negative dimensions\n    if l < 0 or w < 0 or h < 0:\n        raise ValueError(\"negative dimensions are not allowed\")\n    \n    # Check for non-numeric types\n    if not all(isinstance(dim, (int, float)) for dim in (l, w, h)):\n        raise TypeError(\"unsupported operand type\")\n    \n    # Calculate volume\n    volume = l * w * h\n    return volume\n\n# Test cases\ndef test_basic_functionality():\n    assert volume_cuboid(2, 3, 4) == 24, \"Should be 24 for dimensions 2, 3, 4\"\n    assert volume_cuboid(1, 1, 1) == 1, \"Should be 1 for dimensions 1, 1, 1\"\n    assert volume_cuboid(5, 5, 5) == 125, \"Should be 125 for dimensions 5, 5, 5\"\n\ndef test_edge_cases():\n    assert volume_cuboid(0, 5, 5) == 0, \"Should be 0 when one dimension is 0\"\n    assert volume_cuboid(5, 0, 5) == 0, \"Should be 0 when one dimension is 0\"\n    assert volume_cuboid(5, 5, 0) == 0, \"Should be 0 when one dimension is 0\"\n    assert volume_cuboid(1, 1, 0) == 0, \"Should be 0 when one dimension is 0\"\n    assert volume_cuboid(1, 1, -1) == -1, \"Should be -1 for dimensions 1, 1, -1\"\n\ndef test_exceptions():\n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        volume_cuboid(\"a\", 2, 3)\n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        volume_cuboid(2, \"b\", 3)\n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        volume_cuboid(2, 3, \"c\")\n    with pytest.raises(ValueError, match=\"negative dimensions are not allowed\"):\n        volume_cuboid(-1, 2, 3)\n    with pytest.raises(ValueError, match=\"negative dimensions are not allowed\"):\n        volume_cuboid(2, -1, 3)\n    with pytest.raises(ValueError, match=\"negative dimensions are not allowed\"):\n        volume_cuboid(2, 3, -1)\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert volume_cuboid(1,2,3)==6", "assert volume_cuboid(5,7,9)==315", "assert volume_cuboid(10,15,21)==3150"], "challenge_test_list": [], "reference_code": "def volume_cuboid(l,w,h):\r\n  volume=l*w*h\r\n  return volume"}
{"task_id": "374", "prompt": "Write a function to print all permutations of a given string including duplicates.", "completion": "def permute_string(s):\n    if not isinstance(s, str):\n        raise TypeError(\"expected a string\")\n    \n    if len(s) == 0:\n        return ['']\n    \n    from itertools import permutations\n    return sorted(set([''.join(p) for p in permutations(s)]))", "test_list": ["assert permute_string('ab')==['ab', 'ba']", "assert permute_string('abc')==['abc', 'bac', 'bca', 'acb', 'cab', 'cba']", "assert permute_string('abcd')==['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'abdc', 'badc', 'bdac', 'bdca', 'adbc', 'dabc', 'dbac', 'dbca', 'adcb', 'dacb', 'dcab', 'dcba']"], "challenge_test_list": [], "reference_code": "def permute_string(str):\r\n    if len(str) == 0:\r\n        return ['']\r\n    prev_list = permute_string(str[1:len(str)])\r\n    next_list = []\r\n    for i in range(0,len(prev_list)):\r\n        for j in range(0,len(str)):\r\n            new_str = prev_list[i][0:j]+str[0]+prev_list[i][j:len(str)-1]\r\n            if new_str not in next_list:\r\n                next_list.append(new_str)\r\n    return next_list"}
{"task_id": "375", "prompt": "Write a function to round the given number to the nearest multiple of a specific number.", "completion": "import pytest\n\ndef round_num(n, m):\n    if m == 0:\n        raise ZeroDivisionError(\"Cannot round with a multiple of 0\")\n    if not isinstance(n, (int, float)) or not isinstance(m, (int, float)):\n        raise TypeError(\"Both n and m must be numbers\")\n    \n    # Calculate the nearest multiple\n    rounded = round(n / m) * m\n    return rounded\n\ndef test_round_num_basic_functionality():\n    assert round_num(10, 3) == 9, \"Should round 10 to nearest multiple of 3, which is 9\"\n    assert round_num(11, 3) == 12, \"Should round 11 to nearest multiple of 3, which is 12\"\n    assert round_num(15, 5) == 15, \"Should round 15 to nearest multiple of 5, which is 15\"\n    assert round_num(14, 5) == 15, \"Should round 14 to nearest multiple of 5, which is 15\"\n    assert round_num(7, 2) == 8, \"Should round 7 to nearest multiple of 2, which is 8\"\n\ndef test_round_num_edge_cases():\n    assert round_num(0, 1) == 0, \"Should round 0 to nearest multiple of 1, which is 0\"\n    assert round_num(1, 1) == 1, \"Should round 1 to nearest multiple of 1, which is 1\"\n    assert round_num(-1, 1) == -1, \"Should round -1 to nearest multiple of 1, which is -1\"\n    assert round_num(-2, 3) == -3, \"Should round -2 to nearest multiple of 3, which is -3\"\n    assert round_num(2, 0.5) == 2.0, \"Should round 2 to nearest multiple of 0.5, which is 2.0\"\n\ndef test_round_num_boundary_conditions():\n    assert round_num(2.5, 1) == 3, \"Should round 2.5 to nearest multiple of 1, which is 3\"\n    assert round_num(2.4, 1) == 2, \"Should round 2.4 to nearest multiple of 1, which is 2\"\n    assert round_num(3.5, 1) == 4, \"Should round 3.5 to nearest multiple of 1, which is 4\"\n    assert round_num(3.499, 1) == 3, \"Should round 3.499 to nearest multiple of 1, which is 3\"\n\ndef test_round_num_exceptions():\n    with pytest.raises(ZeroDivisionError):\n        round_num(10, 0), \"Should raise", "test_list": ["assert round_num(4722,10)==4720", "assert round_num(1111,5)==1110", "assert round_num(219,2)==218"], "challenge_test_list": [], "reference_code": "def round_num(n,m):\r\n    a = (n //m) * m\r\n    b = a + m\r\n    return (b if n - a > b - n else a)"}
{"task_id": "376", "prompt": "Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.", "completion": "def remove_replica(test_tup):\n    if not isinstance(test_tup, tuple):\n        raise TypeError(f\"tuple expected, got '{type(test_tup).__name__}'\")\n    \n    temp = set()\n    res = tuple(ele if ele not in temp and not temp.add(ele) else 'MSP' for ele in test_tup)\n    return res", "test_list": ["assert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')", "assert remove_replica((2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9)) == (2, 3, 4, 'MSP', 5, 6, 'MSP', 7, 8, 9, 'MSP')", "assert remove_replica((2, 2, 5, 4, 5, 7, 5, 6, 7, 7)) == (2, 'MSP', 5, 4, 'MSP', 7, 'MSP', 6, 'MSP', 'MSP')"], "challenge_test_list": [], "reference_code": "def remove_replica(test_tup):\r\n  temp = set()\r\n  res = tuple(ele if ele not in temp and not temp.add(ele) \r\n\t\t\t\telse 'MSP' for ele in test_tup)\r\n  return (res)"}
{"task_id": "377", "prompt": "Write a python function to remove all occurrences of a character in a given string.", "completion": "def remove_Char(s, c):\n    if not isinstance(s, str) or not isinstance(c, str):\n        raise TypeError(\"string indices must be integers or slices, not str\")\n    return s.replace(c, \"\")", "test_list": ["assert remove_Char(\"aba\",'a') == \"b\"", "assert remove_Char(\"toggle\",'g') == \"tole\"", "assert remove_Char(\"aabbc\",'b') == \"aac\""], "challenge_test_list": [], "reference_code": "def remove_Char(s,c) :  \r\n    counts = s.count(c) \r\n    s = list(s) \r\n    while counts :  \r\n        s.remove(c) \r\n        counts -= 1 \r\n    s = '' . join(s)   \r\n    return (s) "}
{"task_id": "378", "prompt": "Write a python function to shift last element to first position in the given list.", "completion": "def move_first(test_list):\n    if not isinstance(test_list, list):\n        raise TypeError(\"unsupported operand type\")\n    if len(test_list) == 0 or len(test_list) == 1:\n        return test_list\n    return [test_list[-1]] + test_list[:-1]", "test_list": ["assert move_first([1,2,3,4]) == [4,1,2,3]", "assert move_first([0,1,2,3]) == [3,0,1,2]", "assert move_first([9,8,7,1]) == [1,9,8,7]"], "challenge_test_list": [], "reference_code": "def move_first(test_list):\r\n  test_list = test_list[-1:] + test_list[:-1]  \r\n  return test_list"}
{"task_id": "379", "prompt": "Write a function to find the surface area of a cuboid.", "completion": "import pytest\n\ndef surfacearea_cuboid(l, w, h):\n    # Check for negative dimensions\n    if l < 0 or w < 0 or h < 0:\n        raise ValueError(\"negative dimensions\")\n    \n    # Check for non-numeric types\n    if not all(isinstance(dim, (int, float)) for dim in (l, w, h)):\n        raise TypeError(\"unsupported operand type\")\n    \n    # Calculate surface area\n    SA = 2 * (l * w + l * h + w * h)\n    return SA\n\n# Test cases\ndef test_basic_functionality():\n    assert surfacearea_cuboid(2, 3, 4) == 52, \"Expected surface area for dimensions 2, 3, 4 is 52\"\n    assert surfacearea_cuboid(1, 1, 1) == 6, \"Expected surface area for dimensions 1, 1, 1 is 6\"\n    assert surfacearea_cuboid(5, 5, 5) == 150, \"Expected surface area for dimensions 5, 5, 5 is 150\"\n\ndef test_edge_cases():\n    assert surfacearea_cuboid(0, 0, 0) == 0, \"Expected surface area for dimensions 0, 0, 0 is 0\"\n    assert surfacearea_cuboid(1, 0, 1) == 4, \"Expected surface area for dimensions 1, 0, 1 is 4\"\n    assert surfacearea_cuboid(1, 1, 0) == 4, \"Expected surface area for dimensions 1, 1, 0 is 4\"\n    assert surfacearea_cuboid(0, 1, 1) == 4, \"Expected surface area for dimensions 0, 1, 1 is 4\"\n\ndef test_exceptions():\n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        surfacearea_cuboid(\"a\", 3, 4)\n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        surfacearea_cuboid(2, None, 4)\n    with pytest.raises(ValueError, match=\"negative dimensions\"):\n        surfacearea_cuboid(-1, 2, 3)\n    with pytest.raises(ValueError, match=\"negative dimensions\"):\n        surfacearea_cuboid(2, -2, 3)\n    with pytest.raises(ValueError, match=\"negative dimensions\"):\n        surfacearea_cuboid(2, 3, -3)\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert surfacearea_cuboid(1,2,3)==22", "assert surfacearea_cuboid(5,7,9)==286", "assert surfacearea_cuboid(10,15,21)==1350"], "challenge_test_list": [], "reference_code": "def surfacearea_cuboid(l,w,h):\r\n  SA = 2*(l*w + l * h + w * h)\r\n  return SA"}
{"task_id": "380", "prompt": "Write a function to generate a two-dimensional array.", "completion": "import pytest\n\ndef multi_list(rownum, colnum):\n    if not isinstance(rownum, int):\n        raise TypeError(\"Row number must be an integer\")\n    if not isinstance(colnum, int):\n        raise TypeError(\"Column number must be an integer\")\n    if rownum < 0:\n        raise ValueError(\"Row number must be non-negative\")\n    if colnum < 0:\n        raise ValueError(\"Column number must be non-negative\")\n    \n    multi_list = [[0 for col in range(colnum)] for row in range(rownum)]\n    for row in range(rownum):\n        for col in range(colnum):\n            multi_list[row][col] = row * col\n    return multi_list\n\n# Test cases\ndef test_basic_functionality_2x3():\n    result = multi_list(2, 3)\n    expected = [[0, 0, 0], [0, 1, 2]]\n    assert result == expected, f\"Expected {expected}, but got {result}\"\n\ndef test_basic_functionality_3x2():\n    result = multi_list(3, 2)\n    expected = [[0, 0], [0, 1], [0, 2]]\n    assert result == expected, f\"Expected {expected}, but got {result}\"\n\ndef test_basic_functionality_4x4():\n    result = multi_list(4, 4)\n    expected = [[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6], [0, 3, 6, 9]]\n    assert result == expected, f\"Expected {expected}, but got {result}\"\n\ndef test_edge_case_empty_input():\n    result = multi_list(0, 0)\n    expected = []\n    assert result == expected, f\"Expected {expected}, but got {result}\"\n\ndef test_edge_case_zero_columns():\n    result = multi_list(3, 0)\n    expected = [[0], [0], [0]]\n    assert result == expected, f\"Expected {expected}, but got {result}\"\n\ndef test_edge_case_zero_rows():\n    result = multi_list(0, 5)\n    expected = []\n    assert result == expected, f\"Expected {expected}, but got {result}\"\n\ndef test_exceptions_negative_rows():\n    with pytest.raises(ValueError, match=\"Row number must be non-negative\"):\n        multi_list(-1, 3)\n\ndef test_exceptions_negative_columns():\n    with pytest.raises(ValueError, match=\"Column number must be non-negative\"):\n        multi_list(3, -1)\n\ndef test_exceptions_non_integer_rows():\n    with pytest.raises(TypeError, match=\"Row number must be an integer\"):\n        multi_list(2.5, 3)\n\ndef test_exceptions_non_integer_columns():\n    with pytest.raises(TypeError", "test_list": ["assert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] ", "assert multi_list(5,7)==[[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]]", "assert multi_list(10,15)==[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28], [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42], [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70], [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84], [0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98], [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112], [0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126]]"], "challenge_test_list": [], "reference_code": "def multi_list(rownum,colnum):\r\n  multi_list = [[0 for col in range(colnum)] for row in range(rownum)]\r\n  for row in range(rownum):\r\n    for col in range(colnum):\r\n        multi_list[row][col]= row*col\r\n  return multi_list\r\n"}
{"task_id": "381", "prompt": "Write a function to sort a list of lists by a given index of the inner list.", "completion": "from operator import itemgetter\n\ndef index_on_inner_list(list_data, index_no):\n    # Check if the input is a list\n    if not isinstance(list_data, list):\n        raise TypeError(\"list indices must be integers or slices, not str\")\n    \n    # Check if the index is an integer\n    if not isinstance(index_no, int):\n        raise TypeError(\"list indices must be integers or slices, not str\")\n    \n    # Check if the index is within the valid range for the inner lists\n    if any(not isinstance(inner_list, list) for inner_list in list_data):\n        raise ValueError(\"All elements of list_data must be lists\")\n    \n    if list_data and (index_no < -len(list_data[0]) or index_no >= len(list_data[0])):\n        raise IndexError(\"list index out of range\")\n    \n    # Sort the list of lists by the specified index\n    result = sorted(list_data, key=itemgetter(index_no))\n    return result", "test_list": ["assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]", "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,1)==[('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99)]", "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[('Wyatt Knott', 91, 94), ('Brady Kent', 97, 96), ('Beau Turnbull', 94, 98), ('Greyson Fulton', 98, 99)]"], "challenge_test_list": [], "reference_code": "from operator import itemgetter\r\ndef index_on_inner_list(list_data, index_no):\r\n    result = sorted(list_data, key=itemgetter(index_no))\r\n    return result"}
{"task_id": "382", "prompt": "Write a function to find the number of rotations in a circularly sorted array.", "completion": "def find_rotation_count(A):\n    if A is None:\n        raise TypeError(\"Input cannot be None\")\n    if not isinstance(A, list):\n        raise TypeError(\"Input must be a list\")\n    \n    (left, right) = (0, len(A) - 1)\n    \n    # Handle edge cases for empty array and single element\n    if right < 0:\n        return -1\n    if left == right:\n        return left\n    \n    while left <= right:\n        if A[left] <= A[right]:\n            return left\n        mid = (left + right) // 2\n        next = (mid + 1) % len(A)\n        prev = (mid - 1 + len(A)) % len(A)\n        \n        if A[mid] <= A[next] and A[mid] <= A[prev]:\n            return mid\n        elif A[mid] <= A[right]:\n            right = mid - 1\n        else:\n            left = mid + 1\n            \n    return -1", "test_list": ["assert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3", "assert find_rotation_count([8, 9, 10,2, 5, 6]) == 3", "assert find_rotation_count([2, 5, 6, 8, 9, 10]) == 0"], "challenge_test_list": [], "reference_code": "def find_rotation_count(A):\r\n    (left, right) = (0, len(A) - 1)\r\n    while left <= right:\r\n        if A[left] <= A[right]:\r\n            return left\r\n        mid = (left + right) // 2\r\n        next = (mid + 1) % len(A)\r\n        prev = (mid - 1 + len(A)) % len(A)\r\n        if A[mid] <= A[next] and A[mid] <= A[prev]:\r\n            return mid\r\n        elif A[mid] <= A[right]:\r\n            right = mid - 1\r\n        elif A[mid] >= A[left]:\r\n            left = mid + 1\r\n    return -1"}
{"task_id": "383", "prompt": "Write a python function to toggle all odd bits of a given number.", "completion": "import pytest\n\ndef even_bit_toggle_number(n):\n    res = 0\n    count = 0\n    temp = n    \n    while temp > 0:\n        if count % 2 == 1:  # Toggle odd bits (1, 3, 5, ...)\n            res = res | (1 << count)      \n        count += 1\n        temp >>= 1 \n    return n ^ res \n\ndef test_basic_functionality():\n    assert even_bit_toggle_number(0b1010) == 0b0000, \"Should toggle odd bits of 0b1010\"\n    assert even_bit_toggle_number(0b1111) == 0b1000, \"Should toggle odd bits of 0b1111\"\n    assert even_bit_toggle_number(0b0000) == 0b0000, \"Should remain 0 for 0b0000\"\n    assert even_bit_toggle_number(0b1100) == 0b1100, \"Should remain unchanged for 0b1100\"\n    assert even_bit_toggle_number(0b101010) == 0b000000, \"Should toggle odd bits of 0b101010\"\n\ndef test_edge_cases():\n    assert even_bit_toggle_number(1) == 0, \"Should toggle odd bit of 1\"\n    assert even_bit_toggle_number(2) == 3, \"Should toggle odd bit of 2\"\n    assert even_bit_toggle_number(3) == 2, \"Should toggle odd bit of 3\"\n    assert even_bit_toggle_number(15) == 0, \"Should toggle odd bits of 15\"\n    assert even_bit_toggle_number(16) == 17, \"Should toggle odd bit of 16\"\n\ndef test_exceptions():\n    with pytest.raises(TypeError):\n        even_bit_toggle_number(\"string input\"), \"Should raise TypeError for string input\"\n    with pytest.raises(TypeError):\n        even_bit_toggle_number(None), \"Should raise TypeError for None input\"\n    with pytest.raises(TypeError):\n        even_bit_toggle_number([]), \"Should raise TypeError for list input\"\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert even_bit_toggle_number(10) == 15", "assert even_bit_toggle_number(20) == 1", "assert even_bit_toggle_number(30) == 11"], "challenge_test_list": [], "reference_code": "def even_bit_toggle_number(n) : \r\n    res = 0; count = 0; temp = n    \r\n    while(temp > 0 ) : \r\n        if (count % 2 == 0) : \r\n            res = res | (1 << count)      \r\n        count = count + 1\r\n        temp >>= 1 \r\n    return n ^ res "}
{"task_id": "384", "prompt": "Write a python function to find the frequency of the smallest value in a given array.", "completion": "def frequency_Of_Smallest(n, arr):\n    if n == 0:\n        raise IndexError(\"list index out of range\")\n    if not isinstance(arr, list):\n        raise TypeError(\"object of type 'int' has no len()\") if isinstance(arr, int) else TypeError(\"object of type 'str' has no len()\")\n    \n    mn = arr[0]\n    freq = 1\n    for i in range(1, n):\n        if arr[i] < mn:\n            mn = arr[i]\n            freq = 1\n        elif arr[i] == mn:\n            freq += 1\n    return freq", "test_list": ["assert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1", "assert frequency_Of_Smallest(7,[3,1,2,5,6,2,3]) == 1", "assert frequency_Of_Smallest(7,[3,3,6,3,7,4,9]) == 3"], "challenge_test_list": [], "reference_code": "def frequency_Of_Smallest(n,arr): \r\n    mn = arr[0] \r\n    freq = 1\r\n    for i in range(1,n): \r\n        if (arr[i] < mn): \r\n            mn = arr[i] \r\n            freq = 1\r\n        elif (arr[i] == mn): \r\n            freq += 1\r\n    return freq "}
{"task_id": "385", "prompt": "Write a function to find the n'th perrin number using recursion.", "completion": "def get_perrin(n):\n    if n < 0:\n        raise RecursionError(\"Negative arguments are not allowed\")\n    if n == 0:\n        return 3\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2 \n    return get_perrin(n - 2) + get_perrin(n - 3)", "test_list": ["assert get_perrin(9) == 12", "assert get_perrin(4) == 2", "assert get_perrin(6) == 5"], "challenge_test_list": [], "reference_code": "def get_perrin(n):\r\n  if (n == 0):\r\n    return 3\r\n  if (n == 1):\r\n    return 0\r\n  if (n == 2):\r\n    return 2 \r\n  return get_perrin(n - 2) + get_perrin(n - 3)"}
{"task_id": "386", "prompt": "Write a function to find out the minimum no of swaps required for bracket balancing in the given string.", "completion": "def swap_count(s):\n    if not isinstance(s, str):\n        raise TypeError(\"Expected a string input\")\n    if any(c not in '[]' for c in s):\n        raise ValueError(\"Invalid characters in input\")\n\n    imbalance = 0\n    swap = 0\n\n    for char in s:\n        if char == '[':\n            imbalance += 1\n        elif char == ']':\n            imbalance -= 1\n            if imbalance < 0:\n                swap += 1\n                imbalance = 0\n\n    return swap\n\n# Test cases\nimport pytest\n\ndef test_basic_functionality_balanced():\n    assert swap_count(\"[]\") == 0, \"Expected 0 swaps for already balanced brackets\"\n    assert swap_count(\"[[]]\") == 0, \"Expected 0 swaps for already balanced nested brackets\"\n    assert swap_count(\"[][]\") == 0, \"Expected 0 swaps for already balanced multiple pairs\"\n\ndef test_basic_functionality_unbalanced():\n    assert swap_count(\"][\" ) == 1, \"Expected 1 swap to balance the brackets\"\n    assert swap_count(\"[[[]\") == 1, \"Expected 1 swap to balance the brackets\"\n    assert swap_count(\"[]][[]\") == 1, \"Expected 1 swap to balance the brackets\"\n    assert swap_count(\"]][[\") == 2, \"Expected 2 swaps to balance the brackets\"\n\ndef test_edge_cases():\n    assert swap_count(\"\") == 0, \"Expected 0 swaps for empty string\"\n    assert swap_count(\"[\") == 0, \"Expected 0 swaps for single opening bracket\"\n    assert swap_count(\"]\") == 0, \"Expected 0 swaps for single closing bracket\"\n    assert swap_count(\"[]][[\") == 2, \"Expected 2 swaps to balance the brackets\"\n\ndef test_exceptions():\n    with pytest.raises(TypeError, match=\"Expected a string input\"):\n        swap_count(123)\n    with pytest.raises(TypeError, match=\"Expected a string input\"):\n        swap_count(None)\n    with pytest.raises(ValueError, match=\"Invalid characters in input\"):\n        swap_count(\"[a][b]\")\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert swap_count(\"[]][][\") == 2", "assert swap_count(\"[[][]]\") == 0", "assert swap_count(\"[[][]]][\") == 1"], "challenge_test_list": [], "reference_code": "def swap_count(s):\r\n\tchars = s\r\n\tcount_left = 0\r\n\tcount_right = 0\r\n\tswap = 0\r\n\timbalance = 0; \r\n\tfor i in range(len(chars)):\r\n\t\tif chars[i] == '[':\r\n\t\t\tcount_left += 1\r\n\t\t\tif imbalance > 0:\r\n\t\t\t\tswap += imbalance\r\n\t\t\t\timbalance -= 1\r\n\t\telif chars[i] == ']':\r\n\t\t\tcount_right += 1\r\n\t\t\timbalance = (count_right - count_left) \r\n\treturn swap"}
{"task_id": "387", "prompt": "Write a python function to check whether the hexadecimal number is even or odd.", "completion": "def even_or_odd(N): \n    if N is None or any(c not in '0123456789ABCDEF' for c in N.upper()):\n        raise IndexError(\"Invalid hexadecimal input\")\n    \n    if len(N) == 0:\n        return \"Even\"\n    \n    last_char = N[-1].upper()\n    if last_char in '02468ACE':\n        return \"Even\"\n    else:\n        return \"Odd\"", "test_list": ["assert even_or_odd(\"AB3454D\") ==\"Odd\"", "assert even_or_odd(\"ABC\") == \"Even\"", "assert even_or_odd(\"AAD\") == \"Odd\""], "challenge_test_list": [], "reference_code": "def even_or_odd(N): \r\n    l = len(N) \r\n    if (N[l-1] =='0'or N[l-1] =='2'or \r\n        N[l-1] =='4'or N[l-1] =='6'or \r\n        N[l-1] =='8'or N[l-1] =='A'or \r\n        N[l-1] =='C'or N[l-1] =='E'): \r\n        return (\"Even\") \r\n    else: \r\n        return (\"Odd\") "}
{"task_id": "388", "prompt": "Write a python function to find the highest power of 2 that is less than or equal to n.", "completion": "def highest_Power_of_2(n):\n    if not isinstance(n, int):\n        raise TypeError(\"unsupported operand type\")\n    if n < 0:\n        raise ValueError(\"negative number\")\n    if n == 0:\n        return 0\n    \n    power = 1\n    while power <= n:\n        power <<= 1\n    return power >> 1", "test_list": ["assert highest_Power_of_2(10) == 8", "assert highest_Power_of_2(19) == 16", "assert highest_Power_of_2(32) == 32"], "challenge_test_list": [], "reference_code": "def highest_Power_of_2(n): \r\n    res = 0; \r\n    for i in range(n, 0, -1): \r\n        if ((i & (i - 1)) == 0): \r\n            res = i; \r\n            break; \r\n    return res; "}
{"task_id": "389", "prompt": "Write a function to find the n'th lucas number.", "completion": "import pytest\n\ndef find_lucas(n):\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    \n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    return find_lucas(n - 1) + find_lucas(n - 2)\n\n# Test cases\ndef test_lucas_zero():\n    assert find_lucas(0) == 2, \"Expected Lucas number for n=0 is 2\"\n\ndef test_lucas_one():\n    assert find_lucas(1) == 1, \"Expected Lucas number for n=1 is 1\"\n\ndef test_lucas_two():\n    assert find_lucas(2) == 3, \"Expected Lucas number for n=2 is 3\"\n\ndef test_lucas_three():\n    assert find_lucas(3) == 4, \"Expected Lucas number for n=3 is 4\"\n\ndef test_lucas_four():\n    assert find_lucas(4) == 7, \"Expected Lucas number for n=4 is 7\"\n\ndef test_lucas_five():\n    assert find_lucas(5) == 11, \"Expected Lucas number for n=5 is 11\"\n\ndef test_lucas_negative():\n    with pytest.raises(ValueError, match=\"Input must be a non-negative integer\"):\n        find_lucas(-1)\n\ndef test_lucas_non_integer():\n    with pytest.raises(ValueError, match=\"Input must be a non-negative integer\"):\n        find_lucas(2.5)\n\ndef test_lucas_large_number():\n    assert find_lucas(10) == 123, \"Expected Lucas number for n=10 is 123\"\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert find_lucas(9) == 76", "assert find_lucas(4) == 7", "assert find_lucas(3) == 4"], "challenge_test_list": [], "reference_code": "def find_lucas(n): \r\n\tif (n == 0): \r\n\t\treturn 2\r\n\tif (n == 1): \r\n\t\treturn 1\r\n\treturn find_lucas(n - 1) + find_lucas(n - 2) "}
{"task_id": "390", "prompt": "Write a function to insert a given string at the beginning of all items in a list.", "completion": "def add_string(lst, string):\n    if not isinstance(string, str):\n        raise TypeError(\"The string parameter must be a string.\")\n    \n    return [f\"{string}{item}\" for item in lst if isinstance(item, str)]\n\n# Test cases\nimport pytest\n\ndef test_basic_functionality():\n    assert add_string(['apple', 'banana', 'cherry'], 'fruit: ') == ['fruit: apple', 'fruit: banana', 'fruit: cherry'], \"Should prepend 'fruit: ' to each item\"\n\ndef test_empty_list():\n    assert add_string([], 'item: ') == [], \"Should return an empty list when input list is empty\"\n\ndef test_empty_string():\n    assert add_string(['apple', 'banana'], '') == ['', ''], \"Should prepend an empty string to each item\"\n\ndef test_single_item_list():\n    assert add_string(['apple'], 'fruit: ') == ['fruit: apple'], \"Should prepend 'fruit: ' to the single item\"\n\ndef test_special_characters():\n    assert add_string(['apple', 'banana'], 'fru!t: ') == ['fru!t: apple', 'fru!t: banana'], \"Should handle special characters correctly\"\n\ndef test_non_string_elements():\n    with pytest.raises(TypeError):\n        add_string(['apple', 123, 'banana'], 'item: '), \"Should raise TypeError when list contains non-string elements\"\n\ndef test_none_as_string():\n    with pytest.raises(TypeError):\n        add_string(['apple', 'banana'], None), \"Should raise TypeError when string is None\"\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']", "assert add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']", "assert add_string([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']"], "challenge_test_list": [], "reference_code": "def add_string(list,string):\r\n add_string=[string.format(i) for i in  list]\r\n return add_string"}
{"task_id": "391", "prompt": "Write a function to convert more than one list to nested dictionary.", "completion": "def convert_list_dictionary(l1, l2, l3):\n    # Check if any of the inputs are None and raise TypeError\n    if l1 is None or l2 is None or l3 is None:\n        raise TypeError(\"object is not iterable\")\n    \n    # Use zip to combine the lists and create the nested dictionary\n    result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n    \n    return result", "test_list": ["assert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]", "assert convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]", "assert convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]"], "challenge_test_list": [], "reference_code": "def convert_list_dictionary(l1, l2, l3):\r\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\r\n     return result"}
{"task_id": "392", "prompt": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).", "completion": "def get_max_sum(n):\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n    \n    res = [0] * (n + 1)\n    res[1] = 1\n    \n    for i in range(2, n + 1):\n        res[i] = max(i, res[i // 2] + res[i // 3] + res[i // 4] + res[i // 5])\n    \n    return res[n]", "test_list": ["assert get_max_sum(60) == 106", "assert get_max_sum(10) == 12", "assert get_max_sum(2) == 2"], "challenge_test_list": [], "reference_code": "def get_max_sum (n):\r\n\tres = list()\r\n\tres.append(0)\r\n\tres.append(1)\r\n\ti = 2\r\n\twhile i<n + 1:\r\n\t\tres.append(max(i, (res[int(i / 2)] \r\n\t\t\t\t\t\t+ res[int(i / 3)] +\r\n\t\t\t\t\t\t\tres[int(i / 4)]\r\n\t\t\t\t\t\t+ res[int(i / 5)])))\r\n\t\ti = i + 1\r\n\treturn res[n]"}
{"task_id": "393", "prompt": "Write a function to find the list with maximum length using lambda function.", "completion": "def max_length_list(input_list):\n    # Filter out non-list elements and handle exceptions\n    filtered_lists = []\n    for item in input_list:\n        if isinstance(item, list):\n            filtered_lists.append(item)\n        else:\n            raise TypeError(f\"object of type '{type(item).__name__}' has no len()\")\n    \n    # Find the maximum length and the corresponding list\n    if not filtered_lists:  # Handle the case of an empty input list\n        return (0, [])\n    \n    max_length = max(len(x) for x in filtered_lists)\n    max_list = max(filtered_lists, key=lambda i: len(i))\n    \n    return (max_length, max_list)", "test_list": ["assert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])", "assert max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])", "assert max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])"], "challenge_test_list": [], "reference_code": "def max_length_list(input_list):\r\n    max_length = max(len(x) for x in input_list )   \r\n    max_list = max(input_list, key = lambda i: len(i))    \r\n    return(max_length, max_list)"}
{"task_id": "394", "prompt": "Write a function to check if given tuple is distinct or not.", "completion": "def check_distinct(test_tup):\n    if not isinstance(test_tup, tuple):\n        raise TypeError(\"Input must be a tuple\")\n    \n    res = True\n    temp = set()\n    for ele in test_tup:\n        if ele in temp:\n            res = False\n            break\n        temp.add(ele)\n    return res", "test_list": ["assert check_distinct((1, 4, 5, 6, 1, 4)) == False", "assert check_distinct((1, 4, 5, 6)) == True", "assert check_distinct((2, 3, 4, 5, 6)) == True"], "challenge_test_list": [], "reference_code": "def check_distinct(test_tup):\r\n  res = True\r\n  temp = set()\r\n  for ele in test_tup:\r\n    if ele in temp:\r\n      res = False\r\n      break\r\n    temp.add(ele)\r\n  return (res) "}
{"task_id": "395", "prompt": "Write a python function to find the first non-repeated character in a given string.", "completion": "def first_non_repeating_character(str1):\n    if not isinstance(str1, str):\n        raise TypeError(\"Input must be a string\")\n    \n    char_order = []\n    ctr = {}\n    for c in str1:\n        if c in ctr:\n            ctr[c] += 1\n        else:\n            ctr[c] = 1 \n            char_order.append(c)\n    \n    for c in char_order:\n        if ctr[c] == 1:\n            return c\n    return None", "test_list": ["assert first_non_repeating_character(\"abcabc\") == None", "assert first_non_repeating_character(\"abc\") == \"a\"", "assert first_non_repeating_character(\"ababc\") == \"c\""], "challenge_test_list": [], "reference_code": "def first_non_repeating_character(str1):\r\n  char_order = []\r\n  ctr = {}\r\n  for c in str1:\r\n    if c in ctr:\r\n      ctr[c] += 1\r\n    else:\r\n      ctr[c] = 1 \r\n      char_order.append(c)\r\n  for c in char_order:\r\n    if ctr[c] == 1:\r\n      return c\r\n  return None"}
{"task_id": "396", "prompt": "Write a function to check whether the given string starts and ends with the same character or not using regex.", "completion": "import re\n\ndef check_char(string):\n    if not isinstance(string, str):\n        raise TypeError(\"Input must be a string\")\n    \n    regex = r'^(.)\\1?$|^(.).*\\2$'\n    if re.search(regex, string):\n        return \"Valid\"\n    else:\n        return \"Invalid\"", "test_list": ["assert check_char(\"abba\") == \"Valid\"", "assert check_char(\"a\") == \"Valid\"", "assert check_char(\"abcd\") == \"Invalid\""], "challenge_test_list": [], "reference_code": "import re  \r\nregex = r'^[a-z]$|^([a-z]).*\\1$'\r\ndef check_char(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn \"Valid\" \r\n\telse: \r\n\t\treturn \"Invalid\" "}
{"task_id": "397", "prompt": "Write a function to find the median of three specific numbers.", "completion": "def median_numbers(a, b, c):\n    # Check for type errors\n    if not all(isinstance(x, (int, float)) for x in (a, b, c)):\n        raise TypeError(\"All inputs must be numbers\")\n    \n    # Sort the numbers and return the middle one\n    return sorted([a, b, c])[1]", "test_list": ["assert median_numbers(25,55,65)==55.0", "assert median_numbers(20,10,30)==20.0", "assert median_numbers(15,45,75)==45.0"], "challenge_test_list": [], "reference_code": "def median_numbers(a,b,c):\r\n if a > b:\r\n    if a < c:\r\n        median = a\r\n    elif b > c:\r\n        median = b\r\n    else:\r\n        median = c\r\n else:\r\n    if a > c:\r\n        median = a\r\n    elif b < c:\r\n        median = b\r\n    else:\r\n        median = c\r\n return median"}
{"task_id": "398", "prompt": "Write a function to compute the sum of digits of each number of a given list.", "completion": "def sum_of_digits(nums):\n    if not isinstance(nums, list):\n        raise TypeError(\"unsupported operand type\")\n    \n    total = 0\n    for n in nums:\n        if not isinstance(n, int):\n            raise TypeError(\"unsupported operand type\")\n        total += sum(int(el) for el in str(abs(n)) if el.isdigit())\n    return total", "test_list": ["assert sum_of_digits([10,2,56])==14", "assert sum_of_digits([[10,20,4,5,'b',70,'a']])==19", "assert sum_of_digits([10,20,-4,5,-70])==19"], "challenge_test_list": [], "reference_code": "def sum_of_digits(nums):\r\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())"}
{"task_id": "399", "prompt": "Write a function to perform the mathematical bitwise xor operation across the given tuples.", "completion": "def bitwise_xor(test_tup1, test_tup2):\n    if not isinstance(test_tup1, tuple) or not isinstance(test_tup2, tuple):\n        raise TypeError(\"unsupported operand type\")\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"not enough values to unpack\")\n    \n    res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n    return res", "test_list": ["assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)", "assert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)", "assert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)"], "challenge_test_list": [], "reference_code": "def bitwise_xor(test_tup1, test_tup2):\r\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) "}
{"task_id": "400", "prompt": "Write a function to extract the frequency of unique tuples in the given list order irrespective.", "completion": "def extract_freq(test_list):\n    if not isinstance(test_list, list):\n        raise TypeError(\"Input must be a list\")\n    \n    unique_tuples = set()\n    \n    for sub in test_list:\n        if not isinstance(sub, tuple):\n            raise TypeError(\"All elements in the list must be tuples\")\n        unique_tuples.add(tuple(sorted(sub)))\n    \n    return len(unique_tuples)", "test_list": ["assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3", "assert extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4", "assert extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4"], "challenge_test_list": [], "reference_code": "def extract_freq(test_list):\r\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\r\n  return (res)"}
{"task_id": "401", "prompt": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.", "completion": "def add_nested_tuples(test_tup1, test_tup2):\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"not enough values to unpack\")\n    \n    res = tuple(tuple(a + b for a, b in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n    return res", "test_list": ["assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))", "assert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))", "assert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))"], "challenge_test_list": [], "reference_code": "def add_nested_tuples(test_tup1, test_tup2):\r\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) "}
{"task_id": "402", "prompt": "Write a function to compute the value of ncr%p.", "completion": "def ncr_modp(n, r, p):\n    if r > n or p <= 0:\n        return 0\n    if r == 0 or n == r:\n        return 1\n\n    C = [0 for _ in range(r + 1)]\n    C[0] = 1\n\n    for i in range(1, n + 1):\n        for j in range(min(i, r), 0, -1):\n            C[j] = (C[j] + C[j - 1]) % p\n\n    return C[r]", "test_list": ["assert ncr_modp(10,2,13)==6", "assert ncr_modp(15,12,43)==25", "assert ncr_modp(17,9,18)==10"], "challenge_test_list": [], "reference_code": "def ncr_modp(n, r, p): \r\n    C = [0 for i in range(r+1)]   \r\n    C[0] = 1\r\n    for i in range(1, n+1): \r\n        for j in range(min(i, r), 0, -1): \r\n            C[j] = (C[j] + C[j-1]) % p   \r\n    return C[r] "}
{"task_id": "403", "prompt": "Write a function to check if a url is valid or not using regex.", "completion": "import re\n\ndef is_valid_URL(url):\n    if url is None or url == \"\":\n        return False\n    regex = re.compile(\n        r'^(https?://)'  # http:// or https://\n        r'((www\\.)?([a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,6})'  # domain name\n        r'(:\\d+)?'  # optional port\n        r'(/[-a-zA-Z0-9@:%._\\+~#?&//=]*)?$'  # path\n    )\n    return re.match(regex, url) is not None", "test_list": ["assert is_valid_URL(\"https://www.google.com\") == True", "assert is_valid_URL(\"https:/www.gmail.com\") == False", "assert is_valid_URL(\"https:// www.redit.com\") == False"], "challenge_test_list": [], "reference_code": "import re\r\ndef is_valid_URL(str):\r\n\tregex = (\"((http|https)://)(www.)?\" +\r\n\t\t\t\"[a-zA-Z0-9@:%._\\\\+~#?&//=]\" +\r\n\t\t\t\"{2,256}\\\\.[a-z]\" +\r\n\t\t\t\"{2,6}\\\\b([-a-zA-Z0-9@:%\" +\r\n\t\t\t\"._\\\\+~#?&//=]*)\")\r\n\tp = re.compile(regex)\r\n\tif (str == None):\r\n\t\treturn False\r\n\tif(re.search(p, str)):\r\n\t\treturn True\r\n\telse:\r\n\t\treturn False"}
{"task_id": "404", "prompt": "Write a python function to find the minimum of two numbers.", "completion": "def minimum(a, b):\n    if not isinstance(a, (int, float)) or not isinstance(b, (int, float)):\n        raise TypeError(\"unsupported operand type(s) for minimum: '{}' and '{}'\".format(type(a).__name__, type(b).__name__))\n    return a if a <= b else b", "test_list": ["assert minimum(1,2) == 1", "assert minimum(-5,-4) == -5", "assert minimum(0,0) == 0"], "challenge_test_list": [], "reference_code": "def minimum(a,b):   \r\n    if a <= b: \r\n        return a \r\n    else: \r\n        return b "}
{"task_id": "405", "prompt": "Write a function to check whether an element exists within a tuple.", "completion": "import pytest\n\ndef check_tuplex(tuplex, element):\n    if not isinstance(tuplex, tuple):\n        raise TypeError(\"First argument must be a tuple\")\n    if isinstance(element, list):\n        raise TypeError(\"Second argument must not be a list\")\n    \n    return element in tuplex\n\n# Test cases\ndef test_basic_functionality():\n    assert check_tuplex((1, 2, 3), 2) == True, \"Should return True for existing element\"\n    assert check_tuplex(('a', 'b', 'c'), 'b') == True, \"Should return True for existing string element\"\n    assert check_tuplex((1, 2, 3), 4) == False, \"Should return False for non-existing element\"\n    assert check_tuplex((True, False), True) == True, \"Should return True for existing boolean element\"\n\ndef test_edge_cases():\n    assert check_tuplex((), 1) == False, \"Should return False for empty tuple\"\n    assert check_tuplex((None,), None) == True, \"Should return True for None in tuple\"\n    assert check_tuplex((1, 2, 3), 1) == True, \"Should return True for first element in tuple\"\n    assert check_tuplex((1, 2, 3), 3) == True, \"Should return True for last element in tuple\"\n\ndef test_exceptions():\n    with pytest.raises(TypeError):\n        check_tuplex(None, 1)\n    with pytest.raises(TypeError):\n        check_tuplex((1, 2, 3), None)\n    with pytest.raises(TypeError):\n        check_tuplex((1, 2, 3), [1])\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True", "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')==False", "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True"], "challenge_test_list": [], "reference_code": "def check_tuplex(tuplex,tuple1): \r\n  if tuple1 in tuplex:\r\n    return True\r\n  else:\r\n     return False"}
{"task_id": "406", "prompt": "Write a python function to find the parity of a given number.", "completion": "def find_Parity(x): \n    if not isinstance(x, int):\n        raise TypeError(\"unsupported operand type\")\n    \n    # Handle negative numbers by considering their absolute value\n    x = abs(x)\n    \n    y = x ^ (x >> 1) \n    y = y ^ (y >> 2) \n    y = y ^ (y >> 4) \n    y = y ^ (y >> 8) \n    y = y ^ (y >> 16) \n    \n    if (y & 1): \n        return \"Odd Parity\" \n    return \"Even Parity\"", "test_list": ["assert find_Parity(12) == \"Even Parity\"", "assert find_Parity(7) == \"Odd Parity\"", "assert find_Parity(10) == \"Even Parity\""], "challenge_test_list": [], "reference_code": "def find_Parity(x): \r\n    y = x ^ (x >> 1); \r\n    y = y ^ (y >> 2); \r\n    y = y ^ (y >> 4); \r\n    y = y ^ (y >> 8); \r\n    y = y ^ (y >> 16); \r\n    if (y & 1): \r\n        return (\"Odd Parity\"); \r\n    return (\"Even Parity\"); "}
{"task_id": "407", "prompt": "Write a function to create the next bigger number by rearranging the digits of a given number.", "completion": "def rearrange_bigger(n):\n    if not isinstance(n, int) or n < 0:\n        raise TypeError(\"invalid literal for int()\")\n    \n    nums = list(str(n))\n    length = len(nums)\n    \n    # Step 1: Find the rightmost ascent\n    i = length - 2\n    while i >= 0 and nums[i] >= nums[i + 1]:\n        i -= 1\n    \n    # If no ascent is found, return False\n    if i == -1:\n        return False\n    \n    # Step 2: Find the smallest number on the right side of the ascent that is larger than nums[i]\n    j = length - 1\n    while nums[j] <= nums[i]:\n        j -= 1\n    \n    # Step 3: Swap the found numbers\n    nums[i], nums[j] = nums[j], nums[i]\n    \n    # Step 4: Reverse the sequence after the position i\n    nums = nums[:i + 1] + sorted(nums[i + 1:])\n    \n    return int(\"\".join(nums))\n\n# Test cases\nimport pytest\n\ndef test_rearrange_bigger_basic():\n    assert rearrange_bigger(123) == 132, \"Should return 132 for input 123\"\n    assert rearrange_bigger(534976) == 536479, \"Should return 536479 for input 534976\"\n    assert rearrange_bigger(21) == False, \"Should return False for input 21 (no bigger arrangement)\"\n    assert rearrange_bigger(1234) == 1243, \"Should return 1243 for input 1234\"\n    assert rearrange_bigger(4321) == False, \"Should return False for input 4321 (no bigger arrangement)\"\n\ndef test_rearrange_bigger_edge_cases():\n    assert rearrange_bigger(0) == False, \"Should return False for input 0 (no bigger arrangement)\"\n    assert rearrange_bigger(1) == False, \"Should return False for input 1 (no bigger arrangement)\"\n    assert rearrange_bigger(1000) == 1001, \"Should return 1001 for input 1000\"\n    assert rearrange_bigger(999) == False, \"Should return False for input 999 (no bigger arrangement)\"\n    assert rearrange_bigger(100) == 100, \"Should return 100 for input 100 (no bigger arrangement)\"\n\ndef test_rearrange_bigger_exceptions():\n    with pytest.raises(TypeError, match=\"invalid literal for int()\"):\n        rearrange_bigger(\"abc\")\n    with pytest.raises(TypeError, match=\"invalid literal for int()\"):\n        rearrange_bigger(None)\n    with pytest.raises(TypeError, match=\"invalid literal for int()\"):\n        rearrange_bigger([])\n\ndef test_rearrange_bigger_large_numbers():", "test_list": ["assert rearrange_bigger(12)==21", "assert rearrange_bigger(10)==False", "assert rearrange_bigger(102)==120"], "challenge_test_list": [], "reference_code": "def rearrange_bigger(n):\r\n    nums = list(str(n))\r\n    for i in range(len(nums)-2,-1,-1):\r\n        if nums[i] < nums[i+1]:\r\n            z = nums[i:]\r\n            y = min(filter(lambda x: x > z[0], z))\r\n            z.remove(y)\r\n            z.sort()\r\n            nums[i:] = [y] + z\r\n            return int(\"\".join(nums))\r\n    return False"}
{"task_id": "408", "prompt": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.", "completion": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    if nums1 is None or nums2 is None or k is None:\n        raise TypeError(\"unsupported operand type\")\n    if k < 0:\n        raise ValueError(\"k must be a non-negative integer\")\n    \n    queue = []\n    \n    def push(i, j):\n        if i < len(nums1) and j < len(nums2):\n            heapq.heappush(queue, (nums1[i] + nums2[j], i, j))\n    \n    push(0, 0)\n    pairs = []\n    \n    while queue and len(pairs) < k:\n        _, i, j = heapq.heappop(queue)\n        pairs.append([nums1[i], nums2[j]])\n        push(i, j + 1)\n        if j == 0:\n            push(i + 1, 0)\n    \n    return pairs", "test_list": ["assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]", "assert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]", "assert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]"], "challenge_test_list": [], "reference_code": "import heapq\r\ndef k_smallest_pairs(nums1, nums2, k):\r\n   queue = []\r\n   def push(i, j):\r\n       if i < len(nums1) and j < len(nums2):\r\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\r\n   push(0, 0)\r\n   pairs = []\r\n   while queue and len(pairs) < k:\r\n       _, i, j = heapq.heappop(queue)\r\n       pairs.append([nums1[i], nums2[j]])\r\n       push(i, j + 1)\r\n       if j == 0:\r\n           push(i + 1, 0)\r\n   return pairs"}
{"task_id": "409", "prompt": "Write a function to find the minimum product from the pairs of tuples within a given list.", "completion": "import pytest\n\ndef min_product_tuple(list1):\n    if list1 is None:\n        raise TypeError(\"object is not iterable\")\n    \n    if len(list1) == 0:\n        return float('inf')\n    \n    result_min = float('inf')\n    \n    for item in list1:\n        if not isinstance(item, tuple) or len(item) != 2:\n            raise ValueError(\"not enough values to unpack\")\n        \n        x, y = item\n        \n        if not isinstance(x, (int, float)) or not isinstance(y, (int, float)):\n            raise TypeError(\"unsupported operand type\")\n        \n        product = x * y\n        if product < result_min:\n            result_min = product\n            \n    return result_min", "test_list": ["assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8", "assert min_product_tuple([(10,20), (15,2), (5,10)] )==30", "assert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100"], "challenge_test_list": [], "reference_code": "def min_product_tuple(list1):\r\n    result_min = min([abs(x * y) for x, y in list1] )\r\n    return result_min"}
{"task_id": "410", "prompt": "Write a function to find the minimum value in a given heterogeneous list.", "completion": "import pytest\n\ndef min_val(listval):\n    # Filter the list to include only integers\n    int_values = [i for i in listval if isinstance(i, int)]\n    \n    # If there are no integers, raise a TypeError\n    if not int_values:\n        raise TypeError(\"No valid integers found in the list\")\n    \n    # Return the minimum value from the filtered list\n    return min(int_values)\n\n# Test cases\ndef test_basic_functionality():\n    assert min_val([3, 1, 4, 1, 5, 9]) == 1, \"Should return the minimum integer value\"\n    assert min_val([10, 'a', 5, None, 3]) == 3, \"Should ignore non-integer values and return the minimum integer\"\n    assert min_val([-1, -5, 0, 2]) == -5, \"Should return the minimum negative integer value\"\n\ndef test_edge_cases():\n    assert min_val([1]) == 1, \"Should return the only integer in the list\"\n    assert min_val([None, 'string', 0]) == 0, \"Should return 0 as the minimum integer\"\n    assert min_val([3.5, 2.2, 1.1]) == 1.1, \"Should return the minimum float value if no integers are present\"\n\ndef test_exceptions():\n    with pytest.raises(ValueError, match=\"min() arg is an empty sequence\"):\n        min_val([]), \"Should raise ValueError for empty list\"\n    \n    with pytest.raises(TypeError):\n        min_val(['a', 'b', 'c']), \"Should raise TypeError when no integers are present\"\n    \n    with pytest.raises(TypeError):\n        min_val([1, 2, 3, None, 'string']), \"Should raise TypeError when no valid integers are present\"\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert min_val(['Python', 3, 2, 4, 5, 'version'])==2", "assert min_val(['Python', 15, 20, 25])==15", "assert min_val(['Python', 30, 20, 40, 50, 'version'])==20"], "challenge_test_list": [], "reference_code": "def min_val(listval):\r\n     min_val = min(i for i in listval if isinstance(i, int))\r\n     return min_val"}
{"task_id": "411", "prompt": "Write a function to convert the given snake case string to camel case string by using regex.", "completion": "import re\n\ndef snake_to_camel(word):\n    if not isinstance(word, str):\n        raise TypeError(\"expected a string\")\n    return ''.join(x.capitalize() for x in re.split(r'_+', word))", "test_list": ["assert snake_to_camel('android_tv') == 'AndroidTv'", "assert snake_to_camel('google_pixel') == 'GooglePixel'", "assert snake_to_camel('apple_watch') == 'AppleWatch'"], "challenge_test_list": [], "reference_code": "import re\r\ndef snake_to_camel(word):\r\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))"}
{"task_id": "412", "prompt": "Write a python function to remove odd numbers from a given list.", "completion": "def remove_odd(l):\n    # Use a list comprehension to filter out odd numbers\n    return [i for i in l if isinstance(i, int) and i % 2 == 0]\n\n# Test cases\nimport pytest\n\ndef test_remove_odd_basic_functionality():\n    assert remove_odd([1, 2, 3, 4, 5]) == [2, 4], \"Failed to remove odd numbers from the list\"\n    assert remove_odd([10, 15, 20, 25]) == [10, 20], \"Failed to remove odd numbers from the list\"\n    assert remove_odd([0, 2, 4, 6]) == [0, 2, 4, 6], \"Should return the same list with no odd numbers\"\n\ndef test_remove_odd_edge_cases():\n    assert remove_odd([]) == [], \"Should return an empty list when input is empty\"\n    assert remove_odd([1]) == [], \"Should return an empty list when input has one odd number\"\n    assert remove_odd([2]) == [2], \"Should return the same list when input has one even number\"\n    assert remove_odd([1, 3, 5, 7]) == [], \"Should return an empty list when all numbers are odd\"\n    assert remove_odd([2, 4, 6, 8]) == [2, 4, 6, 8], \"Should return the same list when all numbers are even\"\n\ndef test_remove_odd_exceptions():\n    with pytest.raises(TypeError, match=\"unsupported operand type(s) for %: 'str' and 'int'\"):\n        remove_odd([1, 'two', 3])\n    with pytest.raises(TypeError, match=\"unsupported operand type(s) for %: 'str' and 'int'\"):\n        remove_odd(['one', 'two', 'three'])\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert remove_odd([1,2,3]) == [2]", "assert remove_odd([2,4,6]) == [2,4,6]", "assert remove_odd([10,20,3]) == [10,20]"], "challenge_test_list": [], "reference_code": "def remove_odd(l):\r\n    for i in l:\r\n        if i % 2 != 0:\r\n            l.remove(i)\r\n    return l"}
{"task_id": "413", "prompt": "Write a function to extract the nth element from a given list of tuples.", "completion": "import pytest\n\ndef extract_nth_element(list1, n):\n    if not isinstance(list1, list):\n        raise TypeError(\"list indices must be integers or slices, not str\")\n    \n    result = []\n    for x in list1:\n        if not isinstance(x, tuple):\n            raise TypeError(\"'tuple' object is not subscriptable\")\n        if n < 0 or n >= len(x):\n            continue  # Skip if index is out of range\n        result.append(x[n])\n    \n    return result\n\n# Test cases\ndef test_basic_functionality():\n    assert extract_nth_element([(1, 2), (3, 4), (5, 6)], 0) == [1, 3, 5], \"Should return the first elements\"\n    assert extract_nth_element([(1, 2), (3, 4), (5, 6)], 1) == [2, 4, 6], \"Should return the second elements\"\n    assert extract_nth_element([('a', 'b'), ('c', 'd')], 1) == ['b', 'd'], \"Should return the second elements of string tuples\"\n\ndef test_edge_cases():\n    assert extract_nth_element([], 0) == [], \"Should return an empty list for empty input\"\n    assert extract_nth_element([(1, 2)], 0) == [1], \"Should return the first element from a single tuple\"\n    assert extract_nth_element([(1, 2)], 1) == [2], \"Should return the second element from a single tuple\"\n    assert extract_nth_element([(1, 2), (3, 4)], 2) == [], \"Should return an empty list when index is out of range\"\n\ndef test_exceptions():\n    with pytest.raises(IndexError, match=\"list index out of range\"):\n        extract_nth_element([(1, 2), (3, 4)], 2)\n    \n    with pytest.raises(TypeError, match=\"'tuple' object is not subscriptable\"):\n        extract_nth_element(None, 0)\n\n    with pytest.raises(TypeError, match=\"list indices must be integers or slices, not str\"):\n        extract_nth_element([(1, 2)], 'a')\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']", "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]", "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]"], "challenge_test_list": [], "reference_code": "def extract_nth_element(list1, n):\r\n    result = [x[n] for x in list1]\r\n    return result"}
{"task_id": "414", "prompt": "Write a python function to check whether the value exists in a sequence or not.", "completion": "def overlapping(list1, list2):\n    if not isinstance(list1, (list, tuple)) or not isinstance(list2, (list, tuple)):\n        raise TypeError(\"Both inputs must be a list or tuple.\")\n    \n    for item in list1:\n        if item in list2:\n            return 1\n    return 0", "test_list": ["assert overlapping([1,2,3,4,5],[6,7,8,9]) == False", "assert overlapping([1,2,3],[4,5,6]) == False", "assert overlapping([1,4,5],[1,4,5]) == True"], "challenge_test_list": [], "reference_code": "def overlapping(list1,list2):  \r\n    c=0\r\n    d=0\r\n    for i in list1: \r\n        c+=1\r\n    for i in list2: \r\n        d+=1\r\n    for i in range(0,c): \r\n        for j in range(0,d): \r\n            if(list1[i]==list2[j]): \r\n                return 1\r\n    return 0"}
{"task_id": "415", "prompt": "Write a python function to find a pair with highest product from a given array of integers.", "completion": "def max_Product(arr): \n    arr_len = len(arr) \n    if arr_len < 2: \n        raise ValueError(\"No pairs exists\")           \n    \n    # Initialize the two largest numbers\n    max1 = max2 = float('-inf')\n    \n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n    \n    if max2 == float('-inf'):\n        raise ValueError(\"No pairs exists\")\n    \n    return max1, max2", "test_list": ["assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)", "assert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)", "assert max_Product([1,2,3]) == (2,3)"], "challenge_test_list": [], "reference_code": "def max_Product(arr): \r\n    arr_len = len(arr) \r\n    if (arr_len < 2): \r\n        return (\"No pairs exists\")           \r\n    x = arr[0]; y = arr[1]      \r\n    for i in range(0,arr_len): \r\n        for j in range(i + 1,arr_len): \r\n            if (arr[i] * arr[j] > x * y): \r\n                x = arr[i]; y = arr[j] \r\n    return x,y    "}
{"task_id": "416", "prompt": "Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.", "completion": "import pytest\n\nMAX = 1000000\n\ndef breakSum(n): \n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer\")\n    \n    dp = [0] * (n + 1) \n    dp[0] = 0\n    if n >= 1:\n        dp[1] = 1\n    \n    for i in range(2, n + 1): \n        dp[i] = max(dp[i // 2] + dp[i // 3] + dp[i // 4], i) \n    \n    return dp[n]\n\ndef test_basic_functionality():\n    assert breakSum(2) == 2, \"Expected max sum for 2 is 2\"\n    assert breakSum(3) == 3, \"Expected max sum for 3 is 3\"\n    assert breakSum(4) == 4, \"Expected max sum for 4 is 4\"\n    assert breakSum(5) == 5, \"Expected max sum for 5 is 5\"\n    assert breakSum(6) == 6, \"Expected max sum for 6 is 6\"\n    assert breakSum(12) == 13, \"Expected max sum for 12 is 13\"\n\ndef test_edge_cases():\n    assert breakSum(0) == 0, \"Expected max sum for 0 is 0\"\n    assert breakSum(1) == 1, \"Expected max sum for 1 is 1\"\n    assert breakSum(100) == 102, \"Expected max sum for 100 is 102\"\n    assert breakSum(1000) == 1100, \"Expected max sum for 1000 is 1100\"\n    assert breakSum(10000) == 11000, \"Expected max sum for 10000 is 11000\"\n\ndef test_large_numbers():\n    assert breakSum(999999) == 999999, \"Expected max sum for 999999 is 999999\"\n    assert breakSum(1000000) == 1000000, \"Expected max sum for 1000000 is 1000000\"\n\ndef test_exceptions():\n    with pytest.raises(TypeError):\n        breakSum(\"string\")\n    with pytest.raises(TypeError):\n        breakSum(None)\n    with pytest.raises(ValueError):\n        breakSum(-1)\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert breakSum(12) == 13", "assert breakSum(24) == 27", "assert breakSum(23) == 23"], "challenge_test_list": [], "reference_code": "MAX = 1000000\r\ndef breakSum(n): \r\n\tdp = [0]*(n+1) \r\n\tdp[0] = 0\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = max(dp[int(i/2)] + dp[int(i/3)] + dp[int(i/4)], i); \r\n\treturn dp[n]"}
{"task_id": "417", "prompt": "Write a function to find common first element in given list of tuple.", "completion": "import pytest\n\ndef group_tuples(Input): \n    out = {} \n    for elem in Input: \n        if not isinstance(elem, tuple) or len(elem) == 0:\n            raise IndexError(\"Tuple is empty or not a tuple\")\n        if any(not isinstance(x, int) for x in elem):\n            raise TypeError(\"All elements must be integers\")\n        \n        try: \n            out[elem[0]].extend(elem[1:]) \n        except KeyError: \n            out[elem[0]] = list(elem) \n    return [tuple(values) for values in out.values()] \n\n# Test cases\ndef test_basic_functionality():\n    assert group_tuples([(1, 2), (1, 3), (2, 4)]) == [(1, 2, 3), (2, 4)], \"Should group tuples by the first element\"\n    assert group_tuples([(1, 2, 3), (1, 4), (2, 5)]) == [(1, 2, 3, 4), (2, 5)], \"Should combine all elements for the same first element\"\n    assert group_tuples([(3, 6), (3, 7), (4, 8)]) == [(3, 6, 7), (4, 8)], \"Should handle multiple tuples with the same first element\"\n\ndef test_edge_cases():\n    assert group_tuples([]) == [], \"Should return an empty list for empty input\"\n    assert group_tuples([(1,)]) == [(1,)], \"Should return the same single-element tuple\"\n    assert group_tuples([(1, 2), (1,)]) == [(1, 2)], \"Should ignore empty elements in tuples\"\n\ndef test_exceptions():\n    with pytest.raises(IndexError):\n        group_tuples([(1, 2), ()]), \"Should raise IndexError for empty tuples in the input\"\n    with pytest.raises(TypeError):\n        group_tuples([(1, 2), None]), \"Should raise TypeError for None in the input\"\n    with pytest.raises(TypeError):\n        group_tuples([(1, 2), (3, \"a\")]), \"Should raise TypeError for non-integer elements\"\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]", "assert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]", "assert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]"], "challenge_test_list": [], "reference_code": "def group_tuples(Input): \r\n\tout = {} \r\n\tfor elem in Input: \r\n\t\ttry: \r\n\t\t\tout[elem[0]].extend(elem[1:]) \r\n\t\texcept KeyError: \r\n\t\t\tout[elem[0]] = list(elem) \r\n\treturn [tuple(values) for values in out.values()] "}
{"task_id": "418", "prompt": "Write a python function to find the sublist having maximum length.", "completion": "def Find_Max(lst):\n    if lst is None or not isinstance(lst, list):\n        raise TypeError(\"unhashable type: 'list'\")\n    \n    max_list = []\n    for sublist in lst:\n        if not isinstance(sublist, list):\n            raise TypeError(\"unhashable type: 'list'\")\n        if len(sublist) > len(max_list):\n            max_list = sublist\n            \n    return max_list\n\n# Test cases\nimport pytest\n\ndef test_basic_functionality():\n    assert Find_Max([[1, 2], [1, 2, 3], [1]]) == [1, 2, 3], \"Should return the longest sublist\"\n    assert Find_Max([[1], [2], [3], [4, 5, 6]]) == [4, 5, 6], \"Should return the longest sublist\"\n    assert Find_Max([[], [1, 2, 3], [4]]) == [1, 2, 3], \"Should return the longest non-empty sublist\"\n\ndef test_edge_cases():\n    assert Find_Max([[], [], []]) == [], \"Should return an empty list when all sublists are empty\"\n    assert Find_Max([[], [1], [2]]) == [1], \"Should return the first non-empty sublist\"\n    assert Find_Max([[], [1, 2], [], [3, 4, 5]]) == [3, 4, 5], \"Should return the longest sublist\"\n\ndef test_exceptions():\n    with pytest.raises(TypeError, match=\"unhashable type: 'list'\"):\n        Find_Max(None)\n    with pytest.raises(TypeError, match=\"unhashable type: 'list'\"):\n        Find_Max([1, 2, [3, 4], 5])\n    with pytest.raises(ValueError, match=\"max() arg is an empty sequence\"):\n        Find_Max([])\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']", "assert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]", "assert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]"], "challenge_test_list": [], "reference_code": "def Find_Max(lst): \r\n    maxList = max((x) for x in lst) \r\n    return maxList"}
{"task_id": "419", "prompt": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.", "completion": "def round_and_sum(list1):\n    if not isinstance(list1, list):\n        raise TypeError(\"unsupported operand type\")\n    \n    # Ensure all elements in the list are numbers\n    for item in list1:\n        if not isinstance(item, (int, float)):\n            raise TypeError(\"unsupported operand type\")\n    \n    length = len(list1)\n    rounded_sum = sum(map(round, list1))\n    total = rounded_sum * length\n    return total", "test_list": ["assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243", "assert round_and_sum([5,2,9,24.3,29])==345", "assert round_and_sum([25.0,56.7,89.2])==513"], "challenge_test_list": [], "reference_code": "def round_and_sum(list1):\r\n  lenght=len(list1)\r\n  round_and_sum=sum(list(map(round,list1))* lenght)\r\n  return round_and_sum"}
{"task_id": "420", "prompt": "Write a python function to find the cube sum of first n even natural numbers.", "completion": "def cube_Sum(n):\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n    \n    sum_cubes = 0\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        sum_cubes += even_number ** 3\n        \n    return sum_cubes", "test_list": ["assert cube_Sum(2) == 72", "assert cube_Sum(3) == 288", "assert cube_Sum(4) == 800"], "challenge_test_list": [], "reference_code": "def cube_Sum(n): \r\n    sum = 0\r\n    for i in range(1,n + 1): \r\n        sum += (2*i)*(2*i)*(2*i) \r\n    return sum"}
{"task_id": "421", "prompt": "Write a function to concatenate each element of tuple by the delimiter.", "completion": "def concatenate_tuple(test_tup):\n    if not isinstance(test_tup, tuple):\n        raise TypeError(\"Input must be a tuple\")\n    \n    delim = \"-\"\n    res = delim.join(str(ele) for ele in test_tup)\n    return res", "test_list": ["assert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'", "assert concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\") ) == 'QWE-is-4-RTY'", "assert concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\") ) == 'ZEN-is-4-OP'"], "challenge_test_list": [], "reference_code": "def concatenate_tuple(test_tup):\r\n    delim = \"-\"\r\n    res = ''.join([str(ele) + delim for ele in test_tup])\r\n    res = res[ : len(res) - len(delim)]\r\n    return (str(res)) "}
{"task_id": "422", "prompt": "Write a python function to find the average of cubes of first n natural numbers.", "completion": "import pytest\n\ndef find_Average_Of_Cube(n):\n    if not isinstance(n, int):\n        raise TypeError(\"unsupported operand type\")\n    if n < 0:\n        raise ValueError(\"must be greater than or equal to 0\")\n    \n    if n == 0:\n        return 0.0\n    \n    sum_cubes = 0\n    for i in range(1, n + 1):\n        sum_cubes += i ** 3\n    \n    return round(sum_cubes / n, 6)\n\n# Test cases\ndef test_average_of_cubes_basic():\n    assert find_Average_Of_Cube(1) == pytest.approx(1.0, rel=1e-6), \"Failed for n=1\"\n    assert find_Average_Of_Cube(2) == pytest.approx(4.5, rel=1e-6), \"Failed for n=2\"\n    assert find_Average_Of_Cube(3) == pytest.approx(10.0, rel=1e-6), \"Failed for n=3\"\n    assert find_Average_Of_Cube(4) == pytest.approx(22.5, rel=1e-6), \"Failed for n=4\"\n    assert find_Average_Of_Cube(5) == pytest.approx(42.0, rel=1e-6), \"Failed for n=5\"\n\ndef test_average_of_cubes_edge_cases():\n    assert find_Average_Of_Cube(0) == 0.0, \"Failed for n=0 (no natural numbers)\"\n    assert find_Average_Of_Cube(10) == pytest.approx(385.0 / 10, rel=1e-6), \"Failed for n=10\"\n    assert find_Average_Of_Cube(100) == pytest.approx(338350 / 100, rel=1e-6), \"Failed for n=100\"\n\ndef test_average_of_cubes_exceptions():\n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        find_Average_Of_Cube(\"string\")\n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        find_Average_Of_Cube(None)\n    with pytest.raises(ValueError, match=\"must be greater than or equal to 0\"):\n        find_Average_Of_Cube(-1)\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert find_Average_Of_Cube(2) == 4.5", "assert find_Average_Of_Cube(3) == 12", "assert find_Average_Of_Cube(1) == 1"], "challenge_test_list": [], "reference_code": "def find_Average_Of_Cube(n):  \r\n    sum = 0\r\n    for i in range(1, n + 1): \r\n        sum += i * i * i  \r\n    return round(sum / n, 6) "}
{"task_id": "423", "prompt": "Write a function to solve gold mine problem.", "completion": "def get_maxgold(gold, m, n):\n    if not gold or m <= 0 or n <= 0:\n        return 0\n\n    goldTable = [[0 for _ in range(n)] for _ in range(m)]\n    \n    for col in range(n - 1, -1, -1):\n        for row in range(m):\n            right = goldTable[row][col + 1] if col < n - 1 else 0\n            right_up = goldTable[row - 1][col + 1] if row > 0 and col < n - 1 else 0\n            right_down = goldTable[row + 1][col + 1] if row < m - 1 and col < n - 1 else 0\n            \n            goldTable[row][col] = gold[row][col] + max(right, right_up, right_down)\n\n    res = max(goldTable[i][0] for i in range(m))\n    return res", "test_list": ["assert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16", "assert get_maxgold([[10,20],[30,40]],2,2)==70", "assert get_maxgold([[4,9],[3,7]],2,2)==13"], "challenge_test_list": [], "reference_code": "def get_maxgold(gold, m, n): \r\n    goldTable = [[0 for i in range(n)] \r\n                        for j in range(m)]   \r\n    for col in range(n-1, -1, -1): \r\n        for row in range(m):  \r\n            if (col == n-1): \r\n                right = 0\r\n            else: \r\n                right = goldTable[row][col+1] \r\n            if (row == 0 or col == n-1): \r\n                right_up = 0\r\n            else: \r\n                right_up = goldTable[row-1][col+1] \r\n            if (row == m-1 or col == n-1): \r\n                right_down = 0\r\n            else: \r\n                right_down = goldTable[row+1][col+1] \r\n            goldTable[row][col] = gold[row][col] + max(right, right_up, right_down) \r\n    res = goldTable[0][0] \r\n    for i in range(1, m): \r\n        res = max(res, goldTable[i][0])  \r\n    return res "}
{"task_id": "424", "prompt": "Write a function to extract only the rear index element of each string in the given tuple.", "completion": "def extract_rear(test_tuple):\n    res = []\n    for sub in test_tuple:\n        if not isinstance(sub, str):\n            raise TypeError(\"string index out of range\")\n        res.append(sub[-1])\n    return res", "test_list": ["assert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']", "assert extract_rear(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']", "assert extract_rear(('Gotta', 'get', 'go') ) == ['a', 't', 'o']"], "challenge_test_list": [], "reference_code": "def extract_rear(test_tuple):\r\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\r\n  return (res) "}
{"task_id": "425", "prompt": "Write a function to count the number of sublists containing a particular element.", "completion": "import pytest\n\ndef count_element_in_list(list1, x):\n    if not isinstance(list1, list):\n        raise TypeError(\"First argument must be a list\")\n    if not all(isinstance(sublist, list) for sublist in list1):\n        raise TypeError(\"All elements of the first argument must be lists\")\n    if not isinstance(x, (int, float, str)):\n        raise TypeError(\"Second argument must be an int, float, or str\")\n\n    ctr = 0\n    for sublist in list1:\n        if x in sublist:\n            ctr += 1\n    return ctr\n\n# Test cases\ndef test_basic_functionality():\n    assert count_element_in_list([[1, 2, 3], [4, 5, 6], [1, 7]], 1) == 2, \"Should find 1 in 2 sublists\"\n    assert count_element_in_list([[1, 2], [3, 4], [5]], 6) == 0, \"Should find 0 sublists containing 6\"\n    assert count_element_in_list([['a', 'b'], ['c', 'd', 'a'], ['e']], 'a') == 2, \"Should find 'a' in 2 sublists\"\n\ndef test_edge_cases():\n    assert count_element_in_list([], 1) == 0, \"Empty list should return 0\"\n    assert count_element_in_list([[], [], []], 1) == 0, \"Sublists are empty, should return 0\"\n    assert count_element_in_list([[1], [2], [3]], 1) == 1, \"Should find 1 in 1 sublist\"\n\ndef test_exceptions():\n    with pytest.raises(TypeError):\n        count_element_in_list(None, 1)\n    with pytest.raises(TypeError):\n        count_element_in_list([[1, 2], [3, 4]], None)\n    with pytest.raises(TypeError):\n        count_element_in_list([[1, 2], [3, 4]], 1.5)\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3", "assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3", "assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1"], "challenge_test_list": [], "reference_code": "def count_element_in_list(list1, x): \r\n    ctr = 0\r\n    for i in range(len(list1)): \r\n        if x in list1[i]: \r\n            ctr+= 1          \r\n    return ctr"}
{"task_id": "426", "prompt": "Write a function to filter odd numbers using lambda function.", "completion": "import pytest\n\ndef filter_oddnumbers(nums):\n    if not isinstance(nums, list):\n        raise TypeError(\"Input must be a list\")\n    \n    for item in nums:\n        if not isinstance(item, int):\n            raise TypeError(\"List must contain only integers\")\n    \n    odd_nums = list(filter(lambda x: x % 2 != 0, nums))\n    return odd_nums\n\n# Test cases\ndef test_basic_functionality():\n    assert filter_oddnumbers([1, 2, 3, 4, 5]) == [1, 3, 5], \"Should return odd numbers from the list\"\n    assert filter_oddnumbers([10, 12, 14]) == [], \"Should return an empty list when no odd numbers are present\"\n    assert filter_oddnumbers([-1, -2, -3, -4]) == [-1, -3], \"Should return odd negative numbers\"\n\ndef test_edge_cases():\n    assert filter_oddnumbers([]) == [], \"Should return an empty list for empty input\"\n    assert filter_oddnumbers([0]) == [], \"Should return an empty list when input is zero\"\n    assert filter_oddnumbers([1]) == [1], \"Should return the single odd number in the list\"\n    assert filter_oddnumbers([2]) == [], \"Should return an empty list when input is a single even number\"\n\ndef test_exceptions():\n    with pytest.raises(TypeError, match=\"Input must be a list\"):\n        filter_oddnumbers(\"not a list\")\n    with pytest.raises(TypeError, match=\"Input must be a list\"):\n        filter_oddnumbers(None)\n    with pytest.raises(TypeError, match=\"List must contain only integers\"):\n        filter_oddnumbers([1, 2, 'three'])\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]", "assert filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]", "assert filter_oddnumbers([5,7,9,8,6,4,3])==[5,7,9,3]"], "challenge_test_list": [], "reference_code": "def filter_oddnumbers(nums):\r\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\r\n return odd_nums"}
{"task_id": "427", "prompt": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.", "completion": "import re\nfrom datetime import datetime\n\ndef change_date_format(dt):\n    # Validate the date format using regex\n    match = re.match(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', dt)\n    if not match:\n        raise ValueError(\"not a valid date format\")\n    \n    year, month, day = match.groups()\n    \n    # Validate the date using datetime to handle edge cases\n    try:\n        datetime(int(year), int(month), int(day))\n    except ValueError:\n        raise ValueError(\"not a valid date format\")\n    \n    # Return the date in dd-mm-yyyy format\n    return f\"{day.zfill(2)}-{month.zfill(2)}-{year}\"", "test_list": ["assert change_date_format(\"2026-01-02\") == '02-01-2026'", "assert change_date_format(\"2020-11-13\") == '13-11-2020'", "assert change_date_format(\"2021-04-26\") == '26-04-2021'"], "challenge_test_list": [], "reference_code": "import re\r\ndef change_date_format(dt):\r\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)"}
{"task_id": "428", "prompt": "Write a function to sort the given array by using shell sort.", "completion": "def shell_sort(my_list):\n    if not isinstance(my_list, list):\n        raise TypeError(\"object is not iterable\")\n    \n    for item in my_list:\n        if not isinstance(item, (int, float)):\n            raise TypeError(\"unsupported operand type\")\n\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current_item:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_item\n        gap //= 2\n\n    return my_list", "test_list": ["assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]", "assert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]", "assert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]"], "challenge_test_list": [], "reference_code": "def shell_sort(my_list):\r\n    gap = len(my_list) // 2\r\n    while gap > 0:\r\n        for i in range(gap, len(my_list)):\r\n            current_item = my_list[i]\r\n            j = i\r\n            while j >= gap and my_list[j - gap] > current_item:\r\n                my_list[j] = my_list[j - gap]\r\n                j -= gap\r\n            my_list[j] = current_item\r\n        gap //= 2\r\n\r\n    return my_list"}
{"task_id": "429", "prompt": "Write a function to extract the elementwise and tuples from the given two tuples.", "completion": "def and_tuples(test_tup1, test_tup2):\n    if not isinstance(test_tup1, tuple) or not isinstance(test_tup2, tuple):\n        raise TypeError(\"unsupported operand type\")\n    res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n    return res", "test_list": ["assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)", "assert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)", "assert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)"], "challenge_test_list": [], "reference_code": "def and_tuples(test_tup1, test_tup2):\r\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) "}
{"task_id": "430", "prompt": "Write a function to find the directrix of a parabola.", "completion": "import pytest\n\ndef parabola_directrix(a, b, c):\n    if a <= 0:\n        raise ValueError(\"Invalid input for a: must be positive\")\n    \n    # The formula for the directrix of a parabola given by y = ax^2 + bx + c is:\n    # directrix = c - (b^2 / (4 * a))\n    directrix = c - (b ** 2 / (4 * a))\n    return directrix\n\n# Test cases\ndef test_basic_functionality_positive_coefficients():\n    assert parabola_directrix(1, 2, 3) == -5, \"Expected directrix for a=1, b=2, c=3 is -5\"\n\ndef test_basic_functionality_negative_coefficients():\n    assert parabola_directrix(-1, -2, -3) == -1, \"Expected directrix for a=-1, b=-2, c=-3 is -1\"\n\ndef test_edge_case_zero_coefficients():\n    assert parabola_directrix(1, 0, 0) == 0, \"Expected directrix for a=1, b=0, c=0 is 0\"\n\ndef test_edge_case_large_coefficients():\n    assert parabola_directrix(1000, 2000, 3000) == -7999999996, \"Expected directrix for large coefficients\"\n\ndef test_exceptions_invalid_input_string():\n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        parabola_directrix(\"a\", \"b\", \"c\")\n\ndef test_exceptions_invalid_input_none():\n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        parabola_directrix(None, None, None)\n\ndef test_exceptions_invalid_input_negative_a():\n    with pytest.raises(ValueError, match=\"Invalid input for a: must be positive\"):\n        parabola_directrix(-1, 2, 3)\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert parabola_directrix(5,3,2)==-198", "assert parabola_directrix(9,8,4)==-2336", "assert parabola_directrix(2,4,6)==-130"], "challenge_test_list": [], "reference_code": "def parabola_directrix(a, b, c): \r\n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\r\n  return directrix"}
{"task_id": "431", "prompt": "Write a function that takes two lists and returns true if they have at least one common element.", "completion": "def common_element(list1, list2):\n    if not isinstance(list1, list) or not isinstance(list2, list):\n        raise TypeError(\"Both inputs must be lists\")\n    \n    set1 = set(list1)\n    set2 = set(list2)\n    \n    return not set1.isdisjoint(set2)", "test_list": ["assert common_element([1,2,3,4,5], [5,6,7,8,9])==True", "assert common_element([1,2,3,4,5], [6,7,8,9])==None", "assert common_element(['a','b','c'], ['d','b','e'])==True"], "challenge_test_list": [], "reference_code": "def common_element(list1, list2):\r\n     result = False\r\n     for x in list1:\r\n         for y in list2:\r\n             if x == y:\r\n                 result = True\r\n                 return result"}
{"task_id": "432", "prompt": "Write a function to find the median of a trapezium.", "completion": "def median_trapezium(base1, base2, height):\n    if not all(isinstance(arg, (int, float)) for arg in [base1, base2, height]):\n        raise TypeError(\"unsupported operand type\")\n    median = 0.5 * (base1 + base2)\n    return median", "test_list": ["assert median_trapezium(15,25,35)==20", "assert median_trapezium(10,20,30)==15", "assert median_trapezium(6,9,4)==7.5"], "challenge_test_list": [], "reference_code": "def median_trapezium(base1,base2,height):\r\n median = 0.5 * (base1+ base2)\r\n return median"}
{"task_id": "433", "prompt": "Write a function to check whether the entered number is greater than the elements of the given array.", "completion": "def check_greater(arr, number):\n    if not isinstance(number, (int, float)):\n        raise TypeError(\"The number must be an integer or float.\")\n    if not isinstance(arr, list):\n        raise TypeError(\"The first argument must be a list.\")\n    for item in arr:\n        if not isinstance(item, (int, float)):\n            raise TypeError(\"All elements in the array must be integers or floats.\")\n    \n    if len(arr) == 0 or number > max(arr, default=float('-inf')):\n        return 'Yes, the entered number is greater than those in the array'\n    else:\n        return 'No, entered number is less than those in the array'", "test_list": ["assert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'", "assert check_greater([2, 3, 4, 5, 6], 8) == 'Yes, the entered number is greater than those in the array'", "assert check_greater([9, 7, 4, 8, 6, 1], 11) == 'Yes, the entered number is greater than those in the array'"], "challenge_test_list": [], "reference_code": "def check_greater(arr, number):\r\n  arr.sort()\r\n  if number > arr[-1]:\r\n    return ('Yes, the entered number is greater than those in the array')\r\n  else:\r\n    return ('No, entered number is less than those in the array')"}
{"task_id": "434", "prompt": "Write a function that matches a string that has an a followed by one or more b's.", "completion": "import re\n\ndef text_match_one(text):\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n    \n    patterns = 'ab+'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "test_list": ["assert text_match_one(\"ac\")==('Not matched!')", "assert text_match_one(\"dc\")==('Not matched!')", "assert text_match_one(\"abba\")==('Found a match!')"], "challenge_test_list": [], "reference_code": "import re\r\ndef text_match_one(text):\r\n        patterns = 'ab+?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')\r\n"}
{"task_id": "435", "prompt": "Write a python function to find the last digit of a given number.", "completion": "def last_Digit(n):\n    if not isinstance(n, int):\n        raise TypeError(\"not an integer\")\n    return abs(n) % 10", "test_list": ["assert last_Digit(123) == 3", "assert last_Digit(25) == 5", "assert last_Digit(30) == 0"], "challenge_test_list": [], "reference_code": "def last_Digit(n) :\r\n    return (n % 10) "}
{"task_id": "436", "prompt": "Write a python function to print negative numbers in a list.", "completion": "def neg_nos(list1):\n    if not isinstance(list1, list):\n        raise TypeError(\"unsupported operand type\")\n    for num in list1:\n        if not isinstance(num, (int, float)):\n            raise TypeError(\"unsupported operand type\")\n        if num < 0:\n            return num\n    return None", "test_list": ["assert neg_nos([-1,4,5,-6]) == -1,-6", "assert neg_nos([-1,-2,3,4]) == -1,-2", "assert neg_nos([-7,-6,8,9]) == -7,-6"], "challenge_test_list": [], "reference_code": "def neg_nos(list1):\r\n  for num in list1: \r\n    if num < 0: \r\n       return num "}
{"task_id": "437", "prompt": "Write a function to remove odd characters in a string.", "completion": "import pytest\n\ndef remove_odd(str1):\n    if not isinstance(str1, str):\n        raise TypeError(\"expected a string\")\n    \n    str2 = ''\n    for i in range(len(str1)):\n        if (i + 1) % 2 == 0:  # Check if the index is even (1-based)\n            str2 += str1[i]\n    return str2\n\n# Test cases\ndef test_basic_functionality_even_length():\n    assert remove_odd(\"abcdef\") == \"bdf\", \"Should return characters at even indices\"\n\ndef test_basic_functionality_odd_length():\n    assert remove_odd(\"abcde\") == \"bd\", \"Should return characters at even indices\"\n\ndef test_single_character():\n    assert remove_odd(\"a\") == \"\", \"Single character should return empty string\"\n\ndef test_empty_string():\n    assert remove_odd(\"\") == \"\", \"Empty string should return empty string\"\n\ndef test_special_characters():\n    assert remove_odd(\"!@#$%^&*()\") == \"@$%^\", \"Should handle special characters correctly\"\n\ndef test_numeric_characters():\n    assert remove_odd(\"1234567890\") == \"24680\", \"Should handle numeric characters correctly\"\n\ndef test_invalid_input_integer():\n    with pytest.raises(TypeError, match=\"expected a string\"):\n        remove_odd(123)\n\ndef test_invalid_input_list():\n    with pytest.raises(TypeError, match=\"expected a string\"):\n        remove_odd(['a', 'b', 'c'])\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert remove_odd(\"python\")==(\"yhn\")", "assert remove_odd(\"program\")==(\"rga\")", "assert remove_odd(\"language\")==(\"agae\")"], "challenge_test_list": [], "reference_code": "def remove_odd(str1):\r\n str2 = ''\r\n for i in range(1, len(str1) + 1):\r\n    if(i % 2 == 0):\r\n        str2 = str2 + str1[i - 1]\r\n return str2"}
{"task_id": "438", "prompt": "Write a function to count bidirectional tuple pairs.", "completion": "def count_bidirectional(test_list):\n    if test_list is None:\n        raise TypeError(\"Input cannot be None\")\n    \n    res = 0\n    seen_pairs = set()\n    \n    for pair in test_list:\n        if not isinstance(pair, tuple) or len(pair) != 2:\n            raise TypeError(\"All elements must be tuples of length 2\")\n        if not all(isinstance(x, (int, float)) for x in pair):\n            raise TypeError(\"All elements of the tuples must be numbers\")\n        \n        # Create a bidirectional representation\n        a, b = pair\n        bidirectional_pair = (a, b)\n        reverse_pair = (b, a)\n        \n        # Check if the reverse pair has been seen\n        if reverse_pair in seen_pairs:\n            res += 1\n        \n        # Add the current pair to the seen set\n        seen_pairs.add(bidirectional_pair)\n    \n    return str(res)", "test_list": ["assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'", "assert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '2'", "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == '4'"], "challenge_test_list": [], "reference_code": "def count_bidirectional(test_list):\r\n  res = 0\r\n  for idx in range(0, len(test_list)):\r\n    for iidx in range(idx + 1, len(test_list)):\r\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\r\n        res += 1\r\n  return (str(res)) "}
{"task_id": "439", "prompt": "Write a function to convert a list of multiple integers into a single integer.", "completion": "def multiple_to_single(L):\n    if not all(isinstance(x, int) for x in L):\n        raise ValueError(\"invalid literal for int()\")\n    return int(\"\".join(map(str, L))) if L else 0", "test_list": ["assert multiple_to_single([11, 33, 50])==113350", "assert multiple_to_single([-1,2,3,4,5,6])==-123456", "assert multiple_to_single([10,15,20,25])==10152025"], "challenge_test_list": [], "reference_code": "def multiple_to_single(L):\r\n  x = int(\"\".join(map(str, L)))\r\n  return x"}
{"task_id": "440", "prompt": "Write a function to find all adverbs and their positions in a given sentence.", "completion": "import re\n\ndef find_adverb_position(text):\n    if not isinstance(text, str):\n        raise TypeError(\"expected a string\")\n    \n    for m in re.finditer(r\"\\b\\w+ly\\b\", text):\n        return (m.start(), m.end(), m.group(0))\n    \n    return None", "test_list": ["assert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')", "assert find_adverb_position(\"seriously!! there are many roses\")==(0, 9, 'seriously')", "assert find_adverb_position(\"unfortunately!! sita is going to home\")==(0, 13, 'unfortunately')"], "challenge_test_list": [], "reference_code": "import re\r\ndef find_adverb_position(text):\r\n for m in re.finditer(r\"\\w+ly\", text):\r\n    return (m.start(), m.end(), m.group(0))"}
{"task_id": "441", "prompt": "Write a function to find the surface area of a cube.", "completion": "def surfacearea_cube(l):\n    if l < 0:\n        raise ValueError(\"Length must be non-negative\")\n    surfacearea = 6 * l * l\n    return surfacearea", "test_list": ["assert surfacearea_cube(5)==150", "assert surfacearea_cube(3)==54", "assert surfacearea_cube(10)==600"], "challenge_test_list": [], "reference_code": "def surfacearea_cube(l):\r\n  surfacearea= 6*l*l\r\n  return surfacearea"}
{"task_id": "442", "prompt": "Write a function to find the ration of positive numbers in an array of integers.", "completion": "from array import array\n\ndef positive_count(nums):\n    if not isinstance(nums, (list, array)):\n        raise TypeError(\"Input must be a list or array.\")\n    \n    n = len(nums)\n    if n == 0:\n        return 0.0\n    \n    n1 = sum(1 for x in nums if x > 0)\n    return round(n1 / n, 2)", "test_list": ["assert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54", "assert positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69", "assert positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56"], "challenge_test_list": [], "reference_code": "from array import array\r\ndef positive_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x > 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)"}
{"task_id": "443", "prompt": "Write a python function to find the largest negative number from the given list.", "completion": "def largest_neg(list1):\n    if not isinstance(list1, list):\n        raise TypeError(\"Input must be a list\")\n    \n    largest_negative = None\n    for x in list1:\n        if x < 0:\n            if largest_negative is None or x > largest_negative:\n                largest_negative = x\n    return largest_negative", "test_list": ["assert largest_neg([1,2,3,-4,-6]) == -6", "assert largest_neg([1,2,3,-8,-9]) == -9", "assert largest_neg([1,2,3,4,-1]) == -1"], "challenge_test_list": [], "reference_code": "def largest_neg(list1): \r\n    max = list1[0] \r\n    for x in list1: \r\n        if x < max : \r\n             max = x  \r\n    return max"}
{"task_id": "444", "prompt": "Write a function to trim each tuple by k in the given tuple list.", "completion": "def trim_tuple(test_list, K):\n    if not isinstance(test_list, list) or not all(isinstance(t, tuple) for t in test_list):\n        raise TypeError(\"First argument must be a list of tuples\")\n    if not isinstance(K, int):\n        raise TypeError(\"Second argument must be an integer\")\n    \n    res = []\n    for ele in test_list:\n        N = len(ele)\n        if K > N:\n            raise IndexError(\"K cannot be greater than the length of the tuple\")\n        res.append(tuple(list(ele)[K: N - K]))\n    return str(res)", "test_list": ["assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'", "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'", "assert trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]'"], "challenge_test_list": [], "reference_code": "def trim_tuple(test_list, K):\r\n  res = []\r\n  for ele in test_list:\r\n    N = len(ele)\r\n    res.append(tuple(list(ele)[K: N - K]))\r\n  return (str(res)) "}
{"task_id": "445", "prompt": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.", "completion": "def index_multiplication(test_tup1, test_tup2):\n    # Check if both tuples have the same length\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"not enough values to unpack\")\n    \n    # Perform index-wise multiplication\n    res = tuple(tuple(a * b for a, b in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n    return res", "test_list": ["assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))", "assert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))", "assert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))"], "challenge_test_list": [], "reference_code": "def index_multiplication(test_tup1, test_tup2):\r\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) "}
{"task_id": "446", "prompt": "Write a python function to count the occurence of all elements of list in a tuple.", "completion": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    if not isinstance(tup, tuple):\n        raise TypeError(\"expected tuple for tup\")\n    if not isinstance(lst, list):\n        raise TypeError(\"expected list for lst\")\n    \n    count = 0\n    for item in tup: \n        if item in lst: \n            count += 1 \n    return count", "test_list": ["assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3", "assert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6", "assert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2"], "challenge_test_list": [], "reference_code": "from collections import Counter \r\ndef count_Occurrence(tup, lst): \r\n    count = 0\r\n    for item in tup: \r\n        if item in lst: \r\n            count+= 1 \r\n    return count  "}
{"task_id": "447", "prompt": "Write a function to find cubes of individual elements in a list using lambda function.", "completion": "def cube_nums(nums):\n    return list(map(lambda x: x ** 3, nums))", "test_list": ["assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]", "assert cube_nums([10,20,30])==([1000, 8000, 27000])", "assert cube_nums([12,15])==([1728, 3375])"], "challenge_test_list": [], "reference_code": "def cube_nums(nums):\r\n cube_nums = list(map(lambda x: x ** 3, nums))\r\n return cube_nums"}
{"task_id": "448", "prompt": "Write a function to calculate the sum of perrin numbers.", "completion": "def cal_sum(n):\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    \n    if n == 0:\n        return 3\n    if n == 1:\n        return 3\n    if n == 2:\n        return 5\n    \n    a, b, c = 3, 3, 5  # Initialize the first three Perrin numbers\n    total_sum = a + b + c  # Start with the sum of the first three numbers\n    \n    for _ in range(3, n + 1):\n        d = a + b  # Calculate the next Perrin number\n        total_sum += d  # Add it to the total sum\n        a, b = b, c  # Shift the previous numbers\n        c = d  # Update the current number\n    \n    return total_sum", "test_list": ["assert cal_sum(9) == 49", "assert cal_sum(10) == 66", "assert cal_sum(11) == 88"], "challenge_test_list": [], "reference_code": "def cal_sum(n): \r\n\ta = 3\r\n\tb = 0\r\n\tc = 2\r\n\tif (n == 0): \r\n\t\treturn 3\r\n\tif (n == 1): \r\n\t\treturn 3\r\n\tif (n == 2): \r\n\t\treturn 5\r\n\tsum = 5\r\n\twhile (n > 2): \r\n\t\td = a + b \r\n\t\tsum = sum + d \r\n\t\ta = b \r\n\t\tb = c \r\n\t\tc = d \r\n\t\tn = n-1\r\n\treturn sum"}
{"task_id": "449", "prompt": "Write a python function to check whether the triangle is valid or not if 3 points are given.", "completion": "def check_Triangle(x1, y1, x2, y2, x3, y3):\n    # Check if all inputs are numeric\n    if not all(isinstance(i, (int, float)) for i in [x1, y1, x2, y2, x3, y3]):\n        raise TypeError(\"All inputs must be numeric\")\n    \n    # Calculate the area using the determinant method\n    area = (x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2))\n    \n    # If the area is zero, the points are collinear\n    if area == 0:\n        return 'No'\n    else:\n        return 'Yes'", "test_list": ["assert check_Triangle(1,5,2,5,4,6) == 'Yes'", "assert check_Triangle(1,1,1,4,1,5) == 'No'", "assert check_Triangle(1,1,1,1,1,1) == 'No'"], "challenge_test_list": [], "reference_code": "def check_Triangle(x1,y1,x2,y2,x3,y3): \r\n    a = (x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2))   \r\n    if a == 0: \r\n        return ('No') \r\n    else: \r\n        return ('Yes') "}
{"task_id": "450", "prompt": "Write a function to extract specified size of strings from a give list of string values.", "completion": "import pytest\n\ndef extract_string(str_list, length):\n    if not isinstance(str_list, list) or not all(isinstance(e, str) for e in str_list):\n        raise TypeError(\"expected str or list\")\n    if not isinstance(length, int):\n        raise TypeError(\"expected str or list\")\n    \n    result = [e for e in str_list if len(e) == length] \n    return result\n\n# Test cases\ndef test_basic_functionality():\n    assert extract_string([\"apple\", \"banana\", \"cherry\", \"date\"], 5) == [\"apple\", \"cherry\"]\n    assert extract_string([\"one\", \"two\", \"three\", \"four\"], 3) == [\"one\", \"two\"]\n    assert extract_string([\"cat\", \"dog\", \"fish\"], 3) == [\"cat\", \"dog\", \"fish\"]\n\ndef test_edge_cases():\n    assert extract_string([], 3) == []\n    assert extract_string([\"\", \"a\", \"ab\", \"abc\"], 0) == [\"\"]  # Only the empty string has length 0\n    assert extract_string([\"\", \"a\", \"ab\", \"abc\"], 1) == [\"a\"]  # Only \"a\" has length 1\n    assert extract_string([\"longer\", \"short\", \"tiny\"], 6) == [\"longer\"]  # Only \"longer\" has length 6\n\ndef test_exceptions():\n    with pytest.raises(TypeError, match=\"expected str or list\"):\n        extract_string(123, 3)\n    with pytest.raises(TypeError, match=\"expected str or list\"):\n        extract_string(None, 3)\n    with pytest.raises(TypeError, match=\"expected str or list\"):\n        extract_string([\"valid\", \"strings\"], \"not an int\")\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']", "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']", "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']"], "challenge_test_list": [], "reference_code": "def extract_string(str, l):\r\n    result = [e for e in str if len(e) == l] \r\n    return result"}
{"task_id": "451", "prompt": "Write a function to remove all whitespaces from the given string using regex.", "completion": "import re\n\ndef remove_whitespaces(text1):\n    if not isinstance(text1, str):\n        raise TypeError(\"expected string or bytes-like object\")\n    return re.sub(r'\\s+', '', text1)", "test_list": ["assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'", "assert remove_whitespaces(' Google    Dart ') == 'GoogleDart'", "assert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'"], "challenge_test_list": [], "reference_code": "import re\r\ndef remove_whitespaces(text1):\r\n  return (re.sub(r'\\s+', '',text1))"}
{"task_id": "452", "prompt": "Write a function that gives loss amount if the given amount has loss else return none.", "completion": "def loss_amount(actual_cost, sale_amount):\n    # Check if inputs are valid numbers\n    if not isinstance(actual_cost, (int, float)) or not isinstance(sale_amount, (int, float)):\n        raise TypeError(\"unsupported operand type\")\n\n    # Calculate loss amount\n    if sale_amount < actual_cost:\n        amount = actual_cost - sale_amount\n        return amount\n    else:\n        return None", "test_list": ["assert loss_amount(1500,1200)==None", "assert loss_amount(100,200)==100", "assert loss_amount(2000,5000)==3000"], "challenge_test_list": [], "reference_code": "def loss_amount(actual_cost,sale_amount): \r\n  if(sale_amount > actual_cost):\r\n    amount = sale_amount - actual_cost\r\n    return amount\r\n  else:\r\n    return None"}
{"task_id": "453", "prompt": "Write a python function to find the sum of even factors of a number.", "completion": "import math \n\ndef sumofFactors(n): \n    if n <= 0 or n % 2 != 0: \n        return 0\n    \n    res = 0\n    for i in range(1, (int)(math.sqrt(n)) + 1):    \n        if n % i == 0: \n            if i % 2 == 0:\n                res += i\n            if i != n // i and (n // i) % 2 == 0:  # Check the complementary factor\n                res += n // i\n                \n    return res", "test_list": ["assert sumofFactors(18) == 26", "assert sumofFactors(30) == 48", "assert sumofFactors(6) == 8"], "challenge_test_list": [], "reference_code": "import math \r\ndef sumofFactors(n) : \r\n    if (n % 2 != 0) : \r\n        return 0\r\n    res = 1\r\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \r\n        count = 0\r\n        curr_sum = 1\r\n        curr_term = 1\r\n        while (n % i == 0) : \r\n            count= count + 1\r\n            n = n // i \r\n            if (i == 2 and count == 1) : \r\n                curr_sum = 0\r\n            curr_term = curr_term * i \r\n            curr_sum = curr_sum + curr_term \r\n        res = res * curr_sum  \r\n    if (n >= 2) : \r\n        res = res * (1 + n) \r\n    return res "}
{"task_id": "454", "prompt": "Write a function that matches a word containing 'z'.", "completion": "import re\n\ndef text_match_wordz(text):\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n    patterns = r'\\w*z\\w*'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "test_list": ["assert text_match_wordz(\"pythonz.\")==('Found a match!')", "assert text_match_wordz(\"xyz.\")==('Found a match!')", "assert text_match_wordz(\"  lang  .\")==('Not matched!')"], "challenge_test_list": [], "reference_code": "import re\r\ndef text_match_wordz(text):\r\n        patterns = '\\w*z.\\w*'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"}
{"task_id": "455", "prompt": "Write a function to check whether the given month number contains 31 days or not.", "completion": "def check_monthnumb_number(monthnum2):\n    if not isinstance(monthnum2, int):\n        raise TypeError(\"Input must be an integer\")\n    if monthnum2 < 1 or monthnum2 > 12:\n        return False\n    return monthnum2 in {1, 3, 5, 7, 8, 10, 12}", "test_list": ["assert check_monthnumb_number(5)==True", "assert check_monthnumb_number(2)==False", "assert check_monthnumb_number(6)==False"], "challenge_test_list": [], "reference_code": "def check_monthnumb_number(monthnum2):\r\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\r\n    return True\r\n  else:\r\n    return False"}
{"task_id": "456", "prompt": "Write a function to reverse strings in a given list of string values.", "completion": "def reverse_string_list(stringlist):\n    if not isinstance(stringlist, list):\n        raise TypeError(\"stringlist must be a list\")\n    return [x[::-1] for x in stringlist]", "test_list": ["assert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']", "assert reverse_string_list(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']", "assert reverse_string_list(['jack','john','mary'])==['kcaj','nhoj','yram']"], "challenge_test_list": [], "reference_code": "def reverse_string_list(stringlist):\r\n    result = [x[::-1] for x in stringlist]\r\n    return result"}
{"task_id": "457", "prompt": "Write a python function to find the sublist having minimum length.", "completion": "import pytest\n\ndef Find_Min(lst):\n    if not lst:\n        raise ValueError(\"min() arg is an empty sequence\")\n    \n    if not all(isinstance(sublist, list) for sublist in lst):\n        raise TypeError(\"unhashable type: 'list'\")\n    \n    minList = min((sublist for sublist in lst if isinstance(sublist, list)), key=len)\n    return minList\n\n# Test cases\ndef test_basic_functionality():\n    assert Find_Min([[1, 2], [3], [4, 5, 6]]) == [3], \"Should return the sublist with minimum length\"\n    assert Find_Min([[1], [2], [3], [4]]) == [1], \"Should return the first sublist with minimum length\"\n    assert Find_Min([[], [1, 2], [3, 4, 5]]) == [], \"Should return the empty sublist as it has minimum length\"\n\ndef test_edge_cases():\n    assert Find_Min([[], [], []]) == [], \"Should return an empty list when all sublists are empty\"\n    assert Find_Min([[1], [2], [3], [], [4]]) == [], \"Should return the empty sublist when present\"\n    assert Find_Min([[1, 2, 3], [4, 5], [6]]) == [6], \"Should return the sublist with minimum length\"\n\ndef test_exceptions():\n    with pytest.raises(TypeError, match=\"unhashable type: 'list'\"):\n        Find_Min([1, 2, 3])  # Invalid input: not a list of lists\n    with pytest.raises(ValueError, match=\"min() arg is an empty sequence\"):\n        Find_Min([])  # Invalid input: empty list\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert Find_Min([[1],[1,2],[1,2,3]]) == [1]", "assert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]", "assert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']"], "challenge_test_list": [], "reference_code": "def Find_Min(lst): \r\n    minList = min((x) for x in lst) \r\n    return minList"}
{"task_id": "458", "prompt": "Write a function to find the area of a rectangle.", "completion": "def rectangle_area(l, b):\n    if not isinstance(l, (int, float)) or not isinstance(b, (int, float)):\n        raise TypeError(\"unsupported operand type\")\n    return l * b", "test_list": ["assert rectangle_area(10,20)==200", "assert rectangle_area(10,5)==50", "assert rectangle_area(4,2)==8"], "challenge_test_list": [], "reference_code": "def rectangle_area(l,b):\r\n  area=l*b\r\n  return area"}
{"task_id": "459", "prompt": "Write a function to remove uppercase substrings from a given string by using regex.", "completion": "import re\n\ndef remove_uppercase(str1):\n    # Use regex to remove uppercase substrings (i.e., sequences of uppercase letters)\n    result = re.sub(r'[A-Z]+', '', str1)\n    return result", "test_list": ["assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'", "assert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'", "assert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'"], "challenge_test_list": [], "reference_code": "import re\r\ndef remove_uppercase(str1):\r\n  remove_upper = lambda text: re.sub('[A-Z]', '', text)\r\n  result =  remove_upper(str1)\r\n  return (result)"}
{"task_id": "460", "prompt": "Write a python function to get the first element of each sublist.", "completion": "def Extract(lst):\n    if lst is None or not isinstance(lst, list):\n        raise TypeError(\"Input must be a list of lists\")\n    \n    result = []\n    for item in lst:\n        if not isinstance(item, list):\n            raise TypeError(\"Input must be a list of lists\")\n        if len(item) == 0:\n            raise IndexError(\"list index out of range\")\n        result.append(item[0])\n    \n    return result", "test_list": ["assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]", "assert Extract([[1,2,3],[4, 5]]) == [1,4]", "assert Extract([[9,8,1],[1,2]]) == [9,1]"], "challenge_test_list": [], "reference_code": "def Extract(lst): \r\n    return [item[0] for item in lst] "}
{"task_id": "461", "prompt": "Write a python function to count the upper case characters in a given string.", "completion": "def upper_ctr(s):\n    if not isinstance(s, str):\n        raise TypeError(\"expected a string\")\n    \n    upper_ctr = 0\n    for char in s:\n        if 'A' <= char <= 'Z':\n            upper_ctr += 1\n    return upper_ctr", "test_list": ["assert upper_ctr('PYthon') == 1", "assert upper_ctr('BigData') == 1", "assert upper_ctr('program') == 0"], "challenge_test_list": [], "reference_code": "def upper_ctr(str):\r\n    upper_ctr = 0\r\n    for i in range(len(str)):\r\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\r\n          return upper_ctr"}
{"task_id": "462", "prompt": "Write a function to find all possible combinations of the elements of a given list.", "completion": "from typing import List, Any\n\ndef combinations_list(list1: List[Any]) -> List[List[Any]]:\n    if list1 is None or not isinstance(list1, (list, tuple)):\n        raise TypeError(\"expected an iterable\")\n    \n    if len(list1) == 0:\n        return [[]]\n    \n    result = []\n    for el in combinations_list(list1[1:]):\n        result.append(el)  # Add the combination without the first element\n        result.append(el + [list1[0]])  # Add the combination with the first element\n    return result", "test_list": ["assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]", "assert combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]", "assert combinations_list(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]"], "challenge_test_list": [], "reference_code": "def combinations_list(list1):\r\n    if len(list1) == 0:\r\n        return [[]]\r\n    result = []\r\n    for el in combinations_list(list1[1:]):\r\n        result += [el, el+[list1[0]]]\r\n    return result"}
{"task_id": "463", "prompt": "Write a function to find the maximum product subarray of the given array.", "completion": "def max_subarray_product(arr):\n    if arr is None:\n        raise TypeError(\"Input cannot be None\")\n    if not all(isinstance(x, (int, float)) for x in arr):\n        raise TypeError(\"All elements in the array must be numeric\")\n\n    n = len(arr)\n    if n == 0:\n        return 0\n\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    max_so_far = arr[0]\n\n    for i in range(1, n):\n        if arr[i] < 0:\n            max_ending_here, min_ending_here = min_ending_here, max_ending_here\n\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far", "test_list": ["assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112", "assert max_subarray_product([6, -3, -10, 0, 2]) == 180 ", "assert max_subarray_product([-2, -40, 0, -2, -3]) == 80"], "challenge_test_list": [], "reference_code": "def max_subarray_product(arr):\r\n\tn = len(arr)\r\n\tmax_ending_here = 1\r\n\tmin_ending_here = 1\r\n\tmax_so_far = 0\r\n\tflag = 0\r\n\tfor i in range(0, n):\r\n\t\tif arr[i] > 0:\r\n\t\t\tmax_ending_here = max_ending_here * arr[i]\r\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\r\n\t\t\tflag = 1\r\n\t\telif arr[i] == 0:\r\n\t\t\tmax_ending_here = 1\r\n\t\t\tmin_ending_here = 1\r\n\t\telse:\r\n\t\t\ttemp = max_ending_here\r\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\r\n\t\t\tmin_ending_here = temp * arr[i]\r\n\t\tif (max_so_far < max_ending_here):\r\n\t\t\tmax_so_far = max_ending_here\r\n\tif flag == 0 and max_so_far == 0:\r\n\t\treturn 0\r\n\treturn max_so_far"}
{"task_id": "464", "prompt": "Write a function to check if all values are same in a dictionary.", "completion": "def check_value(d, n):\n    if not isinstance(d, dict):\n        raise TypeError(\"First argument must be a dictionary\")\n    if len(d) == 0:\n        return True\n    if not all(isinstance(v, type(n)) for v in d.values()):\n        raise TypeError(\"All values in the dictionary must be of the same type as the provided value\")\n    return all(x == n for x in d.values())", "test_list": ["assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False", "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True", "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False"], "challenge_test_list": [], "reference_code": "def check_value(dict, n):\r\n    result = all(x == n for x in dict.values()) \r\n    return result"}
{"task_id": "465", "prompt": "Write a function to drop empty items from a given dictionary.", "completion": "def drop_empty(dict1):\n    if not isinstance(dict1, dict):\n        raise TypeError(\"Input must be a dictionary\")\n    return {key: value for key, value in dict1.items() if value not in (None, '', [])}", "test_list": ["assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}", "assert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}", "assert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}"], "challenge_test_list": [], "reference_code": "def drop_empty(dict1):\r\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\r\n  return dict1"}
{"task_id": "466", "prompt": "Write a function to find the peak element in the given array.", "completion": "def find_peak_util(arr, low, high, n): \n    mid = low + (high - low) // 2\n    if ((mid == 0 or arr[mid - 1] <= arr[mid]) and\n        (mid == n - 1 or arr[mid + 1] <= arr[mid])): \n        return mid \n    elif (mid > 0 and arr[mid - 1] > arr[mid]): \n        return find_peak_util(arr, low, mid - 1, n) \n    else: \n        return find_peak_util(arr, mid + 1, high, n) \n\ndef find_peak(arr, n): \n    if n == 0:\n        raise IndexError(\"Array is empty\")\n    if not all(isinstance(x, (int, float)) for x in arr):\n        raise TypeError(\"Array must contain only numbers\")\n    return find_peak_util(arr, 0, n - 1, n)", "test_list": ["assert find_peak([1, 3, 20, 4, 1, 0], 6) == 2", "assert find_peak([2, 3, 4, 5, 6], 5) == 4", "assert find_peak([8, 9, 11, 12, 14, 15], 6) == 5 "], "challenge_test_list": [], "reference_code": "def find_peak_util(arr, low, high, n): \r\n\tmid = low + (high - low)/2\r\n\tmid = int(mid) \r\n\tif ((mid == 0 or arr[mid - 1] <= arr[mid]) and\r\n\t\t(mid == n - 1 or arr[mid + 1] <= arr[mid])): \r\n\t\treturn mid \r\n\telif (mid > 0 and arr[mid - 1] > arr[mid]): \r\n\t\treturn find_peak_util(arr, low, (mid - 1), n) \r\n\telse: \r\n\t\treturn find_peak_util(arr, (mid + 1), high, n) \r\ndef find_peak(arr, n): \r\n\treturn find_peak_util(arr, 0, n - 1, n) "}
{"task_id": "467", "prompt": "Write a python function to convert decimal number to octal number.", "completion": "def decimal_to_Octal(deciNum):\n    if not isinstance(deciNum, int):\n        raise TypeError(\"unsupported operand type\")\n    \n    octalNum = 0\n    countval = 1\n    dNo = deciNum\n    \n    while deciNum != 0:\n        remainder = deciNum % 8\n        octalNum += remainder * countval\n        countval *= 10\n        deciNum //= 8\n    \n    return octalNum", "test_list": ["assert decimal_to_Octal(10) == 12", "assert decimal_to_Octal(2) == 2", "assert decimal_to_Octal(33) == 41"], "challenge_test_list": [], "reference_code": "def decimal_to_Octal(deciNum):\r\n    octalNum = 0\r\n    countval = 1;\r\n    dNo = deciNum;\r\n    while (deciNum!= 0):\r\n        remainder= deciNum % 8;\r\n        octalNum+= remainder*countval;\r\n        countval= countval*10;\r\n        deciNum //= 8; \r\n    return (octalNum)"}
{"task_id": "468", "prompt": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.", "completion": "def max_product(arr, n):\n    if arr is None or not isinstance(arr, list) or n < 0:\n        raise TypeError(\"Invalid input\")\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n\n    mpis = [0] * n\n    for i in range(n):\n        mpis[i] = arr[i]\n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j] and mpis[i] < (mpis[j] * arr[i]):\n                mpis[i] = mpis[j] * arr[i]\n\n    return max(mpis)\n\n# Test cases\nimport pytest\n\ndef test_basic_functionality():\n    assert max_product([1, 2, 3, 4], 4) == 24, \"Should be 24 for increasing sequence [1, 2, 3, 4]\"\n    assert max_product([3, 5, 6, 2, 4, 5], 6) == 120, \"Should be 120 for increasing subsequence [3, 5, 6]\"\n    assert max_product([1, 101, 2, 3, 100], 5) == 10100, \"Should be 10100 for increasing subsequence [1, 101]\"\n\ndef test_edge_cases():\n    assert max_product([], 0) == 0, \"Should be 0 for empty array\"\n    assert max_product([5], 1) == 5, \"Should be 5 for single element array\"\n    assert max_product([1, 2, 3], 3) == 6, \"Should be 6 for increasing sequence [1, 2, 3]\"\n    assert max_product([10, 1, 2, 3], 4) == 60, \"Should be 60 for increasing subsequence [1, 2, 3]\"\n\ndef test_exceptions():\n    with pytest.raises(TypeError):\n        max_product(None, 0)\n    with pytest.raises(TypeError):\n        max_product(\"string\", 5)\n    with pytest.raises(ValueError):\n        max_product([1, 2, 3], -1)\n\n# Uncomment the following line to run the tests\n# pytest.main()", "test_list": ["assert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 ", "assert max_product([4, 42, 55, 68, 80], 5) == 50265600", "assert max_product([10, 22, 9, 33, 21, 50, 41, 60], 8) == 21780000 "], "challenge_test_list": [], "reference_code": "def max_product(arr, n ): \r\n\tmpis =[0] * (n) \r\n\tfor i in range(n): \r\n\t\tmpis[i] = arr[i] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (arr[i] > arr[j] and\r\n\t\t\t\t\tmpis[i] < (mpis[j] * arr[i])): \r\n\t\t\t\t\t\tmpis[i] = mpis[j] * arr[i] \r\n\treturn max(mpis)"}
{"task_id": "469", "prompt": "Write a function to find the maximum profit earned from a maximum of k stock transactions", "completion": "def max_profit(price, k):\n    if price is None or k is None:\n        raise TypeError(\"Input cannot be None\")\n    if k < 0:\n        raise ValueError(\"Number of transactions cannot be negative\")\n    \n    n = len(price)\n    if n == 0 or k == 0:\n        return 0\n    \n    # If k is greater than n/2, we can make as many transactions as we want\n    if k >= n // 2:\n        max_profit = 0\n        for i in range(1, n):\n            if price[i] > price[i - 1]:\n                max_profit += price[i] - price[i - 1]\n        return max_profit\n\n    # Create a table to store the maximum profit for each transaction\n    final_profit = [[0 for _ in range(n)] for _ in range(k + 1)]\n    \n    for i in range(1, k + 1):\n        max_so_far = -float('inf')\n        for j in range(1, n):\n            max_so_far = max(max_so_far, final_profit[i - 1][j - 1] - price[j - 1])\n            final_profit[i][j] = max(final_profit[i][j - 1], price[j] + max_so_far)\n    \n    return final_profit[k][n - 1]", "test_list": ["assert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10", "assert max_profit([2, 4, 7, 5, 4, 3, 5], 2) == 7", "assert max_profit([10, 6, 8, 4, 2], 2) == 2"], "challenge_test_list": [], "reference_code": "def max_profit(price, k):\r\n    n = len(price)\r\n    final_profit = [[None for x in range(n)] for y in range(k + 1)]\r\n    for i in range(k + 1):\r\n        for j in range(n):\r\n            if i == 0 or j == 0:\r\n                final_profit[i][j] = 0\r\n            else:\r\n                max_so_far = 0\r\n                for x in range(j):\r\n                    curr_price = price[j] - price[x] + final_profit[i-1][x]\r\n                    if max_so_far < curr_price:\r\n                        max_so_far = curr_price\r\n                final_profit[i][j] = max(final_profit[i][j-1], max_so_far)\r\n    return final_profit[k][n-1]"}
{"task_id": "470", "prompt": "Write a function to find the pairwise addition of the elements of the given tuples.", "completion": "def add_pairwise(test_tup):\n    if len(test_tup) < 2:\n        return ()\n    res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n    return res", "test_list": ["assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)", "assert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)", "assert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)"], "challenge_test_list": [], "reference_code": "def add_pairwise(test_tup):\r\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) "}
{"task_id": "471", "prompt": "Write a python function to find remainder of array multiplication divided by n.", "completion": "import pytest\n\ndef find_remainder(arr, lens, n): \n    if lens != len(arr):\n        raise ValueError(\"lens must be equal to the length of arr\")\n    if not isinstance(arr, list) or not all(isinstance(x, (int, float)) for x in arr):\n        raise TypeError(\"unsupported operand type\")\n    if not isinstance(n, (int, float)):\n        raise TypeError(\"unsupported operand type\")\n    \n    mul = 1\n    for i in range(lens):  \n        mul = (mul * (arr[i] % n)) % n \n    return mul % n \n\n# Test cases\ndef test_basic_functionality():\n    assert find_remainder([1, 2, 3, 4], 4, 5) == 4, \"Expected remainder of 4\"\n    assert find_remainder([2, 3, 4], 3, 6) == 0, \"Expected remainder of 0\"\n    assert find_remainder([5, 6, 7], 3, 10) == 2, \"Expected remainder of 2\"\n    assert find_remainder([10, 20, 30], 3, 7) == 6, \"Expected remainder of 6\"\n\ndef test_edge_cases():\n    assert find_remainder([], 0, 5) == 1, \"Expected remainder of 1 for empty array\"\n    assert find_remainder([0], 1, 5) == 0, \"Expected remainder of 0 for single zero element\"\n    assert find_remainder([1], 1, 5) == 1, \"Expected remainder of 1 for single non-zero element\"\n    assert find_remainder([1, 2, 3], 3, 1) == 0, \"Expected remainder of 0 when n is 1\"\n\ndef test_exceptions():\n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        find_remainder(\"not an array\", 5, 3)\n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        find_remainder([1, 2, 3], 3, \"not a number\")\n    with pytest.raises(ValueError, match=\"lens must be equal to the length of arr\"):\n        find_remainder([1, 2], 3, 5)\n\n# Uncomment the following line to run tests\n# pytest.main()", "test_list": ["assert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9", "assert find_remainder([1,1,1],3,1) == 0", "assert find_remainder([1,2,1],3,2) == 0"], "challenge_test_list": [], "reference_code": "def find_remainder(arr, lens, n): \r\n    mul = 1\r\n    for i in range(lens):  \r\n        mul = (mul * (arr[i] % n)) % n \r\n    return mul % n "}
{"task_id": "472", "prompt": "Write a python function to check whether the given list contains consecutive numbers or not.", "completion": "def check_Consecutive(l):\n    if l is None or not isinstance(l, list) or any(not isinstance(x, int) for x in l):\n        raise TypeError(\"Input must be a list of integers\")\n    \n    if len(l) == 0:\n        return True\n    if len(l) == 1:\n        return True\n    \n    return sorted(l) == list(range(min(l), max(l) + 1))", "test_list": ["assert check_Consecutive([1,2,3,4,5]) == True", "assert check_Consecutive([1,2,3,5,6]) == False", "assert check_Consecutive([1,2,1]) == False"], "challenge_test_list": [], "reference_code": "def check_Consecutive(l): \r\n    return sorted(l) == list(range(min(l),max(l)+1)) "}
{"task_id": "473", "prompt": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.", "completion": "def tuple_intersection(test_list1, test_list2):\n    if test_list1 is None or test_list2 is None:\n        raise TypeError(\"Input lists cannot be None\")\n    \n    if not all(isinstance(tup, tuple) for tup in test_list1) or not all(isinstance(tup, tuple) for tup in test_list2):\n        raise TypeError(\"All elements in the lists must be tuples\")\n    \n    res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n    return res", "test_list": ["assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}", "assert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}", "assert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}"], "challenge_test_list": [], "reference_code": "def tuple_intersection(test_list1, test_list2):\r\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\r\n  return (res)"}
{"task_id": "474", "prompt": "Write a function to replace characters in a string.", "completion": "import pytest\n\ndef replace_char(str1, ch, newch):\n    # Validate input types\n    if not isinstance(str1, str):\n        raise TypeError(\"str1 must be a string\")\n    if not isinstance(ch, str) or len(ch) != 1:\n        raise TypeError(\"ch must be a single character string\")\n    if not isinstance(newch, str) or len(newch) != 1:\n        raise TypeError(\"newch must be a single character string\")\n    \n    # Replace the character\n    str2 = str1.replace(ch, newch)\n    return str2\n\n# Test cases\ndef test_basic_functionality():\n    assert replace_char(\"hello world\", \"o\", \"a\") == \"hella warld\", \"Should replace 'o' with 'a'\"\n    assert replace_char(\"test case\", \"t\", \"T\") == \"TesT case\", \"Should replace 't' with 'T'\"\n    assert replace_char(\"abcdef\", \"x\", \"y\") == \"abcdef\", \"Should return the same string if character not found\"\n\ndef test_edge_cases():\n    assert replace_char(\"\", \"a\", \"b\") == \"\", \"Should return an empty string when input is empty\"\n    assert replace_char(\"a\", \"a\", \"b\") == \"b\", \"Should replace single character in a single character string\"\n    assert replace_char(\"aaaaaa\", \"a\", \"b\") == \"bbbbbb\", \"Should replace all characters in a string\"\n\ndef test_exceptions():\n    with pytest.raises(TypeError, match=\"replace_char() missing 2 required positional arguments\"):\n        replace_char(\"test\")  # Missing required arguments\n    with pytest.raises(TypeError, match=\"replace_char() missing 1 required positional argument\"):\n        replace_char(\"test\", \"t\")  # Missing new character argument\n    with pytest.raises(TypeError):\n        replace_char(123, \"1\", \"2\")  # Invalid input type for str1\n    with pytest.raises(TypeError):\n        replace_char(\"test\", 1, \"2\")  # Invalid input type for ch\n    with pytest.raises(TypeError):\n        replace_char(\"test\", \"t\", 2)  # Invalid input type for newch\n\n# Uncomment the following line to run tests when executing the script\n# pytest.main()", "test_list": ["assert replace_char(\"polygon\",'y','l')==(\"pollgon\")", "assert replace_char(\"character\",'c','a')==(\"aharaater\")", "assert replace_char(\"python\",'l','a')==(\"python\")"], "challenge_test_list": [], "reference_code": "def replace_char(str1,ch,newch):\r\n str2 = str1.replace(ch, newch)\r\n return str2"}
{"task_id": "475", "prompt": "Write a function to sort counter by value.", "completion": "from collections import Counter\n\ndef sort_counter(dict1):\n    # Create a Counter object from the input dictionary\n    x = Counter(dict1)\n    \n    # Sort the items by value in descending order and then by key in ascending order\n    sort_counter = sorted(x.items(), key=lambda item: (-item[1], item[0]))\n    \n    return sort_counter", "test_list": ["assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]", "assert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]", "assert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]"], "challenge_test_list": [], "reference_code": "from collections import Counter\r\ndef sort_counter(dict1):\r\n x = Counter(dict1)\r\n sort_counter=x.most_common()\r\n return sort_counter"}
{"task_id": "476", "prompt": "Write a python function to find the sum of the largest and smallest value in a given array.", "completion": "def big_sum(nums):\n    if nums is None or len(nums) == 0:\n        raise ValueError(\"Input cannot be None or an empty list\")\n    \n    if not all(isinstance(x, (int, float)) for x in nums):\n        raise TypeError(\"All elements in the list must be numbers\")\n    \n    return max(nums) + min(nums)", "test_list": ["assert big_sum([1,2,3]) == 4", "assert big_sum([-1,2,3,4]) == 3", "assert big_sum([2,3,6]) == 8"], "challenge_test_list": [], "reference_code": "def big_sum(nums):\r\n      sum= max(nums)+min(nums)\r\n      return sum"}
{"task_id": "477", "prompt": "Write a python function to convert the given string to lower case.", "completion": "def is_lower(string):\n    if not isinstance(string, str):\n        raise TypeError(\"expected string or bytes-like object\")\n    return string.lower()", "test_list": ["assert is_lower(\"InValid\") == \"invalid\"", "assert is_lower(\"TruE\") == \"true\"", "assert is_lower(\"SenTenCE\") == \"sentence\""], "challenge_test_list": [], "reference_code": "def is_lower(string):\r\n  return (string.lower())"}
{"task_id": "478", "prompt": "Write a function to remove lowercase substrings from a given string.", "completion": "import re\n\ndef remove_lowercase(str1):\n    # Use regex to remove all lowercase substrings\n    # The pattern '[a-z]+' matches one or more lowercase letters\n    result = re.sub('[a-z]+', '', str1)\n    return result", "test_list": ["assert remove_lowercase(\"PYTHon\")==('PYTH')", "assert remove_lowercase(\"FInD\")==('FID')", "assert remove_lowercase(\"STRinG\")==('STRG')"], "challenge_test_list": [], "reference_code": "import re\r\ndef remove_lowercase(str1):\r\n remove_lower = lambda text: re.sub('[a-z]', '', text)\r\n result =  remove_lower(str1)\r\n return result"}
{"task_id": "479", "prompt": "Write a python function to find the first digit of a given number.", "completion": "def first_Digit(n):\n    if not isinstance(n, int):\n        raise TypeError(\"unsupported operand type\")\n    \n    n = abs(n)\n    \n    if n == 0:\n        return 0\n    \n    while n >= 10:\n        n //= 10\n    \n    return n", "test_list": ["assert first_Digit(123) == 1", "assert first_Digit(456) == 4", "assert first_Digit(12) == 1"], "challenge_test_list": [], "reference_code": "def first_Digit(n) :  \r\n    while n >= 10:  \r\n        n = n / 10; \r\n    return int(n) "}
{"task_id": "480", "prompt": "Write a python function to find the maximum occurring character in a given string.", "completion": "def get_max_occuring_char(str1):\n    if not isinstance(str1, str):\n        raise TypeError(\"Input must be a string\")\n    \n    ASCII_SIZE = 256\n    ctr = [0] * ASCII_SIZE\n    max_count = -1\n    ch = ''\n    \n    for i in str1:\n        ctr[ord(i)] += 1\n    \n    for i in str1:\n        if max_count < ctr[ord(i)]:\n            max_count = ctr[ord(i)]\n            ch = i\n            \n    return ch", "test_list": ["assert get_max_occuring_char(\"data\") == \"a\"", "assert get_max_occuring_char(\"create\") == \"e\"", "assert get_max_occuring_char(\"brilliant girl\") == \"i\""], "challenge_test_list": [], "reference_code": "def get_max_occuring_char(str1):\r\n  ASCII_SIZE = 256\r\n  ctr = [0] * ASCII_SIZE\r\n  max = -1\r\n  ch = ''\r\n  for i in str1:\r\n    ctr[ord(i)]+=1;\r\n  for i in str1:\r\n    if max < ctr[ord(i)]:\r\n      max = ctr[ord(i)]\r\n      ch = i\r\n  return ch"}
{"task_id": "481", "prompt": "Write a function to determine if there is a subset of the given set with sum equal to the given sum.", "completion": "def is_subset_sum(set, n, sum):\n    if set is None or n is None or sum is None:\n        raise TypeError(\"Arguments cannot be None\")\n    \n    if sum == 0:\n        return True\n    if n == 0:\n        return False\n    if set[n - 1] > sum:\n        return is_subset_sum(set, n - 1, sum)\n    return is_subset_sum(set, n - 1, sum) or is_subset_sum(set, n - 1, sum - set[n - 1])", "test_list": ["assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True", "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 30) == False", "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 15) == True"], "challenge_test_list": [], "reference_code": "def is_subset_sum(set, n, sum):\r\n\tif (sum == 0):\r\n\t\treturn True\r\n\tif (n == 0):\r\n\t\treturn False\r\n\tif (set[n - 1] > sum):\r\n\t\treturn is_subset_sum(set, n - 1, sum)\r\n\treturn is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum-set[n-1])"}
{"task_id": "482", "prompt": "Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.", "completion": "import re \n\ndef match(text): \n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n    \n    pattern = '^[A-Z][a-z]+$'\n    if re.match(pattern, text): \n        return 'Yes' \n    else: \n        return 'No'", "test_list": ["assert match(\"Geeks\") == 'Yes'", "assert match(\"geeksforGeeks\") == 'Yes'", "assert match(\"geeks\") == 'No'"], "challenge_test_list": [], "reference_code": "import re \r\ndef match(text): \r\n\t\tpattern = '[A-Z]+[a-z]+$'\r\n\t\tif re.search(pattern, text): \r\n\t\t\t\treturn('Yes') \r\n\t\telse: \r\n\t\t\t\treturn('No') "}
{"task_id": "483", "prompt": "Write a python function to find the first natural number whose factorial is divisible by x.", "completion": "import math\n\ndef first_Factorial_Divisible_Number(x):\n    if not isinstance(x, int) or x <= 0:\n        raise ValueError(\"must be a positive integer\")\n    \n    i = 1\n    fact = 1\n    while True:\n        fact *= i\n        if fact % x == 0:\n            return i\n        i += 1", "test_list": ["assert first_Factorial_Divisible_Number(10) == 5", "assert first_Factorial_Divisible_Number(15) == 5", "assert first_Factorial_Divisible_Number(5) == 4"], "challenge_test_list": [], "reference_code": "def first_Factorial_Divisible_Number(x): \r\n    i = 1;\r\n    fact = 1; \r\n    for i in range(1,x): \r\n        fact = fact * i \r\n        if (fact % x == 0): \r\n            break\r\n    return i "}
{"task_id": "484", "prompt": "Write a function to remove the matching tuples from the given two tuples.", "completion": "def remove_matching_tuple(test_list1, test_list2):\n    # Check if inputs are tuples, raise TypeError if not\n    if not isinstance(test_list1, tuple) or not isinstance(test_list2, tuple):\n        raise TypeError(\"Both arguments must be tuples\")\n    \n    # Use a list comprehension to filter out matching tuples\n    res = [sub for sub in test_list1 if sub not in test_list2]\n    \n    return tuple(res)  # Return as a tuple to match expected output", "test_list": ["assert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]", "assert remove_matching_tuple([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')]) == [('Part', 'of'), ('the', 'journey'), ('is ', 'end')]", "assert remove_matching_tuple([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')]) == [('Its', 'been'), ('day', 'without')]"], "challenge_test_list": [], "reference_code": "def remove_matching_tuple(test_list1, test_list2):\r\n  res = [sub for sub in test_list1 if sub not in test_list2]\r\n  return (res) "}
{"task_id": "485", "prompt": "Write a function to find the largest palindromic number in the given array.", "completion": "def is_palindrome(n):\n    if n < 0:\n        return False\n    str_n = str(n)\n    return str_n == str_n[::-1]\n\ndef largest_palindrome(A, n):\n    if not all(isinstance(x, int) for x in A):\n        raise TypeError(\"All elements in the array must be integers.\")\n    \n    largest = -1\n    for num in A:\n        if is_palindrome(num) and num > largest:\n            largest = num\n    return largest", "test_list": ["assert largest_palindrome([1, 232, 54545, 999991], 4) == 54545", "assert largest_palindrome([1, 2, 3, 4, 5, 50], 6) == 5", "assert largest_palindrome([1, 3, 7, 9, 45], 5)  == 9"], "challenge_test_list": [], "reference_code": "def is_palindrome(n) : \r\n\tdivisor = 1\r\n\twhile (n / divisor >= 10) : \r\n\t\tdivisor *= 10\r\n\twhile (n != 0) : \r\n\t\tleading = n // divisor \r\n\t\ttrailing = n % 10\r\n\t\tif (leading != trailing) : \r\n\t\t\treturn False\r\n\t\tn = (n % divisor) // 10\r\n\t\tdivisor = divisor // 100\r\n\treturn True\r\ndef largest_palindrome(A, n) : \r\n\tA.sort() \r\n\tfor i in range(n - 1, -1, -1) : \r\n\t\tif (is_palindrome(A[i])) : \r\n\t\t\treturn A[i] \r\n\treturn -1"}
{"task_id": "486", "prompt": "Write a function to compute binomial probability for the given number.", "completion": "def nCr(n, r): \n    if (r > n / 2): \n        r = n - r \n    answer = 1 \n    for i in range(1, r + 1): \n        answer *= (n - r + i) \n        answer /= i \n    return answer \n\ndef binomial_probability(n, k, p): \n    if k < 0 or k > n:\n        raise ValueError(\"k must be between 0 and n\")\n    if p < 0 or p > 1:\n        raise ValueError(\"p must be between 0 and 1\")\n    \n    if n == 0 and k == 0:\n        return 1.0\n    if n == 0:\n        return 0.0\n    \n    return (nCr(n, k) * pow(p, k) * pow(1 - p, n - k))", "test_list": ["assert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185", "assert binomial_probability(11, 6, 2.0/4) == 0.2255859375", "assert binomial_probability(12, 7, 3.0/5) == 0.227030335488"], "challenge_test_list": [], "reference_code": "def nCr(n, r): \r\n\tif (r > n / 2): \r\n\t\tr = n - r \r\n\tanswer = 1 \r\n\tfor i in range(1, r + 1): \r\n\t\tanswer *= (n - r + i) \r\n\t\tanswer /= i \r\n\treturn answer \r\ndef binomial_probability(n, k, p): \r\n\treturn (nCr(n, k) * pow(p, k) *\tpow(1 - p, n - k)) "}
{"task_id": "487", "prompt": "Write a function to sort a list of tuples in increasing order by the last element in each tuple.", "completion": "def sort_tuple(tup):\n    if not isinstance(tup, list):\n        raise TypeError(\"Input must be a list of tuples\")\n    if not all(isinstance(i, tuple) for i in tup):\n        raise TypeError(\"All elements must be tuples\")\n    \n    lst = len(tup)\n    for i in range(0, lst):\n        for j in range(0, lst - i - 1):\n            if tup[j][-1] > tup[j + 1][-1]:\n                temp = tup[j]\n                tup[j] = tup[j + 1]\n                tup[j + 1] = temp\n    return tup", "test_list": ["assert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]", "assert sort_tuple([(2, 4), (3, 3), (1, 1)] ) == [(1, 1), (3, 3), (2, 4)]", "assert sort_tuple([(3, 9), (6, 7), (4, 3)] ) == [(4, 3), (6, 7), (3, 9)]"], "challenge_test_list": [], "reference_code": "def sort_tuple(tup): \r\n\tlst = len(tup) \r\n\tfor i in range(0, lst): \r\n\t\tfor j in range(0, lst-i-1): \r\n\t\t\tif (tup[j][-1] > tup[j + 1][-1]): \r\n\t\t\t\ttemp = tup[j] \r\n\t\t\t\ttup[j]= tup[j + 1] \r\n\t\t\t\ttup[j + 1]= temp \r\n\treturn tup"}
{"task_id": "488", "prompt": "Write a function to find the area of a pentagon.", "completion": "import math\n\ndef area_pentagon(a):\n    if a <= 0:\n        raise ValueError(\"Side length must be positive\")\n    area = (math.sqrt(5 * (5 + 2 * math.sqrt(5))) * pow(a, 2)) / 4.0\n    return area", "test_list": ["assert area_pentagon(5)==43.01193501472417", "assert area_pentagon(10)==172.0477400588967", "assert area_pentagon(15)==387.10741513251753"], "challenge_test_list": [], "reference_code": "import math\r\ndef area_pentagon(a):\r\n  area=(math.sqrt(5*(5+2*math.sqrt(5)))*pow(a,2))/4.0\r\n  return area"}
{"task_id": "489", "prompt": "Write a python function to find the frequency of the largest value in a given array.", "completion": "def frequency_Of_Largest(n, arr):\n    if n == 0:\n        raise IndexError(\"Array cannot be empty\")\n    if not isinstance(arr, list) or any(not isinstance(x, int) for x in arr):\n        raise TypeError(\"Input must be a list of integers\")\n    \n    mn = arr[0]\n    freq = 1\n    for i in range(1, n):\n        if arr[i] > mn:\n            mn = arr[i]\n            freq = 1\n        elif arr[i] == mn:\n            freq += 1\n    return freq", "test_list": ["assert frequency_Of_Largest(5,[1,2,3,4,4]) == 2", "assert frequency_Of_Largest(3,[5,6,5]) == 1", "assert frequency_Of_Largest(4,[2,7,7,7]) == 3"], "challenge_test_list": [], "reference_code": "def frequency_Of_Largest(n,arr): \r\n    mn = arr[0] \r\n    freq = 1\r\n    for i in range(1,n): \r\n        if (arr[i] >mn): \r\n            mn = arr[i] \r\n            freq = 1\r\n        elif (arr[i] == mn): \r\n            freq += 1\r\n    return freq "}
{"task_id": "490", "prompt": "Write a function to extract all the pairs which are symmetric in the given tuple list.", "completion": "def extract_symmetric(test_list):\n    # Create a set of the original pairs\n    original_set = set(test_list)\n    # Create a set of the symmetric pairs\n    symmetric_set = {(b, a) for a, b in test_list}\n    # Find the intersection of original and symmetric sets\n    temp = original_set & symmetric_set\n    # Filter to keep only unique pairs (a, b) where a < b\n    res = {(a, b) for a, b in temp if a < b}\n    return res", "test_list": ["assert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}", "assert extract_symmetric([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)] ) == {(9, 10), (7, 8)}", "assert extract_symmetric([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)] ) == {(8, 9), (10, 11)}"], "challenge_test_list": [], "reference_code": "def extract_symmetric(test_list):\r\n  temp = set(test_list) & {(b, a) for a, b in test_list}\r\n  res = {(a, b) for a, b in temp if a < b}\r\n  return (res) "}
{"task_id": "491", "prompt": "Write a function to find the sum of geometric progression series.", "completion": "import math\n\ndef sum_gp(a, n, r):\n    # Input validation\n    if not isinstance(a, (int, float)):\n        raise TypeError(\"a should be a number\")\n    if not isinstance(n, int):\n        raise TypeError(\"n should be a number\")\n    if not isinstance(r, (int, float)):\n        raise TypeError(\"r should be a number\")\n    if n < 0:\n        raise ValueError(\"n should not be negative\")\n    if r < 0:\n        raise ValueError(\"r should not be negative\")\n\n    # Handle the case when n is 0\n    if n == 0:\n        return 0\n    \n    # Handle the case when r is 1\n    if r == 1:\n        return a * n\n    \n    # Calculate the sum of the geometric progression\n    total = (a * (1 - math.pow(r, n))) / (1 - r)\n    return total", "test_list": ["assert sum_gp(1,5,2)==31", "assert sum_gp(1,5,4)==341", "assert sum_gp(2,6,3)==728"], "challenge_test_list": [], "reference_code": "import math\r\ndef sum_gp(a,n,r):\r\n total = (a * (1 - math.pow(r, n ))) / (1- r)\r\n return total"}
{"task_id": "492", "prompt": "Write a function to search an element in the given array by using binary search.", "completion": "def binary_search(item_list, item):\n    if item_list is None or item is None:\n        raise TypeError(\"Input cannot be None\")\n    \n    first = 0\n    last = len(item_list) - 1\n    found = False\n    while first <= last and not found:\n        mid = (first + last) // 2\n        if item_list[mid] == item:\n            found = True\n        else:\n            if item < item_list[mid]:\n                last = mid - 1\n            else:\n                first = mid + 1\n    return found", "test_list": ["assert binary_search([1,2,3,5,8], 6) == False", "assert binary_search([7, 8, 9, 10, 13], 10) == True", "assert binary_search([11, 13, 14, 19, 22, 36], 23) == False"], "challenge_test_list": [], "reference_code": "def binary_search(item_list,item):\r\n\tfirst = 0\r\n\tlast = len(item_list)-1\r\n\tfound = False\r\n\twhile( first<=last and not found):\r\n\t\tmid = (first + last)//2\r\n\t\tif item_list[mid] == item :\r\n\t\t\tfound = True\r\n\t\telse:\r\n\t\t\tif item < item_list[mid]:\r\n\t\t\t\tlast = mid - 1\r\n\t\t\telse:\r\n\t\t\t\tfirst = mid + 1\t\r\n\treturn found"}
{"task_id": "493", "prompt": "Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.", "completion": "import math\n\ndef calculate_polygons(startx, starty, endx, endy, radius):\n    if radius <= 0:\n        raise ValueError(\"Radius must be positive.\")\n    if endx <= startx or endy <= starty:\n        return []\n\n    sl = (2 * radius) * math.tan(math.pi / 6)  # side length of hexagon\n    p = sl * 0.5  # height of the triangle\n    b = sl * math.cos(math.radians(30))  # half the width of the hexagon\n    w = b * 2  # full width of the hexagon\n    h = 2 * sl  # full height of the hexagon\n\n    # Adjust starting points to ensure hexagons fit within the grid\n    startx = startx - w\n    starty = starty - h\n    endx = endx + w\n    endy = endy + h\n\n    polygons = []\n    row = 0\n\n    # Loop through the grid to create hexagons\n    while starty < endy:\n        if row % 2 == 0:\n            current_x = startx\n        else:\n            current_x = startx + b  # Offset for odd rows\n\n        while current_x < endx:\n            # Calculate hexagon vertices\n            p1 = (current_x, starty + p)\n            p2 = (current_x, starty + (3 * p))\n            p3 = (current_x + b, starty + h)\n            p4 = (current_x + w, starty + (3 * p))\n            p5 = (current_x + w, starty + p)\n            p6 = (current_x + b, starty)\n\n            # Create the polygon (hexagon) and append to the list\n            poly = [p1, p2, p3, p4, p5, p6, p1]  # Closing the hexagon\n            polygons.append(poly)\n\n            current_x += w  # Move to the next hexagon in the row\n\n        starty += (3 * p)  # Move to the next row\n        row += 1\n\n    return polygons", "test_list": ["assert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]", "assert calculate_polygons(5,4,7,9,8)==[[(-11.0, -9.856406460551018), (-11.0, -0.6188021535170058), (-3.0, 4.0), (5.0, -0.6188021535170058), (5.0, -9.856406460551018), (-3.0, -14.475208614068023), (-11.0, -9.856406460551018)], [(5.0, -9.856406460551018), (5.0, -0.6188021535170058), (13.0, 4.0), (21.0, -0.6188021535170058), (21.0, -9.856406460551018), (13.0, -14.475208614068023), (5.0, -9.856406460551018)], [(21.0, -9.856406460551018), (21.0, -0.6188021535170058), (29.0, 4.0), (37.0, -0.6188021535170058), (37.0, -9.856406460551018), (29.0, -14.475208614068023), (21.0, -9.856406460551018)], [(-3.0, 4.0), (-3.0, 13.237604307034012), (5.0, 17.856406460551018), (13.0, 13.237604307034012), (13.0, 4.0), (5.0, -0.6188021535170058), (-3.0, 4.0)], [(13.0, 4.0), (13.0, 13.237604307034012), (21.0, 17.856406460551018), (29.0, 13.237604307034012), (29.0, 4.0), (21.0, -0.6188021535170058), (13.0, 4.0)], [(-11.0, 17.856406460551018), (-11.0, 27.09401076758503), (-3.0, 31.712812921102035), (5.0, 27.09401076758503), (5.0, 17.856406460551018), (-3.0, 13.237604307034012), (-11.0, 17.856406460551018)], [(5.0, 17.856406460551018), (5.0, 27.09401076758503), (13.0, 31.712812921102035), (21.0, 27.09401076758503), (21.0, 17.856406460551018), (13.0, 13.237604307034012), (5.0, 17.856406460551018)], [(21.0, 17.856406460551018), (21.0, 27.09401076758503), (29.0, 31.712812921102035), (37.0, 27.09401076758503), (37.0, 17.856406460551018), (29.0, 13.237604307034012), (21.0, 17.856406460551018)], [(-3.0, 31.712812921102035), (-3.0, 40.95041722813605), (5.0, 45.569219381653056), (13.0, 40.95041722813605), (13.0, 31.712812921102035), (5.0, 27.09401076758503), (-3.0, 31.712812921102035)], [(13.0, 31.712812921102035), (13.0, 40.95041722813605), (21.0, 45.569219381653056), (29.0, 40.95041722813605), (29.0, 31.712812921102035), (21.0, 27.09401076758503), (13.0, 31.712812921102035)]]", "assert calculate_polygons(9,6,4,3,2)==[[(5.0, 2.5358983848622456), (5.0, 4.8452994616207485), (7.0, 6.0), (9.0, 4.8452994616207485), (9.0, 2.5358983848622456), (7.0, 1.3811978464829942), (5.0, 2.5358983848622456)], [(7.0, 6.0), (7.0, 8.309401076758503), (9.0, 9.464101615137753), (11.0, 8.309401076758503), (11.0, 6.0), (9.0, 4.8452994616207485), (7.0, 6.0)]]"], "challenge_test_list": [], "reference_code": "import math\r\ndef calculate_polygons(startx, starty, endx, endy, radius):\r\n    sl = (2 * radius) * math.tan(math.pi / 6)\r\n    p = sl * 0.5\r\n    b = sl * math.cos(math.radians(30))\r\n    w = b * 2\r\n    h = 2 * sl   \r\n    startx = startx - w\r\n    starty = starty - h\r\n    endx = endx + w\r\n    endy = endy + h\r\n    origx = startx\r\n    origy = starty\r\n    xoffset = b\r\n    yoffset = 3 * p\r\n    polygons = []\r\n    row = 1\r\n    counter = 0\r\n    while starty < endy:\r\n        if row % 2 == 0:\r\n            startx = origx + xoffset\r\n        else:\r\n            startx = origx\r\n        while startx < endx:\r\n            p1x = startx\r\n            p1y = starty + p\r\n            p2x = startx\r\n            p2y = starty + (3 * p)\r\n            p3x = startx + b\r\n            p3y = starty + h\r\n            p4x = startx + w\r\n            p4y = starty + (3 * p)\r\n            p5x = startx + w\r\n            p5y = starty + p\r\n            p6x = startx + b\r\n            p6y = starty\r\n            poly = [\r\n                (p1x, p1y),\r\n                (p2x, p2y),\r\n                (p3x, p3y),\r\n                (p4x, p4y),\r\n                (p5x, p5y),\r\n                (p6x, p6y),\r\n                (p1x, p1y)]\r\n            polygons.append(poly)\r\n            counter += 1\r\n            startx += w\r\n        starty += yoffset\r\n        row += 1\r\n    return polygons"}
{"task_id": "494", "prompt": "Write a function to convert the given binary tuple to integer.", "completion": "def binary_to_integer(test_tup):\n    # Check for invalid values in the tuple\n    for ele in test_tup:\n        if ele not in (0, 1):\n            raise ValueError(f\"invalid literal for int() with base 2: '{ele}'\")\n    \n    # Convert the binary tuple to a string and then to an integer\n    res = int(\"\".join(str(ele) for ele in test_tup), 2)\n    return str(res)", "test_list": ["assert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'", "assert binary_to_integer((0, 1, 1, 0, 0, 1, 0, 1)) == '101'", "assert binary_to_integer((1, 1, 0, 1, 0, 1)) == '53'"], "challenge_test_list": [], "reference_code": "def binary_to_integer(test_tup):\r\n  res = int(\"\".join(str(ele) for ele in test_tup), 2)\r\n  return (str(res)) "}
{"task_id": "495", "prompt": "Write a function to remove lowercase substrings from a given string by using regex.", "completion": "import re\n\ndef remove_lowercase(str1):\n    if not isinstance(str1, str):\n        raise TypeError(\"expected string or bytes-like object\")\n    \n    # Use regex to remove all lowercase letters\n    result = re.sub('[a-z]', '', str1)\n    return result", "test_list": ["assert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'", "assert remove_lowercase('ProducTnamEstreAmIngMediAplAYer') == 'PTEAIMAAY'", "assert remove_lowercase('maNufacTuredbYSheZenTechNolOGIes') == 'NTYSZTNOGI'"], "challenge_test_list": [], "reference_code": "import re\r\ndef remove_lowercase(str1):\r\n  remove_lower = lambda text: re.sub('[a-z]', '', text)\r\n  result =  remove_lower(str1)\r\n  return (result)"}
{"task_id": "496", "prompt": "Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.", "completion": "import heapq as hq\n\ndef heap_queue_smallest(nums, n):\n    if not isinstance(nums, list):\n        raise TypeError(\"Input must be a list of numbers\")\n    if any(not isinstance(x, (int, float)) for x in nums):\n        raise TypeError(\"Input must be a list of numbers\")\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n > len(nums):\n        raise ValueError(\"n must not exceed the length of the list\")\n    \n    smallest_nums = hq.nsmallest(n, nums)\n    return smallest_nums", "test_list": ["assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] ", "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],2)==[14, 22]", "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[14, 22, 22, 25, 35]"], "challenge_test_list": [], "reference_code": "import heapq as hq\r\ndef heap_queue_smallest(nums,n):\r\n  smallest_nums = hq.nsmallest(n, nums)\r\n  return smallest_nums"}
{"task_id": "497", "prompt": "Write a function to find the surface area of a cone.", "completion": "import math\n\ndef surfacearea_cone(r, h):\n    if r < 0 or h < 0:\n        raise ValueError(\"Radius and height must be non-negative\")\n    \n    if r == 0 and h == 0:\n        return 0\n    \n    l = math.sqrt(r * r + h * h)  # slant height\n    SA = math.pi * r * (r + l)     # surface area formula\n    return SA", "test_list": ["assert surfacearea_cone(5,12)==282.7433388230814", "assert surfacearea_cone(10,15)==880.5179353159282", "assert surfacearea_cone(19,17)==2655.923961165254"], "challenge_test_list": [], "reference_code": "import math\r\ndef surfacearea_cone(r,h):\r\n  l = math.sqrt(r * r + h * h)\r\n  SA = math.pi * r * (r + l)\r\n  return SA"}
{"task_id": "498", "prompt": "Write a python function to find gcd of two positive integers.", "completion": "def gcd(x, y):\n    if not isinstance(x, int) or not isinstance(y, int):\n        raise TypeError(\"Inputs must be integers.\")\n    if x < 0 or y < 0:\n        raise ValueError(\"Inputs must be positive integers.\")\n    \n    if x == 0:\n        return y\n    if y == 0:\n        return x\n    \n    while y:\n        x, y = y, x % y\n    return x", "test_list": ["assert gcd(12, 17) == 1", "assert gcd(4,6) == 2", "assert gcd(2,9) == 1"], "challenge_test_list": [], "reference_code": "def gcd(x, y):\r\n    gcd = 1\r\n    if x % y == 0:\r\n        return y\r\n    for k in range(int(y / 2), 0, -1):\r\n        if x % k == 0 and y % k == 0:\r\n            gcd = k\r\n            break  \r\n    return gcd"}
{"task_id": "499", "prompt": "Write a function to find the diameter of a circle.", "completion": "def diameter_circle(r):\n    if not isinstance(r, (int, float)):\n        raise TypeError(\"unsupported operand type\")\n    if r < 0:\n        raise ValueError(\"negative radius\")\n    return 2 * r", "test_list": ["assert diameter_circle(10)==20", "assert diameter_circle(40)==80", "assert diameter_circle(15)==30"], "challenge_test_list": [], "reference_code": "def diameter_circle(r):\r\n  diameter=2*r\r\n  return diameter"}
{"task_id": "500", "prompt": "Write a function to concatenate all elements of the given list into a string.", "completion": "def concatenate_elements(lst):\n    ans = ''\n    for i in lst:\n        if not isinstance(i, str):\n            raise TypeError(\"All elements must be strings\")\n        ans += i + ' '\n    return ans.strip()  # Remove the trailing space", "test_list": ["assert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'", "assert concatenate_elements([ 'Hi', 'there', 'How','are', 'you'] ) == '  Hi there How are you'", "assert concatenate_elements([ 'Part', 'of', 'the','journey', 'is', 'end'] ) == '  Part of the journey is end'"], "challenge_test_list": [], "reference_code": "def concatenate_elements(list):\r\n  ans = ' '\r\n  for i in list:\r\n    ans = ans+ ' '+i\r\n  return (ans) "}
