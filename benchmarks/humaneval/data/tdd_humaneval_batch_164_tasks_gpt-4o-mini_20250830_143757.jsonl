{"task_id": "HumanEval/0", "prompt": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n", "completion": "if threshold < 0:\n        raise ValueError(\"Threshold must be non-negative\")\n    \n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i + 1] - numbers[i] < threshold:\n            return True\n    return False", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:38:07.883868", "entry_point": "has_close_elements", "canonical_solution": "    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n\n    return False\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False\n\n", "generated_tests": "import pytest\n\ndef test_no_close_elements():\n    assert not has_close_elements([1.0, 2.0, 3.0], 0.5)\n\ndef test_close_elements_exist():\n    assert has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\ndef test_identical_elements():\n    assert has_close_elements([1.0, 1.0, 2.0], 0.1)\n\ndef test_negative_numbers():\n    assert has_close_elements([-1.0, -1.4, -2.0], 0.5)\n\ndef test_mixed_numbers():\n    assert has_close_elements([-1.0, 0.0, 1.0], 0.1)\n\ndef test_empty_list():\n    assert not has_close_elements([], 0.5)\n\ndef test_single_element():\n    assert not has_close_elements([1.0], 0.5)\n\ndef test_large_threshold():\n    assert has_close_elements([1.0, 2.0, 3.0], 10.0)\n\ndef test_small_threshold_with_large_numbers():\n    assert not has_close_elements([1000.0, 2000.0, 3000.0], 0.1)\n\ndef test_float_precision():\n    assert has_close_elements([1.000001, 1.000002], 0.00001)\n\ndef test_threshold_zero():\n    assert not has_close_elements([1.0, 2.0], 0.0)\n\ndef test_negative_threshold():\n    with pytest.raises(ValueError):\n        has_close_elements([1.0, 2.0], -0.1)\n\ndef test_large_list_with_no_close_elements():\n    assert not has_close_elements([i for i in range(1000)], 0.1)\n\ndef test_large_list_with_close_elements():\n    assert has_close_elements([i for i in range(1000)] + [0.5], 0.6)", "tdd_stage": "implementation"}
{"task_id": "HumanEval/1", "prompt": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n", "completion": "paren_string = paren_string.replace(\" \", \"\")\n    result = []\n    current_group = []\n    balance = 0\n\n    for char in paren_string:\n        if char == '(':\n            balance += 1\n            current_group.append(char)\n        elif char == ')':\n            balance -= 1\n            current_group.append(char)\n        if balance < 0:\n            raise IndexError(\"Unbalanced parentheses\")\n        if balance == 0:\n            result.append(''.join(current_group))\n            current_group = []\n\n    if balance != 0:\n        raise IndexError(\"Unbalanced parentheses\")\n\n    return result", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:38:18.792365", "entry_point": "separate_paren_groups", "canonical_solution": "    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [\n        '(()())', '((()))', '()', '((())()())'\n    ]\n    assert candidate('() (()) ((())) (((())))') == [\n        '()', '(())', '((()))', '(((())))'\n    ]\n    assert candidate('(()(())((())))') == [\n        '(()(())((())))'\n    ]\n    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']\n", "generated_tests": "import pytest\n\ndef test_basic_functionality():\n    assert separate_paren_groups('( ) (( )) (( )( ))') == ['()', '(())', '(()())']\n    assert separate_paren_groups('()') == ['()']\n    assert separate_paren_groups('((()))') == ['((()))']\n    assert separate_paren_groups('()()()') == ['()', '()', '()']\n    assert separate_paren_groups('(()())(())') == ['(()())', '(())']\n\ndef test_edge_cases():\n    assert separate_paren_groups('') == []\n    assert separate_paren_groups(' ') == []\n    assert separate_paren_groups('() ') == ['()']\n    assert separate_paren_groups(' ( ) ') == ['()']\n    assert separate_paren_groups('(( ) ( ))') == ['()', '()']\n    assert separate_paren_groups('()()()()') == ['()', '()', '()', '()']\n\ndef test_invalid_inputs():\n    with pytest.raises(IndexError):\n        separate_paren_groups('(')\n    with pytest.raises(IndexError):\n        separate_paren_groups(')')\n    with pytest.raises(IndexError):\n        separate_paren_groups('(()')\n    with pytest.raises(IndexError):\n        separate_paren_groups('())')\n    assert separate_paren_groups('((())') == []\n    assert separate_paren_groups('())(') == []\n    \ndef test_complex_cases():\n    assert separate_paren_groups('(((()))) (()) (()())') == ['(((())))', '(())', '(()())']\n    assert separate_paren_groups('()(()())(())()') == ['()', '(()())', '(())', '()']\n    assert separate_paren_groups('(( ) ( ( ) ) )') == ['()', '()', '()']", "tdd_stage": "implementation"}
{"task_id": "HumanEval/2", "prompt": "\n\ndef truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n", "completion": "if not isinstance(number, (float, int)):\n        raise TypeError(\"Input must be a positive floating point number.\")\n    if number < 0:\n        raise ValueError(\"Input must be a positive number.\")\n    return number - int(number)", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:38:26.932422", "entry_point": "truncate_number", "canonical_solution": "    return number % 1.0\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert abs(candidate(1.33) - 0.33) < 1e-6\n    assert abs(candidate(123.456) - 0.456) < 1e-6\n", "generated_tests": "import pytest\n\ndef test_truncate_number_basic_functionality():\n    assert truncate_number(3.5) == 0.5\n    assert truncate_number(2.75) == 0.75\n    assert truncate_number(0.99) == 0.99\n    assert truncate_number(5.0) == 0.0\n    assert truncate_number(10.123) == 0.123\n\ndef test_truncate_number_edge_cases():\n    assert truncate_number(1.0) == 0.0\n    assert truncate_number(0.0) == 0.0\n    assert truncate_number(0.0001) == 0.0001\n    assert truncate_number(1e10) == 0.0\n    assert truncate_number(1e-10) == 1e-10\n\ndef test_truncate_number_negative_cases():\n    with pytest.raises(TypeError):\n        truncate_number(\"string\")\n    with pytest.raises(TypeError):\n        truncate_number(None)\n    with pytest.raises(TypeError):\n        truncate_number([])\n\ndef test_truncate_number_large_numbers():\n    assert truncate_number(123456789.987654321) == 0.987654321\n    assert truncate_number(1e20) == 0.0\n    assert truncate_number(1e-20) == 1e-20", "tdd_stage": "implementation"}
{"task_id": "HumanEval/3", "prompt": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n", "completion": "balance = 0\n    for operation in operations:\n        if not isinstance(operation, int):\n            raise TypeError(\"All operations must be integers.\")\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:38:34.201219", "entry_point": "below_zero", "canonical_solution": "    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n", "generated_tests": "import pytest\n\ndef test_no_operations():\n    assert below_zero([]) == False\n\ndef test_single_deposit():\n    assert below_zero([5]) == False\n\ndef test_single_withdrawal_not_below_zero():\n    assert below_zero([-1]) == False\n\ndef test_single_withdrawal_below_zero():\n    assert below_zero([-1, -1]) == True\n\ndef test_multiple_operations_no_below_zero():\n    assert below_zero([10, 5, 3]) == False\n\ndef test_multiple_operations_with_below_zero():\n    assert below_zero([10, -5, -6]) == True\n\ndef test_balance_zero_after_operations():\n    assert below_zero([5, -5]) == False\n\ndef test_balance_zero_with_multiple_operations():\n    assert below_zero([1, -1, 2, -2]) == False\n\ndef test_balance_below_zero_after_multiple_operations():\n    assert below_zero([1, -2, 1, -3]) == True\n\ndef test_large_withdrawal_below_zero():\n    assert below_zero([-100]) == True\n\ndef test_large_operations():\n    assert below_zero([1000, -500, -600]) == True\n\ndef test_operations_with_zero():\n    assert below_zero([0, 0, -1]) == True\n\ndef test_operations_with_zero_and_positive():\n    assert below_zero([0, 1, -1]) == False\n\ndef test_operations_with_zero_and_negative():\n    assert below_zero([0, -1, 1]) == False\n\ndef test_operations_with_multiple_zeroes():\n    assert below_zero([0, 0, 0, -1]) == True\n\ndef test_operations_with_invalid_input():\n    with pytest.raises(TypeError):\n        below_zero([1, 'a', -1])", "tdd_stage": "implementation"}
{"task_id": "HumanEval/4", "prompt": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n", "completion": "if not numbers:\n        raise ZeroDivisionError(\"The list is empty.\")\n    if not all(isinstance(x, (int, float)) for x in numbers):\n        raise TypeError(\"All elements must be numbers.\")\n    \n    mean = sum(numbers) / len(numbers)\n    mad = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return mad", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:38:46.341906", "entry_point": "mean_absolute_deviation", "canonical_solution": "    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6\n\n", "generated_tests": "import pytest\n\ndef test_mean_absolute_deviation_basic():\n    assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0\n\ndef test_mean_absolute_deviation_with_negative_numbers():\n    assert mean_absolute_deviation([-1.0, 0.0, 1.0]) == 0.6666666666666666\n\ndef test_mean_absolute_deviation_with_zeroes():\n    assert mean_absolute_deviation([0.0, 0.0, 0.0]) == 0.0\n\ndef test_mean_absolute_deviation_single_element():\n    assert mean_absolute_deviation([5.0]) == 0.0\n\ndef test_mean_absolute_deviation_identical_elements():\n    assert mean_absolute_deviation([2.0, 2.0, 2.0, 2.0]) == 0.0\n\ndef test_mean_absolute_deviation_large_numbers():\n    assert mean_absolute_deviation([1000.0, 2000.0, 3000.0]) == 1000.0\n\ndef test_mean_absolute_deviation_floats():\n    assert mean_absolute_deviation([1.5, 2.5, 3.5]) == 0.6666666666666666\n\ndef test_mean_absolute_deviation_empty_list():\n    with pytest.raises(ZeroDivisionError):\n        mean_absolute_deviation([])\n\ndef test_mean_absolute_deviation_invalid_input_string():\n    with pytest.raises(TypeError):\n        mean_absolute_deviation([\"a\", \"b\", \"c\"])\n\ndef test_mean_absolute_deviation_invalid_input_mixed():\n    with pytest.raises(TypeError):\n        mean_absolute_deviation([1.0, \"2.0\", 3.0])\n\ndef test_mean_absolute_deviation_large_dataset():\n    numbers = list(range(1000))\n    assert mean_absolute_deviation(numbers) == 333.0", "tdd_stage": "implementation"}
{"task_id": "HumanEval/5", "prompt": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n", "completion": "if not isinstance(delimeter, int):\n        raise TypeError(\"delimeter must be an integer\")\n    if any(not isinstance(num, int) for num in numbers):\n        raise TypeError(\"all elements in numbers must be integers\")\n    \n    if not numbers:\n        return []\n    \n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    \n    return result", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:38:58.675472", "entry_point": "intersperse", "canonical_solution": "    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([], 7) == []\n    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n", "generated_tests": "import pytest\n\ndef test_intersperse_with_empty_list():\n    assert intersperse([], 4) == []\n\ndef test_intersperse_with_single_element():\n    assert intersperse([1], 4) == [1]\n\ndef test_intersperse_with_two_elements():\n    assert intersperse([1, 2], 4) == [1, 4, 2]\n\ndef test_intersperse_with_multiple_elements():\n    assert intersperse([1, 2, 3], 4) == [1, 4, 2, 4, 3]\n\ndef test_intersperse_with_negative_numbers():\n    assert intersperse([-1, -2, -3], 0) == [-1, 0, -2, 0, -3]\n\ndef test_intersperse_with_zero_delimeter():\n    assert intersperse([1, 2, 3], 0) == [1, 0, 2, 0, 3]\n\ndef test_intersperse_with_large_numbers():\n    assert intersperse([1000, 2000, 3000], 500) == [1000, 500, 2000, 500, 3000]\n\ndef test_intersperse_with_same_elements():\n    assert intersperse([5, 5, 5], 5) == [5, 5, 5, 5, 5]\n\ndef test_intersperse_with_delimeter_as_negative():\n    assert intersperse([1, 2, 3], -1) == [1, -1, 2, -1, 3]\n\ndef test_intersperse_with_large_list():\n    assert intersperse(list(range(100)), 99) == [i for i in range(100)] + [99] * 99\n\ndef test_intersperse_with_non_integer_delimeter():\n    with pytest.raises(TypeError):\n        intersperse([1, 2, 3], 'a')\n\ndef test_intersperse_with_non_integer_elements():\n    with pytest.raises(TypeError):\n        intersperse([1, 2, '3'], 4)", "tdd_stage": "implementation"}
{"task_id": "HumanEval/6", "prompt": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n", "completion": "results = []\n    for group in paren_string.split():\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        if current_depth != 0:\n            max_depth = 0  # Reset if unbalanced\n        results.append(max_depth)\n    return results", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:39:06.354404", "entry_point": "parse_nested_parens", "canonical_solution": "    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n", "generated_tests": "import pytest\n\ndef test_basic_functionality():\n    assert parse_nested_parens('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert parse_nested_parens('() () ()') == [1, 1, 1]\n    assert parse_nested_parens('((()))') == [3]\n    assert parse_nested_parens('()()()') == [1]\n    assert parse_nested_parens('((())())') == [2]\n\ndef test_edge_cases():\n    assert parse_nested_parens('') == []\n    assert parse_nested_parens(' ') == []\n    assert parse_nested_parens('()') == [1]\n    assert parse_nested_parens('() ()') == [1, 1]\n    assert parse_nested_parens('((((()))))') == [5]\n    assert parse_nested_parens('()()()()()()') == [1]\n    assert parse_nested_parens('((())()())') == [2]\n\ndef test_invalid_inputs():\n    assert parse_nested_parens('abc') == []\n    assert parse_nested_parens('(()abc())') == [2]\n    assert parse_nested_parens('(()())(())') == [2, 2]\n    assert parse_nested_parens('((())()()) invalid') == [2]\n    assert parse_nested_parens('((())()()) 123') == [2]", "tdd_stage": "implementation"}
{"task_id": "HumanEval/7", "prompt": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n", "completion": "if substring is None:\n        raise TypeError(\"substring cannot be None\")\n    return [s for s in strings if s is not None and substring in s] if substring else strings", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:39:18.131007", "entry_point": "filter_by_substring", "canonical_solution": "    return [x for x in strings if substring in x]\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n", "generated_tests": "import pytest\n\ndef test_filter_by_substring_with_empty_list():\n    assert filter_by_substring([], 'a') == []\n\ndef test_filter_by_substring_with_no_matching_substring():\n    assert filter_by_substring(['abc', 'def', 'ghi'], 'z') == []\n\ndef test_filter_by_substring_with_single_matching_substring():\n    assert filter_by_substring(['abc', 'def', 'ghi', 'jkl'], 'j') == ['jkl']\n\ndef test_filter_by_substring_with_multiple_matching_substrings():\n    assert filter_by_substring(['apple', 'banana', 'cherry', 'date'], 'a') == ['apple', 'banana', 'date']\n\ndef test_filter_by_substring_with_case_sensitivity():\n    assert filter_by_substring(['Apple', 'banana', 'Cherry', 'date'], 'a') == ['banana', 'date']\n\ndef test_filter_by_substring_with_substring_at_start():\n    assert filter_by_substring(['apple', 'banana', 'apricot'], 'ap') == ['apple', 'apricot']\n\ndef test_filter_by_substring_with_substring_at_end():\n    assert filter_by_substring(['banana', 'kiwi', 'mango', 'cantaloupe'], 'e') == ['cantaloupe']\n\ndef test_filter_by_substring_with_substring_in_middle():\n    assert filter_by_substring(['hello', 'world', 'helloworld'], 'lo') == ['hello', 'helloworld']\n\ndef test_filter_by_substring_with_special_characters():\n    assert filter_by_substring(['abc!', 'def@', 'ghi#', 'jkl$'], '@') == ['def@']\n\ndef test_filter_by_substring_with_numeric_strings():\n    assert filter_by_substring(['123', '456', '789', '1234'], '1') == ['123', '1234']\n\ndef test_filter_by_substring_with_none_substring():\n    with pytest.raises(TypeError):\n        filter_by_substring(['abc', 'def'], None)\n\ndef test_filter_by_substring_with_none_strings():\n    assert filter_by_substring([None, 'abc', 'def'], 'a') == ['abc']\n\ndef test_filter_by_substring_with_empty_substring():\n    assert filter_by_substring(['abc', 'def', 'ghi'], '') == ['abc', 'def', 'ghi']", "tdd_stage": "implementation"}
{"task_id": "HumanEval/8", "prompt": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n", "completion": "if not all(isinstance(x, int) for x in numbers):\n        raise TypeError(\"All elements in the list must be integers.\")\n    \n    total_sum = sum(numbers)\n    total_product = 1 if numbers else 1\n    \n    for number in numbers:\n        total_product *= number\n    \n    return total_sum, total_product", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:39:24.172411", "entry_point": "sum_product", "canonical_solution": "    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)\n    assert candidate([10]) == (10, 10)\n", "generated_tests": "import pytest\n\ndef test_empty_list():\n    assert sum_product([]) == (0, 1)\n\ndef test_single_positive_integer():\n    assert sum_product([5]) == (5, 5)\n\ndef test_single_negative_integer():\n    assert sum_product([-3]) == (-3, -3)\n\ndef test_multiple_positive_integers():\n    assert sum_product([1, 2, 3, 4]) == (10, 24)\n\ndef test_multiple_negative_integers():\n    assert sum_product([-1, -2, -3]) == (-6, -6)\n\ndef test_mixed_integers():\n    assert sum_product([-1, 2, -3, 4]) == (2, 24)\n\ndef test_zero_in_list():\n    assert sum_product([0, 1, 2, 3]) == (6, 0)\n\ndef test_large_numbers():\n    assert sum_product([1000, 2000, 3000]) == (6000, 6000000000)\n\ndef test_single_zero():\n    assert sum_product([0]) == (0, 0)\n\ndef test_floats_in_list():\n    with pytest.raises(TypeError):\n        sum_product([1.5, 2.5])\n\ndef test_string_in_list():\n    with pytest.raises(TypeError):\n        sum_product([1, 'two', 3])\n\ndef test_none_in_list():\n    with pytest.raises(TypeError):\n        sum_product([1, None, 3])", "tdd_stage": "implementation"}
{"task_id": "HumanEval/9", "prompt": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n", "completion": "if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list.\")\n    if any(not isinstance(x, int) for x in numbers):\n        raise TypeError(\"All elements in the list must be integers.\")\n    \n    rolling_max_list = []\n    current_max = float('-inf')\n    \n    for number in numbers:\n        current_max = max(current_max, number)\n        rolling_max_list.append(current_max)\n    \n    return rolling_max_list", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:39:36.562722", "entry_point": "rolling_max", "canonical_solution": "    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n", "generated_tests": "import pytest\n\ndef test_basic_functionality():\n    assert rolling_max([1, 2, 3, 2, 3, 4, 2]) == [1, 2, 3, 3, 3, 4, 4]\n    assert rolling_max([5, 3, 8, 1, 4]) == [5, 5, 8, 8, 8]\n    assert rolling_max([-1, -2, -3, -4]) == [-1, -1, -1, -1]\n    assert rolling_max([0, 0, 0, 0]) == [0, 0, 0, 0]\n\ndef test_edge_cases():\n    assert rolling_max([]) == []\n    assert rolling_max([10]) == [10]\n    assert rolling_max([1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1]\n    assert rolling_max([1, 2, 1, 2, 1, 2]) == [1, 2, 2, 2, 2, 2]\n\ndef test_negative_numbers():\n    assert rolling_max([-5, -1, -3, -2]) == [-5, -1, -1, -1]\n    assert rolling_max([-10, -20, -30, -5]) == [-10, -10, -10, -5]\n\ndef test_mixed_numbers():\n    assert rolling_max([-1, 0, 1, -1, 2]) == [-1, 0, 1, 1, 2]\n    assert rolling_max([3, -1, 4, 0, 5]) == [3, 3, 4, 4, 5]\n\ndef test_large_numbers():\n    assert rolling_max([1000000, 999999, 1000001]) == [1000000, 1000000, 1000001]\n    assert rolling_max([1, 2, 3, 1000000, 999999]) == [1, 2, 3, 1000000, 1000000]\n\ndef test_invalid_inputs():\n    with pytest.raises(TypeError):\n        rolling_max(None)\n    with pytest.raises(TypeError):\n        rolling_max(\"string\")\n    with pytest.raises(TypeError):\n        rolling_max([1, 2, \"three\"])", "tdd_stage": "implementation"}
{"task_id": "HumanEval/10", "prompt": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n", "completion": "if not isinstance(string, str):\n        raise TypeError(\"Input must be a string\")\n    \n    n = len(string)\n    if n == 0:\n        return string\n    \n    # Find the longest palindromic suffix\n    for i in range(n):\n        if is_palindrome(string[i:]):\n            # Append the reverse of the prefix before the palindromic suffix\n            return string + string[:i][::-1]\n    \n    # If no palindromic suffix found, return the string with its reverse\n    return string + string[::-1]", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:39:48.955155", "entry_point": "make_palindrome", "canonical_solution": "    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('x') == 'x'\n    assert candidate('xyz') == 'xyzyx'\n    assert candidate('xyx') == 'xyx'\n    assert candidate('jerry') == 'jerryrrej'\n", "generated_tests": "import pytest\n\ndef test_make_palindrome_empty_string():\n    assert make_palindrome('') == ''\n\ndef test_make_palindrome_single_character():\n    assert make_palindrome('a') == 'a'\n\ndef test_make_palindrome_two_identical_characters():\n    assert make_palindrome('aa') == 'aa'\n\ndef test_make_palindrome_two_different_characters():\n    assert make_palindrome('ab') == 'aba'\n\ndef test_make_palindrome_three_characters_palindrome():\n    assert make_palindrome('aba') == 'aba'\n\ndef test_make_palindrome_three_characters_not_palindrome():\n    assert make_palindrome('abc') == 'abcba'\n\ndef test_make_palindrome_four_characters_palindrome():\n    assert make_palindrome('abba') == 'abba'\n\ndef test_make_palindrome_four_characters_not_palindrome():\n    assert make_palindrome('abcd') == 'abcba'\n\ndef test_make_palindrome_longer_string_with_palindromic_suffix():\n    assert make_palindrome('race') == 'racecar'\n\ndef test_make_palindrome_longer_string_without_palindromic_suffix():\n    assert make_palindrome('hello') == 'hellolleh'\n\ndef test_make_palindrome_with_spaces():\n    assert make_palindrome('a man a plan a canal panama') == 'a man a plan a canal panamaaman a plan a canal panama'\n\ndef test_make_palindrome_with_special_characters():\n    assert make_palindrome('!@#') == '!@#@!'\n\ndef test_make_palindrome_numeric_string():\n    assert make_palindrome('123') == '12321'\n\ndef test_make_palindrome_numeric_palindrome():\n    assert make_palindrome('121') == '121'\n\ndef test_make_palindrome_case_sensitive():\n    assert make_palindrome('Aba') == 'AbAba'\n\ndef test_make_palindrome_long_string():\n    assert make_palindrome('abcdefghijk') == 'abcdefghijkkjihgfedcba'\n\ndef test_make_palindrome_with_repeated_characters():\n    assert make_palindrome('aaa') == 'aaa'\n\ndef test_make_palindrome_with_mixed_characters():\n    assert make_palindrome('abcdeedcba') == 'abcdeedcba'\n\ndef test_make_palindrome_invalid_input():\n    with pytest.raises(TypeError):\n        make_palindrome(123)\n\ndef test_make_palindrome_none_input():\n    with pytest.raises(TypeError):\n        make_palindrome(None)", "tdd_stage": "implementation"}
{"task_id": "HumanEval/11", "prompt": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n", "completion": "if len(a) != len(b):\n        raise ValueError(\"Input strings must be of the same length.\")\n    \n    if any(c not in '01' for c in a) or any(c not in '01' for c in b):\n        raise ValueError(\"Input strings must consist only of '0' and '1'.\")\n    \n    result = []\n    for bit_a, bit_b in zip(a, b):\n        result.append('1' if bit_a != bit_b else '0')\n    \n    return ''.join(result)", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:39:56.070890", "entry_point": "string_xor", "canonical_solution": "    def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('111000', '101010') == '010010'\n    assert candidate('1', '1') == '0'\n    assert candidate('0101', '0000') == '0101'\n", "generated_tests": "import pytest\n\ndef test_basic_functionality():\n    assert string_xor('010', '110') == '100'\n    assert string_xor('111', '000') == '111'\n    assert string_xor('101010', '010101') == '111111'\n    assert string_xor('0000', '0000') == '0000'\n    assert string_xor('1111', '1111') == '0000'\n\ndef test_edge_cases():\n    assert string_xor('', '') == ''\n    assert string_xor('0', '0') == '0'\n    assert string_xor('1', '1') == '0'\n    assert string_xor('0', '1') == '1'\n    assert string_xor('1', '0') == '1'\n    assert string_xor('0', '') == ''\n    assert string_xor('', '0') == ''\n    assert string_xor('1', '') == ''\n    assert string_xor('', '1') == ''\n\ndef test_invalid_inputs():\n    with pytest.raises(ValueError):\n        string_xor('01a', '110')\n    with pytest.raises(ValueError):\n        string_xor('110', '1b0')\n    with pytest.raises(ValueError):\n        string_xor('10', '1101')\n    with pytest.raises(ValueError):\n        string_xor('110', '10')", "tdd_stage": "implementation"}
{"task_id": "HumanEval/12", "prompt": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n", "completion": "if not strings:\n        return None\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:40:03.317356", "entry_point": "longest", "canonical_solution": "    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n", "generated_tests": "import pytest\n\ndef test_longest_with_empty_list():\n    assert longest([]) is None\n\ndef test_longest_with_single_character_strings():\n    assert longest(['a', 'b', 'c']) == 'a'\n\ndef test_longest_with_different_length_strings():\n    assert longest(['a', 'bb', 'ccc']) == 'ccc'\n\ndef test_longest_with_multiple_longest_strings():\n    assert longest(['a', 'bb', 'ccc', 'ddd']) == 'ccc'\n\ndef test_longest_with_identical_length_strings():\n    assert longest(['aaa', 'bbb', 'ccc']) == 'aaa'\n\ndef test_longest_with_mixed_length_strings():\n    assert longest(['short', 'longer', 'longest']) == 'longest'\n\ndef test_longest_with_numerical_strings():\n    assert longest(['1', '22', '333']) == '333'\n\ndef test_longest_with_special_characters():\n    assert longest(['@', '#$', '%^&*']) == '%^&*'\n\ndef test_longest_with_mixed_content():\n    assert longest(['hello', 'world', 'hi', 'there']) == 'hello'\n\ndef test_longest_with_empty_strings():\n    assert longest(['', '', '']) == ''\n\ndef test_longest_with_non_string_elements():\n    with pytest.raises(TypeError):\n        longest(['a', 1, 'c'])\n\ndef test_longest_with_large_input():\n    assert longest(['a' * 1000, 'b' * 999, 'c' * 1001]) == 'c' * 1001", "tdd_stage": "implementation"}
{"task_id": "HumanEval/13", "prompt": "\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n", "completion": "if not isinstance(a, int) or not isinstance(b, int):\n        raise TypeError(\"Inputs must be integers\")\n    \n    a, b = abs(a), abs(b)\n    \n    if a == 0 and b == 0:\n        return 0\n    \n    while b:\n        a, b = b, a % b\n    \n    return a", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:40:14.349869", "entry_point": "greatest_common_divisor", "canonical_solution": "    while b:\n        a, b = b, a % b\n    return a\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(3, 7) == 1\n    assert candidate(10, 15) == 5\n    assert candidate(49, 14) == 7\n    assert candidate(144, 60) == 12\n", "generated_tests": "import pytest\n\ndef test_greatest_common_divisor_with_coprime_numbers():\n    assert greatest_common_divisor(3, 5) == 1\n\ndef test_greatest_common_divisor_with_common_divisor():\n    assert greatest_common_divisor(25, 15) == 5\n\ndef test_greatest_common_divisor_with_negative_numbers():\n    assert greatest_common_divisor(-25, -15) == 5\n    assert greatest_common_divisor(-25, 15) == 5\n    assert greatest_common_divisor(25, -15) == 5\n\ndef test_greatest_common_divisor_with_zero():\n    assert greatest_common_divisor(0, 5) == 5\n    assert greatest_common_divisor(5, 0) == 5\n    assert greatest_common_divisor(0, 0) == 0  # Undefined case, but can be handled as per implementation\n\ndef test_greatest_common_divisor_with_identical_numbers():\n    assert greatest_common_divisor(10, 10) == 10\n    assert greatest_common_divisor(-10, -10) == 10\n\ndef test_greatest_common_divisor_with_one():\n    assert greatest_common_divisor(1, 5) == 1\n    assert greatest_common_divisor(5, 1) == 1\n    assert greatest_common_divisor(1, 1) == 1\n\ndef test_greatest_common_divisor_with_large_numbers():\n    assert greatest_common_divisor(123456, 789012) == 12\n    assert greatest_common_divisor(1000000, 500000) == 500000\n\ndef test_greatest_common_divisor_with_prime_numbers():\n    assert greatest_common_divisor(17, 19) == 1\n    assert greatest_common_divisor(29, 31) == 1\n\ndef test_greatest_common_divisor_with_large_prime_and_composite():\n    assert greatest_common_divisor(13, 39) == 13\n    assert greatest_common_divisor(37, 74) == 37\n\ndef test_greatest_common_divisor_with_non_integer_input():\n    with pytest.raises(TypeError):\n        greatest_common_divisor(10.5, 5)\n    with pytest.raises(TypeError):\n        greatest_common_divisor(10, \"5\")\n    with pytest.raises(TypeError):\n        greatest_common_divisor(\"10\", 5)", "tdd_stage": "implementation"}
{"task_id": "HumanEval/14", "prompt": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n", "completion": "if not isinstance(string, str):\n        raise TypeError(\"Input must be a string\")\n    return [string[:i] for i in range(1, len(string) + 1)]", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:40:19.982753", "entry_point": "all_prefixes", "canonical_solution": "    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW', 'WWW']\n", "generated_tests": "import pytest\n\ndef test_basic_functionality():\n    assert all_prefixes('abc') == ['a', 'ab', 'abc']\n    assert all_prefixes('hello') == ['h', 'he', 'hel', 'hell', 'hello']\n    assert all_prefixes('') == []\n\ndef test_single_character():\n    assert all_prefixes('a') == ['a']\n\ndef test_numeric_string():\n    assert all_prefixes('123') == ['1', '12', '123']\n\ndef test_special_characters():\n    assert all_prefixes('!@#') == ['!', '!@', '!@#']\n\ndef test_whitespace_string():\n    assert all_prefixes('   ') == [' ', '  ', '   ']\n\ndef test_long_string():\n    long_string = 'a' * 1000\n    expected_result = [long_string[:i] for i in range(1, 1001)]\n    assert all_prefixes(long_string) == expected_result\n\ndef test_non_string_input():\n    with pytest.raises(TypeError):\n        all_prefixes(123)\n    with pytest.raises(TypeError):\n        all_prefixes(None)\n    with pytest.raises(TypeError):\n        all_prefixes(['a', 'b', 'c'])", "tdd_stage": "implementation"}
{"task_id": "HumanEval/15", "prompt": "\n\ndef string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n", "completion": "if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer.\")\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    return ' '.join(map(str, range(n + 1)))", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:40:27.254231", "entry_point": "string_sequence", "canonical_solution": "    return ' '.join([str(x) for x in range(n + 1)])\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'\n", "generated_tests": "import pytest\n\ndef test_basic_functionality_zero():\n    assert string_sequence(0) == '0'\n\ndef test_basic_functionality_positive():\n    assert string_sequence(5) == '0 1 2 3 4 5'\n\ndef test_basic_functionality_large_number():\n    assert string_sequence(10) == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_basic_functionality_single_digit():\n    assert string_sequence(1) == '0 1'\n\ndef test_basic_functionality_two():\n    assert string_sequence(2) == '0 1 2'\n\ndef test_edge_case_negative_input():\n    with pytest.raises(ValueError):\n        string_sequence(-1)\n\ndef test_edge_case_non_integer_input():\n    with pytest.raises(TypeError):\n        string_sequence(\"5\")\n\ndef test_edge_case_float_input():\n    with pytest.raises(TypeError):\n        string_sequence(5.5)\n\ndef test_edge_case_large_negative_input():\n    with pytest.raises(ValueError):\n        string_sequence(-100)\n\ndef test_edge_case_large_positive_input():\n    assert string_sequence(100) == ' '.join(map(str, range(101)))\n\ndef test_edge_case_zero_as_string():\n    with pytest.raises(TypeError):\n        string_sequence(\"0\")", "tdd_stage": "implementation"}
{"task_id": "HumanEval/16", "prompt": "\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n", "completion": "if not isinstance(string, str):\n        raise TypeError(\"Input must be a string\")\n    return len(set(char.lower() for char in string if char.isalnum()))", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:40:32.518449", "entry_point": "count_distinct_characters", "canonical_solution": "    return len(set(string.lower()))\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcde' + 'cade' + 'CADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n", "generated_tests": "import pytest\n\ndef test_basic_functionality():\n    assert count_distinct_characters('xyzXYZ') == 3\n    assert count_distinct_characters('Jerry') == 4\n    assert count_distinct_characters('Hello World') == 10\n    assert count_distinct_characters('aabbcc') == 3\n    assert count_distinct_characters('') == 0\n\ndef test_edge_cases():\n    assert count_distinct_characters(' ') == 1\n    assert count_distinct_characters('12345') == 5\n    assert count_distinct_characters('!@#$%^&*()') == 10\n    assert count_distinct_characters('AaBbCc') == 3\n    assert count_distinct_characters('abcABC123') == 6\n\ndef test_invalid_inputs():\n    with pytest.raises(TypeError):\n        count_distinct_characters(None)\n    with pytest.raises(TypeError):\n        count_distinct_characters(123)\n    with pytest.raises(TypeError):\n        count_distinct_characters(['a', 'b', 'c'])", "tdd_stage": "implementation"}
{"task_id": "HumanEval/17", "prompt": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n", "completion": "notes = music_string.split()\n    beats = []\n    note_to_beats = {'o': 4, 'o|': 2, '.|': 1}\n    \n    for note in notes:\n        if note in note_to_beats:\n            beats.append(note_to_beats[note])\n    \n    return beats", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:40:43.446747", "entry_point": "parse_music", "canonical_solution": "    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n", "generated_tests": "import pytest\n\ndef test_basic_functionality():\n    assert parse_music('o o| .| o| o| .| .| .| .| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    assert parse_music('o o o') == [4, 4, 4]\n    assert parse_music('.| .| .|') == [1, 1, 1]\n    assert parse_music('o| o| o|') == [2, 2, 2]\n\ndef test_empty_input():\n    assert parse_music('') == []\n\ndef test_invalid_input():\n    assert parse_music('x') == []\n    assert parse_music('o x o|') == [4, 2]  # Invalid notes should be ignored\n    assert parse_music('o| .| x .|') == [2, 1]  # Invalid notes should be ignored\n\ndef test_mixed_valid_and_invalid_notes():\n    assert parse_music('o o| .| x o| .|') == [4, 2, 1, 2, 1]  # Invalid note 'x' ignored\n    assert parse_music('o| .| o| y .|') == [2, 1, 2, 1]  # Invalid note 'y' ignored\n\ndef test_leading_and_trailing_spaces():\n    assert parse_music('  o o| .|  ') == [4, 2, 1]\n    assert parse_music('o|   .|   o|') == [2, 1, 2]\n\ndef test_multiple_spaces_between_notes():\n    assert parse_music('o  o|   .| o|') == [4, 2, 1, 2]  # Multiple spaces should not affect parsing\n\ndef test_single_note_cases():\n    assert parse_music('o') == [4]\n    assert parse_music('o|') == [2]\n    assert parse_music('.|') == [1]\n\ndef test_large_input():\n    assert parse_music('o ' * 1000) == [4] * 1000\n    assert parse_music('o| ' * 1000) == [2] * 1000\n    assert parse_music('.| ' * 1000) == [1] * 1000", "tdd_stage": "implementation"}
{"task_id": "HumanEval/18", "prompt": "\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n", "completion": "if not substring:\n        return 0\n    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:40:52.850877", "entry_point": "how_many_times", "canonical_solution": "    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john') == 1\n", "generated_tests": "import pytest\n\ndef test_empty_string_and_non_empty_substring():\n    assert how_many_times('', 'a') == 0\n\ndef test_non_empty_string_and_empty_substring():\n    assert how_many_times('abc', '') == 0\n\ndef test_empty_string_and_empty_substring():\n    assert how_many_times('', '') == 0\n\ndef test_single_character_string_and_substring():\n    assert how_many_times('a', 'a') == 1\n    assert how_many_times('a', 'b') == 0\n\ndef test_repeated_character_string():\n    assert how_many_times('aaa', 'a') == 3\n    assert how_many_times('aaaa', 'aa') == 3\n    assert how_many_times('aaaaa', 'aaa') == 3\n\ndef test_non_overlapping_substring():\n    assert how_many_times('abcabc', 'abc') == 2\n\ndef test_overlapping_substring():\n    assert how_many_times('aaaaaa', 'aaa') == 4\n\ndef test_substring_longer_than_string():\n    assert how_many_times('abc', 'abcd') == 0\n\ndef test_substring_not_in_string():\n    assert how_many_times('abc', 'd') == 0\n    assert how_many_times('abc', 'abz') == 0\n\ndef test_case_sensitivity():\n    assert how_many_times('aAaAaA', 'aA') == 3\n    assert how_many_times('aAaAaA', 'Aa') == 3\n    assert how_many_times('aAaAaA', 'AA') == 0\n\ndef test_special_characters():\n    assert how_many_times('!@#!@#', '!@#') == 2\n    assert how_many_times('abc!@#abc!@#', '!@#') == 2\n\ndef test_numeric_string():\n    assert how_many_times('123123123', '123') == 3\n    assert how_many_times('123123123', '23') == 4\n\ndef test_long_string_with_repeated_substring():\n    long_string = 'a' * 1000\n    assert how_many_times(long_string, 'a') == 1000\n    assert how_many_times(long_string, 'aa') == 999", "tdd_stage": "implementation"}
{"task_id": "HumanEval/19", "prompt": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n", "completion": "valid_numbers = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    \n    if not numbers.strip():\n        return ''\n    \n    words = numbers.split()\n    try:\n        numeric_values = [valid_numbers[word] for word in words]\n    except KeyError:\n        raise KeyError(\"Invalid number word found.\")\n    \n    sorted_words = sorted(words, key=lambda x: valid_numbers[x])\n    return ' '.join(sorted_words)", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:41:04.189537", "entry_point": "sort_numbers", "canonical_solution": "    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('three') == 'three'\n    assert candidate('three five nine') == 'three five nine'\n    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'\n    assert candidate('six five four three two one zero') == 'zero one two three four five six'\n", "generated_tests": "import pytest\n\ndef test_basic_functionality():\n    assert sort_numbers('three one five') == 'one three five'\n    assert sort_numbers('two four six') == 'two four six'\n    assert sort_numbers('nine eight seven') == 'seven eight nine'\n    assert sort_numbers('zero one two') == 'zero one two'\n    assert sort_numbers('five three one four') == 'one three four five'\n\ndef test_single_number():\n    assert sort_numbers('one') == 'one'\n    assert sort_numbers('zero') == 'zero'\n    assert sort_numbers('nine') == 'nine'\n\ndef test_multiple_same_numbers():\n    assert sort_numbers('one one one') == 'one one one'\n    assert sort_numbers('two two two two') == 'two two two two'\n\ndef test_empty_input():\n    assert sort_numbers('') == ''\n\ndef test_invalid_input():\n    with pytest.raises(KeyError):\n        sort_numbers('ten')\n    with pytest.raises(KeyError):\n        sort_numbers('one ten three')\n    with pytest.raises(KeyError):\n        sort_numbers('five six ten zero')\n\ndef test_mixed_valid_and_invalid_input():\n    with pytest.raises(KeyError):\n        sort_numbers('one two ten three')\n    with pytest.raises(KeyError):\n        sort_numbers('zero five invalid seven')\n\ndef test_leading_and_trailing_spaces():\n    assert sort_numbers('   three   one   five   ') == 'one three five'\n    assert sort_numbers('   zero   ') == 'zero'\n    assert sort_numbers('   nine   eight   ') == 'eight nine'\n\ndef test_numbers_with_extra_spaces():\n    assert sort_numbers('one  two   three') == 'one three two'\n    assert sort_numbers('   four   five   six   ') == 'four five six'", "tdd_stage": "implementation"}
{"task_id": "HumanEval/20", "prompt": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n", "completion": "if len(numbers) < 2:\n        raise TypeError(\"List must contain at least two elements.\")\n    \n    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[1] - numbers[0])\n    \n    for i in range(1, len(numbers)):\n        diff = abs(numbers[i] - numbers[i - 1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i - 1], numbers[i])\n    \n    return closest_pair", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:41:16.711415", "entry_point": "find_closest_elements", "canonical_solution": "    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)\n\n", "generated_tests": "import pytest\n\ndef test_basic_functionality():\n    assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n    assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n    assert find_closest_elements([10.0, 20.0, 15.0]) == (15.0, 20.0)\n    assert find_closest_elements([1.5, 1.6, 1.7, 1.8]) == (1.5, 1.6)\n\ndef test_identical_elements():\n    assert find_closest_elements([5.0, 5.0, 5.0]) == (5.0, 5.0)\n    assert find_closest_elements([2.2, 2.2, 2.2, 2.2]) == (2.2, 2.2)\n\ndef test_negative_numbers():\n    assert find_closest_elements([-1.0, -2.0, -3.0, -1.5]) == (-1.5, -1.0)\n    assert find_closest_elements([-5.0, -4.0, -4.5]) == (-4.5, -4.0)\n\ndef test_mixed_numbers():\n    assert find_closest_elements([-1.0, 0.0, 1.0]) == (0.0, 1.0)\n    assert find_closest_elements([-1.0, 1.0, 0.5]) == (0.5, 1.0)\n\ndef test_edge_case_two_elements():\n    assert find_closest_elements([1.0, 2.0]) == (1.0, 2.0)\n    assert find_closest_elements([2.0, 1.0]) == (1.0, 2.0)\n\ndef test_large_numbers():\n    assert find_closest_elements([1e10, 1e10 + 1, 1e10 + 2]) == (1e10, 1e10 + 1)\n\ndef test_float_precision():\n    assert find_closest_elements([0.1, 0.1000001, 0.2]) == (0.1, 0.1000001)\n\ndef test_invalid_inputs():\n    with pytest.raises(TypeError):\n        find_closest_elements([])  # Empty list\n    with pytest.raises(TypeError):\n        find_closest_elements([1.0])  # Single element\n    with pytest.raises(TypeError):\n        find_closest_elements", "tdd_stage": "implementation"}
{"task_id": "HumanEval/21", "prompt": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n", "completion": "if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two elements.\")\n    \n    if not all(isinstance(x, (int, float)) for x in numbers):\n        raise ValueError(\"All elements in the list must be numbers.\")\n    \n    min_val = min(numbers)\n    max_val = max(numbers)\n    \n    if min_val == max_val:\n        return [0.0] * len(numbers)\n    \n    return [(x - min_val) / (max_val - min_val) for x in numbers]", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:41:29.513454", "entry_point": "rescale_to_unit", "canonical_solution": "    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n", "generated_tests": "import pytest\n\ndef test_basic_functionality():\n    assert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert rescale_to_unit([10.0, 20.0, 30.0]) == [0.0, 0.5, 1.0]\n    assert rescale_to_unit([-5.0, 0.0, 5.0]) == [0.0, 0.5, 1.0]\n    assert rescale_to_unit([0.0, 0.0, 0.0]) == [0.0, 0.0, 0.0]\n\ndef test_edge_cases():\n    assert rescale_to_unit([1.0, 1.0]) == [0.0, 0.0]\n    assert rescale_to_unit([1.0, 2.0]) == [0.0, 1.0]\n    assert rescale_to_unit([2.0, 1.0]) == [1.0, 0.0]\n\ndef test_invalid_inputs():\n    with pytest.raises(ValueError):\n        rescale_to_unit([])\n\n    with pytest.raises(ValueError):\n        rescale_to_unit([1.0])\n\n    with pytest.raises(ValueError):\n        rescale_to_unit([1.0, 'a'])\n\n    with pytest.raises(ValueError):\n        rescale_to_unit([None, 1.0])\n\ndef test_negative_numbers():\n    assert rescale_to_unit([-10.0, -5.0, 0.0, 5.0]) == [0.0, 0.25, 0.5, 1.0]\n    assert rescale_to_unit([-1.0, -2.0, -3.0]) == [0.0, 0.5, 1.0]\n\ndef test_floats_and_integers():\n    assert rescale_to_unit([1, 2, 3, 4, 5]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert rescale_to_unit([1.5, 2.5, 3.5]) == [0.0, 0.5, 1.0]", "tdd_stage": "implementation"}
{"task_id": "HumanEval/22", "prompt": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n", "completion": "return [value for value in values if isinstance(value, int) and not isinstance(value, bool)]", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:41:40.244997", "entry_point": "filter_integers", "canonical_solution": "    return [x for x in values if isinstance(x, int)]\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n", "generated_tests": "import pytest\n\ndef test_filter_integers_with_mixed_types():\n    assert filter_integers(['a', 3.14, 5]) == [5]\n    assert filter_integers([1, 2, 3, 'abc', {}, []]) == [1, 2, 3]\n\ndef test_filter_integers_with_only_integers():\n    assert filter_integers([1, 2, 3]) == [1, 2, 3]\n    assert filter_integers([-1, 0, 100]) == [-1, 0, 100]\n\ndef test_filter_integers_with_no_integers():\n    assert filter_integers(['a', 3.14, 'hello', None]) == []\n    assert filter_integers([{}, [], None]) == []\n\ndef test_filter_integers_with_empty_list():\n    assert filter_integers([]) == []\n\ndef test_filter_integers_with_nested_lists():\n    assert filter_integers([[1, 2], [3, 4], 5]) == [5]\n    assert filter_integers([[1, 2], [3, 4], 'text']) == []\n\ndef test_filter_integers_with_boolean_values():\n    assert filter_integers([True, False, 1, 0]) == [1, 0]\n    assert filter_integers([True, False]) == []\n\ndef test_filter_integers_with_floats():\n    assert filter_integers([1.0, 2.5, 3]) == [3]\n    assert filter_integers([3.14, 2.71]) == []\n\ndef test_filter_integers_with_large_numbers():\n    assert filter_integers([9999999999, 3.14, -9999999999]) == [9999999999, -9999999999]\n\ndef test_filter_integers_with_special_values():\n    assert filter_integers([float('inf'), float('-inf'), float('nan'), 42]) == [42]\n    assert filter_integers([None, float('nan'), 'string']) == []", "tdd_stage": "implementation"}
{"task_id": "HumanEval/23", "prompt": "\n\ndef strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n", "completion": "if not isinstance(string, str):\n        raise TypeError(\"Input must be a string\")\n    return len(string)", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:41:46.816995", "entry_point": "strlen", "canonical_solution": "    return len(string)\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('x') == 1\n    assert candidate('asdasnakj') == 9\n", "generated_tests": "import pytest\n\ndef test_empty_string():\n    assert strlen('') == 0\n\ndef test_basic_string():\n    assert strlen('abc') == 3\n\ndef test_numeric_string():\n    assert strlen('12345') == 5\n\ndef test_string_with_spaces():\n    assert strlen('   ') == 3\n\ndef test_string_with_special_characters():\n    assert strlen('!@#$%^&*()') == 10\n\ndef test_string_with_newline():\n    assert strlen('abc\\n') == 4\n\ndef test_string_with_tab():\n    assert strlen('abc\\t') == 4\n\ndef test_long_string():\n    long_string = 'a' * 1000\n    assert strlen(long_string) == 1000\n\ndef test_string_with_unicode_characters():\n    assert strlen('\u4f60\u597d') == 2\n\ndef test_string_with_mixed_content():\n    assert strlen('abc123!@#') == 10\n\ndef test_non_string_input():\n    with pytest.raises(TypeError):\n        strlen(123)\n\ndef test_none_input():\n    with pytest.raises(TypeError):\n        strlen(None)\n\ndef test_boolean_input():\n    with pytest.raises(TypeError):\n        strlen(True)\n\ndef test_list_input():\n    with pytest.raises(TypeError):\n        strlen(['a', 'b', 'c'])", "tdd_stage": "implementation"}
{"task_id": "HumanEval/24", "prompt": "\n\ndef largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n", "completion": "if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer.\")\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i\n    return 0", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:41:54.190808", "entry_point": "largest_divisor", "canonical_solution": "    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(3) == 1\n    assert candidate(7) == 1\n    assert candidate(10) == 5\n    assert candidate(100) == 50\n    assert candidate(49) == 7\n", "generated_tests": "import pytest\n\ndef test_largest_divisor_positive_integer():\n    assert largest_divisor(15) == 5\n    assert largest_divisor(28) == 14\n    assert largest_divisor(100) == 50\n    assert largest_divisor(21) == 7\n\ndef test_largest_divisor_prime_number():\n    assert largest_divisor(13) == 1\n    assert largest_divisor(29) == 1\n\ndef test_largest_divisor_even_number():\n    assert largest_divisor(10) == 5\n    assert largest_divisor(8) == 4\n\ndef test_largest_divisor_one():\n    assert largest_divisor(1) == 0\n\ndef test_largest_divisor_zero():\n    with pytest.raises(ValueError):\n        largest_divisor(0)\n\ndef test_largest_divisor_negative_number():\n    with pytest.raises(ValueError):\n        largest_divisor(-10)\n\ndef test_largest_divisor_float_input():\n    with pytest.raises(TypeError):\n        largest_divisor(10.5)\n\ndef test_largest_divisor_large_number():\n    assert largest_divisor(1000003) == 1\n    assert largest_divisor(1000000) == 500000", "tdd_stage": "implementation"}
{"task_id": "HumanEval/25", "prompt": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n", "completion": "if not isinstance(n, int) or n < 1:\n        return []\n    \n    factors = []\n    divisor = 2\n    \n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    \n    return factors", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:42:04.835665", "entry_point": "factorize", "canonical_solution": "    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(3 * 19) == [3, 19]\n    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]\n    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]\n    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]\n    assert candidate(3 * 2 * 3) == [2, 3, 3]\n", "generated_tests": "import pytest\n\ndef test_factorize_basic_functionality():\n    assert factorize(8) == [2, 2, 2]\n    assert factorize(25) == [5, 5]\n    assert factorize(70) == [2, 5, 7]\n    assert factorize(1) == []  # 1 has no prime factors\n    assert factorize(2) == [2]  # 2 is prime\n    assert factorize(3) == [3]  # 3 is prime\n    assert factorize(4) == [2, 2]  # 4 = 2 * 2\n    assert factorize(9) == [3, 3]  # 9 = 3 * 3\n    assert factorize(12) == [2, 2, 3]  # 12 = 2 * 2 * 3\n\ndef test_factorize_edge_cases():\n    assert factorize(0) == []  # 0 is not a valid input for factorization\n    assert factorize(-10) == []  # Negative numbers should return empty list\n    assert factorize(-1) == []  # Negative one should return empty list\n    assert factorize(100) == [2, 2, 5, 5]  # 100 = 2 * 2 * 5 * 5\n    assert factorize(97) == [97]  # 97 is prime\n\ndef test_factorize_large_numbers():\n    assert factorize(1001) == [7, 11, 13]  # 1001 = 7 * 11 * 13\n    assert factorize(360) == [2, 2, 2, 3, 3, 5]  # 360 = 2^3 * 3^2 * 5\n    assert factorize(10007) == [10007]  # 10007 is prime\n\ndef test_factorize_invalid_inputs():\n    with pytest.raises(TypeError):\n        factorize(\"string\")  # Invalid input type\n    with pytest.raises(TypeError):\n        factorize(3.14)  # Invalid input type\n    with pytest.raises(TypeError):\n        factorize([])  # Invalid input type", "tdd_stage": "implementation"}
{"task_id": "HumanEval/26", "prompt": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n", "completion": "if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list.\")\n    \n    seen = {}\n    for number in numbers:\n        if not isinstance(number, int):\n            raise TypeError(\"List must contain only integers.\")\n        seen[number] = seen.get(number, 0) + 1\n    \n    return [number for number in numbers if seen[number] == 1]", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:42:17.949763", "entry_point": "remove_duplicates", "canonical_solution": "    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n", "generated_tests": "import pytest\n\ndef test_remove_duplicates_basic_functionality():\n    assert remove_duplicates([1, 2, 3, 2, 4]) == [1, 3, 4]\n    assert remove_duplicates([1, 1, 2, 3, 4]) == [2, 3, 4]\n    assert remove_duplicates([5, 6, 5, 7, 8, 6]) == [7, 8]\n\ndef test_remove_duplicates_with_no_duplicates():\n    assert remove_duplicates([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n    assert remove_duplicates([-1, -2, -3]) == [-1, -2, -3]\n\ndef test_remove_duplicates_with_all_duplicates():\n    assert remove_duplicates([1, 1, 1, 1]) == []\n    assert remove_duplicates([2, 2, 2, 2, 2]) == []\n\ndef test_remove_duplicates_empty_input():\n    assert remove_duplicates([]) == []\n\ndef test_remove_duplicates_single_element():\n    assert remove_duplicates([1]) == [1]\n    assert remove_duplicates([0]) == [0]\n\ndef test_remove_duplicates_with_negative_numbers():\n    assert remove_duplicates([-1, -2, -1, -3]) == [-2, -3]\n    assert remove_duplicates([-1, -1, -1, -2]) == [-2]\n\ndef test_remove_duplicates_with_mixed_numbers():\n    assert remove_duplicates([1, -1, 2, -2, 1]) == [-1, 2, -2]\n    assert remove_duplicates([0, 0, 1, 2, 3, 1]) == [2, 3]\n\ndef test_remove_duplicates_with_large_numbers():\n    assert remove_duplicates([1000000, 1000000, 2000000]) == [2000000]\n    assert remove_duplicates([999999999, 999999999, 888888888]) == [888888888]\n\ndef test_remove_duplicates_invalid_input():\n    with pytest.raises(TypeError):\n        remove_duplicates(None)\n    with pytest.raises(TypeError):\n        remove_duplicates(\"string\")\n    with pytest.raises(TypeError):\n        remove_duplicates([1, 2, \"three\"])", "tdd_stage": "implementation"}
{"task_id": "HumanEval/27", "prompt": "\n\ndef flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n", "completion": "if not isinstance(string, str):\n        raise TypeError(\"Input must be a string\")\n    return ''.join(char.swapcase() for char in string)", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:42:23.989565", "entry_point": "flip_case", "canonical_solution": "    return string.swapcase()\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('Hello!') == 'hELLO!'\n    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n", "generated_tests": "import pytest\n\ndef test_flip_case_basic_functionality():\n    assert flip_case('Hello') == 'hELLO'\n    assert flip_case('world') == 'WORLD'\n    assert flip_case('Python') == 'pYTHON'\n    assert flip_case('TeSt') == 'tEsT'\n\ndef test_flip_case_with_numbers_and_symbols():\n    assert flip_case('123abc!') == '123ABC!'\n    assert flip_case('!@#XYZ') == '!@#xyz'\n\ndef test_flip_case_empty_string():\n    assert flip_case('') == ''\n\ndef test_flip_case_all_lowercase():\n    assert flip_case('alllowercase') == 'ALLLOWERCASE'\n\ndef test_flip_case_all_uppercase():\n    assert flip_case('ALLUPPERCASE') == 'alluppercase'\n\ndef test_flip_case_mixed_case():\n    assert flip_case('MiXeD CaSe') == 'mIxEd cAsE'\n\ndef test_flip_case_single_character():\n    assert flip_case('a') == 'A'\n    assert flip_case('Z') == 'z'\n\ndef test_flip_case_invalid_input():\n    with pytest.raises(TypeError):\n        flip_case(None)\n    with pytest.raises(TypeError):\n        flip_case(123)\n    with pytest.raises(TypeError):\n        flip_case(['a', 'b', 'c'])", "tdd_stage": "implementation"}
{"task_id": "HumanEval/28", "prompt": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n", "completion": "if not isinstance(strings, list):\n        raise TypeError(\"Input must be a list of strings.\")\n    for s in strings:\n        if not isinstance(s, str):\n            raise TypeError(\"All elements in the list must be strings.\")\n    return ''.join(strings)", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:42:29.483307", "entry_point": "concatenate", "canonical_solution": "    return ''.join(strings)\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == ''\n    assert candidate(['x', 'y', 'z']) == 'xyz'\n    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'\n", "generated_tests": "import pytest\n\ndef test_concatenate_empty_list():\n    assert concatenate([]) == ''\n\ndef test_concatenate_single_element():\n    assert concatenate(['hello']) == 'hello'\n\ndef test_concatenate_multiple_elements():\n    assert concatenate(['a', 'b', 'c']) == 'abc'\n\ndef test_concatenate_with_spaces():\n    assert concatenate(['hello', ' ', 'world']) == 'hello world'\n\ndef test_concatenate_with_empty_strings():\n    assert concatenate(['', 'a', '', 'b', '']) == 'ab'\n\ndef test_concatenate_with_numeric_strings():\n    assert concatenate(['1', '2', '3']) == '123'\n\ndef test_concatenate_with_special_characters():\n    assert concatenate(['@', '#', '$']) == '@#$'\n\ndef test_concatenate_with_mixed_content():\n    assert concatenate(['Hello', ' ', 'World', '!', '123']) == 'Hello World!123'\n\ndef test_concatenate_large_input():\n    assert concatenate(['a'] * 1000) == 'a' * 1000\n\ndef test_concatenate_invalid_input():\n    with pytest.raises(TypeError):\n        concatenate(None)\n    with pytest.raises(TypeError):\n        concatenate(123)\n    with pytest.raises(TypeError):\n        concatenate(['a', 1, 'b'])", "tdd_stage": "implementation"}
{"task_id": "HumanEval/29", "prompt": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n", "completion": "if not all(isinstance(s, str) for s in strings):\n        raise TypeError(\"All elements in the list must be strings.\")\n    return [s for s in strings if s.startswith(prefix)]", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:42:38.119896", "entry_point": "filter_by_prefix", "canonical_solution": "    return [x for x in strings if x.startswith(prefix)]\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n", "generated_tests": "import pytest\n\ndef test_empty_list():\n    assert filter_by_prefix([], 'a') == []\n\ndef test_no_matching_prefix():\n    assert filter_by_prefix(['bcd', 'cde', 'xyz'], 'a') == []\n\ndef test_single_matching_prefix():\n    assert filter_by_prefix(['abc'], 'a') == ['abc']\n    assert filter_by_prefix(['xyz'], 'x') == ['xyz']\n\ndef test_multiple_matching_prefixes():\n    assert filter_by_prefix(['abc', 'bcd', 'array', 'apple'], 'a') == ['abc', 'array', 'apple']\n\ndef test_case_sensitivity():\n    assert filter_by_prefix(['Apple', 'banana', 'apricot'], 'a') == ['apricot']\n    assert filter_by_prefix(['Apple', 'banana', 'Apricot'], 'A') == ['Apple', 'Apricot']\n\ndef test_prefix_is_empty_string():\n    assert filter_by_prefix(['abc', 'bcd', 'cde'], '') == ['abc', 'bcd', 'cde']\n\ndef test_prefix_is_whitespace():\n    assert filter_by_prefix([' abc', 'bcd', ' cde'], ' ') == [' abc', ' cde']\n\ndef test_special_characters_in_strings():\n    assert filter_by_prefix(['!start', '@begin', '#hashtag'], '!') == ['!start']\n    assert filter_by_prefix(['!start', '@begin', '#hashtag'], '@') == ['@begin']\n\ndef test_numeric_strings():\n    assert filter_by_prefix(['123abc', '456def', '789ghi'], '123') == ['123abc']\n    assert filter_by_prefix(['123abc', '456def', '789ghi'], '4') == ['456def']\n\ndef test_non_string_elements():\n    with pytest.raises(TypeError):\n        filter_by_prefix(['abc', 123, 'def'], 'a')", "tdd_stage": "implementation"}
{"task_id": "HumanEval/30", "prompt": "\n\ndef get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n", "completion": "if not isinstance(l, list):\n        raise TypeError(\"Input must be a list\")\n    return [x for x in l if isinstance(x, (int, float)) and x > 0]", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:42:46.321753", "entry_point": "get_positive", "canonical_solution": "    return [e for e in l if e > 0]\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n    assert candidate([]) == []\n\n", "generated_tests": "import pytest\n\ndef test_basic_functionality():\n    assert get_positive([-1, 2, -4, 5, 6]) == [2, 5, 6]\n    assert get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 9, 123, 1]\n\ndef test_empty_list():\n    assert get_positive([]) == []\n\ndef test_all_negative_numbers():\n    assert get_positive([-1, -2, -3, -4]) == []\n\ndef test_all_positive_numbers():\n    assert get_positive([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n\ndef test_mixed_numbers():\n    assert get_positive([-10, 0, 10, -20, 20]) == [10, 20]\n\ndef test_zero_in_list():\n    assert get_positive([0, 0, 0]) == []\n\ndef test_single_positive_number():\n    assert get_positive([5]) == [5]\n\ndef test_single_negative_number():\n    assert get_positive([-5]) == []\n\ndef test_single_zero():\n    assert get_positive([0]) == []\n\ndef test_floats_and_integers():\n    assert get_positive([-1.5, 2.5, 3, -4.0, 5.1]) == [2.5, 3, 5.1]\n\ndef test_invalid_input():\n    with pytest.raises(TypeError):\n        get_positive(None)\n    with pytest.raises(TypeError):\n        get_positive(\"string\")\n    with pytest.raises(TypeError):\n        get_positive(123)\n    with pytest.raises(TypeError):\n        get_positive([1, 2, \"three\", 4])", "tdd_stage": "implementation"}
{"task_id": "HumanEval/31", "prompt": "\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n", "completion": "if not isinstance(n, int) or n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:42:55.017194", "entry_point": "is_prime", "canonical_solution": "    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(6) == False\n    assert candidate(101) == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61) == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11) == True\n    assert candidate(17) == True\n    assert candidate(5 * 17) == False\n    assert candidate(11 * 7) == False\n    assert candidate(13441 * 19) == False\n\n", "generated_tests": "import pytest\n\ndef test_is_prime_with_small_primes():\n    assert is_prime(2) == True\n    assert is_prime(3) == True\n    assert is_prime(5) == True\n    assert is_prime(7) == True\n\ndef test_is_prime_with_composite_numbers():\n    assert is_prime(4) == False\n    assert is_prime(6) == False\n    assert is_prime(8) == False\n    assert is_prime(9) == False\n    assert is_prime(10) == False\n    assert is_prime(12) == False\n    assert is_prime(14) == False\n    assert is_prime(15) == False\n\ndef test_is_prime_with_large_primes():\n    assert is_prime(101) == True\n    assert is_prime(103) == True\n    assert is_prime(107) == True\n    assert is_prime(13441) == True\n    assert is_prime(61) == True\n\ndef test_is_prime_with_large_composites():\n    assert is_prime(100) == False\n    assert is_prime(200) == False\n    assert is_prime(1000) == False\n    assert is_prime(1001) == False\n\ndef test_is_prime_with_edge_cases():\n    assert is_prime(1) == False\n    assert is_prime(0) == False\n    assert is_prime(-1) == False\n    assert is_prime(-10) == False\n\ndef test_is_prime_with_non_integer_inputs():\n    with pytest.raises(TypeError):\n        is_prime(\"string\")\n    with pytest.raises(TypeError):\n        is_prime(3.5)\n    with pytest.raises(TypeError):\n        is_prime(None)\n    with pytest.raises(TypeError):\n        is_prime([])\n\ndef test_is_prime_with_large_numbers():\n    assert is_prime(999983) == True  # A known large prime\n    assert is_prime(999979) == True  # Another known large prime\n    assert is_prime(999996) == False  # A known large composite", "tdd_stage": "implementation"}
{"task_id": "HumanEval/32", "prompt": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n", "completion": "if len(xs) % 2 != 0 or len(xs) == 0 or all(c == 0 for c in xs):\n        raise ValueError(\"Invalid coefficients list.\")\n    \n    # Use Newton's method to find a root\n    def poly_derivative(xs):\n        return [i * coeff for i, coeff in enumerate(xs)][1:]\n\n    x0 = 0.0  # Initial guess\n    tolerance = 1e-7\n    max_iterations = 1000\n\n    for _ in range(max_iterations):\n        f_x0 = poly(xs, x0)\n        f_prime_x0 = poly(poly_derivative(xs), x0)\n        \n        if f_prime_x0 == 0:\n            raise ValueError(\"Derivative is zero, cannot find root.\")\n        \n        x1 = x0 - f_x0 / f_prime_x0\n        \n        if abs(x1 - x0) < tolerance:\n            return x1\n        \n        x0 = x1\n\n    raise ValueError(\"Root not found within the maximum number of iterations.\")", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:43:06.693436", "entry_point": "find_zero", "canonical_solution": "    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    import math\n    import random\n    rng = random.Random(42)\n    import copy\n    for _ in range(100):\n        ncoeff = 2 * rng.randint(1, 4)\n        coeffs = []\n        for _ in range(ncoeff):\n            coeff = rng.randint(-10, 10)\n            if coeff == 0:\n                coeff = 1\n            coeffs.append(coeff)\n        solution = candidate(copy.deepcopy(coeffs))\n        assert math.fabs(poly(coeffs, solution)) < 1e-4\n\n", "generated_tests": "import pytest\n\ndef test_poly_basic_functionality():\n    assert poly([1, 2], 0) == 1\n    assert poly([1, 2], 1) == 3\n    assert poly([1, 2, 3], 2) == 1 + 2 * 2 + 3 * 2**2 == 15\n    assert poly([0, 0, 0], 5) == 0\n    assert poly([1], 5) == 1\n\ndef test_poly_edge_cases():\n    assert poly([], 5) == 0\n    assert poly([1, 0, 0], 0) == 1\n    assert poly([0, 1, 0], 0) == 0\n    assert poly([1, -1], 1) == 0\n    assert poly([1, -1], -1) == 0\n\ndef test_find_zero_basic_functionality():\n    assert round(find_zero([1, 2]), 2) == -0.5\n    assert round(find_zero([-6, 11, -6, 1]), 2) == 1.0\n    assert round(find_zero([1, -3, 2]), 2) == 1.0\n\ndef test_find_zero_edge_cases():\n    with pytest.raises(ValueError):\n        find_zero([1])  # Odd number of coefficients\n    with pytest.raises(ValueError):\n        find_zero([])  # Empty list\n    with pytest.raises(ValueError):\n        find_zero([0, 0])  # All coefficients are zero\n    with pytest.raises(ValueError):\n        find_zero([1, 0, 0, 0])  # Even number but no solution\n    assert round(find_zero([1, 0, -1]), 2) == 1.0  # x^2 - 1 = 0", "tdd_stage": "implementation"}
{"task_id": "HumanEval/33", "prompt": "\n\ndef sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n", "completion": "if not isinstance(l, list):\n        raise TypeError(\"Input must be a list\")\n    if any(not isinstance(x, (int, float)) for x in l):\n        raise TypeError(\"All elements in the list must be numbers\")\n    \n    sorted_third = sorted(l[i] for i in range(len(l)) if i % 3 == 0)\n    result = l[:]\n    \n    for i, value in enumerate(result):\n        if i % 3 == 0:\n            result[i] = sorted_third.pop(0)\n    \n    return result", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:43:18.260284", "entry_point": "sort_third", "canonical_solution": "    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])\n    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])\n    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])\n\n", "generated_tests": "import pytest\n\ndef test_basic_functionality():\n    assert sort_third([1, 2, 3]) == [1, 2, 3]\n    assert sort_third([5, 6, 3, 4, 8, 9, 2]) == [2, 6, 3, 4, 8, 9, 5]\n    assert sort_third([10, 20, 30, 40, 50, 60, 70, 80]) == [30, 20, 10, 40, 50, 60, 70, 80]\n    assert sort_third([1, 3, 2, 6, 5, 4]) == [2, 3, 1, 4, 5, 6]\n\ndef test_edge_cases():\n    assert sort_third([]) == []\n    assert sort_third([1]) == [1]\n    assert sort_third([1, 2]) == [1, 2]\n    assert sort_third([1, 2, 3]) == [1, 2, 3]\n    assert sort_third([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert sort_third([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n    assert sort_third([3, 1, 2, 4, 5, 6]) == [2, 1, 3, 4, 5, 6]\n\ndef test_invalid_inputs():\n    with pytest.raises(TypeError):\n        sort_third(None)\n    with pytest.raises(TypeError):\n        sort_third(123)\n    with pytest.raises(TypeError):\n        sort_third(\"string\")\n    with pytest.raises(TypeError):\n        sort_third({1: 'a', 2: 'b'})\n    with pytest.raises(TypeError):\n        sort_third([1, 2, '3', 4])", "tdd_stage": "implementation"}
{"task_id": "HumanEval/34", "prompt": "\n\ndef unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n", "completion": "if not isinstance(l, list):\n        raise TypeError(\"Input must be a list\")\n    return sorted(set(l))", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:43:27.894274", "entry_point": "unique", "canonical_solution": "    return sorted(list(set(l)))\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\n", "generated_tests": "import pytest\n\ndef test_basic_functionality():\n    assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n    assert unique([1, 2, 2, 1, 3]) == [1, 2, 3]\n    assert unique([10, 20, 10, 30, 20]) == [10, 20, 30]\n\ndef test_empty_list():\n    assert unique([]) == []\n\ndef test_single_element_list():\n    assert unique([42]) == [42]\n    assert unique([0]) == [0]\n\ndef test_all_unique_elements():\n    assert unique([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n    assert unique(['a', 'b', 'c']) == ['a', 'b', 'c']\n\ndef test_all_identical_elements():\n    assert unique([7, 7, 7, 7]) == [7]\n    assert unique(['x', 'x', 'x']) == ['x']\n\ndef test_negative_numbers():\n    assert unique([-1, -2, -1, 0, 1]) == [-2, -1, 0, 1]\n    assert unique([-5, -5, -3, -1]) == [-5, -3, -1]\n\ndef test_mixed_data_types():\n    assert unique([1, 'a', 1, 'b', 'a']) == [1, 'a', 'b']\n    assert unique([None, 1, None, 2]) == [None, 1, 2]\n\ndef test_invalid_inputs():\n    with pytest.raises(TypeError):\n        unique(None)\n    with pytest.raises(TypeError):\n        unique(123)\n    with pytest.raises(TypeError):\n        unique(\"string\")\n    with pytest.raises(TypeError):\n        unique({1, 2, 3})\n\ndef test_large_input():\n    assert unique(list(range(1000)) * 10) == list(range(1000))", "tdd_stage": "implementation"}
{"task_id": "HumanEval/35", "prompt": "\n\ndef max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n", "completion": "if not l:\n        raise IndexError(\"max_element() arg is an empty sequence\")\n    if not all(isinstance(x, (int, float)) for x in l):\n        raise TypeError(\"max_element() expected numeric elements\")\n    return max(l)", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:43:37.135601", "entry_point": "max_element", "canonical_solution": "    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3]) == 3\n    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124\n", "generated_tests": "import pytest\n\ndef test_max_element_with_positive_integers():\n    assert max_element([1, 2, 3]) == 3\n\ndef test_max_element_with_mixed_integers():\n    assert max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == 123\n\ndef test_max_element_with_negative_integers():\n    assert max_element([-1, -2, -3]) == -1\n\ndef test_max_element_with_single_element():\n    assert max_element([42]) == 42\n\ndef test_max_element_with_identical_elements():\n    assert max_element([7, 7, 7, 7]) == 7\n\ndef test_max_element_with_floats():\n    assert max_element([1.1, 2.2, 3.3]) == 3.3\n\ndef test_max_element_with_mixed_floats_and_integers():\n    assert max_element([1, 2.5, 3]) == 3\n\ndef test_max_element_with_empty_list():\n    with pytest.raises(IndexError):\n        max_element([])\n\ndef test_max_element_with_non_numeric_elements():\n    with pytest.raises(TypeError):\n        max_element([1, 'two', 3])\n\ndef test_max_element_with_large_numbers():\n    assert max_element([10**6, 10**7, 10**8]) == 10**8\n\ndef test_max_element_with_large_negative_numbers():\n    assert max_element([-10**6, -10**7, -10**8]) == -10**6", "tdd_stage": "implementation"}
{"task_id": "HumanEval/36", "prompt": "\n\ndef fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n", "completion": "if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer.\")\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    count = 0\n    for i in range(n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += str(i).count('7')\n    return count", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:43:47.387785", "entry_point": "fizz_buzz", "canonical_solution": "    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78) == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000) == 639\n    assert candidate(100000) == 8026\n\n", "generated_tests": "import pytest\n\ndef test_fizz_buzz_basic_functionality():\n    assert fizz_buzz(50) == 0  # No 7s in numbers < 50 that are divisible by 11 or 13\n    assert fizz_buzz(78) == 2  # 7 appears in 77 and 7\n    assert fizz_buzz(79) == 3  # 7 appears in 77, 7, and 70\n\ndef test_fizz_buzz_edge_cases():\n    assert fizz_buzz(0) == 0   # No numbers < 0\n    assert fizz_buzz(1) == 0   # No numbers < 1\n    assert fizz_buzz(11) == 0  # No 7s in numbers < 11 that are divisible by 11 or 13\n    assert fizz_buzz(13) == 0  # No 7s in numbers < 13 that are divisible by 11 or 13\n    assert fizz_buzz(14) == 0  # No 7s in numbers < 14 that are divisible by 11 or 13\n    assert fizz_buzz(22) == 1  # 7 appears in 7 (only 11 is divisible)\n    assert fizz_buzz(26) == 1  # 7 appears in 7 (only 11 is divisible)\n    assert fizz_buzz(30) == 1  # 7 appears in 7 (only 11 is divisible)\n    assert fizz_buzz(77) == 2  # 7 appears in 7 and 77\n\ndef test_fizz_buzz_large_numbers():\n    assert fizz_buzz(100) == 4  # 7 appears in 7, 17, 27, 37, 47, 57, 67, 77\n    assert fizz_buzz(200) == 16  # Check for larger range\n\ndef test_fizz_buzz_invalid_inputs():\n    with pytest.raises(TypeError):\n        fizz_buzz(\"string\")  # Invalid input type\n    with pytest.raises(TypeError):\n        fizz_buzz(3.14)  # Invalid input type\n    with pytest.raises(ValueError):\n        fizz_buzz(-10)  # Negative input", "tdd_stage": "implementation"}
{"task_id": "HumanEval/37", "prompt": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n", "completion": "if not isinstance(l, list):\n        raise TypeError(\"Input must be a list\")\n    if any(not isinstance(x, (int, float)) for x in l):\n        raise TypeError(\"List must contain only numbers\")\n    \n    even_indices = sorted(l[i] for i in range(0, len(l), 2))\n    result = l[:]\n    \n    for i, value in enumerate(result):\n        if i % 2 == 0:\n            result[i] = even_indices[i // 2]\n    \n    return result", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:44:01.270998", "entry_point": "sort_even", "canonical_solution": "    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])\n\n", "generated_tests": "import pytest\n\ndef test_basic_functionality():\n    assert sort_even([1, 2, 3]) == [1, 2, 3]\n    assert sort_even([5, 6, 3, 4]) == [3, 6, 5, 4]\n    assert sort_even([10, 1, 8, 2, 6]) == [6, 1, 10, 2, 8]\n    assert sort_even([4, 3, 2, 1]) == [2, 3, 4, 1]\n\ndef test_even_length_list():\n    assert sort_even([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert sort_even([8, 7, 6, 5, 4, 3]) == [4, 7, 6, 5, 8, 3]\n\ndef test_odd_length_list():\n    assert sort_even([1, 2, 3, 4, 5]) == [3, 2, 5, 4, 1]\n    assert sort_even([9, 8, 7, 6, 5]) == [7, 8, 9, 6, 5]\n\ndef test_empty_list():\n    assert sort_even([]) == []\n\ndef test_single_element_list():\n    assert sort_even([42]) == [42]\n\ndef test_single_even_index_list():\n    assert sort_even([2]) == [2]\n    assert sort_even([2, 3]) == [2, 3]\n\ndef test_negative_numbers():\n    assert sort_even([-1, -2, -3, -4]) == [-2, -1, -4, -3]\n    assert sort_even([-5, -6, -3, -4]) == [-4, -6, -5, -3]\n\ndef test_mixed_numbers():\n    assert sort_even([3, 1, 4, 1, 5, 9]) == [4, 1, 3, 1, 5, 9]\n    assert sort_even([0, -1, 2, -3, 4, -5]) == [0, -1, 2, -3, 4, -5]\n\ndef test_invalid_input():\n    with pytest.raises(TypeError):\n        sort_even(None)\n    with pytest.raises(TypeError):\n        sort_even(123)\n    with pytest.raises(TypeError):\n        sort_even(\"string\")\n    with pytest.raises(TypeError):\n        sort_even([1, 2, \"three\", 4])", "tdd_stage": "implementation"}
{"task_id": "HumanEval/38", "prompt": "\n\ndef encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n", "completion": "if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n    \n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:44:10.554312", "entry_point": "decode_cyclic", "canonical_solution": "    return encode_cyclic(encode_cyclic(s))\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    from random import randint, choice\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_cyclic(str)\n        assert candidate(encoded_str) == str\n\n", "generated_tests": "import pytest\n\ndef test_encode_cyclic_basic_functionality():\n    assert encode_cyclic(\"abc\") == \"bca\"\n    assert encode_cyclic(\"abcdef\") == \"bcaefd\"\n    assert encode_cyclic(\"abcdefgh\") == \"bcaedfh\"\n    assert encode_cyclic(\"abcdefghij\") == \"bcaedfhij\"\n\ndef test_encode_cyclic_edge_cases():\n    assert encode_cyclic(\"\") == \"\"\n    assert encode_cyclic(\"a\") == \"a\"\n    assert encode_cyclic(\"ab\") == \"ab\"\n    assert encode_cyclic(\"abc\") == \"bca\"\n    assert encode_cyclic(\"abcd\") == \"bcda\"\n    assert encode_cyclic(\"abcde\") == \"bcaed\"\n    assert encode_cyclic(\"abcdefg\") == \"bcaedfg\"\n\ndef test_encode_cyclic_invalid_inputs():\n    with pytest.raises(TypeError):\n        encode_cyclic(None)\n    with pytest.raises(TypeError):\n        encode_cyclic(123)\n\ndef test_encode_cyclic_large_input():\n    input_str = \"a\" * 1000\n    expected_output = \"a\" * 1000  # All characters are the same, cycling does not change it\n    assert encode_cyclic(input_str) == expected_output\n\ndef test_encode_cyclic_non_alphabetic_characters():\n    assert encode_cyclic(\"123456\") == \"234561\"\n    assert encode_cyclic(\"!@#\") == \"@#!\"\n    assert encode_cyclic(\"!@#$%^&*()\") == \"@#!$%^&*()\"", "tdd_stage": "implementation"}
{"task_id": "HumanEval/39", "prompt": "\n\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n", "completion": "if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer.\")\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    fibs = []\n    a, b = 0, 1\n    while len(fibs) < n:\n        a, b = b, a + b\n        if is_prime(a):\n            fibs.append(a)\n\n    return fibs[-1]", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:44:18.066440", "entry_point": "prime_fib", "canonical_solution": "    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(1) == 2\n    assert candidate(2) == 3\n    assert candidate(3) == 5\n    assert candidate(4) == 13\n    assert candidate(5) == 89\n    assert candidate(6) == 233\n    assert candidate(7) == 1597\n    assert candidate(8) == 28657\n    assert candidate(9) == 514229\n    assert candidate(10) == 433494437\n\n", "generated_tests": "import pytest\n\ndef test_prime_fib_basic_functionality():\n    assert prime_fib(1) == 2\n    assert prime_fib(2) == 3\n    assert prime_fib(3) == 5\n    assert prime_fib(4) == 13\n    assert prime_fib(5) == 89\n\ndef test_prime_fib_edge_cases():\n    assert prime_fib(6) == 233\n    assert prime_fib(7) == 1597\n    assert prime_fib(8) == 4181\n    assert prime_fib(9) == 10946\n    assert prime_fib(10) == 5702887\n\ndef test_prime_fib_invalid_inputs():\n    with pytest.raises(TypeError):\n        prime_fib(\"string\")\n    with pytest.raises(ValueError):\n        prime_fib(-1)\n    with pytest.raises(ValueError):\n        prime_fib(0)\n\ndef test_prime_fib_large_input():\n    assert prime_fib(20) == 10946  # Known prime Fibonacci number\n    assert prime_fib(25) == 5702887  # Known prime Fibonacci number\n    assert prime_fib(30) == 196418  # Known prime Fibonacci number", "tdd_stage": "implementation"}
{"task_id": "HumanEval/40", "prompt": "\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n", "completion": "if not isinstance(l, list) or any(not isinstance(x, int) for x in l):\n        raise TypeError(\"Input must be a list of integers.\")\n    \n    n = len(l)\n    if n < 3:\n        return False\n    \n    l = list(set(l))  # Remove duplicates\n    n = len(l)\n    \n    for i in range(n):\n        seen = set()\n        target = -l[i]\n        for j in range(i + 1, n):\n            if target - l[j] in seen:\n                return True\n            seen.add(l[j])\n    \n    return False", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:44:28.486536", "entry_point": "triples_sum_to_zero", "canonical_solution": "    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, 5, -1]) == False\n    assert candidate([1, 3, -2, 1]) == True\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([1, 2, 5, 7]) == False\n    assert candidate([2, 4, -5, 3, 9, 7]) == True\n    assert candidate([1]) == False\n    assert candidate([1, 3, 5, -100]) == False\n    assert candidate([100, 3, 5, -100]) == False\n\n", "generated_tests": "import pytest\n\ndef test_basic_functionality():\n    assert triples_sum_to_zero([1, 3, 5, 0]) == False\n    assert triples_sum_to_zero([1, 3, -2, 1]) == True\n    assert triples_sum_to_zero([1, 2, 3, 7]) == False\n    assert triples_sum_to_zero([2, 4, -5, 3, 9, 7]) == True\n\ndef test_edge_cases():\n    assert triples_sum_to_zero([]) == False  # Empty list\n    assert triples_sum_to_zero([1]) == False  # Single element\n    assert triples_sum_to_zero([1, 2]) == False  # Two elements\n    assert triples_sum_to_zero([0, 0, 0]) == False  # All elements are the same\n    assert triples_sum_to_zero([-1, 1, 0]) == True  # Three elements that sum to zero\n    assert triples_sum_to_zero([-1, 1, 2]) == False  # Three elements that do not sum to zero\n    assert triples_sum_to_zero([-1, 0, 1, 2]) == True  # Three elements that sum to zero with extra elements\n\ndef test_invalid_inputs():\n    with pytest.raises(TypeError):\n        triples_sum_to_zero(None)  # None input\n    with pytest.raises(TypeError):\n        triples_sum_to_zero(\"string\")  # String input\n    with pytest.raises(TypeError):\n        triples_sum_to_zero(123)  # Integer input\n    with pytest.raises(TypeError):\n        triples_sum_to_zero([1, 2, \"three\"])  # List with a string element", "tdd_stage": "implementation"}
{"task_id": "HumanEval/41", "prompt": "\n\ndef car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n", "completion": "if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer.\")\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    return n * n", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:44:34.099673", "entry_point": "car_race_collision", "canonical_solution": "    return n**2\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert candidate(10) == 100\n\n", "generated_tests": "import pytest\n\ndef test_basic_functionality():\n    assert car_race_collision(1) == 1\n    assert car_race_collision(2) == 4\n    assert car_race_collision(3) == 9\n    assert car_race_collision(10) == 100\n\ndef test_large_numbers():\n    assert car_race_collision(1000) == 1000000\n    assert car_race_collision(10000) == 100000000\n\ndef test_zero_cars():\n    assert car_race_collision(0) == 0\n\ndef test_negative_cars():\n    with pytest.raises(ValueError):\n        car_race_collision(-1)\n\ndef test_non_integer_input():\n    with pytest.raises(TypeError):\n        car_race_collision(2.5)\n    with pytest.raises(TypeError):\n        car_race_collision(\"two\")\n    with pytest.raises(TypeError):\n        car_race_collision([1, 2, 3])\n    with pytest.raises(TypeError):\n        car_race_collision(None)\n\ndef test_large_negative_numbers():\n    with pytest.raises(ValueError):\n        car_race_collision(-100)\n\ndef test_edge_case_large_input():\n    assert car_race_collision(100000) == 10000000000", "tdd_stage": "implementation"}
{"task_id": "HumanEval/42", "prompt": "\n\ndef incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n", "completion": "if not isinstance(l, list):\n        raise TypeError(\"Input must be a list\")\n    return [x + 1 for x in l]", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:44:40.590704", "entry_point": "incr_list", "canonical_solution": "    return [(e + 1) for e in l]\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\n", "generated_tests": "import pytest\n\ndef test_basic_functionality():\n    assert incr_list([1, 2, 3]) == [2, 3, 4]\n    assert incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [6, 4, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_empty_list():\n    assert incr_list([]) == []\n\ndef test_single_element_list():\n    assert incr_list([0]) == [1]\n    assert incr_list([-1]) == [0]\n    assert incr_list([100]) == [101]\n\ndef test_negative_numbers():\n    assert incr_list([-5, -10, -1]) == [-4, -9, 0]\n\ndef test_large_numbers():\n    assert incr_list([1000, 2000, 3000]) == [1001, 2001, 3001]\n\ndef test_floats():\n    assert incr_list([1.5, 2.5, 3.5]) == [2.5, 3.5, 4.5]\n\ndef test_mixed_numbers():\n    assert incr_list([1, -1, 0, 2.5]) == [2, 0, 1, 3.5]\n\ndef test_invalid_input():\n    with pytest.raises(TypeError):\n        incr_list(\"not a list\")\n    with pytest.raises(TypeError):\n        incr_list(None)\n    with pytest.raises(TypeError):\n        incr_list([1, 2, \"three\"])", "tdd_stage": "implementation"}
{"task_id": "HumanEval/43", "prompt": "\n\ndef pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n", "completion": "if not isinstance(l, list) or any(not isinstance(x, int) for x in l):\n        raise TypeError(\"Input must be a list of integers.\")\n    \n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:44:49.518529", "entry_point": "pairs_sum_to_zero", "canonical_solution": "    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, -2, 1]) == False\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([2, 4, -5, 3, 5, 7]) == True\n    assert candidate([1]) == False\n\n    assert candidate([-3, 9, -1, 3, 2, 30]) == True\n    assert candidate([-3, 9, -1, 3, 2, 31]) == True\n    assert candidate([-3, 9, -1, 4, 2, 30]) == False\n    assert candidate([-3, 9, -1, 4, 2, 31]) == False\n\n", "generated_tests": "import pytest\n\ndef test_pairs_sum_to_zero_with_positive_and_negative_pairs():\n    assert pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) == True\n\ndef test_pairs_sum_to_zero_with_no_pairs():\n    assert pairs_sum_to_zero([1, 3, 5, 0]) == False\n    assert pairs_sum_to_zero([1, 3, -2, 1]) == False\n    assert pairs_sum_to_zero([1, 2, 3, 7]) == False\n\ndef test_pairs_sum_to_zero_with_single_element():\n    assert pairs_sum_to_zero([1]) == False\n    assert pairs_sum_to_zero([-1]) == False\n\ndef test_pairs_sum_to_zero_with_empty_list():\n    assert pairs_sum_to_zero([]) == False\n\ndef test_pairs_sum_to_zero_with_two_elements():\n    assert pairs_sum_to_zero([1, -1]) == True\n    assert pairs_sum_to_zero([1, 2]) == False\n    assert pairs_sum_to_zero([-1, 1]) == True\n\ndef test_pairs_sum_to_zero_with_duplicates():\n    assert pairs_sum_to_zero([1, -1, 1]) == True\n    assert pairs_sum_to_zero([2, 2, -2]) == True\n    assert pairs_sum_to_zero([3, 3, 3]) == False\n\ndef test_pairs_sum_to_zero_with_large_numbers():\n    assert pairs_sum_to_zero([1000000, -1000000]) == True\n    assert pairs_sum_to_zero([1000000, 2000000]) == False\n\ndef test_pairs_sum_to_zero_with_mixed_types():\n    with pytest.raises(TypeError):\n        pairs_sum_to_zero([1, 'a', -1])\n    with pytest.raises(TypeError):\n        pairs_sum_to_zero([None, 0, -None])", "tdd_stage": "implementation"}
{"task_id": "HumanEval/44", "prompt": "\n\ndef change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n", "completion": "if base < 2 or base >= 10:\n        raise ValueError(\"Base must be between 2 and 9 inclusive.\")\n    if x < 0:\n        raise ValueError(\"Negative numbers are not supported.\")\n    \n    if x == 0:\n        return '0'\n    \n    result = ''\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    \n    return result", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:45:00.619515", "entry_point": "change_base", "canonical_solution": "    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(8, 3) == \"22\"\n    assert candidate(9, 3) == \"100\"\n    assert candidate(234, 2) == \"11101010\"\n    assert candidate(16, 2) == \"10000\"\n    assert candidate(8, 2) == \"1000\"\n    assert candidate(7, 2) == \"111\"\n    for x in range(2, 8):\n        assert candidate(x, x + 1) == str(x)\n\n", "generated_tests": "import pytest\n\ndef test_basic_functionality():\n    assert change_base(8, 3) == '22'\n    assert change_base(8, 2) == '1000'\n    assert change_base(7, 2) == '111'\n    assert change_base(10, 2) == '1010'\n    assert change_base(15, 3) == '120'\n    assert change_base(0, 2) == '0'\n    assert change_base(1, 2) == '1'\n    assert change_base(9, 3) == '100'\n\ndef test_edge_cases():\n    assert change_base(0, 3) == '0'\n    assert change_base(1, 3) == '1'\n    assert change_base(2, 3) == '2'\n    assert change_base(3, 3) == '10'\n    assert change_base(4, 3) == '11'\n    assert change_base(5, 3) == '12'\n    assert change_base(6, 3) == '20'\n    assert change_base(7, 3) == '21'\n    assert change_base(8, 3) == '22'\n    assert change_base(9, 3) == '100'\n    \ndef test_invalid_base():\n    with pytest.raises(ValueError):\n        change_base(10, 10)\n    with pytest.raises(ValueError):\n        change_base(10, 11)\n    with pytest.raises(ValueError):\n        change_base(10, -1)\n    with pytest.raises(ValueError):\n        change_base(10, 0)\n\ndef test_negative_numbers():\n    with pytest.raises(ValueError):\n        change_base(-1, 2)\n    with pytest.raises(ValueError):\n        change_base(-10, 3)\n\ndef test_large_numbers():\n    assert change_base(1000, 2) == '1111101000'\n    assert change_base(1000, 3) == '1102201'\n    assert change_base(1000, 4) == '33200'\n    assert change_base(1000, 5) == '13000'", "tdd_stage": "implementation"}
{"task_id": "HumanEval/45", "prompt": "\n\ndef triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n", "completion": "if not isinstance(a, (int, float)) or not isinstance(h, (int, float)):\n        raise TypeError(\"Both arguments must be numbers.\")\n    return 0.5 * a * h", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:45:07.075180", "entry_point": "triangle_area", "canonical_solution": "    return a * h / 2.0\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(5, 3) == 7.5\n    assert candidate(2, 2) == 2.0\n    assert candidate(10, 8) == 40.0\n\n", "generated_tests": "import pytest\n\ndef test_triangle_area_basic_functionality():\n    assert triangle_area(5, 3) == 7.5\n    assert triangle_area(10, 2) == 10.0\n    assert triangle_area(0, 5) == 0.0\n    assert triangle_area(4, 0) == 0.0\n\ndef test_triangle_area_negative_values():\n    assert triangle_area(-5, 3) == -7.5\n    assert triangle_area(5, -3) == -7.5\n    assert triangle_area(-5, -3) == 7.5\n\ndef test_triangle_area_edge_cases():\n    assert triangle_area(0, 0) == 0.0\n    assert triangle_area(1e-10, 1e-10) == 5e-21\n    assert triangle_area(1e10, 1e10) == 5e19\n\ndef test_triangle_area_invalid_inputs():\n    with pytest.raises(TypeError):\n        triangle_area(\"5\", 3)\n    with pytest.raises(TypeError):\n        triangle_area(5, \"3\")\n    with pytest.raises(TypeError):\n        triangle_area(None, 3)\n    with pytest.raises(TypeError):\n        triangle_area(5, None)\n    with pytest.raises(TypeError):\n        triangle_area([], 3)\n    with pytest.raises(TypeError):\n        triangle_area(5, [])", "tdd_stage": "implementation"}
{"task_id": "HumanEval/46", "prompt": "\n\ndef fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n", "completion": "if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer.\")\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    fib = [0] * (n + 1)\n    fib[2] = 2\n    fib[4] = 2\n    \n    for i in range(4, n + 1):\n        fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3] + fib[i - 4]\n    \n    return fib[n]", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:45:15.527289", "entry_point": "fib4", "canonical_solution": "    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n", "generated_tests": "import pytest\n\ndef test_fib4_zero():\n    assert fib4(0) == 0\n\ndef test_fib4_one():\n    assert fib4(1) == 0\n\ndef test_fib4_two():\n    assert fib4(2) == 2\n\ndef test_fib4_three():\n    assert fib4(3) == 0\n\ndef test_fib4_four():\n    assert fib4(4) == 2\n\ndef test_fib4_five():\n    assert fib4(5) == 4\n\ndef test_fib4_six():\n    assert fib4(6) == 8\n\ndef test_fib4_seven():\n    assert fib4(7) == 14\n\ndef test_fib4_eight():\n    assert fib4(8) == 26\n\ndef test_fib4_nine():\n    assert fib4(9) == 48\n\ndef test_fib4_ten():\n    assert fib4(10) == 88\n\ndef test_fib4_large_input():\n    assert fib4(20) == 2924\n\ndef test_fib4_negative_input():\n    with pytest.raises(ValueError):\n        fib4(-1)\n\ndef test_fib4_non_integer_input():\n    with pytest.raises(TypeError):\n        fib4(3.5)\n\ndef test_fib4_string_input():\n    with pytest.raises(TypeError):\n        fib4(\"string\")\n\ndef test_fib4_list_input():\n    with pytest.raises(TypeError):\n        fib4([1, 2, 3])", "tdd_stage": "implementation"}
{"task_id": "HumanEval/47", "prompt": "\n\ndef median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n", "completion": "if not l:\n        raise IndexError(\"Median of empty list\")\n    if not all(isinstance(x, (int, float)) for x in l):\n        raise TypeError(\"List must contain only numbers\")\n    \n    l_sorted = sorted(l)\n    n = len(l_sorted)\n    mid = n // 2\n    \n    if n % 2 == 1:\n        return l_sorted[mid]\n    else:\n        return (l_sorted[mid - 1] + l_sorted[mid]) / 2", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:45:25.823225", "entry_point": "median", "canonical_solution": "    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 \n\n", "generated_tests": "import pytest\n\ndef test_median_odd_length():\n    assert median([3, 1, 2, 4, 5]) == 3\n    assert median([1, 3, 5, 7, 9]) == 5\n    assert median([10, 20, 30]) == 20\n\ndef test_median_even_length():\n    assert median([-10, 4, 6, 1000, 10, 20]) == 15.0\n    assert median([1, 2, 3, 4]) == 2.5\n    assert median([10, 20, 30, 40]) == 25.0\n\ndef test_median_single_element():\n    assert median([42]) == 42\n\ndef test_median_empty_list():\n    with pytest.raises(IndexError):\n        median([])\n\ndef test_median_negative_numbers():\n    assert median([-5, -1, -3, -4]) == -3.0\n    assert median([-10, -20, -30]) == -20\n\ndef test_median_floats():\n    assert median([1.5, 2.5, 3.5]) == 2.5\n    assert median([1.1, 2.2, 3.3, 4.4]) == 2.75\n\ndef test_median_identical_elements():\n    assert median([7, 7, 7, 7]) == 7\n    assert median([5, 5, 5]) == 5\n\ndef test_median_large_numbers():\n    assert median([1000000, 2000000, 3000000]) == 2000000\n    assert median([1000000, 2000000, 3000000, 4000000]) == 2500000\n\ndef test_median_mixed_types():\n    with pytest.raises(TypeError):\n        median([1, 'two', 3])", "tdd_stage": "implementation"}
{"task_id": "HumanEval/48", "prompt": "\n\ndef is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n", "completion": "text = text.strip()\n    return text == text[::-1]", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:45:34.974688", "entry_point": "is_palindrome", "canonical_solution": "    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx') == False\n\n", "generated_tests": "import pytest\n\ndef test_empty_string():\n    assert is_palindrome('') == True\n\ndef test_single_character():\n    assert is_palindrome('a') == True\n    assert is_palindrome('z') == True\n\ndef test_two_characters():\n    assert is_palindrome('aa') == True\n    assert is_palindrome('ab') == False\n\ndef test_odd_length_palindrome():\n    assert is_palindrome('aba') == True\n    assert is_palindrome('racecar') == True\n    assert is_palindrome('abcba') == True\n\ndef test_even_length_palindrome():\n    assert is_palindrome('abba') == True\n    assert is_palindrome('aabb') == False\n    assert is_palindrome('noon') == True\n\ndef test_long_palindrome():\n    assert is_palindrome('a' * 1000) == True\n    assert is_palindrome('a' * 999 + 'b' + 'a' * 999) == False\n\ndef test_non_palindrome():\n    assert is_palindrome('hello') == False\n    assert is_palindrome('world') == False\n    assert is_palindrome('zbcd') == False\n\ndef test_case_sensitivity():\n    assert is_palindrome('Aba') == False\n    assert is_palindrome('Racecar') == False\n\ndef test_special_characters():\n    assert is_palindrome('A man, a plan, a canal, Panama') == False\n    assert is_palindrome('No lemon, no melon') == False\n\ndef test_numeric_palindrome():\n    assert is_palindrome('12321') == True\n    assert is_palindrome('12345') == False\n\ndef test_whitespace():\n    assert is_palindrome('   ') == True\n    assert is_palindrome(' a b a ') == True\n    assert is_palindrome(' a b c ') == False", "tdd_stage": "implementation"}
{"task_id": "HumanEval/49", "prompt": "\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n", "completion": "if n < 0 or p < 0:\n        raise ValueError(\"n and p must be non-negative\")\n    if p == 0:\n        raise ZeroDivisionError(\"modulus p cannot be zero\")\n    return pow(2, n, p)", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:45:41.188375", "entry_point": "modp", "canonical_solution": "    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n", "generated_tests": "import pytest\n\ndef test_modp_basic_cases():\n    assert modp(3, 5) == 3\n    assert modp(1101, 101) == 2\n    assert modp(0, 101) == 1\n    assert modp(3, 11) == 8\n    assert modp(100, 101) == 1\n\ndef test_modp_large_exponents():\n    assert modp(1000, 1009) == 1\n    assert modp(2000, 1009) == 1\n    assert modp(5000, 1009) == 1\n\ndef test_modp_large_modulus():\n    assert modp(10, 10000) == 24\n    assert modp(20, 10000) == 576\n\ndef test_modp_edge_cases():\n    assert modp(1, 1) == 0\n    assert modp(1, 2) == 0\n    assert modp(0, 1) == 0\n\ndef test_modp_negative_cases():\n    with pytest.raises(ValueError):\n        modp(-1, 5)\n    with pytest.raises(ValueError):\n        modp(3, -5)\n\ndef test_modp_zero_modulus():\n    with pytest.raises(ZeroDivisionError):\n        modp(3, 0)\n\ndef test_modp_large_modulus():\n    assert modp(10, 1000000007) == 24\n    assert modp(100, 1000000007) == 76", "tdd_stage": "implementation"}
{"task_id": "HumanEval/50", "prompt": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n", "completion": "if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n    \n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) if ch.islower() else \n                     chr(((ord(ch) - 5 - ord(\"A\")) % 26) + ord(\"A\")) if ch.isupper() else ch for ch in s])", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:45:49.921989", "entry_point": "decode_shift", "canonical_solution": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    from random import randint, choice\n    import copy\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_shift(str)\n        assert candidate(copy.deepcopy(encoded_str)) == str\n\n", "generated_tests": "import pytest\n\ndef test_encode_shift_basic_functionality():\n    assert encode_shift(\"abc\") == \"fgh\"\n    assert encode_shift(\"xyz\") == \"cde\"\n    assert encode_shift(\"hello\") == \"mjqqt\"\n    assert encode_shift(\"world\") == \"btwqi\"\n\ndef test_encode_shift_with_uppercase():\n    assert encode_shift(\"ABC\") == \"FGH\"  # Assuming the function should handle lowercase only\n    assert encode_shift(\"XYZ\") == \"CDE\"  # Assuming the function should handle lowercase only\n\ndef test_encode_shift_with_mixed_case():\n    assert encode_shift(\"HelloWorld\") == \"MjqqtBtwqi\"  # Assuming the function should handle lowercase only\n\ndef test_encode_shift_with_non_alpha_characters():\n    assert encode_shift(\"hello, world!\") == \"mjqqt, btwqi!\"  # Non-alpha characters should remain unchanged\n\ndef test_encode_shift_empty_string():\n    assert encode_shift(\"\") == \"\"  # Edge case for empty input\n\ndef test_encode_shift_invalid_input():\n    with pytest.raises(TypeError):\n        encode_shift(123)  # Invalid input type\n    with pytest.raises(TypeError):\n        encode_shift(None)  # Invalid input type\n\ndef test_decode_shift_basic_functionality():\n    assert decode_shift(\"fgh\") == \"abc\"\n    assert decode_shift(\"cde\") == \"xyz\"\n    assert decode_shift(\"mjqqt\") == \"hello\"\n    assert decode_shift(\"btwqi\") == \"world\"\n\ndef test_decode_shift_with_non_alpha_characters():\n    assert decode_shift(\"mjqqt, btwqi!\") == \"hello, world!\"  # Non-alpha characters should remain unchanged\n\ndef test_decode_shift_empty_string():\n    assert decode_shift(\"\") == \"\"  # Edge case for empty input\n\ndef test_decode_shift_invalid_input():\n    with pytest.raises(TypeError):\n        decode_shift(123)  # Invalid input type\n    with pytest.raises(TypeError):\n        decode_shift(None)  # Invalid input type", "tdd_stage": "implementation"}
{"task_id": "HumanEval/51", "prompt": "\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n", "completion": "vowels = \"aeiouAEIOU\"\n    return ''.join(char for char in text if char not in vowels)", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:45:59.478761", "entry_point": "remove_vowels", "canonical_solution": "    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm'\n    assert candidate('fedcba') == 'fdcb'\n    assert candidate('eeeee') == ''\n    assert candidate('acBAA') == 'cB'\n    assert candidate('EcBOO') == 'cB'\n    assert candidate('ybcd') == 'ybcd'\n\n", "generated_tests": "import pytest\n\ndef test_empty_string():\n    assert remove_vowels('') == ''\n\ndef test_string_with_no_vowels():\n    assert remove_vowels('bcdfgh') == 'bcdfgh'\n\ndef test_string_with_all_vowels():\n    assert remove_vowels('aeiou') == ''\n\ndef test_string_with_mixed_case_vowels():\n    assert remove_vowels('aAeEiIoOuU') == ''\n\ndef test_string_with_mixed_case_consonants():\n    assert remove_vowels('aBcDeFg') == 'BcDg'\n\ndef test_string_with_newline_and_vowels():\n    assert remove_vowels(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm'\n\ndef test_string_with_vowels_and_consonants():\n    assert remove_vowels('abcdef') == 'bcdf'\n\ndef test_string_with_repeated_vowels():\n    assert remove_vowels('aaaaa') == ''\n\ndef test_string_with_non_vowel_characters():\n    assert remove_vowels('xyz') == 'xyz'\n\ndef test_string_with_numbers_and_special_characters():\n    assert remove_vowels('1234!@#$%^&*()') == '1234!@#$%^&*()'\n\ndef test_string_with_mixed_content():\n    assert remove_vowels('Hello World! 123') == 'Hll Wrld! 123'\n\ndef test_string_with_only_vowels():\n    assert remove_vowels('AEIOUaeiou') == ''\n\ndef test_string_with_spaces_and_vowels():\n    assert remove_vowels('a b c d e f g') == ' b c d f g'\n\ndef test_string_with_unicode_characters():\n    assert remove_vowels('caf\u00e9 na\u00efve') == 'cf n'\n\ndef test_string_with_edge_case_characters():\n    assert remove_vowels('zBcd') == 'zBcd'\n\ndef test_string_with_special_characters_only():\n    assert remove_vowels('!@#$%^&*()') == '!@#$%^&*()'\n\ndef test_string_with_mixed_vowels_and_special_characters():\n    assert remove_vowels('a!b@c#d$e%f^g&h*i(j)') == '!b@c#d$f^g&h*j'", "tdd_stage": "implementation"}
{"task_id": "HumanEval/52", "prompt": "\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n", "completion": "if not isinstance(t, int):\n        raise TypeError(\"Threshold must be an integer.\")\n    for num in l:\n        if not isinstance(num, int):\n            raise TypeError(\"All elements in the list must be integers.\")\n        if num >= t:\n            return False\n    return True", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:46:07.171444", "entry_point": "below_threshold", "canonical_solution": "    for e in l:\n        if e >= t:\n            return False\n    return True\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10], 100)\n    assert not candidate([1, 20, 4, 10], 5)\n    assert candidate([1, 20, 4, 10], 21)\n    assert candidate([1, 20, 4, 10], 22)\n    assert candidate([1, 8, 4, 10], 11)\n    assert not candidate([1, 8, 4, 10], 10)\n\n", "generated_tests": "import pytest\n\ndef test_all_numbers_below_threshold():\n    assert below_threshold([1, 2, 4, 10], 100) == True\n\ndef test_some_numbers_above_threshold():\n    assert below_threshold([1, 20, 4, 10], 5) == False\n\ndef test_empty_list():\n    assert below_threshold([], 10) == True\n\ndef test_single_element_below_threshold():\n    assert below_threshold([3], 5) == True\n\ndef test_single_element_above_threshold():\n    assert below_threshold([5], 5) == False\n\ndef test_negative_numbers_below_threshold():\n    assert below_threshold([-1, -2, -3], 0) == True\n\ndef test_negative_numbers_above_threshold():\n    assert below_threshold([-1, -2, -3], -2) == False\n\ndef test_mixed_numbers_below_threshold():\n    assert below_threshold([-1, 0, 1, 2], 3) == True\n\ndef test_mixed_numbers_with_zero():\n    assert below_threshold([0, 1, 2], 1) == False\n\ndef test_large_numbers_below_threshold():\n    assert below_threshold([10**6, 10**7, 10**8], 10**9) == True\n\ndef test_large_numbers_above_threshold():\n    assert below_threshold([10**6, 10**7, 10**8], 10**8) == False\n\ndef test_non_integer_elements():\n    with pytest.raises(TypeError):\n        below_threshold([1, 2, 'a', 4], 5)\n\ndef test_threshold_is_none():\n    with pytest.raises(TypeError):\n        below_threshold([1, 2, 3], None)\n\ndef test_threshold_is_negative():\n    assert below_threshold([1, 2, 3], -1) == False", "tdd_stage": "implementation"}
{"task_id": "HumanEval/53", "prompt": "\n\ndef add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n", "completion": "if not isinstance(x, int) or not isinstance(y, int):\n        raise TypeError(\"Both arguments must be integers\")\n    return x + y", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:46:10.104186", "entry_point": "add", "canonical_solution": "    return x + y\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    import random\n\n    assert candidate(0, 1) == 1\n    assert candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n    assert candidate(7, 5) == 12\n\n    for i in range(100):\n        x, y = random.randint(0, 1000), random.randint(0, 1000)\n        assert candidate(x, y) == x + y\n\n", "generated_tests": "import pytest\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n    assert add(5, 7) == 12\n\ndef test_add_negative_numbers():\n    assert add(-2, -3) == -5\n    assert add(-5, -7) == -12\n\ndef test_add_mixed_sign_numbers():\n    assert add(2, -3) == -1\n    assert add(-2, 3) == 1\n\ndef test_add_zero():\n    assert add(0, 0) == 0\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_large_numbers():\n    assert add(1000000, 2000000) == 3000000\n    assert add(-1000000, -2000000) == -3000000\n\ndef test_add_edge_cases():\n    assert add(1, -1) == 0\n    assert add(-1, 1) == 0\n\ndef test_add_invalid_inputs():\n    with pytest.raises(TypeError):\n        add(\"a\", 1)\n    with pytest.raises(TypeError):\n        add(1, \"b\")\n    with pytest.raises(TypeError):\n        add(None, 1)\n    with pytest.raises(TypeError):\n        add(1, None)", "tdd_stage": "implementation"}
{"task_id": "HumanEval/54", "prompt": "\n\ndef same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n", "completion": "if not isinstance(s0, str) or not isinstance(s1, str):\n        raise TypeError(\"Both arguments must be strings.\")\n    \n    return sorted(set(s0)) == sorted(set(s1))", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:46:18.051716", "entry_point": "same_chars", "canonical_solution": "    return set(s0) == set(s1)\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True\n    assert candidate('abcd', 'dddddddabc') == True\n    assert candidate('dddddddabc', 'abcd') == True\n    assert candidate('eabcd', 'dddddddabc') == False\n    assert candidate('abcd', 'dddddddabcf') == False\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False\n    assert candidate('aabb', 'aaccc') == False\n\n", "generated_tests": "import pytest\n\ndef test_same_chars_basic_functionality():\n    assert same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc') is True\n    assert same_chars('abcd', 'dddddddabc') is True\n    assert same_chars('dddddddabc', 'abcd') is True\n\ndef test_same_chars_negative_cases():\n    assert same_chars('eabcd', 'dddddddabc') is False\n    assert same_chars('abcd', 'dddddddabce') is False\n    assert same_chars('eabcdzzzz', 'dddzzzzzzzddddabc') is False\n\ndef test_same_chars_edge_cases():\n    assert same_chars('', '') is True  # Both strings are empty\n    assert same_chars('a', '') is False  # One string is empty\n    assert same_chars('', 'a') is False  # One string is empty\n    assert same_chars('a', 'a') is True  # Both strings are the same single character\n    assert same_chars('abc', 'cba') is True  # Same characters in different order\n    assert same_chars('abc', 'abcd') is False  # One string has extra character\n    assert same_chars('abc', 'ab') is False  # One string is missing a character\n\ndef test_same_chars_invalid_inputs():\n    with pytest.raises(TypeError):\n        same_chars(None, 'abc')  # First argument is None\n    with pytest.raises(TypeError):\n        same_chars('abc', None)  # Second argument is None\n    with pytest.raises(TypeError):\n        same_chars(123, 'abc')  # First argument is an integer\n    with pytest.raises(TypeError):\n        same_chars('abc', 123)  # Second argument is an integer", "tdd_stage": "implementation"}
{"task_id": "HumanEval/55", "prompt": "\n\ndef fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n", "completion": "if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer.\")\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:46:28.421504", "entry_point": "fib", "canonical_solution": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(10) == 55\n    assert candidate(1) == 1\n    assert candidate(8) == 21\n    assert candidate(11) == 89\n    assert candidate(12) == 144\n\n", "generated_tests": "import pytest\n\ndef test_fib_positive_cases():\n    assert fib(0) == 0, \"Should return 0 for fib(0)\"\n    assert fib(1) == 1, \"Should return 1 for fib(1)\"\n    assert fib(2) == 1, \"Should return 1 for fib(2)\"\n    assert fib(3) == 2, \"Should return 2 for fib(3)\"\n    assert fib(4) == 3, \"Should return 3 for fib(4)\"\n    assert fib(5) == 5, \"Should return 5 for fib(5)\"\n    assert fib(6) == 8, \"Should return 8 for fib(6)\"\n    assert fib(7) == 13, \"Should return 13 for fib(7)\"\n    assert fib(8) == 21, \"Should return 21 for fib(8)\"\n    assert fib(9) == 34, \"Should return 34 for fib(9)\"\n    assert fib(10) == 55, \"Should return 55 for fib(10)\"\n\ndef test_fib_edge_cases():\n    assert fib(0) == 0, \"Should return 0 for fib(0)\"\n    assert fib(1) == 1, \"Should return 1 for fib(1)\"\n    assert fib(2) == 1, \"Should return 1 for fib(2)\"\n    assert fib(3) == 2, \"Should return 2 for fib(3)\"\n    assert fib(4) == 3, \"Should return 3 for fib(4)\"\n    assert fib(5) == 5, \"Should return 5 for fib(5)\"\n    assert fib(6) == 8, \"Should return 8 for fib(6)\"\n    assert fib(7) == 13, \"Should return 13 for fib(7)\"\n    assert fib(8) == 21, \"Should return 21 for fib(8)\"\n    assert fib(9) == 34, \"Should return 34 for fib(9)\"\n    assert fib(10) == 55, \"Should return 55 for fib(10)\"\n\ndef test_fib_invalid_inputs():\n    with pytest.raises(TypeError):\n        fib(\"string\")\n    with pytest.raises(TypeError):\n        fib(3.5)\n    with pytest.raises(ValueError):\n        fib(-1)\n    with pytest.raises(ValueError):\n        fib(-10)", "tdd_stage": "implementation"}
{"task_id": "HumanEval/56", "prompt": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n", "completion": "if not isinstance(brackets, str):\n        raise TypeError(\"Input must be a string\")\n    \n    balance = 0\n    for char in brackets:\n        if char == '<':\n            balance += 1\n        elif char == '>':\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:46:35.490785", "entry_point": "correct_bracketing", "canonical_solution": "    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"<>\")\n    assert candidate(\"<<><>>\")\n    assert candidate(\"<><><<><>><>\")\n    assert candidate(\"<><><<<><><>><>><<><><<>>>\")\n    assert not candidate(\"<<<><>>>>\")\n    assert not candidate(\"><<>\")\n    assert not candidate(\"<\")\n    assert not candidate(\"<<<<\")\n    assert not candidate(\">\")\n    assert not candidate(\"<<>\")\n    assert not candidate(\"<><><<><>><>><<>\")\n    assert not candidate(\"<><><<><>><>>><>\")\n\n", "generated_tests": "import pytest\n\ndef test_single_opening_bracket():\n    assert correct_bracketing(\"<\") == False\n\ndef test_single_closing_bracket():\n    assert correct_bracketing(\">\") == False\n\ndef test_matching_brackets():\n    assert correct_bracketing(\"<>\") == True\n\ndef test_nested_brackets():\n    assert correct_bracketing(\"<<><>>\") == True\n\ndef test_unmatched_brackets():\n    assert correct_bracketing(\"><<>\") == False\n\ndef test_multiple_unmatched_opening_brackets():\n    assert correct_bracketing(\"<<<\") == False\n\ndef test_multiple_unmatched_closing_brackets():\n    assert correct_bracketing(\">>>\") == False\n\ndef test_empty_string():\n    assert correct_bracketing(\"\") == True\n\ndef test_balanced_brackets_with_extra_closing():\n    assert correct_bracketing(\"><\") == False\n\ndef test_balanced_brackets_with_extra_opening():\n    assert correct_bracketing(\"<<\") == False\n\ndef test_complex_balanced_brackets():\n    assert correct_bracketing(\"<<><><>\") == True\n\ndef test_complex_unbalanced_brackets():\n    assert correct_bracketing(\"<<><><><>><\") == False\n\ndef test_long_balanced_brackets():\n    assert correct_bracketing(\"<\" * 1000 + \">\" * 1000) == True\n\ndef test_long_unbalanced_brackets():\n    assert correct_bracketing(\"<\" * 1000 + \">\" * 999) == False\n\ndef test_invalid_characters():\n    with pytest.raises(TypeError):\n        correct_bracketing(\"abc\")\n\ndef test_mixed_brackets():\n    assert correct_bracketing(\"<><<><>><<\") == False", "tdd_stage": "implementation"}
{"task_id": "HumanEval/57", "prompt": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n", "completion": "if not isinstance(l, list):\n        raise TypeError(\"Input must be a list\")\n    if len(l) <= 1:\n        return True\n    if any(not isinstance(x, (int, float)) for x in l):\n        raise TypeError(\"List must contain only numbers\")\n    \n    increasing = all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n    \n    return increasing or decreasing", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:46:43.482778", "entry_point": "monotonic", "canonical_solution": "    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\n", "generated_tests": "import pytest\n\ndef test_monotonic_increasing():\n    assert monotonic([1, 2, 4, 20]) == True\n    assert monotonic([1, 1, 1, 1]) == True\n    assert monotonic([0, 1, 2, 3, 4]) == True\n    assert monotonic([-5, -3, -1, 0, 1]) == True\n\ndef test_monotonic_decreasing():\n    assert monotonic([20, 10, 5, 1]) == True\n    assert monotonic([5, 5, 5, 5]) == True\n    assert monotonic([4, 3, 2, 1]) == True\n    assert monotonic([1, 0, -1, -2]) == True\n\ndef test_non_monotonic():\n    assert monotonic([1, 20, 4, 10]) == False\n    assert monotonic([3, 1, 4, 2]) == False\n    assert monotonic([1, 2, 3, 2]) == False\n    assert monotonic([5, 3, 5, 1]) == False\n\ndef test_empty_list():\n    assert monotonic([]) == True\n\ndef test_single_element():\n    assert monotonic([42]) == True\n\ndef test_two_elements():\n    assert monotonic([1, 2]) == True\n    assert monotonic([2, 1]) == True\n    assert monotonic([1, 1]) == True\n\ndef test_invalid_inputs():\n    with pytest.raises(TypeError):\n        monotonic(None)\n    with pytest.raises(TypeError):\n        monotonic(\"not a list\")\n    with pytest.raises(TypeError):\n        monotonic(123)\n    with pytest.raises(TypeError):\n        monotonic([1, \"two\", 3])", "tdd_stage": "implementation"}
{"task_id": "HumanEval/58", "prompt": "\n\ndef common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n", "completion": "if not isinstance(l1, list) or not isinstance(l2, list):\n        raise TypeError(\"Both arguments must be lists.\")\n    \n    common_elements = set(l1) & set(l2)\n    return sorted(common_elements)", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:46:52.793368", "entry_point": "common", "canonical_solution": "    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\n", "generated_tests": "import pytest\n\ndef test_common_with_positive_cases():\n    assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert common([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert common(['a', 'b', 'c'], ['b', 'c', 'd']) == ['b', 'c']\n    assert common([1, 2, 3], [3, 4, 5]) == [3]\n\ndef test_common_with_empty_lists():\n    assert common([], []) == []\n    assert common([], [1, 2, 3]) == []\n    assert common([1, 2, 3], []) == []\n\ndef test_common_with_no_common_elements():\n    assert common([1, 2, 3], [4, 5, 6]) == []\n    assert common(['x', 'y'], ['a', 'b']) == []\n\ndef test_common_with_duplicates_in_lists():\n    assert common([1, 2, 2, 3], [2, 2, 3, 3]) == [2, 3]\n    assert common([1, 1, 1], [1, 1, 1]) == [1]\n\ndef test_common_with_large_numbers():\n    assert common([1000000, 2000000, 3000000], [2000000, 4000000]) == [2000000]\n\ndef test_common_with_mixed_data_types():\n    assert common([1, 'a', 3.5], [3.5, 'a', 2]) == ['a', 3.5]\n\ndef test_common_with_invalid_inputs():\n    with pytest.raises(TypeError):\n        common(None, [1, 2, 3])\n    with pytest.raises(TypeError):\n        common([1, 2, 3], None)\n    with pytest.raises(TypeError):\n        common(123, [1, 2, 3])\n    with pytest.raises(TypeError):\n        common([1, 2, 3], 123)", "tdd_stage": "implementation"}
{"task_id": "HumanEval/59", "prompt": "\n\ndef largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n", "completion": "if not isinstance(n, int) or n <= 1:\n        raise ValueError(\"n must be an integer greater than 1\")\n    \n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    largest_factor = None\n    for i in range(2, int(n**0.5) + 1):\n        while n % i == 0:\n            largest_factor = i\n            n //= i\n    if n > 1:\n        largest_factor = n\n    return largest_factor", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:46:59.043125", "entry_point": "largest_prime_factor", "canonical_solution": "    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n", "generated_tests": "import pytest\n\ndef test_largest_prime_factor_basic():\n    assert largest_prime_factor(13195) == 29\n    assert largest_prime_factor(2048) == 2\n\ndef test_largest_prime_factor_small_numbers():\n    assert largest_prime_factor(4) == 2\n    assert largest_prime_factor(6) == 3\n    assert largest_prime_factor(9) == 3\n    assert largest_prime_factor(10) == 5\n\ndef test_largest_prime_factor_large_numbers():\n    assert largest_prime_factor(600851475143) == 6857\n    assert largest_prime_factor(100) == 5\n    assert largest_prime_factor(9973) == 9973  # 9973 is prime, but we assume n is not prime\n\ndef test_largest_prime_factor_edge_cases():\n    assert largest_prime_factor(15) == 5\n    assert largest_prime_factor(21) == 7\n    assert largest_prime_factor(49) == 7\n    assert largest_prime_factor(77) == 11\n\ndef test_largest_prime_factor_with_composite_numbers():\n    assert largest_prime_factor(45) == 5\n    assert largest_prime_factor(1001) == 143  # 1001 = 7 * 11 * 13\n\ndef test_largest_prime_factor_invalid_inputs():\n    with pytest.raises(TypeError):\n        largest_prime_factor(\"string\")\n    with pytest.raises(TypeError):\n        largest_prime_factor(1.5)\n    with pytest.raises(ValueError):\n        largest_prime_factor(1)  # Assuming n > 1 is a requirement", "tdd_stage": "implementation"}
{"task_id": "HumanEval/60", "prompt": "\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n", "completion": "if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer\")\n    if n < 1:\n        return 0\n    return n * (n + 1) // 2", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:47:04.526927", "entry_point": "sum_to_n", "canonical_solution": "    return sum(range(n + 1))\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(1) == 1\n    assert candidate(6) == 21\n    assert candidate(11) == 66\n    assert candidate(30) == 465\n    assert candidate(100) == 5050\n\n", "generated_tests": "import pytest\n\ndef test_sum_to_n_basic_cases():\n    assert sum_to_n(30) == 465\n    assert sum_to_n(100) == 5050\n    assert sum_to_n(5) == 15\n    assert sum_to_n(10) == 55\n    assert sum_to_n(1) == 1\n\ndef test_sum_to_n_edge_cases():\n    assert sum_to_n(0) == 0\n    assert sum_to_n(-1) == 0  # Assuming negative input returns 0\n\ndef test_sum_to_n_large_numbers():\n    assert sum_to_n(1000) == 500500\n    assert sum_to_n(10000) == 50005000\n\ndef test_sum_to_n_non_integer_input():\n    with pytest.raises(TypeError):\n        sum_to_n(\"10\")\n    with pytest.raises(TypeError):\n        sum_to_n(10.5)\n    with pytest.raises(TypeError):\n        sum_to_n(None)\n\ndef test_sum_to_n_empty_input():\n    with pytest.raises(TypeError):\n        sum_to_n()", "tdd_stage": "implementation"}
{"task_id": "HumanEval/61", "prompt": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n", "completion": "balance = 0\n    for char in brackets:\n        if char == '(':\n            balance += 1\n        elif char == ')':\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:47:12.048174", "entry_point": "correct_bracketing", "canonical_solution": "    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"()\")\n    assert candidate(\"(()())\")\n    assert candidate(\"()()(()())()\")\n    assert candidate(\"()()((()()())())(()()(()))\")\n    assert not candidate(\"((()())))\")\n    assert not candidate(\")(()\")\n    assert not candidate(\"(\")\n    assert not candidate(\"((((\")\n    assert not candidate(\")\")\n    assert not candidate(\"(()\")\n    assert not candidate(\"()()(()())())(()\")\n    assert not candidate(\"()()(()())()))()\")\n\n", "generated_tests": "import pytest\n\ndef test_single_open_bracket():\n    assert correct_bracketing(\"(\") == False\n\ndef test_single_close_bracket():\n    assert correct_bracketing(\")\") == False\n\ndef test_empty_string():\n    assert correct_bracketing(\"\") == True\n\ndef test_basic_pair():\n    assert correct_bracketing(\"()\") == True\n\ndef test_nested_brackets():\n    assert correct_bracketing(\"(()())\") == True\n\ndef test_unmatched_open_bracket():\n    assert correct_bracketing(\"((())\") == False\n\ndef test_unmatched_close_bracket():\n    assert correct_bracketing(\"())\") == False\n\ndef test_multiple_pairs():\n    assert correct_bracketing(\"()()()\") == True\n\ndef test_interleaved_brackets():\n    assert correct_bracketing(\"(()())()\") == True\n\ndef test_invalid_start():\n    assert correct_bracketing(\")(()\") == False\n\ndef test_invalid_end():\n    assert correct_bracketing(\"(()\") == False\n\ndef test_long_valid_sequence():\n    assert correct_bracketing(\"((((()))))\") == True\n\ndef test_long_invalid_sequence():\n    assert correct_bracketing(\"((((())())\") == False\n\ndef test_only_closing_brackets():\n    assert correct_bracketing(\"))))\") == False\n\ndef test_only_opening_brackets():\n    assert correct_bracketing(\"(((((\") == False\n\ndef test_large_balanced_input():\n    assert correct_bracketing(\"()\" * 1000) == True\n\ndef test_large_unbalanced_input():\n    assert correct_bracketing(\"()\" * 999 + \"(\") == False", "tdd_stage": "implementation"}
{"task_id": "HumanEval/62", "prompt": "\n\ndef derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n", "completion": "if not isinstance(xs, list):\n        raise TypeError(\"Input must be a list\")\n    if any(not isinstance(coef, (int, float)) for coef in xs):\n        raise TypeError(\"All coefficients must be numbers\")\n    \n    return [i * coef for i, coef in enumerate(xs[1:], start=1)]", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:47:19.919300", "entry_point": "derivative", "canonical_solution": "    return [(i * x) for i, x in enumerate(xs)][1:]\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]\n    assert candidate([1, 2, 3]) == [2, 6]\n    assert candidate([3, 2, 1]) == [2, 2]\n    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n    assert candidate([1]) == []\n\n", "generated_tests": "import pytest\n\ndef test_derivative_basic_functionality():\n    assert derivative([3, 1, 2, 4, 5]) == [1, 4, 12, 20]\n    assert derivative([1, 2, 3]) == [2, 6]\n    assert derivative([0, 0, 0]) == []\n    assert derivative([5]) == []\n\ndef test_derivative_edge_cases():\n    assert derivative([]) == []\n    assert derivative([0]) == []\n    assert derivative([1]) == []\n\ndef test_derivative_negative_coefficients():\n    assert derivative([-3, -1, -2]) == [-1, -4]\n    assert derivative([-1, -2, -3]) == [-2, -6]\n\ndef test_derivative_large_coefficients():\n    assert derivative([1000, 2000, 3000]) == [2000, 6000]\n\ndef test_derivative_single_term_polynomial():\n    assert derivative([0, 1]) == [1]\n    assert derivative([0, -1]) == [-1]\n\ndef test_derivative_non_integer_coefficients():\n    assert derivative([0.5, 1.5, 2.5]) == [1.5, 5.0]\n\ndef test_derivative_invalid_inputs():\n    with pytest.raises(TypeError):\n        derivative(\"not a list\")\n    with pytest.raises(TypeError):\n        derivative(None)\n    with pytest.raises(TypeError):\n        derivative([1, \"not a number\"])", "tdd_stage": "implementation"}
{"task_id": "HumanEval/63", "prompt": "\n\ndef fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n", "completion": "if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer.\")\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    \n    fibfib_sequence = [0, 0, 1] + [0] * (n - 2)\n    \n    for i in range(3, n + 1):\n        fibfib_sequence[i] = fibfib_sequence[i - 1] + fibfib_sequence[i - 2] + fibfib_sequence[i - 3]\n    \n    return fibfib_sequence[n]", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:47:27.904145", "entry_point": "fibfib", "canonical_solution": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n", "generated_tests": "import pytest\n\ndef test_fibfib_zero():\n    assert fibfib(0) == 0\n\ndef test_fibfib_one():\n    assert fibfib(1) == 0\n\ndef test_fibfib_two():\n    assert fibfib(2) == 1\n\ndef test_fibfib_three():\n    assert fibfib(3) == 1\n\ndef test_fibfib_four():\n    assert fibfib(4) == 2\n\ndef test_fibfib_five():\n    assert fibfib(5) == 4\n\ndef test_fibfib_six():\n    assert fibfib(6) == 7\n\ndef test_fibfib_seven():\n    assert fibfib(7) == 13\n\ndef test_fibfib_eight():\n    assert fibfib(8) == 24\n\ndef test_fibfib_nine():\n    assert fibfib(9) == 44\n\ndef test_fibfib_ten():\n    assert fibfib(10) == 81\n\ndef test_fibfib_negative():\n    with pytest.raises(ValueError):\n        fibfib(-1)\n\ndef test_fibfib_non_integer():\n    with pytest.raises(TypeError):\n        fibfib(3.5)\n\ndef test_fibfib_string_input():\n    with pytest.raises(TypeError):\n        fibfib(\"five\")\n\ndef test_fibfib_large_input():\n    assert fibfib(20) == 3136", "tdd_stage": "implementation"}
{"task_id": "HumanEval/64", "prompt": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n", "completion": "if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n    \n    vowels = \"aeiouAEIOU\"\n    count = 0\n    \n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n        elif s[i] == 'y' and i == len(s) - 1:\n            count += 1\n        elif s[i] == 'Y' and i == len(s) - 1:\n            count += 1\n            \n    return count", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:47:35.495638", "entry_point": "vowels_count", "canonical_solution": "    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"abcde\") == 2, \"Test 1\"\n    assert candidate(\"Alone\") == 3, \"Test 2\"\n    assert candidate(\"key\") == 2, \"Test 3\"\n    assert candidate(\"bye\") == 1, \"Test 4\"\n    assert candidate(\"keY\") == 2, \"Test 5\"\n    assert candidate(\"bYe\") == 1, \"Test 6\"\n    assert candidate(\"ACEDY\") == 3, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "generated_tests": "import pytest\n\ndef test_vowels_count_basic_functionality():\n    assert vowels_count(\"abcde\") == 2\n    assert vowels_count(\"ACEDY\") == 3\n    assert vowels_count(\"hello\") == 2\n    assert vowels_count(\"world\") == 1\n    assert vowels_count(\"python\") == 1\n    assert vowels_count(\"AEIOU\") == 5\n    assert vowels_count(\"Y\") == 0\n    assert vowels_count(\"y\") == 0\n\ndef test_vowels_count_with_y_at_end():\n    assert vowels_count(\"play\") == 2\n    assert vowels_count(\"day\") == 2\n    assert vowels_count(\"stay\") == 2\n    assert vowels_count(\"fly\") == 0\n    assert vowels_count(\"cry\") == 0\n\ndef test_vowels_count_edge_cases():\n    assert vowels_count(\"\") == 0\n    assert vowels_count(\"y\") == 0\n    assert vowels_count(\"Y\") == 0\n    assert vowels_count(\" \") == 0\n    assert vowels_count(\"12345\") == 0\n    assert vowels_count(\"!@#$%\") == 0\n\ndef test_vowels_count_invalid_inputs():\n    with pytest.raises(TypeError):\n        vowels_count(None)\n    with pytest.raises(TypeError):\n        vowels_count(123)\n    with pytest.raises(TypeError):\n        vowels_count([])\n\ndef test_vowels_count_mixed_case():\n    assert vowels_count(\"AbEcIdOfUg\") == 6\n    assert vowels_count(\"aBcDeFgHiJkL\") == 3\n    assert vowels_count(\"AeIoUy\") == 5", "tdd_stage": "implementation"}
{"task_id": "HumanEval/65", "prompt": "\ndef circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n", "completion": "if not isinstance(x, int) or not isinstance(shift, int):\n        raise TypeError(\"Both x and shift must be integers.\")\n    if shift < 0:\n        raise ValueError(\"Shift must be a non-negative integer.\")\n    \n    str_x = str(x)\n    length = len(str_x)\n    \n    if length == 0:\n        return str_x\n    \n    if shift >= length:\n        return str_x[::-1]\n    \n    shift = shift % length\n    return str_x[-shift:] + str_x[:-shift]", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:47:43.689750", "entry_point": "circular_shift", "canonical_solution": "    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(100, 2) == \"001\"\n    assert candidate(12, 2) == \"12\"\n    assert candidate(97, 8) == \"79\"\n    assert candidate(12, 1) == \"21\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(11, 101) == \"11\", \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "generated_tests": "import pytest\n\ndef test_basic_functionality():\n    assert circular_shift(12, 1) == \"21\"\n    assert circular_shift(12, 2) == \"12\"\n    assert circular_shift(12345, 1) == \"51234\"\n    assert circular_shift(12345, 2) == \"45123\"\n    assert circular_shift(12345, 5) == \"12345\"\n\ndef test_shift_greater_than_length():\n    assert circular_shift(123, 4) == \"321\"\n    assert circular_shift(4567, 8) == \"7654\"\n    assert circular_shift(9, 10) == \"9\"\n\ndef test_zero_shift():\n    assert circular_shift(987, 0) == \"987\"\n    assert circular_shift(0, 0) == \"0\"\n\ndef test_single_digit():\n    assert circular_shift(5, 1) == \"5\"\n    assert circular_shift(5, 2) == \"5\"\n\ndef test_negative_shift():\n    with pytest.raises(ValueError):\n        circular_shift(123, -1)\n\ndef test_invalid_input():\n    with pytest.raises(TypeError):\n        circular_shift(\"123\", 1)\n    with pytest.raises(TypeError):\n        circular_shift(123, \"1\")\n    with pytest.raises(TypeError):\n        circular_shift(None, 1)\n\ndef test_large_numbers():\n    assert circular_shift(12345678901234567890, 10) == \"67890123451234567890\"\n    assert circular_shift(12345678901234567890, 20) == \"01234567890123456789\"", "tdd_stage": "implementation"}
{"task_id": "HumanEval/66", "prompt": "\ndef digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n", "completion": "if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n    return sum(ord(char) for char in s if char.isupper())", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:47:51.889617", "entry_point": "digitSum", "canonical_solution": "    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"\") == 0, \"Error\"\n    assert candidate(\"abAB\") == 131, \"Error\"\n    assert candidate(\"abcCd\") == 67, \"Error\"\n    assert candidate(\"helloE\") == 69, \"Error\"\n    assert candidate(\"woArBld\") == 131, \"Error\"\n    assert candidate(\"aAaaaXa\") == 153, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\" How are yOu?\") == 151, \"Error\"\n    assert candidate(\"You arE Very Smart\") == 327, \"Error\"\n\n", "generated_tests": "import pytest\n\ndef test_empty_string():\n    assert digitSum(\"\") == 0\n\ndef test_no_uppercase_characters():\n    assert digitSum(\"abcdefg\") == 0\n    assert digitSum(\"123456\") == 0\n    assert digitSum(\"!@#$%^&*()\") == 0\n\ndef test_single_uppercase_character():\n    assert digitSum(\"A\") == 65\n    assert digitSum(\"Z\") == 90\n    assert digitSum(\"bA\") == 65\n\ndef test_multiple_uppercase_characters():\n    assert digitSum(\"AB\") == 65 + 66\n    assert digitSum(\"aBcD\") == 66 + 68\n    assert digitSum(\"helloWORLD\") == 87 + 79 + 82 + 76 + 68\n\ndef test_mixed_characters():\n    assert digitSum(\"abAB\") == 65 + 66\n    assert digitSum(\"abcCd\") == 67\n    assert digitSum(\"helloE\") == 69\n    assert digitSum(\"woArBld\") == 65 + 66\n\ndef test_uppercase_with_special_characters():\n    assert digitSum(\"A!@#B$%^\") == 65 + 66\n    assert digitSum(\"C&D*E(F)\") == 67 + 69\n\ndef test_uppercase_with_numbers():\n    assert digitSum(\"A1B2C3\") == 65 + 66 + 67\n    assert digitSum(\"1234\") == 0\n\ndef test_large_string():\n    assert digitSum(\"A\" * 1000) == 65 * 1000\n    assert digitSum(\"A\" * 1000 + \"b\" * 1000) == 65 * 1000\n\ndef test_invalid_inputs():\n    with pytest.raises(TypeError):\n        digitSum(None)\n    with pytest.raises(TypeError):\n        digitSum(123)\n    with pytest.raises(TypeError):\n        digitSum([\"A\", \"B\"])", "tdd_stage": "implementation"}
{"task_id": "HumanEval/67", "prompt": "\ndef fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n", "completion": "if not isinstance(n, int):\n        raise TypeError(\"n must be an integer\")\n    if n < 0:\n        raise ValueError(\"Total number of fruits cannot be negative\")\n    if not s:\n        raise ValueError(\"Input string cannot be empty\")\n    \n    import re\n    match = re.match(r\"(\\d+) apples and (\\d+) oranges\", s)\n    if not match:\n        raise ValueError(\"Invalid input string format\")\n    \n    apples = int(match.group(1))\n    oranges = int(match.group(2))\n    \n    return n - apples - oranges", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:48:00.685289", "entry_point": "fruit_distribution", "canonical_solution": "    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"5 apples and 6 oranges\",19) == 8\n    assert candidate(\"5 apples and 6 oranges\",21) == 10\n    assert candidate(\"0 apples and 1 oranges\",3) == 2\n    assert candidate(\"1 apples and 0 oranges\",3) == 2\n    assert candidate(\"2 apples and 3 oranges\",100) == 95\n    assert candidate(\"2 apples and 3 oranges\",5) == 0\n    assert candidate(\"1 apples and 100 oranges\",120) == 19\n", "generated_tests": "import pytest\n\ndef test_basic_functionality():\n    assert fruit_distribution(\"5 apples and 6 oranges\", 19) == 8\n    assert fruit_distribution(\"0 apples and 1 oranges\", 3) == 2\n    assert fruit_distribution(\"2 apples and 3 oranges\", 100) == 95\n    assert fruit_distribution(\"100 apples and 1 oranges\", 120) == 19\n\ndef test_no_apples_oranges():\n    assert fruit_distribution(\"0 apples and 0 oranges\", 10) == 10\n    assert fruit_distribution(\"0 apples and 0 oranges\", 0) == 0\n\ndef test_only_apples():\n    assert fruit_distribution(\"10 apples and 0 oranges\", 20) == 10\n    assert fruit_distribution(\"50 apples and 0 oranges\", 100) == 50\n\ndef test_only_oranges():\n    assert fruit_distribution(\"0 apples and 10 oranges\", 20) == 10\n    assert fruit_distribution(\"0 apples and 100 oranges\", 150) == 50\n\ndef test_large_numbers():\n    assert fruit_distribution(\"1000 apples and 2000 oranges\", 5000) == 2000\n    assert fruit_distribution(\"999 apples and 999 oranges\", 3000) == 1002\n\ndef test_edge_case_empty_string():\n    with pytest.raises(ValueError):\n        fruit_distribution(\"\", 10)\n\ndef test_edge_case_invalid_string():\n    with pytest.raises(ValueError):\n        fruit_distribution(\"five apples and six oranges\", 19)\n\ndef test_edge_case_negative_fruits():\n    assert fruit_distribution(\"5 apples and 6 oranges\", 0) == -11\n    assert fruit_distribution(\"10 apples and 10 oranges\", 5) == -15\n\ndef test_edge_case_non_integer_n():\n    with pytest.raises(TypeError):\n        fruit_distribution(\"5 apples and 6 oranges\", \"nineteen\")", "tdd_stage": "implementation"}
{"task_id": "HumanEval/68", "prompt": "\ndef pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n", "completion": "if not arr:\n        return []\n    \n    smallest_even = float('inf')\n    smallest_index = -1\n    \n    for index, value in enumerate(arr):\n        if value % 2 == 0:\n            if value < smallest_even:\n                smallest_even = value\n                smallest_index = index\n    \n    if smallest_index == -1:\n        return []\n    \n    return [smallest_even, smallest_index]", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:48:07.649532", "entry_point": "pluck", "canonical_solution": "    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([4,2,3]) == [2, 1], \"Error\"\n    assert candidate([1,2,3]) == [2, 1], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], \"Error\"\n    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], \"Error\"\n    assert candidate([7, 6, 7, 1]) == [6, 1], \"Error\"\n    assert candidate([7, 9, 7, 1]) == [], \"Error\"\n\n", "generated_tests": "import pytest\n\ndef test_basic_functionality():\n    assert pluck([4, 2, 3]) == [2, 1]\n    assert pluck([1, 2, 3]) == [2, 1]\n    assert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert pluck([6, 8, 10, 2]) == [2, 3]\n    assert pluck([1, 3, 5, 7]) == []\n\ndef test_edge_cases():\n    assert pluck([]) == []\n    assert pluck([1]) == []\n    assert pluck([2]) == [2, 0]\n    assert pluck([0]) == [0, 0]\n    assert pluck([1, 3, 5, 7, 9]) == []\n    assert pluck([2, 4, 6, 8]) == [2, 0]\n    assert pluck([10, 20, 30, 40, 50]) == [10, 0]\n    assert pluck([1, 2, 2, 3]) == [2, 1]\n    assert pluck([2, 1, 2, 3]) == [2, 0]\n\ndef test_large_inputs():\n    assert pluck(list(range(10000))) == [0, 0]\n    assert pluck(list(range(1, 10001))) == []\n    assert pluck([i for i in range(10000) if i % 2 == 0]) == [0, 0]\n    assert pluck([i for i in range(10000) if i % 2 != 0]) == []", "tdd_stage": "implementation"}
{"task_id": "HumanEval/69", "prompt": "\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n", "completion": "from collections import Counter\n\n    if not lst:\n        raise IndexError(\"List is empty\")\n\n    frequency = Counter(lst)\n    result = -1\n\n    for num in frequency:\n        if num > 0 and frequency[num] >= num:\n            result = max(result, num)\n\n    return result", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:48:15.763925", "entry_point": "search", "canonical_solution": "    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n", "test": "def check(candidate):\n\n    # manually generated tests\n    assert candidate([5, 5, 5, 5, 1]) == 1\n    assert candidate([4, 1, 4, 1, 4, 4]) == 4\n    assert candidate([3, 3]) == -1\n    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8\n    assert candidate([2, 3, 3, 2, 2]) == 2\n\n    # automatically generated tests\n    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1\n    assert candidate([3, 2, 8, 2]) == 2\n    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1\n    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1\n    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1\n    assert candidate([1, 9, 10, 1, 3]) == 1\n    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5\n    assert candidate([1]) == 1\n    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4\n    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2\n    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1\n    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4\n    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4\n    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2\n    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1\n    assert candidate([10]) == -1\n    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2\n    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1\n    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1\n    assert candidate([3, 10, 10, 9, 2]) == -1\n\n", "generated_tests": "import pytest\n\ndef test_basic_functionality():\n    assert search([4, 1, 2, 2, 3, 1]) == 2\n    assert search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    assert search([5, 5, 4, 4, 4]) == -1\n\ndef test_single_element_lists():\n    assert search([1]) == 1\n    assert search([2]) == -1\n    assert search([3]) == -1\n\ndef test_multiple_same_elements():\n    assert search([2, 2, 2]) == 2\n    assert search([3, 3, 3]) == 3\n    assert search([1, 1, 1, 1]) == 1\n\ndef test_no_valid_elements():\n    assert search([1, 1, 2, 2, 3]) == 2\n    assert search([1, 2, 3, 4, 5]) == -1\n\ndef test_large_numbers():\n    assert search([1000, 1000, 999, 999, 999]) == 999\n    assert search([1000, 1000, 1000, 1000]) == 1000\n\ndef test_edge_case_with_high_frequency():\n    assert search([1, 1, 1, 1, 1, 1]) == 1\n    assert search([2, 2, 2, 2, 2]) == 2\n\ndef test_edge_case_with_zero_frequency():\n    assert search([1, 2, 3, 4, 5, 6]) == -1\n\ndef test_large_input():\n    assert search(list(range(1, 10001)) * 2) == 10000\n\ndef test_empty_list():\n    with pytest.raises(IndexError):\n        search([])\n\ndef test_invalid_inputs():\n    with pytest.raises(TypeError):\n        search([1, 2, 'a', 4])\n    with pytest.raises(TypeError):\n        search([1.5, 2, 3])", "tdd_stage": "implementation"}
{"task_id": "HumanEval/70", "prompt": "\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n", "completion": "if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list\")\n    if any(not isinstance(x, int) for x in lst):\n        raise TypeError(\"List must contain only integers\")\n    \n    lst.sort()\n    result = []\n    left, right = 0, len(lst) - 1\n    \n    while left <= right:\n        if left == right:\n            result.append(lst[left])\n        else:\n            result.append(lst[left])\n            result.append(lst[right])\n        left += 1\n        right -= 1\n    \n    return result", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:48:29.966597", "entry_point": "strange_sort_list", "canonical_solution": "    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n", "generated_tests": "import pytest\n\ndef test_strange_sort_list_basic_functionality():\n    assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert strange_sort_list([10, 20, 30, 40]) == [10, 40, 20, 30]\n    assert strange_sort_list([3, 1, 4, 2]) == [1, 4, 2, 3]\n\ndef test_strange_sort_list_edge_cases():\n    assert strange_sort_list([]) == []\n    assert strange_sort_list([1]) == [1]\n    assert strange_sort_list([2, 2]) == [2, 2]\n    assert strange_sort_list([1, 3]) == [1, 3]\n    assert strange_sort_list([3, 1]) == [1, 3]\n\ndef test_strange_sort_list_with_negative_numbers():\n    assert strange_sort_list([-1, -2, -3, -4]) == [-4, -1, -3, -2]\n    assert strange_sort_list([-5, 0, 5]) == [-5, 5, 0]\n    assert strange_sort_list([-10, -20, -30, -40]) == [-40, -10, -20, -30]\n\ndef test_strange_sort_list_with_mixed_numbers():\n    assert strange_sort_list([-1, 0, 1]) == [-1, 1, 0]\n    assert strange_sort_list([-5, 5, 0]) == [-5, 5, 0]\n    assert strange_sort_list([0, 1, -1]) == [-1, 1, 0]\n\ndef test_strange_sort_list_with_large_numbers():\n    assert strange_sort_list([1000, 2000, 3000, 4000]) == [1000, 4000, 2000, 3000]\n    assert strange_sort_list([1000000, 500000, 2000000]) == [500000, 2000000, 1000000]\n\ndef test_strange_sort_list_with_duplicates():\n    assert strange_sort_list([1, 1, 2, 2]) == [1, 2, 1, 2]\n    assert strange_sort_list([3, 3, 3, 1, 1]) == [1, 3, 1, 3, 3]\n\ndef test_strange_sort_list_invalid_inputs():\n    with pytest.raises(TypeError):\n        strange_sort_list(None)\n    with pytest.raises(TypeError):\n        strange_sort_list(\"string\")\n    with pytest.raises(TypeError):\n        strange_sort", "tdd_stage": "implementation"}
{"task_id": "HumanEval/71", "prompt": "\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n", "completion": "if not all(isinstance(x, (int, float)) and x > 0 for x in (a, b, c)):\n        return -1\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    return -1", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:48:37.857583", "entry_point": "triangle_area", "canonical_solution": "    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == 6.00, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == 0.43, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == -1\n\n", "generated_tests": "import pytest\n\ndef test_valid_triangle_area():\n    assert triangle_area(3, 4, 5) == 6.00\n    assert triangle_area(5, 12, 13) == 30.00\n    assert triangle_area(7, 8, 9) == 26.83\n    assert triangle_area(10, 10, 10) == 43.30\n\ndef test_invalid_triangle_area():\n    assert triangle_area(1, 2, 10) == -1\n    assert triangle_area(5, 1, 1) == -1\n    assert triangle_area(0, 0, 0) == -1\n    assert triangle_area(-1, 2, 3) == -1\n    assert triangle_area(1, 1, -1) == -1\n\ndef test_edge_cases():\n    assert triangle_area(1, 1, 1) == 0.43\n    assert triangle_area(1, 1, 2) == -1\n    assert triangle_area(1, 2, 2) == 0.97\n    assert triangle_area(3, 3, 3) == 3.90\n\ndef test_non_numeric_inputs():\n    with pytest.raises(TypeError):\n        triangle_area(\"a\", 2, 3)\n    with pytest.raises(TypeError):\n        triangle_area(1, \"b\", 3)\n    with pytest.raises(TypeError):\n        triangle_area(1, 2, \"c\")\n    with pytest.raises(TypeError):\n        triangle_area(None, 2, 3)\n    with pytest.raises(TypeError):\n        triangle_area(1, None, 3)\n    with pytest.raises(TypeError):\n        triangle_area(1, 2, None)", "tdd_stage": "implementation"}
{"task_id": "HumanEval/72", "prompt": "\ndef will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n", "completion": "if not isinstance(q, list) or not isinstance(w, (int, float)):\n        raise TypeError(\"Invalid input types\")\n    \n    if any(not isinstance(i, (int, float)) for i in q):\n        raise TypeError(\"All elements in the list must be numbers\")\n    \n    total_weight = sum(q)\n    is_balanced = q == q[::-1]\n    \n    return is_balanced and total_weight <= w", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:48:46.766484", "entry_point": "will_it_fly", "canonical_solution": "    if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 2, 3], 9) is True\n    assert candidate([1, 2], 5) is False\n    assert candidate([3], 5) is True\n    assert candidate([3, 2, 3], 1) is False\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3], 6) is False\n    assert candidate([5], 5) is True\n\n", "generated_tests": "import pytest\n\ndef test_balanced_and_within_weight():\n    assert will_it_fly([3, 2, 3], 9) == True\n    assert will_it_fly([3], 5) == True\n    assert will_it_fly([1, 2, 1], 5) == True\n\ndef test_unbalanced_cases():\n    assert will_it_fly([1, 2], 5) == False\n    assert will_it_fly([1, 2, 1, 2], 10) == False\n    assert will_it_fly([1, 3, 1], 5) == True\n    assert will_it_fly([1, 2, 3], 10) == False\n\ndef test_exceeding_weight():\n    assert will_it_fly([3, 2, 3], 1) == False\n    assert will_it_fly([1, 2, 1], 3) == False\n    assert will_it_fly([5, 5, 5], 14) == False\n\ndef test_empty_list():\n    assert will_it_fly([], 5) == True  # An empty list is considered balanced and 0 <= 5\n\ndef test_single_element():\n    assert will_it_fly([0], 0) == True  # Balanced and sum is equal to weight\n    assert will_it_fly([1], 1) == True  # Balanced and sum is equal to weight\n    assert will_it_fly([2], 1) == False  # Balanced but exceeds weight\n\ndef test_invalid_inputs():\n    with pytest.raises(TypeError):\n        will_it_fly(None, 5)\n    with pytest.raises(TypeError):\n        will_it_fly([1, 2, 3], None)\n    with pytest.raises(TypeError):\n        will_it_fly(\"not a list\", 5)\n    with pytest.raises(TypeError):\n        will_it_fly([1, 2, 3], \"not a weight\")\n\ndef test_large_numbers():\n    assert will_it_fly([1000000, 1000000], 2000000) == True\n    assert will_it_fly([1000000, 1000000], 1999999) == False\n    assert will_it_fly([1000000, 1000000, 1000000], 3000000) == True", "tdd_stage": "implementation"}
{"task_id": "HumanEval/73", "prompt": "\ndef smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n", "completion": "if arr is None or not isinstance(arr, list):\n        raise TypeError(\"Input must be a list of integers.\")\n    if any(not isinstance(x, int) for x in arr):\n        raise TypeError(\"All elements in the array must be integers.\")\n    \n    n = len(arr)\n    changes = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - 1 - i]:\n            changes += 1\n    return changes", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:48:53.440423", "entry_point": "smallest_change", "canonical_solution": "    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,5,4,7,9,6]) == 4\n    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1\n    assert candidate([1, 4, 2]) == 1\n    assert candidate([1, 4, 4, 2]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, 2, 1]) == 0\n    assert candidate([3, 1, 1, 3]) == 0\n    assert candidate([1]) == 0\n    assert candidate([0, 1]) == 1\n\n", "generated_tests": "import pytest\n\ndef test_smallest_change_basic_functionality():\n    assert smallest_change([1, 2, 3, 5, 4, 7, 9, 6]) == 4\n    assert smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    assert smallest_change([1, 2, 3, 2, 1]) == 0\n    assert smallest_change([1, 1, 1, 1]) == 0\n    assert smallest_change([1, 2, 3, 4]) == 2\n\ndef test_smallest_change_edge_cases():\n    assert smallest_change([]) == 0\n    assert smallest_change([1]) == 0\n    assert smallest_change([1, 2]) == 1\n    assert smallest_change([1, 1]) == 0\n    assert smallest_change([1, 2, 3, 4, 5]) == 2\n    assert smallest_change([1, 2, 2, 1]) == 0\n    assert smallest_change([1, 2, 3, 3, 2, 1]) == 0\n\ndef test_smallest_change_invalid_inputs():\n    with pytest.raises(TypeError):\n        smallest_change(None)\n    with pytest.raises(TypeError):\n        smallest_change(\"not an array\")\n    with pytest.raises(TypeError):\n        smallest_change(123)\n    with pytest.raises(TypeError):\n        smallest_change([1, 2, \"three\", 4])", "tdd_stage": "implementation"}
{"task_id": "HumanEval/74", "prompt": "\ndef total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n", "completion": "if not isinstance(lst1, list) or not isinstance(lst2, list):\n        raise TypeError(\"Both inputs must be lists.\")\n    \n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:49:01.513991", "entry_point": "total_match", "canonical_solution": "    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([], []) == []\n    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']\n    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']\n    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([], ['this']) == []\n    assert candidate(['this'], []) == []\n\n", "generated_tests": "import pytest\n\ndef test_empty_lists():\n    assert total_match([], []) == []\n\ndef test_equal_char_count():\n    assert total_match(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']\n    assert total_match(['abc'], ['a', 'b', 'c']) == ['abc']\n\ndef test_first_list_smaller():\n    assert total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']\n    assert total_match(['4'], ['1', '2', '3', '4', '5']) == ['4']\n\ndef test_second_list_smaller():\n    assert total_match(['hI', 'hi', 'hi'], ['hi', 'admin']) == ['hI', 'hi', 'hi']\n    assert total_match(['a', 'b'], ['c']) == ['c']\n\ndef test_single_element_lists():\n    assert total_match(['a'], ['b']) == ['a']\n    assert total_match(['longer'], ['short']) == ['short']\n\ndef test_lists_with_special_characters():\n    assert total_match(['!@#', '$%^'], ['&*(', ')+']) == ['!@#', '$%^']\n    assert total_match(['hello'], ['world!']) == ['world!']\n\ndef test_lists_with_numbers_as_strings():\n    assert total_match(['1', '2', '3'], ['4', '5']) == ['4', '5']\n    assert total_match(['10', '20'], ['5', '5', '5']) == ['10', '20']\n\ndef test_lists_with_mixed_case():\n    assert total_match(['Hello', 'world'], ['hello', 'WORLD']) == ['hello', 'WORLD']\n    assert total_match(['a', 'B'], ['C', 'd']) == ['C', 'd']\n\ndef test_large_lists():\n    assert total_match(['a'] * 1000, ['b'] * 500) == ['b'] * 500\n    assert total_match(['x'] * 10000, ['y'] * 9999) == ['y'] * 9999\n\ndef test_invalid_inputs():\n    with pytest.raises(TypeError):\n        total_match(None, ['hi'])\n    with pytest.raises(TypeError):\n        total_match(['hi'], None)\n    with pytest.raises(TypeError):\n        total_match(['hi'], 'not_a_list')\n    with pytest.raises(TypeError):\n        total_match('not_a_list', ['hi'])", "tdd_stage": "implementation"}
{"task_id": "HumanEval/75", "prompt": "\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n", "completion": "def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, 100) if is_prime(i)]\n    \n    for i in range(len(primes)):\n        for j in range(i + 1, len(primes)):\n            for k in range(j + 1, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:49:15.200366", "entry_point": "is_multiply_prime", "canonical_solution": "    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n", "test": "def check(candidate):\n\n    assert candidate(5) == False\n    assert candidate(30) == True\n    assert candidate(8) == True\n    assert candidate(10) == False\n    assert candidate(125) == True\n    assert candidate(3 * 5 * 7) == True\n    assert candidate(3 * 6 * 7) == False\n    assert candidate(9 * 9 * 9) == False\n    assert candidate(11 * 9 * 9) == False\n    assert candidate(11 * 13 * 7) == True\n\n", "generated_tests": "import pytest\n\ndef test_multiply_of_three_primes():\n    assert is_multiply_prime(30) == True  # 2 * 3 * 5\n    assert is_multiply_prime(42) == True  # 2 * 3 * 7\n    assert is_multiply_prime(105) == True # 3 * 5 * 7\n    assert is_multiply_prime(70) == True  # 2 * 5 * 7\n\ndef test_not_multiply_of_three_primes():\n    assert is_multiply_prime(1) == False   # Not a product of primes\n    assert is_multiply_prime(2) == False   # Only one prime\n    assert is_multiply_prime(3) == False   # Only one prime\n    assert is_multiply_prime(4) == False   # 2 * 2, not three distinct primes\n    assert is_multiply_prime(6) == False   # 2 * 3, not three primes\n    assert is_multiply_prime(8) == False   # 2 * 2 * 2, not three distinct primes\n    assert is_multiply_prime(9) == False   # 3 * 3, not three distinct primes\n    assert is_multiply_prime(10) == False  # 2 * 5, not three primes\n    assert is_multiply_prime(12) == False  # 2 * 2 * 3, not three distinct primes\n    assert is_multiply_prime(14) == False  # 2 * 7, not three primes\n    assert is_multiply_prime(15) == False  # 3 * 5, not three primes\n    assert is_multiply_prime(16) == False  # 2 * 2 * 2 * 2, not three distinct primes\n    assert is_multiply_prime(18) == False  # 2 * 3 * 3, not three distinct primes\n    assert is_multiply_prime(20) == False  # 2 * 2 * 5, not three distinct primes\n    assert is_multiply_prime(21) == False  # 3 * 7, not three primes\n    assert is_multiply_prime(22) == False  # 2 * 11, not three primes\n    assert is_multiply_prime(24) == False  # 2 * 2 * 2 * 3, not three distinct primes\n    assert is_multiply_prime(25) == False  # 5 * 5, not three distinct primes\n    assert is_multiply_prime(26) == False  # 2 * 13, not three primes\n    assert is_multiply_prime(27) == False  # 3 * 3 * 3, not three distinct primes\n    assert is_multiply_prime(", "tdd_stage": "implementation"}
{"task_id": "HumanEval/76", "prompt": "\ndef is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n", "completion": "if not isinstance(x, (int, float)) or not isinstance(n, (int, float)):\n        raise TypeError(\"Both x and n must be numbers.\")\n    if n == 0:\n        return x == 1  # 0^0 is often defined as 1\n    if n == 1:\n        return x == 1  # 1^n = 1 for any n\n    if x == 0:\n        return False  # n^k cannot equal 0 for any k if n > 0\n    if x < 0 and n > 0:\n        return False  # No positive power of n can be negative\n    if n < 0 and x > 0:\n        return False  # No negative power of n can be positive\n    if n < 0 and x < 0:\n        # Check if x is a power of n\n        k = 0\n        while True:\n            power = n ** k\n            if power < x:\n                k += 1\n            elif power == x:\n                return True\n            else:\n                return False\n    k = 0\n    while True:\n        power = n ** k\n        if power < x:\n            k += 1\n        elif power == x:\n            return True\n        else:\n            return False", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:49:27.623997", "entry_point": "is_simple_power", "canonical_solution": "    if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < x): \n        power = power * n \n    return (power == x) \n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(16, 2)== True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(143214, 16)== False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(4, 2)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(9, 3)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(16, 4)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(24, 2)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(128, 4)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(12, 6)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(1, 12)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "generated_tests": "import pytest\n\ndef test_simple_power_with_positive_cases():\n    assert is_simple_power(1, 4) == True  # 4^0 = 1\n    assert is_simple_power(2, 2) == True  # 2^1 = 2\n    assert is_simple_power(8, 2) == True  # 2^3 = 8\n    assert is_simple_power(27, 3) == True  # 3^3 = 27\n    assert is_simple_power(16, 4) == True  # 4^2 = 16\n\ndef test_simple_power_with_negative_cases():\n    assert is_simple_power(3, 2) == False  # 2^1.585 = 3 (not an integer power)\n    assert is_simple_power(3, 1) == False  # 1^n = 1 for any n, not equal to 3\n    assert is_simple_power(5, 3) == False  # 3^1.464 = 5 (not an integer power)\n    assert is_simple_power(10, 2) == False  # 2^3.321 = 10 (not an integer power)\n\ndef test_simple_power_with_edge_cases():\n    assert is_simple_power(0, 2) == False  # 2^n cannot equal 0 for any n\n    assert is_simple_power(1, 1) == True  # 1^n = 1 for any n\n    assert is_simple_power(1, 0) == True  # 0^0 is often defined as 1\n    assert is_simple_power(2, 1) == False  # 1^n = 1, not equal to 2\n    assert is_simple_power(4, 1) == False  # 1^n = 1, not equal to 4\n    assert is_simple_power(-1, 2) == False  # No even power of 2 can be negative\n    assert is_simple_power(-8, -2) == True  # (-2)^3 = -8\n\ndef test_simple_power_with_invalid_inputs():\n    with pytest.raises(TypeError):\n        is_simple_power(\"a\", 2)  # Invalid input type\n    with pytest.raises(TypeError):\n        is_simple_power(8, \"b\")  # Invalid input type\n    with pytest.raises(TypeError):\n        is_simple_power(None, 2)  # Invalid input type\n    with pytest.raises(TypeError):\n        is_simple_power(8, None)  # Invalid input type", "tdd_stage": "implementation"}
{"task_id": "HumanEval/77", "prompt": "\ndef iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n", "completion": "if not isinstance(a, int):\n        raise TypeError(\"Input must be an integer\")\n    \n    cube_root = round(abs(a) ** (1/3))\n    return cube_root ** 3 == abs(a)", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:49:34.386000", "entry_point": "iscube", "canonical_solution": "    a = abs(a)\n    return int(round(a ** (1. / 3))) ** 3 == a\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1) == True, \"First test error: \" + str(candidate(1))\n    assert candidate(2) == False, \"Second test error: \" + str(candidate(2))\n    assert candidate(-1) == True, \"Third test error: \" + str(candidate(-1))\n    assert candidate(64) == True, \"Fourth test error: \" + str(candidate(64))\n    assert candidate(180) == False, \"Fifth test error: \" + str(candidate(180))\n    assert candidate(1000) == True, \"Sixth test error: \" + str(candidate(1000))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == True, \"1st edge test error: \" + str(candidate(0))\n    assert candidate(1729) == False, \"2nd edge test error: \" + str(candidate(1728))\n\n", "generated_tests": "import pytest\n\ndef test_positive_cube():\n    assert iscube(1) == True\n    assert iscube(8) == True\n    assert iscube(27) == True\n    assert iscube(64) == True\n    assert iscube(125) == True\n\ndef test_negative_cube():\n    assert iscube(-1) == True\n    assert iscube(-8) == True\n    assert iscube(-27) == True\n    assert iscube(-64) == True\n    assert iscube(-125) == True\n\ndef test_non_cube():\n    assert iscube(2) == False\n    assert iscube(3) == False\n    assert iscube(5) == False\n    assert iscube(10) == False\n    assert iscube(180) == False\n\ndef test_zero():\n    assert iscube(0) == True\n\ndef test_large_numbers():\n    assert iscube(1000000) == True  # 100^3\n    assert iscube(999999) == False\n    assert iscube(1000000000) == True  # 1000^3\n\ndef test_edge_cases():\n    assert iscube(1) == True\n    assert iscube(-1) == True\n    assert iscube(0) == True\n    assert iscube(2) == False\n    assert iscube(3) == False\n\ndef test_boundary_conditions():\n    assert iscube(2**30) == False  # 1073741824 is not a cube\n    assert iscube(2**27) == True   # 134217728 is 512^3\n    assert iscube(-2**27) == True  # -134217728 is -512^3\n\ndef test_invalid_inputs():\n    with pytest.raises(TypeError):\n        iscube(\"string\")\n    with pytest.raises(TypeError):\n        iscube(3.14)\n    with pytest.raises(TypeError):\n        iscube(None)", "tdd_stage": "implementation"}
{"task_id": "HumanEval/78", "prompt": "\ndef hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n", "completion": "prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    return sum(1 for digit in num if digit in prime_hex_digits)", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:49:40.631393", "entry_point": "hex_key", "canonical_solution": "    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AB\") == 1, \"First test error: \" + str(candidate(\"AB\"))      \n    assert candidate(\"1077E\") == 2, \"Second test error: \" + str(candidate(\"1077E\"))  \n    assert candidate(\"ABED1A33\") == 4, \"Third test error: \" + str(candidate(\"ABED1A33\"))      \n    assert candidate(\"2020\") == 2, \"Fourth test error: \" + str(candidate(\"2020\"))  \n    assert candidate(\"123456789ABCDEF0\") == 6, \"Fifth test error: \" + str(candidate(\"123456789ABCDEF0\"))      \n    assert candidate(\"112233445566778899AABBCCDDEEFF00\") == 12, \"Sixth test error: \" + str(candidate(\"112233445566778899AABBCCDDEEFF00\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([]) == 0\n\n", "generated_tests": "import pytest\n\ndef test_hex_key_basic_functionality():\n    assert hex_key(\"AB\") == 1\n    assert hex_key(\"1077E\") == 2\n    assert hex_key(\"ABED1A33\") == 4\n    assert hex_key(\"123456789ABCDEF0\") == 6\n    assert hex_key(\"2020\") == 2\n\ndef test_hex_key_with_no_primes():\n    assert hex_key(\"0146890\") == 0\n    assert hex_key(\"0\") == 0\n    assert hex_key(\"1\") == 0\n    assert hex_key(\"A\") == 0\n    assert hex_key(\"C\") == 0\n    assert hex_key(\"E\") == 0\n    assert hex_key(\"F\") == 0\n\ndef test_hex_key_with_only_primes():\n    assert hex_key(\"2357BD\") == 6\n    assert hex_key(\"BDBD\") == 4\n    assert hex_key(\"222222\") == 6\n\ndef test_hex_key_empty_input():\n    assert hex_key(\"\") == 0\n\ndef test_hex_key_invalid_characters():\n    # Assuming the input is always correct as per the function description\n    # So we won't test for invalid characters as they are not expected\n    pass\n\ndef test_hex_key_large_input():\n    assert hex_key(\"2\" * 1000) == 1000\n    assert hex_key(\"3\" * 1000) == 1000\n    assert hex_key(\"5\" * 1000) == 1000\n    assert hex_key(\"7\" * 1000) == 1000\n    assert hex_key(\"B\" * 1000) == 1000\n    assert hex_key(\"D\" * 1000) == 1000", "tdd_stage": "implementation"}
{"task_id": "HumanEval/79", "prompt": "\ndef decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n", "completion": "if not isinstance(decimal, int):\n        raise TypeError(\"Input must be an integer.\")\n    if decimal < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    binary_representation = bin(decimal)[2:]  # Convert to binary and remove the '0b' prefix\n    return f\"db{binary_representation}db\"", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:49:48.308978", "entry_point": "decimal_to_binary", "canonical_solution": "    return \"db\" + bin(decimal)[2:] + \"db\"\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(0) == \"db0db\"\n    assert candidate(32) == \"db100000db\"\n    assert candidate(103) == \"db1100111db\"\n    assert candidate(15) == \"db1111db\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "generated_tests": "import pytest\n\ndef test_basic_functionality():\n    assert decimal_to_binary(0) == \"db0db\"\n    assert decimal_to_binary(1) == \"db1db\"\n    assert decimal_to_binary(2) == \"db10db\"\n    assert decimal_to_binary(3) == \"db11db\"\n    assert decimal_to_binary(4) == \"db100db\"\n    assert decimal_to_binary(5) == \"db101db\"\n    assert decimal_to_binary(15) == \"db1111db\"\n    assert decimal_to_binary(32) == \"db100000db\"\n    assert decimal_to_binary(255) == \"db11111111db\"\n\ndef test_edge_cases():\n    assert decimal_to_binary(0) == \"db0db\"  # Lower boundary\n    assert decimal_to_binary(1) == \"db1db\"  # Lower boundary\n    assert decimal_to_binary(2) == \"db10db\"  # Lower boundary\n    assert decimal_to_binary(1023) == \"db1111111111db\"  # Upper boundary for 10 bits\n\ndef test_negative_numbers():\n    with pytest.raises(ValueError):\n        decimal_to_binary(-1)\n\ndef test_non_integer_inputs():\n    with pytest.raises(TypeError):\n        decimal_to_binary(\"string\")\n    with pytest.raises(TypeError):\n        decimal_to_binary(3.14)\n    with pytest.raises(TypeError):\n        decimal_to_binary(None)\n    with pytest.raises(TypeError):\n        decimal_to_binary([])\n\ndef test_large_numbers():\n    assert decimal_to_binary(1024) == \"db10000000000db\"\n    assert decimal_to_binary(2048) == \"db100000000000db\"\n    assert decimal_to_binary(4095) == \"db111111111111db\"", "tdd_stage": "implementation"}
{"task_id": "HumanEval/80", "prompt": "\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n", "completion": "if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) < 3:\n            return False\n    return True", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:49:56.978289", "entry_point": "is_happy", "canonical_solution": "    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"a\") == False , \"a\"\n    assert candidate(\"aa\") == False , \"aa\"\n    assert candidate(\"abcd\") == True , \"abcd\"\n    assert candidate(\"aabb\") == False , \"aabb\"\n    assert candidate(\"adb\") == True , \"adb\"\n    assert candidate(\"xyy\") == False , \"xyy\"\n    assert candidate(\"iopaxpoi\") == True , \"iopaxpoi\"\n    assert candidate(\"iopaxioi\") == False , \"iopaxioi\"\n", "generated_tests": "import pytest\n\ndef test_happy_string_with_minimum_length():\n    assert is_happy(\"abc\") == True\n    assert is_happy(\"aab\") == False\n    assert is_happy(\"aba\") == False\n    assert is_happy(\"aaa\") == False\n\ndef test_happy_string_with_longer_length():\n    assert is_happy(\"abcd\") == True\n    assert is_happy(\"abca\") == False\n    assert is_happy(\"abab\") == False\n    assert is_happy(\"abcabc\") == True\n    assert is_happy(\"aabbcc\") == False\n\ndef test_happy_string_with_repeated_characters():\n    assert is_happy(\"aaabbb\") == False\n    assert is_happy(\"abcabcabc\") == True\n    assert is_happy(\"xyzxyzxyz\") == True\n    assert is_happy(\"xxxyyy\") == False\n\ndef test_happy_string_with_special_characters():\n    assert is_happy(\"!@#\") == True\n    assert is_happy(\"!@!\") == False\n    assert is_happy(\"123\") == True\n    assert is_happy(\"1!1\") == False\n\ndef test_happy_string_with_empty_and_short_inputs():\n    assert is_happy(\"\") == False\n    assert is_happy(\"a\") == False\n    assert is_happy(\"ab\") == False\n\ndef test_happy_string_with_non_alpha_characters():\n    assert is_happy(\"abc123\") == True\n    assert is_happy(\"abc!@#\") == True\n    assert is_happy(\"abcabc!\") == True\n    assert is_happy(\"abcabc!!\") == False\n\ndef test_happy_string_with_all_identical_characters():\n    assert is_happy(\"zzz\") == False\n    assert is_happy(\"zzzzzz\") == False\n\ndef test_happy_string_with_varied_case():\n    assert is_happy(\"aBc\") == True\n    assert is_happy(\"aAB\") == False\n    assert is_happy(\"AbC\") == True\n    assert is_happy(\"aAa\") == False", "tdd_stage": "implementation"}
{"task_id": "HumanEval/81", "prompt": "\ndef numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n", "completion": "if not isinstance(grades, list):\n        raise TypeError(\"Input must be a list\")\n    \n    letter_grades = []\n    for grade in grades:\n        if not isinstance(grade, (int, float)):\n            raise TypeError(\"All elements in the list must be numbers\")\n        \n        if grade == 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    \n    return letter_grades", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:50:09.304759", "entry_point": "numerical_letter_grade", "canonical_solution": "\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']\n    assert candidate([1.2]) == ['D+']\n    assert candidate([0.5]) == ['D-']\n    assert candidate([0.0]) == ['E']\n    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']\n    assert candidate([0, 0.7]) == ['E', 'D-']\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n", "generated_tests": "import pytest\n\ndef test_numerical_letter_grade_basic_functionality():\n    assert numerical_letter_grade([4.0, 3.8, 3.4, 3.1, 2.8, 2.4, 2.1, 1.8, 1.4, 1.2, 0.5, 0.0]) == [\n        'A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'E'\n    ]\n\ndef test_numerical_letter_grade_edge_cases():\n    assert numerical_letter_grade([3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]) == [\n        'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'E'\n    ]\n    assert numerical_letter_grade([4.0]) == ['A+']\n    assert numerical_letter_grade([0.0]) == ['E']\n    assert numerical_letter_grade([1.0]) == ['D+']\n    assert numerical_letter_grade([2.0]) == ['C+']\n\ndef test_numerical_letter_grade_empty_input():\n    assert numerical_letter_grade([]) == []\n\ndef test_numerical_letter_grade_invalid_input():\n    with pytest.raises(TypeError):\n        numerical_letter_grade(\"not a list\")\n    with pytest.raises(TypeError):\n        numerical_letter_grade([4.0, \"3.5\", 2.0])\n    with pytest.raises(TypeError):\n        numerical_letter_grade([None, 3.5, 2.0])\n\ndef test_numerical_letter_grade_boundary_conditions():\n    assert numerical_letter_grade([3.6999999]) == ['A']\n    assert numerical_letter_grade([3.3000001]) == ['A-']\n    assert numerical_letter_grade([2.6999999]) == ['B']\n    assert numerical_letter_grade([2.2999999]) == ['B-']\n    assert numerical_letter_grade([1.6999999]) == ['C']\n    assert numerical_letter_grade([1.2999999]) == ['C-']\n    assert numerical_letter_grade([0.6999999]) == ['D']", "tdd_stage": "implementation"}
{"task_id": "HumanEval/82", "prompt": "\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n", "completion": "if not isinstance(string, str):\n        raise TypeError(\"Input must be a string\")\n    \n    length = len(string)\n    \n    if length < 2:\n        return False\n    \n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return False\n            \n    return True", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:50:15.655576", "entry_point": "prime_length", "canonical_solution": "    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello') == True\n    assert candidate('abcdcba') == True\n    assert candidate('kittens') == True\n    assert candidate('orange') == False\n    assert candidate('wow') == True\n    assert candidate('world') == True\n    assert candidate('MadaM') == True\n    assert candidate('Wow') == True\n    assert candidate('') == False\n    assert candidate('HI') == True\n    assert candidate('go') == True\n    assert candidate('gogo') == False\n    assert candidate('aaaaaaaaaaaaaaa') == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('Madam') == True\n    assert candidate('M') == False\n    assert candidate('0') == False\n\n", "generated_tests": "import pytest\n\ndef test_prime_length_with_prime_length_strings():\n    assert prime_length('Hello') == True  # Length 5 is prime\n    assert prime_length('abcdcba') == True  # Length 7 is prime\n    assert prime_length('kittens') == True  # Length 7 is prime\n\ndef test_prime_length_with_non_prime_length_strings():\n    assert prime_length('orange') == False  # Length 6 is not prime\n    assert prime_length('test') == False  # Length 4 is not prime\n    assert prime_length('abcde') == False  # Length 5 is prime, but testing with 5 characters\n\ndef test_prime_length_with_empty_string():\n    assert prime_length('') == False  # Length 0 is not prime\n\ndef test_prime_length_with_single_character_string():\n    assert prime_length('a') == False  # Length 1 is not prime\n\ndef test_prime_length_with_two_character_string():\n    assert prime_length('ab') == False  # Length 2 is prime\n\ndef test_prime_length_with_three_character_string():\n    assert prime_length('abc') == True  # Length 3 is prime\n\ndef test_prime_length_with_large_prime_length_string():\n    assert prime_length('a' * 29) == True  # Length 29 is prime\n\ndef test_prime_length_with_large_non_prime_length_string():\n    assert prime_length('a' * 30) == False  # Length 30 is not prime\n\ndef test_prime_length_with_non_string_input():\n    with pytest.raises(TypeError):\n        prime_length(123)  # Non-string input should raise TypeError\n    with pytest.raises(TypeError):\n        prime_length(None)  # None input should raise TypeError", "tdd_stage": "implementation"}
{"task_id": "HumanEval/83", "prompt": "\ndef starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n", "completion": "if not isinstance(n, int) or n <= 0:\n        raise TypeError(\"Input must be a positive integer.\")\n    \n    if n == 1:\n        return 1\n    \n    start_count = 9 * (10 ** (n - 2))  # Numbers starting with 1\n    end_count = 9 * (10 ** (n - 1))     # Numbers ending with 1\n    overlap_count = 10 ** (n - 1)       # Numbers both starting and ending with 1\n    \n    return start_count + end_count - overlap_count", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:50:22.648647", "entry_point": "starts_one_ends", "canonical_solution": "    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1) == 1\n    assert candidate(2) == 18\n    assert candidate(3) == 180\n    assert candidate(4) == 1800\n    assert candidate(5) == 18000\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "generated_tests": "import pytest\n\ndef test_starts_one_ends_with_one_digit():\n    assert starts_one_ends(1) == 1\n\ndef test_starts_one_ends_with_two_digits():\n    assert starts_one_ends(2) == 18\n\ndef test_starts_one_ends_with_three_digits():\n    assert starts_one_ends(3) == 180\n\ndef test_starts_one_ends_with_four_digits():\n    assert starts_one_ends(4) == 1800\n\ndef test_starts_one_ends_with_five_digits():\n    assert starts_one_ends(5) == 18000\n\ndef test_starts_one_ends_with_large_digit_count():\n    assert starts_one_ends(10) == 1800000000\n\ndef test_starts_one_ends_with_minimum_valid_input():\n    assert starts_one_ends(1) == 1\n\ndef test_starts_one_ends_with_invalid_input_zero():\n    with pytest.raises(TypeError):\n        starts_one_ends(0)\n\ndef test_starts_one_ends_with_invalid_input_negative():\n    with pytest.raises(TypeError):\n        starts_one_ends(-5)\n\ndef test_starts_one_ends_with_invalid_input_non_integer():\n    with pytest.raises(TypeError):\n        starts_one_ends(2.5)\n\ndef test_starts_one_ends_with_large_n():\n    assert starts_one_ends(20) == 180000000000000000000", "tdd_stage": "implementation"}
{"task_id": "HumanEval/84", "prompt": "\ndef solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n", "completion": "if not isinstance(N, int) or N < 0:\n        raise TypeError(\"Input must be a non-negative integer.\")\n    \n    digit_sum = sum(int(digit) for digit in str(N))\n    return bin(digit_sum)[2:]", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:50:32.039309", "entry_point": "solve", "canonical_solution": "    return bin(sum(int(i) for i in str(N)))[2:]\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1000) == \"1\", \"Error\"\n    assert candidate(150) == \"110\", \"Error\"\n    assert candidate(147) == \"1100\", \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(333) == \"1001\", \"Error\"\n    assert candidate(963) == \"10010\", \"Error\"\n\n", "generated_tests": "import pytest\n\ndef test_sum_of_digits_in_binary_for_small_numbers():\n    assert solve(0) == \"0\"  # Sum of digits is 0\n    assert solve(1) == \"1\"  # Sum of digits is 1\n    assert solve(2) == \"10\"  # Sum of digits is 2\n    assert solve(3) == \"11\"  # Sum of digits is 3\n    assert solve(4) == \"100\"  # Sum of digits is 4\n    assert solve(5) == \"101\"  # Sum of digits is 5\n    assert solve(6) == \"110\"  # Sum of digits is 6\n    assert solve(7) == \"111\"  # Sum of digits is 7\n    assert solve(8) == \"1000\"  # Sum of digits is 8\n    assert solve(9) == \"1001\"  # Sum of digits is 9\n\ndef test_sum_of_digits_in_binary_for_larger_numbers():\n    assert solve(10) == \"1\"  # Sum of digits is 1 (1 + 0)\n    assert solve(100) == \"1\"  # Sum of digits is 1 (1 + 0 + 0)\n    assert solve(1000) == \"1\"  # Sum of digits is 1 (1 + 0 + 0 + 0)\n    assert solve(150) == \"110\"  # Sum of digits is 6 (1 + 5 + 0)\n    assert solve(147) == \"1100\"  # Sum of digits is 12 (1 + 4 + 7)\n\ndef test_sum_of_digits_in_binary_for_edge_cases():\n    assert solve(9999) == \"36\"  # Sum of digits is 36 (9 + 9 + 9 + 9)\n    assert solve(10000) == \"1\"  # Sum of digits is 1 (1 + 0 + 0 + 0 + 0)\n\ndef test_invalid_inputs():\n    with pytest.raises(TypeError):\n        solve(-1)  # Negative input\n    with pytest.raises(TypeError):\n        solve(\"string\")  # String input\n    with pytest.raises(TypeError):\n        solve(10.5)  # Float input", "tdd_stage": "implementation"}
{"task_id": "HumanEval/85", "prompt": "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n", "completion": "if not isinstance(lst, list) or any(not isinstance(x, int) for x in lst):\n        raise TypeError(\"Input must be a list of integers.\")\n    \n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:50:39.545810", "entry_point": "add", "canonical_solution": "    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\n    # Check some edge cases that are easy to work out by hand.\n    \n", "generated_tests": "import pytest\n\ndef test_basic_functionality():\n    assert add([4, 2, 6, 7]) == 2\n    assert add([1, 2, 3, 4, 5, 6]) == 2\n    assert add([10, 1, 2, 3, 4, 5]) == 2\n    assert add([0, 1, 2, 3, 4, 5]) == 2\n    assert add([1, 2, 3, 4, 5, 6, 8]) == 2\n\ndef test_edge_cases():\n    assert add([2]) == 0\n    assert add([1, 2]) == 0\n    assert add([1, 2, 3]) == 0\n    assert add([1, 2, 4]) == 0\n    assert add([1, 2, 4, 6]) == 6\n\ndef test_negative_numbers():\n    assert add([-1, -2, -3, -4, -5]) == 0\n    assert add([-1, 2, -3, 4, -5]) == 4\n    assert add([-2, 1, -4, 3, -6]) == -4\n\ndef test_large_numbers():\n    assert add([1000000, 1, 2000000, 3, 3000000]) == 2000000\n    assert add([1, 1000000, 2, 2000000, 3, 3000000]) == 2000000\n\ndef test_invalid_inputs():\n    with pytest.raises(TypeError):\n        add(None)\n    with pytest.raises(TypeError):\n        add(\"string\")\n    with pytest.raises(TypeError):\n        add([1, 2, \"three\"])\n    with pytest.raises(TypeError):\n        add([1.5, 2, 3])", "tdd_stage": "implementation"}
{"task_id": "HumanEval/86", "prompt": "\ndef anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n", "completion": "if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n    \n    words = s.split(' ')\n    ordered_words = []\n    \n    for word in words:\n        if word:  # If the word is not empty\n            ordered_words.append(''.join(sorted(word)))\n        else:  # Preserve empty spaces\n            ordered_words.append('')\n    \n    return ' '.join(ordered_words)", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:50:46.883009", "entry_point": "anti_shuffle", "canonical_solution": "    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hi') == 'Hi'\n    assert candidate('hello') == 'ehllo'\n    assert candidate('number') == 'bemnru'\n    assert candidate('abcd') == 'abcd'\n    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'\n    assert candidate('') == ''\n    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n", "generated_tests": "import pytest\n\ndef test_single_word():\n    assert anti_shuffle('hello') == 'ehllo'\n    assert anti_shuffle('Hi') == 'Hi'\n    assert anti_shuffle('a') == 'a'\n    assert anti_shuffle('z') == 'z'\n\ndef test_multiple_words():\n    assert anti_shuffle('Hello World!!!') == 'Hello !!!Wdlor'\n    assert anti_shuffle('Python is fun') == 'Pnohty is fnu'\n    assert anti_shuffle('Test case') == 'Test ace'\n    assert anti_shuffle('abc def ghi') == 'abc def ghi'\n\ndef test_words_with_special_characters():\n    assert anti_shuffle('Hello!!! World??') == 'Hello!!! ??Wdlor'\n    assert anti_shuffle('C@t d0g') == '@Ct 0dg'\n    assert anti_shuffle('A!B#C$') == '!#A$BC'\n\ndef test_leading_and_trailing_spaces():\n    assert anti_shuffle('  leading space') == '  aegiln spcae'\n    assert anti_shuffle('trailing space  ') == 'aegiln spcae  '\n    assert anti_shuffle('  both sides  ') == '  bdhios  '\n\ndef test_empty_string():\n    assert anti_shuffle('') == ''\n\ndef test_only_spaces():\n    assert anti_shuffle('     ') == '     '\n\ndef test_mixed_case():\n    assert anti_shuffle('aBc DeF') == 'Bac DeF'\n    assert anti_shuffle('AbC dEf') == 'AbC dEf'\n\ndef test_numerical_characters():\n    assert anti_shuffle('123 456') == '123 456'\n    assert anti_shuffle('1a2b3c') == '123abc'\n\ndef test_invalid_inputs():\n    with pytest.raises(TypeError):\n        anti_shuffle(None)\n    with pytest.raises(TypeError):\n        anti_shuffle(123)\n    with pytest.raises(TypeError):\n        anti_shuffle(['list', 'of', 'words'])", "tdd_stage": "implementation"}
{"task_id": "HumanEval/87", "prompt": "\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n", "completion": "coordinates = []\n    for row_index, row in enumerate(lst):\n        for col_index, value in enumerate(row):\n            if value == x:\n                coordinates.append((row_index, col_index))\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    return coordinates", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:51:02.553680", "entry_point": "get_row", "canonical_solution": "    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6]\n    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,1,3,4,5,6],\n        [1,2,1,4,5,6],\n        [1,2,3,1,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\n    assert candidate([], 1) == []\n    assert candidate([[1]], 2) == []\n    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n", "generated_tests": "import pytest\n\ndef test_basic_functionality():\n    assert get_row([\n        [1, 2, 3, 4, 5, 6],\n        [1, 2, 3, 4, 1, 6],\n        [1, 2, 3, 4, 5, 1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\n    assert get_row([\n        [1, 1, 1],\n        [2, 2, 2],\n        [3, 3, 3]\n    ], 1) == [(0, 0), (0, 1), (0, 2)]\n\n    assert get_row([\n        [5, 5, 5],\n        [5, 5, 5],\n        [5, 5, 5]\n    ], 5) == [(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)]\n\ndef test_empty_input():\n    assert get_row([], 1) == []\n    assert get_row([[]], 1) == []\n    assert get_row([[], []], 1) == []\n\ndef test_no_occurrences():\n    assert get_row([\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ], 10) == []\n\ndef test_single_element_lists():\n    assert get_row([[1], [2], [3]], 2) == [(1, 0)]\n    assert get_row([[1], [2], [3]], 3) == [(2, 0)]\n    assert get_row([[1], [2], [3]], 1) == [(0, 0)]\n\ndef test_multiple_rows_with_different_lengths():\n    assert get_row([\n        [1, 2],\n        [1, 3, 1],\n        [1]\n    ], 1) == [(0, 0), (1, 0), (1, 2), (2, 0)]\n\ndef test_negative_numbers():\n    assert get_row([\n        [-1, -2, -3],\n        [-1, -1, -1],\n        [-2, -3, -1]\n    ], -1) == [(0, 0), (1, 0), (1, 1), (1, 2), (2, 2)]\n\ndef test_large_numbers():\n    assert get_row([\n        [1000000, 2000000],\n        [3000000, 1000000],", "tdd_stage": "implementation"}
{"task_id": "HumanEval/88", "prompt": "\ndef sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n", "completion": "if any(isinstance(x, int) is False for x in array) or any(x < 0 for x in array):\n        raise ValueError(\"Array must contain non-negative integers only.\")\n    \n    first, last = array[0], array[-1]\n    sorted_array = sorted(array, reverse=(first + last) % 2 == 0)\n    return sorted_array", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:51:10.961965", "entry_point": "sort_array", "canonical_solution": "    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5]) == [5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([2, 1]) == [1, 2], \"Error\"\n    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], \"Error\"\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], \"Error\"\n\n", "generated_tests": "import pytest\n\ndef test_empty_array():\n    assert sort_array([]) == []\n\ndef test_single_element_array():\n    assert sort_array([5]) == [5]\n    assert sort_array([0]) == [0]\n\ndef test_even_sum_first_last_index():\n    assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([6, 2, 4, 3, 0, 1, 5]) == [6, 5, 4, 3, 2, 1, 0]\n    assert sort_array([10, 20, 30]) == [30, 20, 10]\n\ndef test_odd_sum_first_last_index():\n    assert sort_array([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert sort_array([5, 3, 1, 2]) == [1, 2, 3, 5]\n    assert sort_array([7, 2, 4, 6]) == [2, 4, 6, 7]\n\ndef test_large_numbers():\n    assert sort_array([1000000, 500000, 200000]) == [200000, 500000, 1000000]\n    assert sort_array([999999, 1000000, 1000001]) == [1000001, 1000000, 999999]\n\ndef test_negative_numbers():\n    with pytest.raises(ValueError):\n        sort_array([-1, 2, 3])\n\ndef test_non_integer_elements():\n    with pytest.raises(TypeError):\n        sort_array([1, 'two', 3])\n\ndef test_identical_elements():\n    assert sort_array([2, 2, 2, 2]) == [2, 2, 2, 2]\n\ndef test_large_array():\n    assert sort_array(list(range(1000))) == list(range(1000))\n    assert sort_array(list(range(1000, 0, -1))) == list(range(1000, 0, -1))", "tdd_stage": "implementation"}
{"task_id": "HumanEval/89", "prompt": "\ndef encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n", "completion": "if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n    \n    result = []\n    for char in s:\n        if char.isalpha():\n            shift = 4  # Shift by 2 * 2\n            if char.islower():\n                new_char = chr((ord(char) - ord('a') + shift) % 26 + ord('a'))\n            else:\n                new_char = chr((ord(char) - ord('A') + shift) % 26 + ord('A'))\n            result.append(new_char)\n        else:\n            result.append(char)\n    \n    return ''.join(result)", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:51:20.982997", "entry_point": "encrypt", "canonical_solution": "    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('hi') == 'lm', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('asdfghjkl') == 'ewhjklnop', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('gf') == 'kj', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('et') == 'ix', \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate('faewfawefaewg')=='jeiajeaijeiak', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('hellomyfriend')=='lippsqcjvmirh', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', \"This prints if this assert fails 3 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('a')=='e', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "generated_tests": "import pytest\n\ndef test_basic_functionality():\n    assert encrypt('hi') == 'lm'\n    assert encrypt('asdfghjkl') == 'ewhjklnop'\n    assert encrypt('gf') == 'kj'\n    assert encrypt('et') == 'ix'\n\ndef test_empty_string():\n    assert encrypt('') == ''\n\ndef test_non_alpha_characters():\n    assert encrypt('hello!') == 'jgnnq!'\n    assert encrypt('1234') == '1234'\n    assert encrypt('abc!@#') == 'efg!@#'\n\ndef test_uppercase_letters():\n    assert encrypt('HI') == 'LM'\n    assert encrypt('A') == 'E'\n    assert encrypt('Z') == 'D'\n\ndef test_mixed_case():\n    assert encrypt('HelloWorld') == 'JgnnqYqtnf'\n\ndef test_full_alphabet():\n    assert encrypt('abcdefghijklmnopqrstuvwxyz') == 'cdefghijklmnopqrstuvwxyzab'\n\ndef test_long_string():\n    assert encrypt('thequickbrownfoxjumpsoverthelazydog') == 'vjgugmeqtkpvtqzrwqzqvugvjgpcf'\n\ndef test_invalid_input():\n    with pytest.raises(TypeError):\n        encrypt(None)\n    with pytest.raises(TypeError):\n        encrypt(123)", "tdd_stage": "implementation"}
{"task_id": "HumanEval/90", "prompt": "\ndef next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n", "completion": "if not lst or len(set(lst)) < 2:\n        return None\n    unique_sorted = sorted(set(lst))\n    return unique_sorted[1]", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:51:27.948163", "entry_point": "next_smallest", "canonical_solution": "    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4, 5]) == 2\n    assert candidate([5, 1, 4, 3, 2]) == 2\n    assert candidate([]) == None\n    assert candidate([1, 1]) == None\n    assert candidate([1,1,1,1,0]) == 1\n    assert candidate([1, 0**0]) == None\n    assert candidate([-35, 34, 12, -45]) == -35\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n", "generated_tests": "import pytest\n\ndef test_basic_functionality():\n    assert next_smallest([1, 2, 3, 4, 5]) == 2\n    assert next_smallest([5, 1, 4, 3, 2]) == 2\n    assert next_smallest([10, 20, 30, 40]) == 20\n\ndef test_edge_cases():\n    assert next_smallest([]) == None\n    assert next_smallest([1, 1]) == None\n    assert next_smallest([2]) == None\n    assert next_smallest([1, 2, 2, 3]) == 2\n    assert next_smallest([3, 3, 3]) == None\n\ndef test_negative_numbers():\n    assert next_smallest([-1, -2, -3, -4]) == -2\n    assert next_smallest([-1, -1, -2]) == -1\n    assert next_smallest([-5, -5, -3, -4]) == -4\n\ndef test_mixed_numbers():\n    assert next_smallest([-1, 0, 1]) == 0\n    assert next_smallest([0, 1, 2, -1]) == 0\n    assert next_smallest([1, -1, 2, -2]) == -1\n\ndef test_large_numbers():\n    assert next_smallest([1000000, 999999, 1000001]) == 999999\n    assert next_smallest([1000000, 1000000, 1000000]) == None\n\ndef test_non_integer_inputs():\n    with pytest.raises(TypeError):\n        next_smallest([1, 'a', 2])\n    with pytest.raises(TypeError):\n        next_smallest([None, 1, 2])", "tdd_stage": "implementation"}
{"task_id": "HumanEval/91", "prompt": "\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n", "completion": "return sum(1 for sentence in re.split(r'[.!?]', S) if sentence.strip().lower().startswith('i '))", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:51:41.875774", "entry_point": "is_bored", "canonical_solution": "    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Hello world\") == 0, \"Test 1\"\n    assert candidate(\"Is the sky blue?\") == 0, \"Test 2\"\n    assert candidate(\"I love It !\") == 1, \"Test 3\"\n    assert candidate(\"bIt\") == 0, \"Test 4\"\n    assert candidate(\"I feel good today. I will be productive. will kill It\") == 2, \"Test 5\"\n    assert candidate(\"You and I are going for a walk\") == 0, \"Test 6\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "generated_tests": "import pytest\n\ndef test_no_sentences():\n    assert is_bored(\"\") == 0\n\ndef test_no_boredom_sentences():\n    assert is_bored(\"Hello world. How are you?\") == 0\n    assert is_bored(\"The sky is blue! The sun is shining.\") == 0\n\ndef test_single_boredom_sentence():\n    assert is_bored(\"I am bored.\") == 1\n    assert is_bored(\"I love programming! Let's code.\") == 1\n    assert is_bored(\"What a day! I can't believe it.\") == 1\n\ndef test_multiple_boredom_sentences():\n    assert is_bored(\"I am bored. I want to go home.\") == 2\n    assert is_bored(\"I love this! I enjoy that! I am happy.\") == 3\n\ndef test_sentences_with_various_delimiters():\n    assert is_bored(\"I am bored? Yes, I am!\") == 2\n    assert is_bored(\"I am here. Are you there? I hope so!\") == 2\n\ndef test_sentences_with_extra_spaces():\n    assert is_bored(\"I am bored.   I want to go home.  \") == 2\n    assert is_bored(\"   I am happy!  I am sad. \") == 1\n\ndef test_sentences_with_no_initial_space():\n    assert is_bored(\"I am bored. I want to go home.\") == 2\n    assert is_bored(\"I am happy!I am sad.\") == 1\n\ndef test_edge_case_with_only_boredom():\n    assert is_bored(\"I.\") == 1\n    assert is_bored(\"I?\") == 1\n    assert is_bored(\"I!\") == 1\n\ndef test_edge_case_with_non_boredom():\n    assert is_bored(\"A.\") == 0\n    assert is_bored(\"Hello?\") == 0\n    assert is_bored(\"Goodbye!\") == 0\n\ndef test_edge_case_with_mixed_case():\n    assert is_bored(\"i am bored. I am happy.\") == 1\n    assert is_bored(\"I am bored. i am sad.\") == 1\n\ndef test_edge_case_with_special_characters():\n    assert is_bored(\"I am bored! @#$%^&*()\") == 1\n    assert is_bored(\"Hello! I am here. #$%^&*\") == 1\n\ndef test_edge_case_with_numbers():\n    assert is_bored(\"I have 2 cats. They are cute!\") == 1\n    assert is_bored(\"There are 3 dogs. I love them!\") == 1", "tdd_stage": "implementation"}
{"task_id": "HumanEval/92", "prompt": "\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n", "completion": "if all(isinstance(i, int) for i in (x, y, z)):\n        return x == y + z or y == x + z or z == x + y\n    return False", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:51:46.772214", "entry_point": "any_int", "canonical_solution": "    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 3, 1)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(2.5, 2, 3)==False, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(1.5, 5, 3.5)==False, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate(2, 6, 2)==False, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(4, 2, 2)==True, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate(2.2, 2.2, 2.2)==False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate(-4, 6, 2)==True, \"This prints if this assert fails 7 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2,1,1)==True, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate(3,4,7)==True, \"This prints if this assert fails 9 (also good for debugging!)\"\n    assert candidate(3.0,4,7)==False, \"This prints if this assert fails 10 (also good for debugging!)\"\n\n", "generated_tests": "import pytest\n\ndef test_basic_functionality():\n    assert any_int(5, 2, 7) == True\n    assert any_int(3, 2, 2) == False\n    assert any_int(3, -2, 1) == True\n    assert any_int(0, 0, 0) == True\n    assert any_int(1, 1, 2) == True\n    assert any_int(10, 5, 5) == True\n\ndef test_negative_numbers():\n    assert any_int(-1, -1, -2) == True\n    assert any_int(-3, -2, -1) == False\n    assert any_int(-5, 5, 0) == True\n\ndef test_edge_cases():\n    assert any_int(0, 1, 1) == True\n    assert any_int(1, 0, 1) == True\n    assert any_int(1, 1, 0) == True\n    assert any_int(1, 2, 3) == True\n    assert any_int(1, 2, 4) == False\n\ndef test_invalid_inputs():\n    assert any_int(3.6, -2.2, 2) == False\n    assert any_int(\"3\", 2, 1) == False\n    assert any_int(None, 2, 1) == False\n    assert any_int([], {}, ()) == False\n    assert any_int(1, 2, None) == False\n\ndef test_large_numbers():\n    assert any_int(1000000, 999999, 1) == True\n    assert any_int(1000000, 1000000, 2000000) == True\n    assert any_int(1000000, 1000000, 2000001) == False", "tdd_stage": "implementation"}
{"task_id": "HumanEval/93", "prompt": "\ndef encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n", "completion": "if not isinstance(message, str):\n        raise TypeError(\"Input must be a string\")\n    \n    vowels = 'aeiouAEIOU'\n    encoded_message = []\n    \n    for char in message:\n        if char.isalpha():\n            if char in vowels:\n                if char.islower():\n                    encoded_message.append(chr(ord(char) + 2).upper())\n                else:\n                    encoded_message.append(chr(ord(char) + 2).lower())\n            else:\n                encoded_message.append(char.swapcase())\n        else:\n            encoded_message.append(char)\n    \n    return ''.join(encoded_message)", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:51:59.047959", "entry_point": "encode", "canonical_solution": "    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('TEST') == 'tgst', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('Mudasir') == 'mWDCSKR', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('YES') == 'ygs', \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"I DoNt KnOw WhAt tO WrItE\") == 'k dQnT kNqW wHcT Tq wRkTg', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "generated_tests": "import pytest\n\ndef test_basic_functionality():\n    assert encode('test') == 'TGST'\n    assert encode('This is a message') == 'tHKS KS C MGSSCGG'\n    assert encode('Hello World') == 'hNMMW YNQJ'\n    assert encode('Python') == 'pYTHON'\n    assert encode('AEIOU') == 'cGQMW'\n\ndef test_case_swapping():\n    assert encode('aBcDeFg') == 'CBdEfGh'\n    assert encode('XYZ') == 'xyz'\n    assert encode('lowerUPPER') == 'LOWERuppr'\n\ndef test_vowel_replacement():\n    assert encode('a e i o u') == 'C G K Q W'\n    assert encode('A E I O U') == 'c G K Q W'\n    assert encode('Vowels are important') == 'vOWELS CRG KMPQRTANT'\n\ndef test_empty_input():\n    assert encode('') == ''\n\ndef test_single_character_inputs():\n    assert encode('a') == 'C'\n    assert encode('A') == 'c'\n    assert encode('b') == 'B'\n    assert encode('B') == 'b'\n\ndef test_non_alpha_characters():\n    with pytest.raises(TypeError):\n        encode(123)\n    with pytest.raises(TypeError):\n        encode(None)\n    assert encode('Hello, World!') == 'hNMMW, YNQJ!'\n    assert encode('Goodbye 2023!') == 'gOOdBYE 2023!'\n\ndef test_long_input():\n    long_message = 'This is a very long message to test the encoding function with a lot of vowels.'\n    expected_output = 'tHKS KS C vEry lONG MGSSCGG tO tGST tHE ENCqDING FUnCTIOn WItH C lOt OF vOWELS.'\n    assert encode(long_message) == expected_output", "tdd_stage": "implementation"}
{"task_id": "HumanEval/94", "prompt": "\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n", "completion": "if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list\")\n    \n    largest_prime = -1\n    \n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    for num in lst:\n        if isinstance(num, int) and is_prime(num):\n            largest_prime = max(largest_prime, num)\n    \n    if largest_prime == -1:\n        return 0\n    \n    return sum(int(digit) for digit in str(largest_prime))", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:52:17.099390", "entry_point": "skjkasdkd", "canonical_solution": "    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, \"This prints if this assert fails 3 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, \"This prints if this assert fails 4 (also good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,81,12,3,1,21]) == 3, \"This prints if this assert fails 5 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,8,1,2,1,7]) == 7, \"This prints if this assert fails 6 (also good for debugging!)\"\n\n    assert candidate([8191]) == 19, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate([8191, 123456, 127, 7]) == 19, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate([127, 97, 8192]) == 10, \"This prints if this assert fails 9 (also good for debugging!)\"\n", "generated_tests": "import pytest\n\ndef test_largest_prime_sum_of_digits():\n    assert skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10\n    assert skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25\n    assert skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13\n    assert skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11\n    assert skjkasdkd([0, 81, 12, 3, 1, 21]) == 3\n    assert skjkasdkd([0, 8, 1, 2, 1, 7]) == 7\n\ndef test_edge_cases():\n    assert skjkasdkd([]) == 0  # No primes in an empty list\n    assert skjkasdkd([1, 4, 6, 8, 9]) == 0  # No primes in the list\n    assert skjkasdkd([-1, -2, -3, -4]) == 0  # Negative numbers, no primes\n    assert skjkasdkd([2]) == 2  # Single prime number\n    assert skjkasdkd([4, 6, 8, 10, 12]) == 0  # All non-prime numbers\n    assert skjkasdkd([13, 17, 19, 23]) == 5  # All primes, largest is 23, sum of digits is 5\n\ndef test_invalid_inputs():\n    with pytest.raises(TypeError):\n        skjkasdkd(None)  # None input\n    with pytest.raises(TypeError):\n        skjkasdkd(\"string\")  # String input\n    with pytest.raises(TypeError):\n        skjkasdkd([1, 2, \"three\"])  # Mixed types in list", "tdd_stage": "implementation"}
{"task_id": "HumanEval/95", "prompt": "\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n", "completion": "if not dict:\n        return False\n    \n    all_lower = all(isinstance(k, str) and k.islower() for k in dict.keys())\n    all_upper = all(isinstance(k, str) and k.isupper() for k in dict.keys())\n    \n    return all_lower or all_upper", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:52:23.756223", "entry_point": "check_dict_case", "canonical_solution": "    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate({\"p\":\"pineapple\", \"b\":\"banana\"}) == True, \"First test error: \" + str(candidate({\"p\":\"pineapple\", \"b\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}) == False, \"Second test error: \" + str(candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}) == False, \"Third test error: \" + str(candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}))\n    assert candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) == False, \"Fourth test error: \" + str(candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\n    assert candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) == True, \"Fifth test error: \" + str(candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))      \n    assert candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }) == True, \"Fourth test error: \" + str(candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate({}) == False, \"1st edge test error: \" + str(candidate({}))\n\n", "generated_tests": "import pytest\n\ndef test_all_lowercase_keys():\n    assert check_dict_case({\"a\": \"apple\", \"b\": \"banana\"}) == True\n\ndef test_all_uppercase_keys():\n    assert check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"}) == True\n\ndef test_mixed_case_keys():\n    assert check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"}) == False\n\ndef test_mixed_case_with_non_string_key():\n    assert check_dict_case({\"a\": \"apple\", 8: \"banana\"}) == False\n\ndef test_mixed_case_with_non_string_key_and_lowercase():\n    assert check_dict_case({\"name\": \"John\", 1: \"value\"}) == False\n\ndef test_mixed_case_with_non_string_key_and_uppercase():\n    assert check_dict_case({\"NAME\": \"JOHN\", 1: \"value\"}) == False\n\ndef test_empty_dictionary():\n    assert check_dict_case({}) == False\n\ndef test_single_lowercase_key():\n    assert check_dict_case({\"a\": \"apple\"}) == True\n\ndef test_single_uppercase_key():\n    assert check_dict_case({\"A\": \"apple\"}) == True\n\ndef test_single_numeric_key():\n    assert check_dict_case({1: \"apple\"}) == False\n\ndef test_all_keys_mixed_case():\n    assert check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}) == False\n\ndef test_all_keys_with_special_characters():\n    assert check_dict_case({\"@home\": \"value\", \"#office\": \"value\"}) == False\n\ndef test_all_keys_with_numbers_in_string():\n    assert check_dict_case({\"key1\": \"value\", \"key2\": \"value\"}) == True\n\ndef test_all_keys_with_numbers_in_string_uppercase():\n    assert check_dict_case({\"KEY1\": \"value\", \"KEY2\": \"value\"}) == True", "tdd_stage": "implementation"}
{"task_id": "HumanEval/96", "prompt": "\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n", "completion": "if not isinstance(n, int):\n        raise TypeError(\"Input must be a non-negative integer.\")\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    primes = []\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    \n    return primes", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:52:35.207404", "entry_point": "count_up_to", "canonical_solution": "    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n", "test": "def check(candidate):\n\n    assert candidate(5) == [2,3]\n    assert candidate(6) == [2,3,5]\n    assert candidate(7) == [2,3,5]\n    assert candidate(10) == [2,3,5,7]\n    assert candidate(0) == []\n    assert candidate(22) == [2,3,5,7,11,13,17,19]\n    assert candidate(1) == []\n    assert candidate(18) == [2,3,5,7,11,13,17]\n    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]\n    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n", "generated_tests": "import pytest\n\ndef test_count_up_to_with_small_prime_numbers():\n    assert count_up_to(5) == [2, 3]\n    assert count_up_to(11) == [2, 3, 5, 7]\n\ndef test_count_up_to_with_no_primes():\n    assert count_up_to(0) == []\n    assert count_up_to(1) == []\n\ndef test_count_up_to_with_larger_numbers():\n    assert count_up_to(20) == [2, 3, 5, 7, 11, 13, 17, 19]\n    assert count_up_to(18) == [2, 3, 5, 7, 11, 13, 17]\n\ndef test_count_up_to_with_non_prime_input():\n    assert count_up_to(4) == [2, 3]\n    assert count_up_to(6) == [2, 3, 5]\n\ndef test_count_up_to_with_negative_input():\n    with pytest.raises(ValueError):\n        count_up_to(-1)\n\ndef test_count_up_to_with_large_input():\n    assert count_up_to(100) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\ndef test_count_up_to_with_non_integer_input():\n    with pytest.raises(TypeError):\n        count_up_to(\"ten\")\n    with pytest.raises(TypeError):\n        count_up_to(10.5)", "tdd_stage": "implementation"}
{"task_id": "HumanEval/97", "prompt": "\ndef multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n", "completion": "return (abs(a) % 10) * (abs(b) % 10)", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:52:41.200747", "entry_point": "multiply", "canonical_solution": "    return abs(a % 10) * abs(b % 10)\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(148, 412) == 16, \"First test error: \" + str(candidate(148, 412))                    \n    assert candidate(19, 28) == 72, \"Second test error: \" + str(candidate(19, 28))           \n    assert candidate(2020, 1851) == 0, \"Third test error: \" + str(candidate(2020, 1851))\n    assert candidate(14,-15) == 20, \"Fourth test error: \" + str(candidate(14,-15))      \n    assert candidate(76, 67) == 42, \"Fifth test error: \" + str(candidate(76, 67))      \n    assert candidate(17, 27) == 49, \"Sixth test error: \" + str(candidate(17, 27))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0, 1) == 0, \"1st edge test error: \" + str(candidate(0, 1))\n    assert candidate(0, 0) == 0, \"2nd edge test error: \" + str(candidate(0, 0))\n\n", "generated_tests": "import pytest\n\ndef test_multiply_positive_integers():\n    assert multiply(148, 412) == 16\n    assert multiply(19, 28) == 72\n    assert multiply(2020, 1851) == 0\n    assert multiply(14, 15) == 20\n\ndef test_multiply_negative_integers():\n    assert multiply(-14, -15) == 20\n    assert multiply(-19, 28) == 72\n    assert multiply(19, -28) == 72\n    assert multiply(-2020, 1851) == 0\n\ndef test_multiply_mixed_sign_integers():\n    assert multiply(14, -15) == 20\n    assert multiply(-14, 15) == 20\n    assert multiply(-19, -28) == 72\n\ndef test_multiply_zero():\n    assert multiply(0, 0) == 0\n    assert multiply(0, 28) == 0\n    assert multiply(19, 0) == 0\n    assert multiply(0, -15) == 0\n\ndef test_multiply_large_integers():\n    assert multiply(123456789, 987654321) == 81\n    assert multiply(1000000000, 2000000000) == 0\n\ndef test_multiply_single_digit_integers():\n    assert multiply(3, 7) == 21\n    assert multiply(5, 5) == 25\n    assert multiply(9, 0) == 0\n\ndef test_multiply_edge_cases():\n    assert multiply(1, 1) == 1\n    assert multiply(-1, -1) == 1\n    assert multiply(-1, 1) == 1\n    assert multiply(1, -1) == 1", "tdd_stage": "implementation"}
{"task_id": "HumanEval/98", "prompt": "\ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n", "completion": "if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n    \n    count = 0\n    vowels = {'A', 'E', 'I', 'O', 'U'}\n    \n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n            \n    return count", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:52:47.014658", "entry_point": "count_upper", "canonical_solution": "    count = 0\n    for i in range(0,len(s),2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('aBCdEf')  == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B')  == 0\n    assert candidate('U')  == 1\n    assert candidate('') == 0\n    assert candidate('EEEE') == 2\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n", "generated_tests": "import pytest\n\ndef test_count_upper_basic_functionality():\n    assert count_upper('aBCdEf') == 1\n    assert count_upper('abcdefg') == 0\n    assert count_upper('dBBE') == 0\n    assert count_upper('AEIOU') == 3\n    assert count_upper('aEIoU') == 1\n\ndef test_count_upper_with_mixed_cases():\n    assert count_upper('AbEcIdOfU') == 4\n    assert count_upper('aBcDeFgHi') == 0\n    assert count_upper('AeIoUe') == 2\n\ndef test_count_upper_edge_cases():\n    assert count_upper('') == 0\n    assert count_upper('A') == 1\n    assert count_upper('a') == 0\n    assert count_upper('A1E2I3O4U') == 4\n    assert count_upper('1234567890') == 0\n\ndef test_count_upper_invalid_inputs():\n    with pytest.raises(TypeError):\n        count_upper(None)\n    with pytest.raises(TypeError):\n        count_upper(123)\n    with pytest.raises(TypeError):\n        count_upper(['A', 'E', 'I'])", "tdd_stage": "implementation"}
{"task_id": "HumanEval/99", "prompt": "\ndef closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n", "completion": "try:\n        num = float(value)\n    except (ValueError, TypeError):\n        raise ValueError(\"Invalid input\")\n\n    if num > 0:\n        return int(num + 0.5)\n    elif num < 0:\n        return int(num - 0.5)\n    else:\n        return 0", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:52:57.547965", "entry_point": "closest_integer", "canonical_solution": "    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"10\") == 10, \"Test 1\"\n    assert candidate(\"14.5\") == 15, \"Test 2\"\n    assert candidate(\"-15.5\") == -16, \"Test 3\"\n    assert candidate(\"15.3\") == 15, \"Test 3\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"0\") == 0, \"Test 0\"\n\n", "generated_tests": "import pytest\n\ndef test_closest_integer_positive_integer():\n    assert closest_integer(\"10\") == 10\n    assert closest_integer(\"15\") == 15\n\ndef test_closest_integer_positive_float():\n    assert closest_integer(\"15.3\") == 15\n    assert closest_integer(\"14.5\") == 15\n    assert closest_integer(\"14.6\") == 15\n    assert closest_integer(\"14.499\") == 14\n\ndef test_closest_integer_negative_integer():\n    assert closest_integer(\"-10\") == -10\n    assert closest_integer(\"-15\") == -15\n\ndef test_closest_integer_negative_float():\n    assert closest_integer(\"-15.3\") == -15\n    assert closest_integer(\"-14.5\") == -15\n    assert closest_integer(\"-14.6\") == -15\n    assert closest_integer(\"-14.499\") == -14\n\ndef test_closest_integer_zero():\n    assert closest_integer(\"0\") == 0\n    assert closest_integer(\"0.5\") == 1\n    assert closest_integer(\"-0.5\") == -1\n\ndef test_closest_integer_edge_cases():\n    assert closest_integer(\"14.5000\") == 15\n    assert closest_integer(\"-14.5000\") == -15\n    assert closest_integer(\"0.0\") == 0\n    assert closest_integer(\"0.000\") == 0\n\ndef test_closest_integer_invalid_input():\n    with pytest.raises(ValueError):\n        closest_integer(\"abc\")\n    with pytest.raises(ValueError):\n        closest_integer(\"\")\n    with pytest.raises(ValueError):\n        closest_integer(\"1.2.3\")\n    with pytest.raises(ValueError):\n        closest_integer(\"NaN\")\n    with pytest.raises(ValueError):\n        closest_integer(\"Infinity\")", "tdd_stage": "implementation"}
{"task_id": "HumanEval/100", "prompt": "\ndef make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n", "completion": "if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    stones = []\n    for i in range(n):\n        if i == 0:\n            stones.append(n)\n        else:\n            if n % 2 == 0:\n                stones.append(stones[-1] + 2)\n            else:\n                stones.append(stones[-1] + 2)\n    return stones", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:53:09.427380", "entry_point": "make_a_pile", "canonical_solution": "    return [n + 2*i for i in range(n)]\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3) == [3, 5, 7], \"Test 3\"\n    assert candidate(4) == [4,6,8,10], \"Test 4\"\n    assert candidate(5) == [5, 7, 9, 11, 13]\n    assert candidate(6) == [6, 8, 10, 12, 14, 16]\n    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "generated_tests": "import pytest\n\ndef test_basic_functionality_odd_input():\n    assert make_a_pile(3) == [3, 5, 7]\n\ndef test_basic_functionality_even_input():\n    assert make_a_pile(4) == [4, 6, 8, 10]\n\ndef test_single_level_odd():\n    assert make_a_pile(1) == [1]\n\ndef test_single_level_even():\n    assert make_a_pile(2) == [2, 4]\n\ndef test_large_odd_input():\n    assert make_a_pile(11) == [11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31]\n\ndef test_large_even_input():\n    assert make_a_pile(12) == [12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34]\n\ndef test_edge_case_zero_input():\n    with pytest.raises(ValueError):\n        make_a_pile(0)\n\ndef test_edge_case_negative_input():\n    with pytest.raises(ValueError):\n        make_a_pile(-5)\n\ndef test_non_integer_input():\n    with pytest.raises(TypeError):\n        make_a_pile(\"three\")\n\ndef test_float_input():\n    with pytest.raises(TypeError):\n        make_a_pile(3.5)\n\ndef test_large_input():\n    result = make_a_pile(1000)\n    assert len(result) == 1000\n    assert result[0] == 1000\n    assert result[-1] == 1000 + 2 * (1000 - 1)", "tdd_stage": "implementation"}
{"task_id": "HumanEval/101", "prompt": "\ndef words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n", "completion": "if not isinstance(s, str):\n        return []\n    return [word.strip() for word in re.split(r'[,\\s]+', s) if word.strip()]", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:53:17.106483", "entry_point": "words_string", "canonical_solution": "    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    assert candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    assert candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n    assert candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"\") == []\n    assert candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n\n", "generated_tests": "import pytest\n\ndef test_basic_functionality():\n    assert words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    assert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    assert words_string(\"apple, banana, cherry\") == [\"apple\", \"banana\", \"cherry\"]\n    assert words_string(\"hello world\") == [\"hello\", \"world\"]\n\ndef test_edge_cases():\n    assert words_string(\"\") == []\n    assert words_string(\"   \") == []\n    assert words_string(\", , ,\") == []\n    assert words_string(\"word1, word2, word3\") == [\"word1\", \"word2\", \"word3\"]\n    assert words_string(\"word1 word2,word3\") == [\"word1\", \"word2\", \"word3\"]\n\ndef test_invalid_inputs():\n    assert words_string(None) == []\n    assert words_string(123) == []\n    assert words_string([]) == []\n    assert words_string({}) == []\n\ndef test_multiple_delimiters():\n    assert words_string(\"word1,,word2  word3\") == [\"word1\", \"word2\", \"word3\"]\n    assert words_string(\"word1  ,  word2\") == [\"word1\", \"word2\"]\n    assert words_string(\"word1,word2, word3,\") == [\"word1\", \"word2\", \"word3\"]\n\ndef test_leading_and_trailing_spaces():\n    assert words_string(\"   word1, word2   \") == [\"word1\", \"word2\"]\n    assert words_string(\"   ,word1, , word2,   \") == [\"word1\", \"word2\"]", "tdd_stage": "implementation"}
{"task_id": "HumanEval/102", "prompt": "\ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n", "completion": "if x > y:\n        return -1\n    if x % 2 != 0:\n        x += 1\n    if y % 2 != 0:\n        y -= 1\n    if x > y:\n        return -1\n    return y", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:53:23.968587", "entry_point": "choose_num", "canonical_solution": "    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\n", "generated_tests": "import pytest\n\ndef test_choose_num_with_even_range():\n    assert choose_num(12, 15) == 14\n\ndef test_choose_num_with_odd_range():\n    assert choose_num(13, 15) == 14\n\ndef test_choose_num_with_identical_even_numbers():\n    assert choose_num(10, 10) == 10\n\ndef test_choose_num_with_identical_odd_numbers():\n    assert choose_num(11, 11) == -1\n\ndef test_choose_num_with_reverse_order():\n    assert choose_num(13, 12) == -1\n\ndef test_choose_num_with_large_even_range():\n    assert choose_num(100, 200) == 200\n\ndef test_choose_num_with_large_odd_range():\n    assert choose_num(101, 199) == 198\n\ndef test_choose_num_with_no_even_numbers():\n    assert choose_num(1, 1) == -1\n\ndef test_choose_num_with_negative_numbers():\n    assert choose_num(-5, -1) == -1\n\ndef test_choose_num_with_zero_in_range():\n    assert choose_num(0, 5) == 4\n\ndef test_choose_num_with_empty_range():\n    assert choose_num(5, 5) == -1\n\ndef test_choose_num_with_large_numbers():\n    assert choose_num(1000000, 1000005) == 1000004\n\ndef test_choose_num_with_minimal_positive_range():\n    assert choose_num(1, 2) == 2\n\ndef test_choose_num_with_minimal_even_range():\n    assert choose_num(2, 2) == 2\n\ndef test_choose_num_with_minimal_odd_range():\n    assert choose_num(1, 1) == -1", "tdd_stage": "implementation"}
{"task_id": "HumanEval/103", "prompt": "\ndef rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n", "completion": "if n <= 0 or m <= 0 or n > m:\n        return -1\n    total_sum = sum(range(n, m + 1))\n    count = m - n + 1\n    average = round(total_sum / count)\n    return bin(average)", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:53:35.604040", "entry_point": "rounded_avg", "canonical_solution": "    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 5) == \"0b11\"\n    assert candidate(7, 13) == \"0b1010\"\n    assert candidate(964,977) == \"0b1111001010\"\n    assert candidate(996,997) == \"0b1111100100\"\n    assert candidate(560,851) == \"0b1011000010\"\n    assert candidate(185,546) == \"0b101101110\"\n    assert candidate(362,496) == \"0b110101101\"\n    assert candidate(350,902) == \"0b1001110010\"\n    assert candidate(197,233) == \"0b11010111\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == \"0b101\"\n\n", "generated_tests": "import pytest\n\ndef test_rounded_avg_basic_functionality():\n    assert rounded_avg(1, 5) == \"0b11\"  # Average of 1, 2, 3, 4, 5 is 3\n    assert rounded_avg(10, 20) == \"0b1111\"  # Average of 10 to 20 is 15\n    assert rounded_avg(20, 33) == \"0b11010\"  # Average of 20 to 33 is 26\n\ndef test_rounded_avg_invalid_inputs():\n    assert rounded_avg(7, 5) == -1  # n > m case\n    assert rounded_avg(0, 5) == -1  # n is not positive\n    assert rounded_avg(1, -5) == -1  # m is not positive\n    assert rounded_avg(-1, -5) == -1  # both n and m are not positive\n\ndef test_rounded_avg_edge_cases():\n    assert rounded_avg(1, 1) == \"0b1\"  # Average of a single number\n    assert rounded_avg(2, 2) == \"0b10\"  # Average of a single number\n    assert rounded_avg(1, 2) == \"0b1\"  # Average of 1 and 2 is 1.5, rounded to 2\n    assert rounded_avg(1, 3) == \"0b10\"  # Average of 1, 2, 3 is 2\n    assert rounded_avg(1, 4) == \"0b10\"  # Average of 1, 2, 3, 4 is 2.5, rounded to 3\n\ndef test_rounded_avg_large_numbers():\n    assert rounded_avg(1000, 10000) == \"0b11001011000\"  # Average of large range\n    assert rounded_avg(100000, 1000000) == \"0b11110101100010000000\"  # Average of large range", "tdd_stage": "implementation"}
{"task_id": "HumanEval/104", "prompt": "\ndef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n", "completion": "return sorted(num for num in x if all(int(digit) % 2 != 0 for digit in str(num)))", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:53:43.731502", "entry_point": "unique_digits", "canonical_solution": "    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n", "generated_tests": "import pytest\n\ndef test_basic_functionality():\n    assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]\n    assert unique_digits([152, 323, 1422, 10]) == []\n    assert unique_digits([7, 9, 11, 13]) == [7, 9, 11, 13]\n    assert unique_digits([1, 3, 5, 7, 9]) == [1, 3, 5, 7, 9]\n    assert unique_digits([2, 4, 6, 8]) == []\n\ndef test_edge_cases():\n    assert unique_digits([]) == []\n    assert unique_digits([0]) == []\n    assert unique_digits([1]) == [1]\n    assert unique_digits([11]) == [11]\n    assert unique_digits([10]) == []\n    assert unique_digits([123456789]) == [13579]\n    assert unique_digits([135, 246, 789]) == [135, 789]\n\ndef test_negative_cases():\n    assert unique_digits([20, 42, 64]) == []\n    assert unique_digits([12, 34, 56]) == []\n    assert unique_digits([100, 200, 300]) == []\n    assert unique_digits([8, 18, 28]) == []\n\ndef test_large_numbers():\n    assert unique_digits([13579, 24680, 99999]) == [13579, 99999]\n    assert unique_digits([1234567890, 9876543210]) == []\n    assert unique_digits([1111111111, 2222222222]) == [1111111111]\n\ndef test_single_digit_numbers():\n    assert unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 3, 5, 7, 9]\n    assert unique_digits([0, 2, 4, 6, 8]) == []", "tdd_stage": "implementation"}
{"task_id": "HumanEval/105", "prompt": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n", "completion": "valid_numbers = [num for num in arr if 1 <= num <= 9]\n    valid_numbers.sort()\n    valid_numbers.reverse()\n    number_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    return [number_names[num - 1] for num in valid_numbers]", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:53:52.436442", "entry_point": "by_length", "canonical_solution": "    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([1, -1 , 55]) == ['One'], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n    assert candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n\n", "generated_tests": "import pytest\n\ndef test_basic_functionality():\n    assert by_length([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    assert by_length([5, 3, 9, 1]) == [\"Nine\", \"Five\", \"Three\", \"One\"]\n    assert by_length([7, 2, 4, 6]) == [\"Seven\", \"Six\", \"Four\", \"Two\"]\n\ndef test_empty_input():\n    assert by_length([]) == []\n\ndef test_ignore_invalid_numbers():\n    assert by_length([1, -1, 55]) == [\"One\"]\n    assert by_length([10, 11, 12]) == []\n    assert by_length([-5, -3, 0]) == []\n\ndef test_single_digit_inputs():\n    assert by_length([1]) == [\"One\"]\n    assert by_length([9]) == [\"Nine\"]\n    assert by_length([5]) == [\"Five\"]\n    assert by_length([0]) == []\n\ndef test_multiple_same_digits():\n    assert by_length([3, 3, 3]) == [\"Three\", \"Three\", \"Three\"]\n    assert by_length([1, 1, 1, 1]) == [\"One\", \"One\", \"One\", \"One\"]\n\ndef test_mixed_valid_and_invalid_numbers():\n    assert by_length([1, 2, 3, -1, 10, 5]) == [\"Three\", \"Two\", \"One\", \"Five\"]\n    assert by_length([4, 5, 6, 7, 8, 9, 10, -2]) == [\"Nine\", \"Eight\", \"Seven\", \"Six\", \"Five\", \"Four\"]\n\ndef test_large_numbers():\n    assert by_length([100, 200, 300, 1, 2, 3]) == [\"Three\", \"Two\", \"One\"]\n    assert by_length([1, 2, 3, 1000, 2000]) == [\"Three\", \"Two\", \"One\"]\n\ndef test_all_invalid_numbers():\n    assert by_length([-10, -5, 0, 10, 20]) == []", "tdd_stage": "implementation"}
{"task_id": "HumanEval/106", "prompt": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n", "completion": "if not isinstance(n, int) or n < 0:\n        raise TypeError(\"Input must be a non-negative integer.\")\n    \n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            factorial = 1\n            for j in range(1, i + 1):\n                factorial *= j\n            result.append(factorial)\n        else:\n            result.append(sum(range(1, i + 1)))\n    \n    return result", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:54:05.685777", "entry_point": "f", "canonical_solution": "    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n", "test": "def check(candidate):\n\n    assert candidate(5) == [1, 2, 6, 24, 15]\n    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n    assert candidate(1) == [1]\n    assert candidate(3) == [1, 2, 6]\n", "generated_tests": "import pytest\n\ndef test_basic_functionality():\n    assert f(1) == [1]  # 1 is odd, sum from 1 to 1 is 1\n    assert f(2) == [1, 2]  # 1 is odd, sum from 1 to 1 is 1; 2 is even, factorial of 2 is 2\n    assert f(3) == [1, 2, 6]  # 1 is odd, sum is 1; 2 is even, factorial is 2; 3 is odd, sum is 6\n    assert f(4) == [1, 2, 6, 24]  # 1, 2, 6, 24 (factorial of 4)\n    assert f(5) == [1, 2, 6, 24, 15]  # 1, 2, 6, 24, 15 (sum from 1 to 5)\n\ndef test_edge_cases():\n    assert f(0) == []  # Edge case: n = 0 should return an empty list\n    assert f(1) == [1]  # Edge case: n = 1 should return [1]\n    assert f(2) == [1, 2]  # Edge case: n = 2 should return [1, 2]\n    assert f(3) == [1, 2, 6]  # Edge case: n = 3 should return [1, 2, 6]\n    assert f(10) == [1, 2, 6, 24, 15, 720, 21, 40320, 36, 3628800]  # Larger n\n\ndef test_invalid_inputs():\n    with pytest.raises(TypeError):\n        f(\"string\")  # Invalid input: string\n    with pytest.raises(TypeError):\n        f(-1)  # Invalid input: negative number\n    with pytest.raises(TypeError):\n        f(3.5)  # Invalid input: float", "tdd_stage": "implementation"}
{"task_id": "HumanEval/107", "prompt": "\ndef even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n", "completion": "if not isinstance(n, int) or n < 1:\n        raise TypeError(\"Input must be a positive integer.\")\n    \n    even_count = 0\n    odd_count = 0\n    \n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:  # Check if i is a palindrome\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    \n    return (even_count, odd_count)", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:54:12.712999", "entry_point": "even_odd_palindrome", "canonical_solution": "    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(123) == (8, 13)\n    assert candidate(12) == (4, 6)\n    assert candidate(3) == (1, 2)\n    assert candidate(63) == (6, 8)\n    assert candidate(25) == (5, 6)\n    assert candidate(19) == (4, 6)\n    assert candidate(9) == (4, 5), \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == (0, 1), \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "generated_tests": "import pytest\n\ndef test_basic_functionality():\n    assert even_odd_palindrome(3) == (1, 2)\n    assert even_odd_palindrome(12) == (4, 6)\n    assert even_odd_palindrome(1) == (0, 1)\n    assert even_odd_palindrome(10) == (4, 5)\n    assert even_odd_palindrome(20) == (9, 10)\n\ndef test_edge_cases():\n    assert even_odd_palindrome(0) == (0, 0)  # Edge case: n = 0 (not a valid input but testing behavior)\n    assert even_odd_palindrome(1) == (0, 1)  # Edge case: smallest valid input\n    assert even_odd_palindrome(2) == (1, 1)  # Edge case: n = 2\n    assert even_odd_palindrome(100) == (45, 54)  # Larger input\n    assert even_odd_palindrome(999) == (450, 549)  # Near upper limit\n\ndef test_invalid_inputs():\n    with pytest.raises(TypeError):\n        even_odd_palindrome(\"string\")  # Invalid input type\n    with pytest.raises(TypeError):\n        even_odd_palindrome(-5)  # Negative input\n    with pytest.raises(TypeError):\n        even_odd_palindrome(3.5)  # Non-integer input", "tdd_stage": "implementation"}
{"task_id": "HumanEval/108", "prompt": "\ndef count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n", "completion": "if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n    \n    count = 0\n    for num in arr:\n        if not isinstance(num, int):\n            raise TypeError(\"All elements in the list must be integers\")\n        digit_sum = sum(int(d) if num >= 0 else -int(d) for d in str(abs(num)))\n        if digit_sum > 0:\n            count += 1\n    return count", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:54:24.392315", "entry_point": "count_nums", "canonical_solution": "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0\n    assert candidate([-1, -2, 0]) == 0\n    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6\n    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5\n    assert candidate([1, 100, 98, -7, 1, -1]) == 4\n    assert candidate([12, 23, 34, -45, -56, 0]) == 5\n    assert candidate([-0, 1**0]) == 1\n    assert candidate([1]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "generated_tests": "import pytest\n\ndef test_empty_array():\n    assert count_nums([]) == 0\n\ndef test_single_positive_digit():\n    assert count_nums([1]) == 1\n\ndef test_single_negative_digit():\n    assert count_nums([-1]) == 0\n\ndef test_single_zero():\n    assert count_nums([0]) == 0\n\ndef test_multiple_positive_numbers():\n    assert count_nums([1, 2, 3, 4, 5]) == 5\n\ndef test_multiple_negative_numbers():\n    assert count_nums([-1, -2, -3]) == 0\n\ndef test_mixed_positive_and_negative_numbers():\n    assert count_nums([-1, 1, -2, 2, -3, 3]) == 3\n\ndef test_numbers_with_zero_sum_of_digits():\n    assert count_nums([-11, 11]) == 0\n\ndef test_numbers_with_positive_sum_of_digits():\n    assert count_nums([-123, 123, 12, -12]) == 3\n\ndef test_large_numbers():\n    assert count_nums([1000000, -1000000, 999999]) == 2\n\ndef test_negative_and_positive_with_zero():\n    assert count_nums([-10, 0, 10]) == 1\n\ndef test_invalid_input():\n    with pytest.raises(TypeError):\n        count_nums(\"not a list\")\n    with pytest.raises(TypeError):\n        count_nums([1, 2, \"three\"])\n\ndef test_edge_case_with_large_negative_numbers():\n    assert count_nums([-999999999, -1, -1000000000]) == 0\n\ndef test_edge_case_with_large_positive_numbers():\n    assert count_nums([999999999, 1, 1000000000]) == 3", "tdd_stage": "implementation"}
{"task_id": "HumanEval/109", "prompt": "\ndef move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n", "completion": "if not arr:\n        return True\n    \n    n = len(arr)\n    count = 0\n    \n    for i in range(n):\n        if arr[i] > arr[(i + 1) % n]:\n            count += 1\n            \n    return count <= 1", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:54:36.981295", "entry_point": "move_one_ball", "canonical_solution": "    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 4, 5, 1, 2])==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([3, 5, 10, 1, 2])==True\n    assert candidate([4, 3, 1, 2])==False\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([3, 5, 4, 1, 2])==False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([])==True\n", "generated_tests": "import pytest\n\ndef test_basic_functionality():\n    assert move_one_ball([3, 4, 5, 1, 2]) == True\n    assert move_one_ball([1, 2, 3, 4, 5]) == True\n    assert move_one_ball([5, 1, 2, 3, 4]) == True\n    assert move_one_ball([2, 3, 4, 5, 1]) == True\n    assert move_one_ball([1]) == True\n    assert move_one_ball([2, 1]) == False\n\ndef test_negative_cases():\n    assert move_one_ball([3, 5, 4, 1, 2]) == False\n    assert move_one_ball([4, 3, 2, 1]) == False\n    assert move_one_ball([5, 3, 4, 1, 2]) == False\n    assert move_one_ball([2, 3, 1, 4, 5]) == False\n\ndef test_edge_cases():\n    assert move_one_ball([]) == True\n    assert move_one_ball([1, 2]) == True\n    assert move_one_ball([2, 1]) == False\n    assert move_one_ball([1, 3, 2]) == False\n    assert move_one_ball([1, 2, 3, 4, 5, 6]) == True\n    assert move_one_ball([6, 5, 4, 3, 2, 1]) == False\n    assert move_one_ball([1, 2, 3, 5, 4]) == False", "tdd_stage": "implementation"}
{"task_id": "HumanEval/110", "prompt": "\ndef exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n", "completion": "if not lst1 or not lst2:\n        raise ValueError(\"Input lists must be non-empty.\")\n    \n    odd_count = sum(1 for x in lst1 if x % 2 != 0)\n    even_count_in_lst2 = sum(1 for x in lst2 if x % 2 == 0)\n    \n    if odd_count <= even_count_in_lst2:\n        return \"YES\"\n    return \"NO\"", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:54:48.755300", "entry_point": "exchange", "canonical_solution": "    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"\n            \n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\" \n    assert candidate([5, 7, 3], [2, 6, 4]) == \"YES\"\n    assert candidate([5, 7, 3], [2, 6, 3]) == \"NO\" \n    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([100, 200], [200, 200]) == \"YES\"\n\n", "generated_tests": "import pytest\n\ndef test_exchange_with_all_even_numbers_in_lst1():\n    assert exchange([2, 4, 6], [1, 3, 5]) == \"YES\"\n\ndef test_exchange_with_all_odd_numbers_in_lst1():\n    assert exchange([1, 3, 5], [2, 4, 6]) == \"YES\"\n\ndef test_exchange_with_mixed_numbers_in_lst1_and_even_numbers_in_lst2():\n    assert exchange([1, 2, 3], [4, 6, 8]) == \"YES\"\n\ndef test_exchange_with_mixed_numbers_in_lst1_and_odd_numbers_in_lst2():\n    assert exchange([1, 2, 3], [1, 3, 5]) == \"NO\"\n\ndef test_exchange_with_no_possible_exchanges():\n    assert exchange([1, 3, 5], [1, 3, 5]) == \"NO\"\n\ndef test_exchange_with_empty_lst1():\n    with pytest.raises(ValueError):\n        exchange([], [1, 2, 3])\n\ndef test_exchange_with_empty_lst2():\n    with pytest.raises(ValueError):\n        exchange([1, 2, 3], [])\n\ndef test_exchange_with_both_empty_lists():\n    with pytest.raises(ValueError):\n        exchange([], [])\n\ndef test_exchange_with_large_numbers():\n    assert exchange([999999999, 1000000000], [2, 4, 6]) == \"YES\"\n\ndef test_exchange_with_large_lists():\n    assert exchange([1] * 1000 + [2] * 1000, [3] * 1000 + [4] * 1000) == \"YES\"\n\ndef test_exchange_with_single_element_lists():\n    assert exchange([1], [2]) == \"YES\"\n    assert exchange([1], [1]) == \"NO\"\n    assert exchange([2], [1]) == \"YES\"", "tdd_stage": "implementation"}
{"task_id": "HumanEval/111", "prompt": "\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n", "completion": "from collections import Counter\n\n    if not test.strip():\n        return {}\n\n    letters = test.split()\n    count = Counter(letters)\n    max_count = max(count.values())\n    return {k: v for k, v in count.items() if v == max_count}", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:54:58.282366", "entry_point": "histogram", "canonical_solution": "    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('a b b a') == {'a':2,'b': 2}, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('a b c a b') == {'a': 2, 'b': 2}, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate('b b b b a') == {'b': 4}, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 6 (good for debugging!)\"\n    \n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == {}, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate('a') == {'a': 1}, \"This prints if this assert fails 8 (also good for debugging!)\"\n\n", "generated_tests": "import pytest\n\ndef test_single_character():\n    assert histogram('a') == {'a': 1}\n\ndef test_multiple_characters_same_count():\n    assert histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\ndef test_multiple_characters_different_count():\n    assert histogram('a b b a') == {'a': 2, 'b': 2}\n\ndef test_character_with_max_repetition():\n    assert histogram('b b b b a') == {'b': 4}\n\ndef test_empty_string():\n    assert histogram('') == {}\n\ndef test_leading_trailing_spaces():\n    assert histogram('  a b c  ') == {'a': 1, 'b': 1, 'c': 1}\n\ndef test_multiple_spaces_between_characters():\n    assert histogram('a  b   c') == {'a': 1, 'b': 1, 'c': 1}\n\ndef test_all_characters_same_count():\n    assert histogram('x y z x y z') == {'x': 2, 'y': 2, 'z': 2}\n\ndef test_case_with_special_characters():\n    assert histogram('a b c d e f g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1, 'g': 1}\n\ndef test_case_with_numbers_in_string():\n    assert histogram('a 1 b 2 a') == {'a': 2}\n\ndef test_case_with_non_lowercase_letters():\n    assert histogram('A B C') == {'A': 1, 'B': 1, 'C': 1}\n\ndef test_case_with_repeated_characters():\n    assert histogram('a a a b b') == {'a': 3, 'b': 2}\n\ndef test_case_with_only_one_repeated_character():\n    assert histogram('c c c c') == {'c': 4}\n\ndef test_case_with_no_letters():\n    assert histogram(' ') == {}\n\ndef test_case_with_non_space_characters():\n    assert histogram('abc') == {'a': 1, 'b': 1, 'c': 1}", "tdd_stage": "implementation"}
{"task_id": "HumanEval/112", "prompt": "\ndef reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n", "completion": "if not isinstance(s, str) or not isinstance(c, str):\n        raise TypeError(\"Both arguments must be strings.\")\n    \n    result = ''.join(char for char in s if char not in c)\n    is_palindrome = result == result[::-1]\n    return result, is_palindrome", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:55:07.257304", "entry_point": "reverse_delete", "canonical_solution": "    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n", "test": "def check(candidate):\n\n    assert candidate(\"abcde\",\"ae\") == ('bcd',False)\n    assert candidate(\"abcdef\", \"b\") == ('acdef',False)\n    assert candidate(\"abcdedcba\",\"ab\") == ('cdedc',True)\n    assert candidate(\"dwik\",\"w\") == ('dik',False)\n    assert candidate(\"a\",\"a\") == ('',True)\n    assert candidate(\"abcdedcba\",\"\") == ('abcdedcba',True)\n    assert candidate(\"abcdedcba\",\"v\") == ('abcdedcba',True)\n    assert candidate(\"vabba\",\"v\") == ('abba',True)\n    assert candidate(\"mamma\", \"mia\") == (\"\", True)\n", "generated_tests": "import pytest\n\ndef test_basic_functionality():\n    assert reverse_delete(\"abcde\", \"ae\") == ('bcd', False)\n    assert reverse_delete(\"abcdef\", \"b\") == ('acdef', False)\n    assert reverse_delete(\"abcdedcba\", \"ab\") == ('cdedc', True)\n\ndef test_empty_string_s():\n    assert reverse_delete(\"\", \"ae\") == ('', True)\n\ndef test_empty_string_c():\n    assert reverse_delete(\"abcde\", \"\") == ('abcde', False)\n\ndef test_both_empty_strings():\n    assert reverse_delete(\"\", \"\") == ('', True)\n\ndef test_all_characters_removed():\n    assert reverse_delete(\"abcde\", \"abcde\") == ('', True)\n\ndef test_no_characters_removed():\n    assert reverse_delete(\"abcde\", \"xyz\") == ('abcde', False)\n\ndef test_palindrome_with_removal():\n    assert reverse_delete(\"racecar\", \"r\") == ('aceca', True)\n\ndef test_case_sensitivity():\n    assert reverse_delete(\"Abcde\", \"a\") == ('Bcde', False)\n    assert reverse_delete(\"Abcde\", \"A\") == ('bcde', False)\n\ndef test_special_characters():\n    assert reverse_delete(\"a!b@c#d$e%\", \"!@#$\") == ('abcde', False)\n\ndef test_numeric_characters():\n    assert reverse_delete(\"12345\", \"24\") == ('135', False)\n\ndef test_long_string():\n    long_string = \"a\" * 1000 + \"b\" * 1000 + \"c\" * 1000\n    assert reverse_delete(long_string, \"abc\") == ('', True)\n\ndef test_non_string_input():\n    with pytest.raises(TypeError):\n        reverse_delete(123, \"a\")\n    with pytest.raises(TypeError):\n        reverse_delete(\"abc\", 123)", "tdd_stage": "implementation"}
{"task_id": "HumanEval/113", "prompt": "\ndef odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n", "completion": "if not all(isinstance(x, str) for x in lst):\n        raise TypeError(\"All elements in the list must be strings.\")\n    \n    result = []\n    for s in lst:\n        odd_count = sum(1 for char in s if char.isdigit() and int(char) % 2 != 0)\n        result.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\")\n    \n    return result", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:55:18.734738", "entry_point": "odd_count", "canonical_solution": "    res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"], \"Test 1\"\n    assert candidate(['3',\"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"], \"Test 2\"\n    assert candidate(['271', '137', '314']) == [\n        'the number of odd elements 2n the str2ng 2 of the 2nput.',\n        'the number of odd elements 3n the str3ng 3 of the 3nput.',\n        'the number of odd elements 2n the str2ng 2 of the 2nput.'\n    ]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "generated_tests": "import pytest\n\ndef test_single_string_with_odd_digits():\n    assert odd_count(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n\ndef test_multiple_strings_with_varied_odd_digits():\n    assert odd_count(['3', \"11111111\"]) == [\n        \"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n        \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\n    ]\n\ndef test_no_odd_digits():\n    assert odd_count(['2468', '0', '222']) == [\n        \"the number of odd elements 0n the str0ng 0 of the 0nput.\",\n        \"the number of odd elements 0n the str0ng 0 of the 0nput.\",\n        \"the number of odd elements 0n the str0ng 0 of the 0nput.\"\n    ]\n\ndef test_empty_string():\n    assert odd_count(['']) == [\"the number of odd elements 0n the str0ng 0 of the 0nput.\"]\n\ndef test_mixed_strings():\n    assert odd_count(['13579', '24680', '1234567890']) == [\n        \"the number of odd elements 5n the str5ng 5 of the 5nput.\",\n        \"the number of odd elements 0n the str0ng 0 of the 0nput.\",\n        \"the number of odd elements 5n the str5ng 5 of the 5nput.\"\n    ]\n\ndef test_large_numbers():\n    assert odd_count(['9999999999', '0000000000']) == [\n        \"the number of odd elements 10n the str10ng 10 of the 10nput.\",\n        \"the number of odd elements 0n the str0ng 0 of the 0nput.\"\n    ]\n\ndef test_invalid_input():\n    with pytest.raises(TypeError):\n        odd_count(['123', 456, '789'])\n\ndef test_non_digit_strings():\n    assert odd_count(['abc', 'def']) == [\n        \"the number of odd elements 0n the str0ng 0 of the 0nput.\",\n        \"the number of odd elements 0n the str0ng 0 of the 0nput.\"\n    ]\n\ndef test_large_input():\n    input_data = ['1' * 1000]  # 1000 odd digits\n    expected_output = [\"the number of odd elements 1000n the str1000ng 1000 of the 1000nput.\"]\n    assert odd_count(input_data) == expected_output", "tdd_stage": "implementation"}
{"task_id": "HumanEval/114", "prompt": "\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n", "completion": "if not isinstance(nums, list) or any(not isinstance(x, int) for x in nums):\n        raise TypeError(\"Input must be a list of integers.\")\n    if not nums:\n        raise ValueError(\"Input list cannot be empty.\")\n    \n    min_sum = float('inf')\n    current_sum = 0\n    \n    for num in nums:\n        current_sum += num\n        if current_sum < min_sum:\n            min_sum = current_sum\n        if current_sum > 0:\n            current_sum = 0\n            \n    return min_sum", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:55:31.833747", "entry_point": "minSubArraySum", "canonical_solution": "    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1, 0, -2]) == -33\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-10]) == -10, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n", "generated_tests": "import pytest\n\ndef test_minimum_subarray_sum_with_positive_numbers():\n    assert minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\ndef test_minimum_subarray_sum_with_negative_numbers():\n    assert minSubArraySum([-1, -2, -3]) == -6\n\ndef test_minimum_subarray_sum_with_mixed_numbers():\n    assert minSubArraySum([3, -1, -2, 4, -3]) == -6\n\ndef test_minimum_subarray_sum_with_single_element_positive():\n    assert minSubArraySum([5]) == 5\n\ndef test_minimum_subarray_sum_with_single_element_negative():\n    assert minSubArraySum([-5]) == -5\n\ndef test_minimum_subarray_sum_with_all_positive_numbers():\n    assert minSubArraySum([1, 2, 3, 4]) == 1\n\ndef test_minimum_subarray_sum_with_all_negative_numbers():\n    assert minSubArraySum([-1, -2, -3, -4]) == -10\n\ndef test_minimum_subarray_sum_with_zeroes():\n    assert minSubArraySum([0, 0, 0]) == 0\n\ndef test_minimum_subarray_sum_with_empty_list():\n    with pytest.raises(ValueError):\n        minSubArraySum([])\n\ndef test_minimum_subarray_sum_with_large_numbers():\n    assert minSubArraySum([1000, -2000, 3000, -4000]) == -4000\n\ndef test_minimum_subarray_sum_with_repeated_elements():\n    assert minSubArraySum([1, 1, -3, 1, 1]) == -3\n\ndef test_minimum_subarray_sum_with_large_input():\n    assert minSubArraySum(list(range(-1000, 1000))) == -1000\n\ndef test_minimum_subarray_sum_with_invalid_input():\n    with pytest.raises(TypeError):\n        minSubArraySum(\"invalid input\")", "tdd_stage": "implementation"}
{"task_id": "HumanEval/115", "prompt": "\ndef max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n", "completion": "if grid is None or capacity <= 0:\n        raise ValueError(\"Invalid input: grid cannot be None and capacity must be greater than 0.\")\n    \n    total_water = 0\n    for row in grid:\n        total_water += sum(row)\n    \n    if total_water == 0:\n        return 0\n    \n    return math.ceil(total_water / capacity)", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:55:41.453647", "entry_point": "max_fill", "canonical_solution": "    return sum([math.ceil(sum(arr)/capacity) for arr in grid])\n", "test": "def check(candidate):\n\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, \"Error\"\n    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, \"Error\"\n    assert candidate([[0,0,0], [0,0,0]], 5) == 0, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, \"Error\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, \"Error\"\n\n", "generated_tests": "import pytest\n\ndef test_basic_functionality():\n    assert max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6\n    assert max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5\n    assert max_fill([[0,0,0], [0,0,0]], 5) == 0\n\ndef test_edge_cases():\n    assert max_fill([], 1) == 0  # Empty grid\n    assert max_fill([[0]], 1) == 0  # Single cell with no water\n    assert max_fill([[1]], 1) == 1  # Single cell with water\n    assert max_fill([[1]], 10) == 0  # Single cell with water and large capacity\n    assert max_fill([[1, 1, 1], [1, 1, 1]], 1) == 6  # All cells filled, capacity 1\n    assert max_fill([[1, 1, 1], [1, 1, 1]], 3) == 4  # All cells filled, capacity 3\n\ndef test_large_inputs():\n    grid = [[1] * 100] * 100  # 100x100 grid filled with water\n    assert max_fill(grid, 1) == 10000  # Each unit of water requires a separate lowering\n\ndef test_capacity_edge_cases():\n    assert max_fill([[1, 1, 1], [1, 1, 1]], 10) == 0  # Large capacity, no need to lower\n    assert max_fill([[1, 1, 1], [1, 1, 1]], 5) == 2  # Some water can be taken at once\n\ndef test_invalid_inputs():\n    with pytest.raises(TypeError):\n        max_fill(None, 1)  # Invalid grid\n    with pytest.raises(ValueError):\n        max_fill([[1, 1], [1, 1]], 0)  # Invalid capacity", "tdd_stage": "implementation"}
{"task_id": "HumanEval/116", "prompt": "\ndef sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n", "completion": "if arr is None or not isinstance(arr, list) or any(not isinstance(x, int) for x in arr):\n        raise TypeError(\"Input must be a list of non-negative integers.\")\n    \n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:55:49.542246", "entry_point": "sort_array", "canonical_solution": "    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "generated_tests": "import pytest\n\ndef test_basic_functionality():\n    assert sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    assert sort_array([0, 1, 2, 3, 4]) == [0, 1, 2, 3, 4]\n    assert sort_array([3, 1, 2]) == [1, 2, 3]\n    assert sort_array([8, 4, 2, 1]) == [1, 2, 4, 8]\n    assert sort_array([15, 7, 3, 1]) == [1, 3, 7, 15]\n\ndef test_edge_cases():\n    assert sort_array([]) == []\n    assert sort_array([0]) == [0]\n    assert sort_array([1]) == [1]\n    assert sort_array([2]) == [2]\n    assert sort_array([1, 1, 1]) == [1, 1, 1]\n    assert sort_array([2, 2, 2]) == [2, 2, 2]\n    assert sort_array([0, 0, 0]) == [0, 0, 0]\n\ndef test_negative_numbers():\n    assert sort_array([-1, -2, -3, -4]) == [-1, -2, -3, -4]\n    assert sort_array([-5, -3, -1, -2]) == [-1, -2, -3, -5]\n\ndef test_large_numbers():\n    assert sort_array([1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1]) == [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024]\n    assert sort_array([1023, 511, 255, 127]) == [127, 255, 511, 1023]\n\ndef test_invalid_inputs():\n    with pytest.raises(TypeError):\n        sort_array(None)\n    with pytest.raises(TypeError):\n        sort_array(\"string\")\n    with pytest.raises(TypeError):\n        sort_array([1, 2, \"three\"])", "tdd_stage": "implementation"}
{"task_id": "HumanEval/117", "prompt": "\ndef select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n", "completion": "if not s:\n        return []\n    \n    vowels = set(\"aeiouAEIOU\")\n    words = s.split()\n    result = []\n    \n    for word in words:\n        consonant_count = sum(1 for char in word if char.isalpha() and char not in vowels)\n        if consonant_count == n:\n            result.append(word)\n    \n    return result", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:56:02.851584", "entry_point": "select_words", "canonical_solution": "    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(candidate(\"Mary had a little lamb\", 4))      \n    assert candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(candidate(\"Mary had a little lamb\", 3))  \n    assert candidate(\"simple white space\", 2) == [], \"Third test error: \" + str(candidate(\"simple white space\", 2))      \n    assert candidate(\"Hello world\", 4) == [\"world\"], \"Fourth test error: \" + str(candidate(\"Hello world\", 4))  \n    assert candidate(\"Uncle sam\", 3) == [\"Uncle\"], \"Fifth test error: \" + str(candidate(\"Uncle sam\", 3))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"\", 4) == [], \"1st edge test error: \" + str(candidate(\"\", 4))\n    assert candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"], \"2nd edge test error: \" + str(candidate(\"a b c d e f\", 1))\n\n", "generated_tests": "import pytest\n\ndef test_select_words_basic_functionality():\n    assert select_words(\"Mary had a little lamb\", 4) == [\"little\"]\n    assert select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n    assert select_words(\"Hello world\", 4) == [\"world\"]\n    assert select_words(\"Uncle sam\", 3) == [\"Uncle\"]\n\ndef test_select_words_no_matching_words():\n    assert select_words(\"simple white space\", 2) == []\n    assert select_words(\"a e i o u\", 1) == []\n    assert select_words(\"abc def ghi\", 0) == []\n\ndef test_select_words_empty_string():\n    assert select_words(\"\", 0) == []\n    assert select_words(\"\", 1) == []\n\ndef test_select_words_edge_cases():\n    assert select_words(\"a\", 0) == []\n    assert select_words(\"b\", 1) == [\"b\"]\n    assert select_words(\"c\", 1) == [\"c\"]\n    assert select_words(\"aeiou\", 0) == []\n    assert select_words(\"bcdfghjklmnpqrstvwxyz\", 21) == [\"bcdfghjklmnpqrstvwxyz\"]\n\ndef test_select_words_case_insensitivity():\n    assert select_words(\"Mary had a Little Lamb\", 4) == [\"Little\"]\n    assert select_words(\"HELLO world\", 4) == [\"world\"]\n    assert select_words(\"Uncle SAM\", 3) == [\"Uncle\"]\n\ndef test_select_words_multiple_spaces():\n    assert select_words(\"   Mary   had   a   little   lamb   \", 4) == [\"little\"]\n    assert select_words(\"   \", 0) == []", "tdd_stage": "implementation"}
{"task_id": "HumanEval/118", "prompt": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n", "completion": "vowels = \"aeiouAEIOU\"\n    n = len(word)\n    \n    for i in range(n - 2, 0, -1):\n        if word[i] in vowels and word[i - 1].isalpha() and word[i + 1].isalpha() and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    \n    return \"\"", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:56:10.124996", "entry_point": "get_closest_vowel", "canonical_solution": "    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"yogurt\") == \"u\"\n    assert candidate(\"full\") == \"u\"\n    assert candidate(\"easy\") == \"\"\n    assert candidate(\"eAsy\") == \"\"\n    assert candidate(\"ali\") == \"\"\n    assert candidate(\"bad\") == \"a\"\n    assert candidate(\"most\") == \"o\"\n    assert candidate(\"ab\") == \"\"\n    assert candidate(\"ba\") == \"\"\n    assert candidate(\"quick\") == \"\"\n    assert candidate(\"anime\") == \"i\"\n    assert candidate(\"Asia\") == \"\"\n    assert candidate(\"Above\") == \"o\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n", "generated_tests": "import pytest\n\ndef test_closest_vowel_between_consonants():\n    assert get_closest_vowel(\"yogurt\") == \"u\"\n    assert get_closest_vowel(\"FULL\") == \"U\"\n    assert get_closest_vowel(\"banana\") == \"a\"\n    assert get_closest_vowel(\"caterpillar\") == \"e\"\n\ndef test_no_vowel_between_consonants():\n    assert get_closest_vowel(\"quick\") == \"\"\n    assert get_closest_vowel(\"sky\") == \"\"\n    assert get_closest_vowel(\"bcd\") == \"\"\n    assert get_closest_vowel(\"xyz\") == \"\"\n\ndef test_vowel_at_edges():\n    assert get_closest_vowel(\"ab\") == \"\"\n    assert get_closest_vowel(\"a\") == \"\"\n    assert get_closest_vowel(\"e\") == \"\"\n    assert get_closest_vowel(\"ou\") == \"\"\n\ndef test_multiple_vowels():\n    assert get_closest_vowel(\"abracadabra\") == \"a\"\n    assert get_closest_vowel(\"education\") == \"i\"\n\ndef test_case_sensitivity():\n    assert get_closest_vowel(\"aBcDeF\") == \"e\"\n    assert get_closest_vowel(\"AbC\") == \"A\"\n    assert get_closest_vowel(\"aBc\") == \"\"\n\ndef test_empty_string():\n    assert get_closest_vowel(\"\") == \"\"\n\ndef test_single_character():\n    assert get_closest_vowel(\"a\") == \"\"\n    assert get_closest_vowel(\"b\") == \"\"\n\ndef test_two_characters():\n    assert get_closest_vowel(\"ab\") == \"\"\n    assert get_closest_vowel(\"ba\") == \"\"\n\ndef test_long_string_with_no_vowels():\n    assert get_closest_vowel(\"bcdfghjklmnpqrstvwxyz\") == \"\"\n\ndef test_long_string_with_vowels():\n    assert get_closest_vowel(\"abcdefghijklmno\") == \"e\"\n    assert get_closest_vowel(\"zyxwvutsrqponmlkjihgfedcba\") == \"\"", "tdd_stage": "implementation"}
{"task_id": "HumanEval/119", "prompt": "\ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n", "completion": "open1 = lst[0].count('(')\n    close1 = lst[0].count(')')\n    open2 = lst[1].count('(')\n    close2 = lst[1].count(')')\n    \n    # Check both concatenation orders\n    # Order 1: lst[0] + lst[1]\n    if open1 + open2 == close1 + close2:\n        if open1 <= close2 and open2 <= close1:\n            return 'Yes'\n    \n    # Order 2: lst[1] + lst[0]\n    if open2 + open1 == close2 + close1:\n        if open2 <= close1 and open1 <= close2:\n            return 'Yes'\n    \n    return 'No'", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:56:22.275967", "entry_point": "match_parens", "canonical_solution": "    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['()(', ')']) == 'Yes'\n    assert candidate([')', ')']) == 'No'\n    assert candidate(['(()(())', '())())']) == 'No'\n    assert candidate([')())', '(()()(']) == 'Yes'\n    assert candidate(['(())))', '(()())((']) == 'Yes'\n    assert candidate(['()', '())']) == 'No'\n    assert candidate(['(()(', '()))()']) == 'Yes'\n    assert candidate(['((((', '((())']) == 'No'\n    assert candidate([')(()', '(()(']) == 'No'\n    assert candidate([')(', ')(']) == 'No'\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(['(', ')']) == 'Yes'\n    assert candidate([')', '(']) == 'Yes' \n\n", "generated_tests": "import pytest\n\ndef test_basic_functionality():\n    assert match_parens(['()(', ')']) == 'Yes'\n    assert match_parens([')', ')']) == 'No'\n    assert match_parens(['((', '))']) == 'No'\n    assert match_parens(['()', '()']) == 'Yes'\n    assert match_parens(['(())', '()']) == 'Yes'\n    assert match_parens(['())(', '()']) == 'No'\n    assert match_parens(['((', '(((']) == 'No'\n    assert match_parens(['))', '))']) == 'No'\n    assert match_parens(['((', '))']) == 'Yes'\n\ndef test_edge_cases():\n    assert match_parens(['', '']) == 'Yes'\n    assert match_parens(['(', ')']) == 'Yes'\n    assert match_parens(['(', '']) == 'No'\n    assert match_parens(['', ')']) == 'No'\n    assert match_parens(['(', '(', ')', ')']) == 'Yes'\n    assert match_parens(['(', '(', '(', ')', ')', ')']) == 'Yes'\n    assert match_parens(['(', '(', '(', ')', ')', ')', ')']) == 'No'\n    assert match_parens(['(', '(', '(', '(', ')', ')', ')', ')', ')']) == 'No'\n    assert match_parens(['(', '(', ')', ')', '(', ')']) == 'Yes'\n    assert match_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', ')', ')', ')', ')', ')', ')', ')', ')', ')']) == 'No'", "tdd_stage": "implementation"}
{"task_id": "HumanEval/120", "prompt": "\ndef maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n", "completion": "if arr is None or not isinstance(arr, list) or any(not isinstance(x, int) for x in arr):\n        raise TypeError(\"Invalid input: arr must be a list of integers.\")\n    if k is None or not isinstance(k, int) or k < 0 or k > len(arr):\n        raise ValueError(\"Invalid input: k must be a non-negative integer less than or equal to the length of arr.\")\n    \n    return sorted(sorted(arr)[-k:])", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:56:30.594712", "entry_point": "maximum", "canonical_solution": "    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\n", "generated_tests": "import pytest\n\ndef test_basic_functionality():\n    assert maximum([-3, -4, 5], 3) == [-4, -3, 5]\n    assert maximum([4, -4, 4], 2) == [4, 4]\n    assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert maximum([1, 2, 3, 4, 5], 3) == [3, 4, 5]\n    assert maximum([5, 5, 5, 5], 2) == [5, 5]\n\ndef test_edge_cases():\n    assert maximum([], 0) == []\n    assert maximum([1], 1) == [1]\n    assert maximum([1], 0) == []\n    assert maximum([-1, -2, -3], 2) == [-2, -1]\n    assert maximum([1000, -1000, 0], 1) == [1000]\n    assert maximum([0, 0, 0], 3) == [0, 0, 0]\n\ndef test_invalid_inputs():\n    with pytest.raises(TypeError):\n        maximum(None, 1)\n    with pytest.raises(TypeError):\n        maximum([1, 2, 3], None)\n    with pytest.raises(ValueError):\n        maximum([1, 2, 3], -1)\n    with pytest.raises(ValueError):\n        maximum([1, 2, 3], 4)\n\ndef test_large_inputs():\n    large_array = list(range(1000))\n    assert maximum(large_array, 10) == [990, 991, 992, 993, 994, 995, 996, 997, 998, 999]\n    assert maximum(large_array, 1000) == list(range(1000))\n    assert maximum(large_array, 1) == [999]", "tdd_stage": "implementation"}
{"task_id": "HumanEval/121", "prompt": "\ndef solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n", "completion": "return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:56:42.854861", "entry_point": "solution", "canonical_solution": "    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, 8, 7, 1])    == 12\n    assert candidate([3, 3, 3, 3, 3]) == 9\n    assert candidate([30, 13, 24, 321]) == 0\n    assert candidate([5, 9]) == 5\n    assert candidate([2, 4, 8]) == 0\n    assert candidate([30, 13, 23, 32]) == 23\n    assert candidate([3, 13, 2, 9]) == 3\n\n    # Check some edge cases that are easy to work out by hand.\n\n", "generated_tests": "import pytest\n\ndef test_sum_of_odd_elements_in_even_positions():\n    assert solution([5, 8, 7, 1]) == 12  # 5 (index 0) + 7 (index 2) = 12\n    assert solution([3, 3, 3, 3, 3]) == 9  # 3 (index 0) + 3 (index 2) + 3 (index 4) = 9\n    assert solution([30, 13, 24, 321]) == 0  # No odd numbers in even positions\n    assert solution([1, 2, 3, 4, 5]) == 6  # 1 (index 0) + 5 (index 4) = 6\n    assert solution([1]) == 1  # Single element, odd and in even position\n    assert solution([2]) == 0  # Single element, even and in even position\n    assert solution([1, 2, 3]) == 1  # 1 (index 0) = 1\n    assert solution([1, 2, 3, 4, 5, 6]) == 6  # 1 (index 0) + 5 (index 4) = 6\n\ndef test_edge_cases():\n    assert solution([]) == 0  # Edge case: empty list\n    assert solution([0]) == 0  # Edge case: single even number\n    assert solution([1]) == 1  # Edge case: single odd number\n    assert solution([2, 4, 6, 8]) == 0  # All even numbers\n    assert solution([1, 3, 5, 7]) == 8  # All odd numbers\n    assert solution([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 16  # Mixed odd/even\n    assert solution([1, 0, 1, 0, 1, 0]) == 2  # Odd numbers in even positions\n    assert solution([1, 1, 1, 1, 1, 1]) == 3  # All odd numbers in even positions\n    assert solution([2, 3, 4, 5, 6, 7]) == 0  # No odd numbers in even positions", "tdd_stage": "implementation"}
{"task_id": "HumanEval/122", "prompt": "\ndef add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n", "completion": "if not arr or k < 1 or k > len(arr):\n        raise IndexError(\"Invalid input: array is empty or k is out of bounds.\")\n    \n    return sum(x for x in arr[:k] if 10 <= abs(x) < 100)", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:56:53.128210", "entry_point": "add_elements", "canonical_solution": "    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4\n    assert candidate([111,121,3,4000,5,6], 2) == 0\n    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125\n    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1], 1) == 1, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "generated_tests": "import pytest\n\ndef test_sum_of_two_digit_numbers():\n    assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24  # 21 + 3\n    assert add_elements([10, 20, 30, 40, 50], 5) == 150  # 10 + 20 + 30 + 40 + 50\n    assert add_elements([1, 2, 3, 4, 5], 3) == 6  # 1 + 2 + 3\n\ndef test_no_two_digit_numbers():\n    assert add_elements([111, 222, 333], 3) == 0  # No two-digit numbers\n    assert add_elements([1000, 2000, 3000], 2) == 0  # No two-digit numbers\n\ndef test_edge_case_with_k_equals_length_of_array():\n    assert add_elements([1, 2, 3, 4, 5], 5) == 15  # All elements are included\n    assert add_elements([10, 20, 30, 40, 50], 5) == 150  # All elements are included\n\ndef test_edge_case_with_k_equals_one():\n    assert add_elements([1], 1) == 1  # Single element, which is a one-digit number\n    assert add_elements([100], 1) == 0  # Single element, which is not a two-digit number\n\ndef test_mixed_numbers():\n    assert add_elements([1, 22, 333, 4, 5], 5) == 27  # 1 + 22 + 4 + 5\n    assert add_elements([10, 200, 30, 4000, 5], 4) == 45  # 10 + 30 + 5\n\ndef test_empty_array():\n    with pytest.raises(IndexError):\n        add_elements([], 1)  # Should raise an error due to empty array\n\ndef test_invalid_k():\n    with pytest.raises(IndexError):\n        add_elements([1, 2, 3], 0)  # k should be at least 1\n    with pytest.raises(IndexError):\n        add_elements([1, 2, 3], 4)  # k should not exceed the length of the array\n\ndef test_large_numbers():\n    assert add_elements([100, 200, 300, 400, 5], 5) == 5  # Only 5 is a valid two-digit number\n    assert add_elements([99, 100, 101, 102, 103], 5) == 99  # Only 99 is a valid two-digit number", "tdd_stage": "implementation"}
{"task_id": "HumanEval/123", "prompt": "\ndef get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n", "completion": "if n <= 0:\n        return []\n    \n    odd_numbers = set()\n    while n != 1:\n        if n % 2 == 1:\n            odd_numbers.add(n)\n            n = 3 * n + 1\n        else:\n            n //= 2\n    \n    odd_numbers.add(1)  # Include 1 in the set\n    return sorted(odd_numbers)", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:57:02.333040", "entry_point": "get_odd_collatz", "canonical_solution": "    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(14) == [1, 5, 7, 11, 13, 17]\n    assert candidate(5) == [1, 5]\n    assert candidate(12) == [1, 3, 5], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == [1], \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "generated_tests": "import pytest\n\ndef test_basic_functionality():\n    assert get_odd_collatz(5) == [1, 5]\n    assert get_odd_collatz(1) == [1]\n    assert get_odd_collatz(3) == [1, 3]\n    assert get_odd_collatz(7) == [1, 3, 7]\n    assert get_odd_collatz(10) == [1]\n\ndef test_even_numbers():\n    assert get_odd_collatz(2) == [1]\n    assert get_odd_collatz(4) == [1]\n    assert get_odd_collatz(6) == [1]\n    assert get_odd_collatz(8) == [1]\n    assert get_odd_collatz(12) == [1]\n\ndef test_large_numbers():\n    assert get_odd_collatz(15) == [1, 3, 5, 7, 15]\n    assert get_odd_collatz(27) == [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27]\n\ndef test_edge_cases():\n    assert get_odd_collatz(0) == []  # Invalid input, should handle gracefully\n    assert get_odd_collatz(-1) == []  # Invalid input, should handle gracefully\n    assert get_odd_collatz(-10) == []  # Invalid input, should handle gracefully\n\ndef test_single_odd_number():\n    assert get_odd_collatz(9) == [1, 3, 5, 9]\n\ndef test_sorted_output():\n    assert get_odd_collatz(11) == [1, 3, 5, 7, 11]\n    assert get_odd_collatz(13) == [1, 3, 5, 7, 9, 13]", "tdd_stage": "implementation"}
{"task_id": "HumanEval/124", "prompt": "\ndef valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n", "completion": "if not date:\n        return False\n    \n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n    \n    month_str, day_str, year_str = parts\n    if not (month_str.isdigit() and day_str.isdigit() and year_str.isdigit()):\n        return False\n    \n    month = int(month_str)\n    day = int(day_str)\n    year = int(year_str)\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if day < 1:\n        return False\n    \n    if month in {1, 3, 5, 7, 8, 10, 12}:\n        if day > 31:\n            return False\n    elif month in {4, 6, 9, 11}:\n        if day > 30:\n            return False\n    else:  # February\n        if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n            if day > 29:\n                return False\n        else:\n            if day > 28:\n                return False\n    \n    return True", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:57:17.808230", "entry_point": "valid_date", "canonical_solution": "    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('03-11-2000') == True\n\n    assert candidate('15-01-2012') == False\n\n    assert candidate('04-0-2040') == False\n\n    assert candidate('06-04-2020') == True\n\n    assert candidate('01-01-2007') == True\n\n    assert candidate('03-32-2011') == False\n\n    assert candidate('') == False\n\n    assert candidate('04-31-3000') == False\n\n    assert candidate('06-06-2005') == True\n\n    assert candidate('21-31-2000') == False\n\n    assert candidate('04-12-2003') == True\n\n    assert candidate('04122003') == False\n\n    assert candidate('20030412') == False\n\n    assert candidate('2003-04') == False\n\n    assert candidate('2003-04-12') == False\n\n    assert candidate('04-2003') == False\n", "generated_tests": "import pytest\n\ndef test_valid_date_correct_format():\n    assert valid_date('03-11-2000') == True\n    assert valid_date('06-04-2020') == True\n    assert valid_date('12-31-1999') == True\n\ndef test_valid_date_invalid_format():\n    assert valid_date('06/04/2020') == False\n    assert valid_date('04-31-2020') == False\n    assert valid_date('04-0-2040') == False\n    assert valid_date('04-31-2020') == False\n    assert valid_date('2020-04-06') == False\n\ndef test_valid_date_empty_string():\n    assert valid_date('') == False\n\ndef test_valid_date_invalid_month():\n    assert valid_date('00-10-2020') == False\n    assert valid_date('13-10-2020') == False\n\ndef test_valid_date_invalid_day():\n    assert valid_date('01-32-2020') == False\n    assert valid_date('04-31-2020') == False\n    assert valid_date('06-31-2020') == False\n    assert valid_date('09-31-2020') == False\n    assert valid_date('11-31-2020') == False\n    assert valid_date('02-30-2020') == False\n\ndef test_valid_date_leap_year():\n    assert valid_date('02-29-2020') == True  # Leap year\n    assert valid_date('02-29-2019') == False  # Not a leap year\n\ndef test_valid_date_boundary_conditions():\n    assert valid_date('01-01-2020') == True\n    assert valid_date('12-31-2020') == True\n    assert valid_date('02-28-2021') == True\n    assert valid_date('02-29-2021') == False  # Not a leap year", "tdd_stage": "implementation"}
{"task_id": "HumanEval/125", "prompt": "\ndef split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n", "completion": "if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and (ord(char) - ord('a')) % 2 == 0)", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:57:26.262038", "entry_point": "split_words", "canonical_solution": "    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n", "test": "def check(candidate):\n\n    assert candidate(\"Hello world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello,world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello world,!\") == [\"Hello\",\"world,!\"]\n    assert candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\",\"!\"]\n    assert candidate(\"abcdef\") == 3\n    assert candidate(\"aaabb\") == 2\n    assert candidate(\"aaaBb\") == 1\n    assert candidate(\"\") == 0\n", "generated_tests": "import pytest\n\ndef test_split_words_with_whitespace():\n    assert split_words(\"Hello world!\") == [\"Hello\", \"world!\"]\n    assert split_words(\"This is a test\") == [\"This\", \"is\", \"a\", \"test\"]\n    assert split_words(\"   Leading and trailing spaces   \") == [\"Leading\", \"and\", \"trailing\", \"spaces\"]\n    assert split_words(\"SingleWord\") == [\"SingleWord\"]\n\ndef test_split_words_with_commas():\n    assert split_words(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    assert split_words(\"apple,banana,cherry\") == [\"apple\", \"banana\", \"cherry\"]\n    assert split_words(\"No commas here\") == [\"No\", \"commas\", \"here\"]\n    assert split_words(\"JustOneWord\") == [\"JustOneWord\"]\n\ndef test_split_words_with_lowercase_letters():\n    assert split_words(\"abcdef\") == 3  # 'a', 'c', 'e' are in odd positions\n    assert split_words(\"abcde\") == 2   # 'b', 'd' are in odd positions\n    assert split_words(\"xyz\") == 1      # 'y' is in odd position\n    assert split_words(\"AEIOU\") == 0    # No lowercase letters\n\ndef test_split_words_empty_string():\n    assert split_words(\"\") == 0  # No letters at all\n\ndef test_split_words_invalid_inputs():\n    assert split_words(\"12345\") == 0  # No lowercase letters\n    assert split_words(\"!@#$%^&*()\") == 0  # No lowercase letters\n    assert split_words(\" , , , \") == 0  # Only commas and spaces\n\ndef test_split_words_mixed_cases():\n    assert split_words(\"Hello, World!\") == [\"Hello\", \"World!\"]\n    assert split_words(\"aBcDeFg\") == 3  # 'b', 'd', 'f' are in odd positions", "tdd_stage": "implementation"}
{"task_id": "HumanEval/126", "prompt": "\ndef is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n", "completion": "if len(lst) <= 1:\n        return True\n    seen = set()\n    for i in range(len(lst)):\n        if i > 0 and lst[i] < lst[i - 1]:\n            return False\n        if lst[i] in seen:\n            return False\n        seen.add(lst[i])\n    return True", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:57:39.209617", "entry_point": "is_sorted", "canonical_solution": "    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n    \n    \n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5]) == True\n    assert candidate([1, 2, 3, 4, 5]) == True\n    assert candidate([1, 3, 2, 4, 5]) == False\n    assert candidate([1, 2, 3, 4, 5, 6]) == True\n    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True\n    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == True, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([1]) == True, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([3, 2, 1]) == False, \"This prints if this assert fails 4 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 2, 2, 3, 4]) == False, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate([1, 2, 3, 3, 3, 4]) == False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate([1, 2, 2, 3, 3, 4]) == True, \"This prints if this assert fails 7 (good for debugging!)\"\n    assert candidate([1, 2, 3, 4]) == True, \"This prints if this assert fails 8 (good for debugging!)\"\n\n", "generated_tests": "import pytest\n\ndef test_single_element_sorted():\n    assert is_sorted([5]) == True\n\ndef test_sorted_list():\n    assert is_sorted([1, 2, 3, 4, 5]) == True\n\ndef test_unsorted_list():\n    assert is_sorted([1, 3, 2, 4, 5]) == False\n\ndef test_sorted_with_duplicates_allowed():\n    assert is_sorted([1, 2, 2, 3, 3, 4]) == True\n\ndef test_sorted_with_excessive_duplicates():\n    assert is_sorted([1, 2, 2, 2, 3, 4]) == False\n\ndef test_sorted_large_numbers():\n    assert is_sorted([100, 200, 300, 400]) == True\n\ndef test_unsorted_large_numbers():\n    assert is_sorted([100, 300, 200, 400]) == False\n\ndef test_empty_list():\n    assert is_sorted([]) == True\n\ndef test_single_duplicate():\n    assert is_sorted([1, 2, 2, 3]) == True\n\ndef test_multiple_duplicates():\n    assert is_sorted([1, 2, 2, 2, 3]) == False\n\ndef test_sorted_with_zero():\n    assert is_sorted([0, 1, 2, 3]) == True\n\ndef test_sorted_with_large_range():\n    assert is_sorted(list(range(1000))) == True\n\ndef test_unsorted_with_large_range():\n    assert is_sorted([0, 1, 3, 2, 4]) == False\n\ndef test_sorted_with_multiple_duplicates():\n    assert is_sorted([1, 1, 2, 3]) == False\n\ndef test_sorted_with_all_duplicates():\n    assert is_sorted([2, 2, 2]) == False\n\ndef test_sorted_with_negative_numbers():\n    assert is_sorted([0, 1, 2, 3]) == True", "tdd_stage": "implementation"}
{"task_id": "HumanEval/127", "prompt": "\ndef intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n", "completion": "def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    start1, end1 = interval1\n    start2, end2 = interval2\n\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n\n    if intersection_start > intersection_end:\n        return \"NO\"\n\n    intersection_length = intersection_end - intersection_start\n\n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:57:48.323904", "entry_point": "intersection", "canonical_solution": "    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate((1, 2), (2, 3)) == \"NO\"\n    assert candidate((-1, 1), (0, 4)) == \"NO\"\n    assert candidate((-3, -1), (-5, 5)) == \"YES\"\n    assert candidate((-2, 2), (-4, 0)) == \"YES\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate((-11, 2), (-1, -1)) == \"NO\"\n    assert candidate((1, 2), (3, 5)) == \"NO\"\n    assert candidate((1, 2), (1, 2)) == \"NO\"\n    assert candidate((-2, -2), (-3, -2)) == \"NO\"\n\n", "generated_tests": "import pytest\n\ndef test_intersection_basic_functionality():\n    assert intersection((1, 2), (2, 3)) == \"NO\"\n    assert intersection((-1, 1), (0, 4)) == \"NO\"\n    assert intersection((-3, -1), (-5, 5)) == \"YES\"\n    assert intersection((1, 5), (3, 7)) == \"NO\"\n    assert intersection((1, 3), (1, 3)) == \"NO\"\n    assert intersection((1, 4), (2, 5)) == \"YES\"\n\ndef test_intersection_edge_cases():\n    assert intersection((1, 1), (1, 1)) == \"NO\"  # Length is 0\n    assert intersection((1, 1), (2, 2)) == \"NO\"  # No intersection\n    assert intersection((0, 0), (0, 0)) == \"NO\"  # Length is 0\n    assert intersection((0, 0), (1, 1)) == \"NO\"  # No intersection\n    assert intersection((-1, 0), (-2, 1)) == \"YES\"  # Length is 2, which is prime\n\ndef test_intersection_large_numbers():\n    assert intersection((1000000, 1000005), (1000003, 1000010)) == \"YES\"  # Length is 2\n    assert intersection((1000000, 1000005), (1000005, 1000010)) == \"NO\"  # Length is 0\n\ndef test_intersection_negative_numbers():\n    assert intersection((-10, -5), (-7, -3)) == \"YES\"  # Length is 2\n    assert intersection((-10, -5), (-6, -4)) == \"NO\"  # Length is 0\n\ndef test_intersection_invalid_inputs():\n    with pytest.raises(TypeError):\n        intersection((1, 2), \"not a tuple\")\n    with pytest.raises(TypeError):\n        intersection(\"not a tuple\", (1, 2))\n    with pytest.raises(TypeError):\n        intersection((1, 2), (2, \"not an int\"))", "tdd_stage": "implementation"}
{"task_id": "HumanEval/128", "prompt": "\ndef prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n", "completion": "if arr is None or not isinstance(arr, list):\n        raise TypeError(\"Input must be a list of integers.\")\n    \n    total_sum = 0\n    sign_product = 1\n    \n    for num in arr:\n        if not isinstance(num, int):\n            raise TypeError(\"All elements in the array must be integers.\")\n        if num > 0:\n            total_sum += num\n        elif num < 0:\n            total_sum += -num\n            sign_product *= -1\n        else:\n            sign_product = 0\n    \n    if len(arr) == 0:\n        return None\n    \n    return sign_product * total_sum", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:57:59.178257", "entry_point": "prod_signs", "canonical_solution": "    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "generated_tests": "import pytest\n\ndef test_basic_functionality():\n    assert prod_signs([1, 2, 2, -4]) == -9\n    assert prod_signs([0, 1]) == 0\n    assert prod_signs([-1, -2, -3]) == -6\n    assert prod_signs([1, -1, 1]) == 1\n    assert prod_signs([3, 4, 5]) == 12\n\ndef test_edge_cases():\n    assert prod_signs([]) is None\n    assert prod_signs([0]) == 0\n    assert prod_signs([-1, 0, 1]) == 0\n    assert prod_signs([0, -1, -2]) == 0\n    assert prod_signs([1, 2, 0, -3]) == 0\n\ndef test_invalid_inputs():\n    with pytest.raises(TypeError):\n        prod_signs(None)\n    with pytest.raises(TypeError):\n        prod_signs(\"string\")\n    with pytest.raises(TypeError):\n        prod_signs([1, 2, \"three\"])\n    with pytest.raises(TypeError):\n        prod_signs([1.5, 2.5])", "tdd_stage": "implementation"}
{"task_id": "HumanEval/129", "prompt": "\ndef minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n", "completion": "if not grid or len(grid) < 2 or len(grid[0]) < 2:\n        raise IndexError(\"Grid must be at least 2x2.\")\n    if k <= 0:\n        raise ValueError(\"k should be positive.\")\n    if k > len(grid) * len(grid[0]):\n        raise ValueError(\"k too large for grid size.\")\n    \n    from collections import deque\n    \n    n = len(grid)\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    min_path = None\n    \n    def bfs(start_x, start_y):\n        queue = deque([(start_x, start_y, [grid[start_x][start_y]])])\n        while queue:\n            x, y, path = queue.popleft()\n            if len(path) == k:\n                nonlocal min_path\n                if min_path is None or path < min_path:\n                    min_path = path\n                continue\n            for dx, dy in directions:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < n and 0 <= ny < n:\n                    queue.append((nx, ny, path + [grid[nx][ny]]))\n    \n    for i in range(n):\n        for j in range(n):\n            bfs(i, j)\n    \n    return min_path", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:58:17.161554", "entry_point": "minPath", "canonical_solution": "    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    print\n    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]\n    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]\n    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]\n    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]\n    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]\n    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]\n    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]\n    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]\n    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]\n    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]\n\n", "generated_tests": "import pytest\n\ndef test_minPath_basic_functionality():\n    assert minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]\n    assert minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]\n    assert minPath([[1, 2], [3, 4]], 2) == [1, 2]\n    assert minPath([[1, 3], [2, 4]], 3) == [1, 2, 1]\n\ndef test_minPath_edge_cases():\n    assert minPath([[1, 2], [3, 4]], 1) == [1]\n    assert minPath([[1, 2], [3, 4]], 2) == [1, 2]\n    assert minPath([[1, 2], [3, 4]], 3) == [1, 2, 1]\n    assert minPath([[1]], 1) == [1]  # Invalid case, should raise an error\n    assert minPath([], 1) == []  # Invalid case, should raise an error\n\ndef test_minPath_invalid_inputs():\n    with pytest.raises(IndexError):\n        minPath([[1]], 1)  # Grid too small\n    with pytest.raises(ValueError):\n        minPath([[1, 2], [3, 4]], 0)  # k should be positive\n    with pytest.raises(ValueError):\n        minPath([[1, 2], [3, 4]], -1)  # k should be positive\n    with pytest.raises(ValueError):\n        minPath([[1, 2], [3, 4]], 5)  # k too large for grid size\n\ndef test_minPath_large_grid():\n    grid = [[i + j * 3 + 1 for i in range(3)] for j in range(3)]\n    assert minPath(grid, 3) == [1, 2, 1]\n    assert minPath(grid, 5) == [1, 2, 1, 2, 1]\n\ndef test_minPath_unique_path():\n    grid = [[1, 2], [3, 4]]\n    assert minPath(grid, 4) == [1, 2, 1, 2]", "tdd_stage": "implementation"}
{"task_id": "HumanEval/130", "prompt": "\ndef tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n", "completion": "if not isinstance(n, int) or n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    tribonacci = [1]  # Start with tri(0)\n    \n    for i in range(1, n + 1):\n        if i == 1:\n            tribonacci.append(3)\n        elif i % 2 == 0:\n            tribonacci.append(1 + i / 2)\n        else:\n            tribonacci.append(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i + 1] if i + 1 < len(tribonacci) else 0)\n    \n    return tribonacci", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:58:25.087559", "entry_point": "tri", "canonical_solution": "    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate(3) == [1, 3, 2.0, 8.0]\n    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]\n    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]\n    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]\n    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]\n    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]\n    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]\n    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n", "generated_tests": "import pytest\n\ndef test_tri_zero():\n    assert tri(0) == [1]\n\ndef test_tri_one():\n    assert tri(1) == [1, 3]\n\ndef test_tri_two():\n    assert tri(2) == [1, 3, 2]\n\ndef test_tri_three():\n    assert tri(3) == [1, 3, 2, 8]\n\ndef test_tri_four():\n    assert tri(4) == [1, 3, 2, 8, 3]\n\ndef test_tri_five():\n    assert tri(5) == [1, 3, 2, 8, 3, 10]\n\ndef test_tri_six():\n    assert tri(6) == [1, 3, 2, 8, 3, 10, 4]\n\ndef test_tri_seven():\n    assert tri(7) == [1, 3, 2, 8, 3, 10, 4, 15]\n\ndef test_tri_eight():\n    assert tri(8) == [1, 3, 2, 8, 3, 10, 4, 15, 5]\n\ndef test_tri_negative():\n    with pytest.raises(ValueError):\n        tri(-1)\n\ndef test_tri_non_integer():\n    with pytest.raises(TypeError):\n        tri(2.5)\n\ndef test_tri_large_input():\n    result = tri(20)\n    assert len(result) == 21\n    assert result[20] == 55  # Example expected value for large n", "tdd_stage": "implementation"}
{"task_id": "HumanEval/131", "prompt": "\ndef digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n", "completion": "if not isinstance(n, int) or n <= 0:\n        raise TypeError(\"Input must be a positive integer\")\n    \n    product = 1\n    has_odd = False\n    \n    for digit in str(n):\n        d = int(digit)\n        if d % 2 != 0:\n            product *= d\n            has_odd = True\n    \n    return product if has_odd else 0", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:58:34.209308", "entry_point": "digits", "canonical_solution": "    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(5) == 5\n    assert candidate(54) == 5\n    assert candidate(120) ==1\n    assert candidate(5014) == 5\n    assert candidate(98765) == 315\n    assert candidate(5576543) == 2625\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2468) == 0\n\n", "generated_tests": "import pytest\n\ndef test_single_odd_digit():\n    assert digits(1) == 1\n    assert digits(3) == 3\n    assert digits(5) == 5\n    assert digits(7) == 7\n    assert digits(9) == 9\n\ndef test_single_even_digit():\n    assert digits(2) == 0\n    assert digits(4) == 0\n    assert digits(6) == 0\n    assert digits(8) == 0\n\ndef test_multiple_odd_digits():\n    assert digits(135) == 15  # 1 * 3 * 5\n    assert digits(579) == 315  # 5 * 7 * 9\n    assert digits(111) == 1  # 1 * 1 * 1\n\ndef test_multiple_even_digits():\n    assert digits(2468) == 0\n    assert digits(4820) == 0\n\ndef test_mixed_digits():\n    assert digits(235) == 15  # 3 * 5\n    assert digits(123456789) == 945  # 1 * 3 * 5 * 7 * 9\n    assert digits(987654321) == 945  # 9 * 7 * 5 * 3 * 1\n\ndef test_all_even_digits():\n    assert digits(24680) == 0\n    assert digits(0) == 0  # Edge case, though n should be positive\n\ndef test_large_number():\n    assert digits(12345678901234567890) == 945  # 1 * 3 * 5 * 7 * 9\n\ndef test_edge_case_zero():\n    with pytest.raises(ValueError):\n        digits(0)  # Assuming the function should raise an error for non-positive integers\n\ndef test_invalid_input():\n    with pytest.raises(TypeError):\n        digits(\"123\")  # String input\n    with pytest.raises(TypeError):\n        digits(-123)  # Negative integer\n    with pytest.raises(TypeError):\n        digits(12.34)  # Float input", "tdd_stage": "implementation"}
{"task_id": "HumanEval/132", "prompt": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n", "completion": "stack = []\n    nested = False\n    \n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n                if len(stack) > 0:\n                    nested = True\n    \n    return nested", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:58:43.929600", "entry_point": "is_nested", "canonical_solution": "    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n    \n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('[[]]') == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('[]]]]]]][[[[[]') == False\n    assert candidate('[][]') == False\n    assert candidate(('[]')) == False\n    assert candidate('[[[[]]]]') == True\n    assert candidate('[]]]]]]]]]]') == False\n    assert candidate('[][][[]]') == True\n    assert candidate('[[]') == False\n    assert candidate('[]]') == False\n    assert candidate('[[]][[') == True\n    assert candidate('[[][]]') == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate('[[[[[[[[') == False\n    assert candidate(']]]]]]]]') == False\n\n", "generated_tests": "import pytest\n\ndef test_valid_nested_brackets():\n    assert is_nested('[[]]') == True\n    assert is_nested('[[][]]') == True\n    assert is_nested('[[]][[') == True\n\ndef test_non_nested_brackets():\n    assert is_nested('[]') == False\n    assert is_nested('[][]') == False\n    assert is_nested('[]]]]]]][[[[[]') == False\n\ndef test_empty_string():\n    assert is_nested('') == False\n\ndef test_single_bracket():\n    assert is_nested('[') == False\n    assert is_nested(']') == False\n\ndef test_multiple_unmatched_brackets():\n    assert is_nested('[[[[[') == False\n    assert is_nested(']]]]]]') == False\n\ndef test_large_input():\n    assert is_nested('[' + '[]' * 1000 + ']') == True\n    assert is_nested('[' + '[]' * 999 + ']' + ']' * 999) == False\n\ndef test_mixed_brackets():\n    assert is_nested('[][[[]]]') == True\n    assert is_nested('[[[]]][]') == True\n    assert is_nested('[[[]]][]]') == False", "tdd_stage": "implementation"}
{"task_id": "HumanEval/133", "prompt": "\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n", "completion": "if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list\")\n    \n    total = 0\n    for num in lst:\n        if not isinstance(num, (int, float)):\n            raise TypeError(\"All elements in the list must be numbers\")\n        total += (int(-(-num // 1))) ** 2  # Ceiling of num and square it\n    return total", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:58:52.937377", "entry_point": "sum_squares", "canonical_solution": "    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.0,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,3,5,7])==84, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.4,4.2,0])==29, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-2.4,1,1])==6, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate([100,1,15,2])==10230, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([10000,10000])==200000000, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,4.6,6.3])==75, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,17.9,18.9,19.9])==1086, \"This prints if this assert fails 1 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0])==0, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1])==1, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1,1,0])==2, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "generated_tests": "import pytest\n\ndef test_sum_squares_basic_functionality():\n    assert sum_squares([1, 2, 3]) == 14\n    assert sum_squares([1, 4, 9]) == 98\n    assert sum_squares([1, 3, 5, 7]) == 84\n    assert sum_squares([1.4, 4.2, 0]) == 29\n    assert sum_squares([-2.4, 1, 1]) == 6\n\ndef test_sum_squares_empty_list():\n    assert sum_squares([]) == 0\n\ndef test_sum_squares_single_element():\n    assert sum_squares([0]) == 0\n    assert sum_squares([1.1]) == 4\n    assert sum_squares([-1.1]) == 1\n\ndef test_sum_squares_negative_numbers():\n    assert sum_squares([-1, -2, -3]) == 14\n    assert sum_squares([-1.5, -2.5]) == 16\n\ndef test_sum_squares_mixed_numbers():\n    assert sum_squares([-1.5, 2.5, 3.1]) == 38\n    assert sum_squares([1.9, -2.1, 3.5]) == 38\n\ndef test_sum_squares_large_numbers():\n    assert sum_squares([1000, 2000, 3000]) == 14000000000\n    assert sum_squares([1e6, 2e6]) == 5e12\n\ndef test_sum_squares_invalid_input():\n    with pytest.raises(TypeError):\n        sum_squares(\"not a list\")\n    with pytest.raises(TypeError):\n        sum_squares([1, 2, \"three\"])\n    with pytest.raises(TypeError):\n        sum_squares([None, 1, 2])", "tdd_stage": "implementation"}
{"task_id": "HumanEval/134", "prompt": "\ndef check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n", "completion": "txt = txt.rstrip()\n    if not txt or not txt[-1].isalpha():\n        return False\n    words = txt.split()\n    if not words:\n        return False\n    last_word = words[-1]\n    return len(last_word) == 1 and last_word.isalpha()", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:59:04.613914", "entry_point": "check_if_last_char_is_a_letter", "canonical_solution": " \n    check = txt.split(' ')[-1]\n    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"apple\") == False\n    assert candidate(\"apple pi e\") == True\n    assert candidate(\"eeeee\") == False\n    assert candidate(\"A\") == True\n    assert candidate(\"Pumpkin pie \") == False\n    assert candidate(\"Pumpkin pie 1\") == False\n    assert candidate(\"\") == False\n    assert candidate(\"eeeee e \") == False\n    assert candidate(\"apple pie\") == False\n    assert candidate(\"apple pi e \") == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n", "generated_tests": "import pytest\n\ndef test_last_char_is_single_letter():\n    assert check_if_last_char_is_a_letter(\"apple pi e\") == True\n\ndef test_last_char_is_not_a_letter():\n    assert check_if_last_char_is_a_letter(\"apple pie\") == False\n\ndef test_last_char_is_space():\n    assert check_if_last_char_is_a_letter(\"apple pi e \") == False\n\ndef test_empty_string():\n    assert check_if_last_char_is_a_letter(\"\") == False\n\ndef test_last_char_is_digit():\n    assert check_if_last_char_is_a_letter(\"apple pi e 1\") == False\n\ndef test_last_char_is_special_character():\n    assert check_if_last_char_is_a_letter(\"apple pi e @\") == False\n\ndef test_last_char_is_uppercase_letter():\n    assert check_if_last_char_is_a_letter(\"apple pi E\") == True\n\ndef test_last_char_is_multiple_letters():\n    assert check_if_last_char_is_a_letter(\"apple pi ee\") == False\n\ndef test_last_char_is_single_letter_with_spaces():\n    assert check_if_last_char_is_a_letter(\"   a\") == True\n\ndef test_last_char_is_non_alphabetic_character():\n    assert check_if_last_char_is_a_letter(\"hello world!\") == False\n\ndef test_last_char_is_non_alphabetic_character_with_spaces():\n    assert check_if_last_char_is_a_letter(\"hello world! \") == False\n\ndef test_last_char_is_letter_in_long_string():\n    assert check_if_last_char_is_a_letter(\"this is a test string with a single letter z\") == True\n\ndef test_last_char_is_letter_in_string_with_multiple_words():\n    assert check_if_last_char_is_a_letter(\"this is a test\") == False", "tdd_stage": "implementation"}
{"task_id": "HumanEval/135", "prompt": "\ndef can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n", "completion": "if not arr:\n        return -1\n    \n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:59:12.702383", "entry_point": "can_arrange", "canonical_solution": "    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,4,3,5])==3\n    assert candidate([1,2,4,5])==-1\n    assert candidate([1,4,2,5,6,7,8,9,10])==2\n    assert candidate([4,8,5,7,3])==4\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([])==-1\n\n", "generated_tests": "import pytest\n\ndef test_basic_functionality():\n    assert can_arrange([1, 2, 4, 3, 5]) == 3\n    assert can_arrange([1, 2, 3]) == -1\n    assert can_arrange([5, 4, 3, 2, 1]) == 1\n    assert can_arrange([1, 3, 2, 4, 5]) == 2\n\ndef test_edge_cases():\n    assert can_arrange([]) == -1\n    assert can_arrange([1]) == -1\n    assert can_arrange([2, 1]) == 1\n    assert can_arrange([1, 2, 1]) == 2\n    assert can_arrange([1, 2, 3, 4, 5]) == -1\n    assert can_arrange([10, 20, 30, 25, 40]) == 3\n\ndef test_negative_cases():\n    assert can_arrange([1, 1, 1]) == -1\n    assert can_arrange([3, 3, 3, 3]) == -1\n\ndef test_large_inputs():\n    assert can_arrange(list(range(1000000))) == -1\n    assert can_arrange(list(range(1000000, 0, -1))) == 1\n    assert can_arrange([1] + list(range(2, 1000000))) == -1\n    assert can_arrange(list(range(1, 1000000)) + [999999]) == 999999", "tdd_stage": "implementation"}
{"task_id": "HumanEval/136", "prompt": "\ndef largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n", "completion": "largest_negative = None\n    smallest_positive = None\n    \n    for num in lst:\n        if isinstance(num, int):\n            if num < 0:\n                if largest_negative is None or num > largest_negative:\n                    largest_negative = num\n            elif num > 0:\n                if smallest_positive is None or num < smallest_positive:\n                    smallest_positive = num\n    \n    return (largest_negative, smallest_positive)", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:59:21.916998", "entry_point": "largest_smallest_integers", "canonical_solution": "    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)\n    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)\n    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\n    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)\n    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)\n    assert candidate([]) == (None, None)\n    assert candidate([0]) == (None, None)\n    assert candidate([-1, -3, -5, -6]) == (-1, None)\n    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)\n    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)\n    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n", "generated_tests": "import pytest\n\ndef test_largest_smallest_integers_with_only_positive_integers():\n    assert largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n\ndef test_largest_smallest_integers_with_only_negative_integers():\n    assert largest_smallest_integers([-2, -4, -1, -3, -5, -7]) == (-1, None)\n\ndef test_largest_smallest_integers_with_mixed_integers():\n    assert largest_smallest_integers([-2, 4, -1, 3, -5, 7]) == (-1, 3)\n\ndef test_largest_smallest_integers_with_zero():\n    assert largest_smallest_integers([0]) == (None, None)\n\ndef test_largest_smallest_integers_with_empty_list():\n    assert largest_smallest_integers([]) == (None, None)\n\ndef test_largest_smallest_integers_with_no_positive_integers():\n    assert largest_smallest_integers([-1, -2, -3]) == (-1, None)\n\ndef test_largest_smallest_integers_with_no_negative_integers():\n    assert largest_smallest_integers([1, 2, 3]) == (None, 1)\n\ndef test_largest_smallest_integers_with_both_zero_and_negatives():\n    assert largest_smallest_integers([-1, -2, 0]) == (-1, None)\n\ndef test_largest_smallest_integers_with_both_zero_and_positives():\n    assert largest_smallest_integers([1, 2, 0]) == (None, 1)\n\ndef test_largest_smallest_integers_with_duplicates():\n    assert largest_smallest_integers([-1, -1, 2, 2, 3]) == (-1, 2)\n\ndef test_largest_smallest_integers_with_large_numbers():\n    assert largest_smallest_integers([-1000, 1000, -500, 500]) == (-500, 500)\n\ndef test_largest_smallest_integers_with_floats():\n    assert largest_smallest_integers([-1.5, 2.5, 0.0]) == (None, 2.5)\n\ndef test_largest_smallest_integers_with_non_integer_types():\n    with pytest.raises(TypeError):\n        largest_smallest_integers([1, 'a', 2.5, None])", "tdd_stage": "implementation"}
{"task_id": "HumanEval/137", "prompt": "\ndef compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n", "completion": "if a is None or b is None:\n        return None\n    \n    if isinstance(a, str):\n        if ',' in a:\n            a = float(a.replace(',', '.'))\n        else:\n            a = float(a)\n    if isinstance(b, str):\n        if ',' in b:\n            b = float(b.replace(',', '.'))\n        else:\n            b = float(b)\n\n    if a == b:\n        return None\n\n    return a if a > b else b", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:59:30.166423", "entry_point": "compare_one", "canonical_solution": "    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 2) == 2\n    assert candidate(1, 2.5) == 2.5\n    assert candidate(2, 3) == 3\n    assert candidate(5, 6) == 6\n    assert candidate(1, \"2,3\") == \"2,3\"\n    assert candidate(\"5,1\", \"6\") == \"6\"\n    assert candidate(\"1\", \"2\") == \"2\"\n    assert candidate(\"1\", 1) == None\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n", "generated_tests": "import pytest\n\ndef test_compare_integers():\n    assert compare_one(1, 2) == 2\n    assert compare_one(2, 1) == 2\n    assert compare_one(5, 5) is None\n\ndef test_compare_floats():\n    assert compare_one(1.5, 2.5) == 2.5\n    assert compare_one(3.0, 2.9) == 3.0\n    assert compare_one(2.5, 2.5) is None\n\ndef test_compare_integer_and_float():\n    assert compare_one(1, 2.5) == 2.5\n    assert compare_one(3.5, 3) == 3.5\n    assert compare_one(2, 2.0) is None\n\ndef test_compare_strings_as_numbers():\n    assert compare_one(\"1\", \"2\") == \"2\"\n    assert compare_one(\"3.5\", \"2.5\") == \"3.5\"\n    assert compare_one(\"5\", \"5\") is None\n\ndef test_compare_strings_with_commas():\n    assert compare_one(\"1,5\", \"2,5\") == \"2,5\"\n    assert compare_one(\"3,0\", \"3\") == \"3,0\"\n    assert compare_one(\"2,5\", \"2,5\") is None\n\ndef test_compare_mixed_types():\n    assert compare_one(\"1,5\", 2.5) == 2.5\n    assert compare_one(3, \"2,5\") == \"3\"\n    assert compare_one(\"5\", 5) is None\n\ndef test_edge_cases():\n    assert compare_one(\"\", \"\") is None\n    assert compare_one(\"\", 1) == 1\n    assert compare_one(1, \"\") == 1\n    assert compare_one(None, 1) is None\n    assert compare_one(1, None) is None\n    assert compare_one(None, None) is None\n\ndef test_invalid_inputs():\n    with pytest.raises(ValueError):\n        compare_one(\"abc\", 1)\n    with pytest.raises(ValueError):\n        compare_one(1, \"xyz\")\n    with pytest.raises(ValueError):\n        compare_one(\"1,2,3\", \"2,3\")", "tdd_stage": "implementation"}
{"task_id": "HumanEval/138", "prompt": "\ndef is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n", "completion": "if not isinstance(n, int) or n < 0:\n        raise TypeError(\"Input must be a positive integer\")\n    return n >= 8 and n % 2 == 0", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:59:41.476397", "entry_point": "is_equal_to_sum_even", "canonical_solution": "    return n%2 == 0 and n >= 8\n", "test": "def check(candidate):\n    assert candidate(4) == False\n    assert candidate(6) == False\n    assert candidate(8) == True\n    assert candidate(10) == True\n    assert candidate(11) == False\n    assert candidate(12) == True\n    assert candidate(13) == False\n    assert candidate(16) == True\n", "generated_tests": "import pytest\n\ndef test_is_equal_to_sum_even_basic_cases():\n    assert is_equal_to_sum_even(4) == False, \"Should be False for 4\"\n    assert is_equal_to_sum_even(6) == False, \"Should be False for 6\"\n    assert is_equal_to_sum_even(8) == True, \"Should be True for 8\"\n    assert is_equal_to_sum_even(10) == True, \"Should be True for 10\"\n    assert is_equal_to_sum_even(12) == True, \"Should be True for 12\"\n    assert is_equal_to_sum_even(14) == True, \"Should be True for 14\"\n    assert is_equal_to_sum_even(16) == True, \"Should be True for 16\"\n\ndef test_is_equal_to_sum_even_edge_cases():\n    assert is_equal_to_sum_even(0) == False, \"Should be False for 0\"\n    assert is_equal_to_sum_even(2) == False, \"Should be False for 2\"\n    assert is_equal_to_sum_even(3) == False, \"Should be False for 3\"\n    assert is_equal_to_sum_even(7) == False, \"Should be False for 7\"\n    assert is_equal_to_sum_even(100) == True, \"Should be True for 100\"\n    assert is_equal_to_sum_even(1000) == True, \"Should be True for 1000\"\n\ndef test_is_equal_to_sum_even_invalid_inputs():\n    with pytest.raises(TypeError):\n        is_equal_to_sum_even(None)\n    with pytest.raises(TypeError):\n        is_equal_to_sum_even(\"string\")\n    with pytest.raises(TypeError):\n        is_equal_to_sum_even([])\n\ndef test_is_equal_to_sum_even_large_numbers():\n    assert is_equal_to_sum_even(1000000) == True, \"Should be True for 1000000\"\n    assert is_equal_to_sum_even(999999) == False, \"Should be False for 999999\"", "tdd_stage": "implementation"}
{"task_id": "HumanEval/139", "prompt": "\ndef special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n", "completion": "if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer.\")\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    from math import factorial\n    result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n    return result", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T14:59:49.272804", "entry_point": "special_factorial", "canonical_solution": "    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(4) == 288, \"Test 4\"\n    assert candidate(5) == 34560, \"Test 5\"\n    assert candidate(7) == 125411328000, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == 1, \"Test 1\"\n\n", "generated_tests": "import pytest\n\ndef test_special_factorial_basic_functionality():\n    assert special_factorial(1) == 1\n    assert special_factorial(2) == 2\n    assert special_factorial(3) == 12\n    assert special_factorial(4) == 288\n    assert special_factorial(5) == 34560\n\ndef test_special_factorial_edge_cases():\n    assert special_factorial(0) == 1  # Assuming 0! = 1 and special_factorial(0) should return 1\n    assert special_factorial(1) == 1  # 1! = 1\n    assert special_factorial(2) == 2  # 2! * 1! = 2 * 1 = 2\n\ndef test_special_factorial_large_numbers():\n    assert special_factorial(6) == 518918400  # 6! * 5! * 4! * 3! * 2! * 1!\n    assert special_factorial(7) == 403291136000  # 7! * 6! * 5! * 4! * 3! * 2! * 1!\n\ndef test_special_factorial_invalid_inputs():\n    with pytest.raises(TypeError):\n        special_factorial(\"string\")\n    with pytest.raises(ValueError):\n        special_factorial(-1)\n    with pytest.raises(TypeError):\n        special_factorial(3.5)\n\ndef test_special_factorial_boundary_conditions():\n    assert special_factorial(10) == 13168189440000  # Testing a larger boundary\n    assert special_factorial(15) == 1307674368000  # Testing another larger boundary", "tdd_stage": "implementation"}
{"task_id": "HumanEval/140", "prompt": "\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n", "completion": "import re\n    \n    # Replace multiple spaces with a single space\n    text = re.sub(r' {3,}', '-', text)\n    # Replace single spaces with underscores\n    text = text.replace(' ', '_')\n    \n    # Handle leading and trailing underscores\n    text = text.strip('_')\n    \n    # If the string is empty or only underscores, return '-'\n    if not text:\n        return '-'\n    \n    return text", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T15:00:02.410388", "entry_point": "fix_spaces", "canonical_solution": "    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Example\") == \"Example\", \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\", \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\", \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Exa   mple\") == \"Exa-mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n\n", "generated_tests": "import pytest\n\ndef test_no_spaces():\n    assert fix_spaces(\"Example\") == \"Example\"\n\ndef test_single_space():\n    assert fix_spaces(\"Example 1\") == \"Example_1\"\n\ndef test_leading_space():\n    assert fix_spaces(\" Example 2\") == \"_Example_2\"\n\ndef test_trailing_space():\n    assert fix_spaces(\"Example 3 \") == \"Example_3_\"\n\ndef test_multiple_spaces():\n    assert fix_spaces(\"Example   4\") == \"Example-4\"\n    \ndef test_consecutive_spaces():\n    assert fix_spaces(\"Example     5\") == \"Example-5\"\n    \ndef test_mixed_spaces():\n    assert fix_spaces(\"Example 6   with   spaces\") == \"Example_6-with-spaces\"\n\ndef test_only_spaces():\n    assert fix_spaces(\"     \") == \"-\"\n\ndef test_empty_string():\n    assert fix_spaces(\"\") == \"\"\n\ndef test_special_characters():\n    assert fix_spaces(\"Hello!  How are you?\") == \"Hello!_How_are_you?\"\n\ndef test_numbers_and_spaces():\n    assert fix_spaces(\"123   456\") == \"123-456\"\n\ndef test_spaces_in_between_words():\n    assert fix_spaces(\"This  is   a test\") == \"This_is-a_test\"\n\ndef test_edge_case_with_two_spaces():\n    assert fix_spaces(\"Two  spaces\") == \"Two_ spaces\"\n\ndef test_edge_case_with_three_spaces():\n    assert fix_spaces(\"Three   spaces\") == \"Three- spaces\"\n\ndef test_edge_case_with_four_spaces():\n    assert fix_spaces(\"Four    spaces\") == \"Four- spaces\"\n\ndef test_edge_case_with_mixed_spaces_and_special_chars():\n    assert fix_spaces(\"Test!   This is   a test.\") == \"Test!-This_is-a_test.\"\n\ndef test_leading_and_trailing_spaces():\n    assert fix_spaces(\"   Leading and trailing   \") == \"_Leading_and_trailing-\"", "tdd_stage": "implementation"}
{"task_id": "HumanEval/141", "prompt": "\ndef file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n", "completion": "if not file_name or file_name.count('.') != 1:\n        return 'No'\n    \n    name_part, ext_part = file_name.split('.')\n    \n    if not name_part or not ext_part or not name_part[0].isalpha():\n        return 'No'\n    \n    if ext_part not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    digit_count = sum(c.isdigit() for c in name_part)\n    \n    if digit_count > 3:\n        return 'No'\n    \n    return 'Yes'", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T15:00:12.823587", "entry_point": "file_name_check", "canonical_solution": "    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if not lst[0][0].isalpha():\n        return 'No'\n    t = len([x for x in lst[0] if x.isdigit()])\n    if t > 3:\n        return 'No'\n    return 'Yes'\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"example.txt\") == 'Yes'\n    assert candidate(\"1example.dll\") == 'No'\n    assert candidate('s1sdf3.asd') == 'No'\n    assert candidate('K.dll') == 'Yes'\n    assert candidate('MY16FILE3.exe') == 'Yes'\n    assert candidate('His12FILE94.exe') == 'No'\n    assert candidate('_Y.txt') == 'No'\n    assert candidate('?aREYA.exe') == 'No'\n    assert candidate('/this_is_valid.dll') == 'No'\n    assert candidate('this_is_valid.wow') == 'No'\n    assert candidate('this_is_valid.txt') == 'Yes'\n    assert candidate('this_is_valid.txtexe') == 'No'\n    assert candidate('#this2_i4s_5valid.ten') == 'No'\n    assert candidate('@this1_is6_valid.exe') == 'No'\n    assert candidate('this_is_12valid.6exe4.txt') == 'No'\n    assert candidate('all.exe.txt') == 'No'\n    assert candidate('I563_No.exe') == 'Yes'\n    assert candidate('Is3youfault.txt') == 'Yes'\n    assert candidate('no_one#knows.dll') == 'Yes'\n    assert candidate('1I563_Yes3.exe') == 'No'\n    assert candidate('I563_Yes3.txtt') == 'No'\n    assert candidate('final..txt') == 'No'\n    assert candidate('final132') == 'No'\n    assert candidate('_f4indsartal132.') == 'No'\n    \n        \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('.txt') == 'No'\n    assert candidate('s.') == 'No'\n\n", "generated_tests": "import pytest\n\ndef test_valid_file_name():\n    assert file_name_check(\"example.txt\") == 'Yes'\n    assert file_name_check(\"test123.exe\") == 'Yes'\n    assert file_name_check(\"file_name_1.dll\") == 'Yes'\n\ndef test_invalid_file_name_starting_with_digit():\n    assert file_name_check(\"1example.dll\") == 'No'\n    assert file_name_check(\"123file.txt\") == 'No'\n\ndef test_invalid_file_name_empty_prefix():\n    assert file_name_check(\".txt\") == 'No'\n    assert file_name_check(\"..exe\") == 'No'\n    assert file_name_check(\".dll\") == 'No'\n\ndef test_invalid_file_name_multiple_dots():\n    assert file_name_check(\"example.txt.txt\") == 'No'\n    assert file_name_check(\"file.name.exe\") == 'No'\n\ndef test_invalid_file_name_invalid_suffix():\n    assert file_name_check(\"example.doc\") == 'No'\n    assert file_name_check(\"file_name.pdf\") == 'No'\n    assert file_name_check(\"test.xyz\") == 'No'\n\ndef test_invalid_file_name_too_many_digits():\n    assert file_name_check(\"file1234.txt\") == 'No'\n    assert file_name_check(\"test123456.exe\") == 'No'\n\ndef test_edge_case_empty_string():\n    assert file_name_check(\"\") == 'No'\n\ndef test_edge_case_only_dot():\n    assert file_name_check(\".\") == 'No'\n\ndef test_edge_case_only_suffix():\n    assert file_name_check(\"file.\") == 'No'\n\ndef test_edge_case_valid_name_with_three_digits():\n    assert file_name_check(\"file123.txt\") == 'Yes'\n    assert file_name_check(\"test1.exe\") == 'Yes'\n    assert file_name_check(\"abc2.dll\") == 'Yes'\n\ndef test_edge_case_valid_name_with_no_digits():\n    assert file_name_check(\"validfile.txt\") == 'Yes'\n    assert file_name_check(\"anotherfile.exe\") == 'Yes'", "tdd_stage": "implementation"}
{"task_id": "HumanEval/142", "prompt": "\n\n\ndef sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n", "completion": "total = 0\n    for index, value in enumerate(lst):\n        if not isinstance(value, int):\n            raise TypeError(\"All elements in the list must be integers.\")\n        if index % 3 == 0:\n            total += value ** 2\n        elif index % 4 == 0:\n            total += value ** 3\n        else:\n            total += value\n    return total", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T15:00:23.870666", "entry_point": "sum_squares", "canonical_solution": "    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate([1,2,3]) == 6\n    assert candidate([1,4,9]) == 14\n    assert candidate([]) == 0\n    assert candidate([1,1,1,1,1,1,1,1,1]) == 9\n    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3\n    assert candidate([0]) == 0\n    assert candidate([-1,-5,2,-1,-5]) == -126\n    assert candidate([-56,-99,1,0,-2]) == 3030\n    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0\n    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448\n    \n    \n    # Don't remove this line:\n", "generated_tests": "import pytest\n\ndef test_sum_squares_basic_functionality():\n    assert sum_squares([1, 2, 3]) == 6\n    assert sum_squares([-1, -5, 2, -1, -5]) == -126\n    assert sum_squares([0, 0, 0, 0]) == 0\n    assert sum_squares([1, 2, 3, 4, 5, 6, 7, 8]) == 1 + 2 + 9 + 64 + 5 + 6 + 7 + 8 == 92\n\ndef test_sum_squares_empty_list():\n    assert sum_squares([]) == 0\n\ndef test_sum_squares_single_element():\n    assert sum_squares([5]) == 25\n    assert sum_squares([3]) == 9\n\ndef test_sum_squares_multiple_of_3_and_4():\n    assert sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 1 + 2 + 9 + 64 + 5 + 6 + 7 + 512 + 9 + 10 + 11 + 144 == 635\n\ndef test_sum_squares_negative_numbers():\n    assert sum_squares([-1, -2, -3, -4, -5, -6]) == 1 + -2 + 9 + -64 + -5 + -6 == -67\n\ndef test_sum_squares_large_numbers():\n    assert sum_squares([100, 200, 300, 400, 500, 600]) == 10000 + 200 + 90000 + 64000000 + 500 + 600 == 64600500\n\ndef test_sum_squares_non_integer_values():\n    with pytest.raises(TypeError):\n        sum_squares([1, 2, '3', 4])\n\ndef test_sum_squares_all_zeroes():\n    assert sum_squares([0, 0, 0, 0, 0]) == 0\n\ndef test_sum_squares_large_list():\n    assert sum_squares(list(range(1000))) == sum(i**2 if i % 3 == 0 else i**3 if i % 4 == 0 else i for i in range(1000))", "tdd_stage": "implementation"}
{"task_id": "HumanEval/143", "prompt": "\ndef words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n", "completion": "def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T15:00:35.952959", "entry_point": "words_in_sentence", "canonical_solution": "    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"This is a test\") == \"is\"\n    assert candidate(\"lets go for swimming\") == \"go for\"\n    assert candidate(\"there is no place available here\") == \"there is no place\"\n    assert candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n    assert candidate(\"go for it\") == \"go for it\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"here\") == \"\"\n    assert candidate(\"here is\") == \"is\"\n\n", "generated_tests": "import pytest\n\ndef test_basic_functionality():\n    assert words_in_sentence(\"This is a test\") == \"is\"\n    assert words_in_sentence(\"lets go for swimming\") == \"go for\"\n    assert words_in_sentence(\"hello world\") == \"hello\"\n    assert words_in_sentence(\"a b c d e\") == \"a b c d e\"\n    assert words_in_sentence(\"prime numbers are fun\") == \"are\"\n\ndef test_edge_cases():\n    assert words_in_sentence(\"\") == \"\"\n    assert words_in_sentence(\"a\") == \"a\"\n    assert words_in_sentence(\"ab\") == \"ab\"\n    assert words_in_sentence(\"abc\") == \"\"\n    assert words_in_sentence(\"abcd\") == \"\"\n    assert words_in_sentence(\"abcde\") == \"abcde\"\n    assert words_in_sentence(\"abcdef\") == \"abcdef\"\n    assert words_in_sentence(\"abcdefgh\") == \"abcdefgh\"\n    assert words_in_sentence(\"abcdefghij\") == \"abcdefghij\"\n\ndef test_negative_cases():\n    assert words_in_sentence(\"this is not a test\") == \"is\"\n    assert words_in_sentence(\"no prime words here\") == \"\"\n    assert words_in_sentence(\"the quick brown fox jumps over the lazy dog\") == \"the fox the\"\n\ndef test_long_sentences():\n    assert words_in_sentence(\"this is a long sentence with several words of varying lengths\") == \"is a with of\"\n    assert words_in_sentence(\"the quick brown fox jumps over the lazy dog and the quick brown fox jumps again\") == \"the fox the fox\"\n\ndef test_single_word_sentences():\n    assert words_in_sentence(\"hello\") == \"hello\"\n    assert words_in_sentence(\"a\") == \"a\"\n    assert words_in_sentence(\"b\") == \"b\"\n    assert words_in_sentence(\"c\") == \"c\"\n    assert words_in_sentence(\"d\") == \"d\"\n    assert words_in_sentence(\"e\") == \"e\"\n    assert words_in_sentence(\"f\") == \"f\"\n    assert words_in_sentence(\"g\") == \"g\"\n    assert words_in_sentence(\"h\") == \"h\"\n    assert words_in_sentence(\"i\") == \"i\"\n    assert words_in_sentence(\"j\") == \"j\"\n    assert words_in_sentence(\"k\") == \"k\"\n    assert words_in_sentence(\"l\") == \"l\"\n    assert words_in_sentence(\"m\") == \"m\"\n    assert words_in_sentence(\"n\") == \"n\"\n    assert words_in_sentence(\"o\") == \"o\"\n    assert words_in_sentence(\"p\") == \"p\"\n    assert words_in_sentence(\"q\") == \"q\"\n    assert words_in_sentence(\"r\") == \"r\"\n    assert words_in_sentence(\"s\") == \"s\"\n    assert words_in_sentence(\"t\") == \"t\"\n    assert words_in_sentence(\"u\") == \"u\"\n    assert words_in_sentence(\"v\") == \"v\"", "tdd_stage": "implementation"}
{"task_id": "HumanEval/144", "prompt": "\ndef simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n", "completion": "from fractions import Fraction\n\n    def parse_fraction(fraction_str):\n        if not fraction_str:\n            raise ValueError(\"Invalid fraction input.\")\n        numerator, denominator = fraction_str.split('/')\n        if int(denominator) == 0:\n            raise ValueError(\"Denominator cannot be zero.\")\n        return Fraction(int(numerator), int(denominator))\n\n    x_fraction = parse_fraction(x)\n    n_fraction = parse_fraction(n)\n\n    product = x_fraction * n_fraction\n    return product.denominator == 1", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T15:00:47.306692", "entry_point": "simplify", "canonical_solution": "    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    if (numerator/denom == int(numerator/denom)):\n        return True\n    return False\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"1/5\", \"5/1\") == True, 'test1'\n    assert candidate(\"1/6\", \"2/1\") == False, 'test2'\n    assert candidate(\"5/1\", \"3/1\") == True, 'test3'\n    assert candidate(\"7/10\", \"10/2\") == False, 'test4'\n    assert candidate(\"2/10\", \"50/10\") == True, 'test5'\n    assert candidate(\"7/2\", \"4/2\") == True, 'test6'\n    assert candidate(\"11/6\", \"6/1\") == True, 'test7'\n    assert candidate(\"2/3\", \"5/2\") == False, 'test8'\n    assert candidate(\"5/2\", \"3/5\") == False, 'test9'\n    assert candidate(\"2/4\", \"8/4\") == True, 'test10'\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"2/4\", \"4/2\") == True, 'test11'\n    assert candidate(\"1/5\", \"5/1\") == True, 'test12'\n    assert candidate(\"1/5\", \"1/5\") == False, 'test13'\n\n", "generated_tests": "import pytest\n\ndef test_simplify_basic_functionality():\n    assert simplify(\"1/5\", \"5/1\") == True\n    assert simplify(\"1/6\", \"2/1\") == False\n    assert simplify(\"7/10\", \"10/2\") == False\n    assert simplify(\"3/4\", \"4/3\") == True\n    assert simplify(\"2/3\", \"3/2\") == True\n\ndef test_simplify_edge_cases():\n    assert simplify(\"1/1\", \"1/1\") == True\n    assert simplify(\"1/2\", \"2/1\") == True\n    assert simplify(\"1/3\", \"3/1\") == True\n    assert simplify(\"1/4\", \"4/1\") == True\n    assert simplify(\"1/10\", \"10/1\") == True\n\ndef test_simplify_negative_cases():\n    assert simplify(\"1/6\", \"3/1\") == False\n    assert simplify(\"2/5\", \"5/2\") == True\n    assert simplify(\"3/5\", \"5/3\") == True\n    assert simplify(\"1/7\", \"7/1\") == True\n    assert simplify(\"2/3\", \"4/1\") == False\n\ndef test_simplify_invalid_inputs():\n    with pytest.raises(ValueError):\n        simplify(\"\", \"1/1\")\n    with pytest.raises(ValueError):\n        simplify(\"1/1\", \"\")\n    with pytest.raises(ValueError):\n        simplify(\"1/0\", \"1/1\")\n    with pytest.raises(ValueError):\n        simplify(\"1/1\", \"1/0\")\n    with pytest.raises(ValueError):\n        simplify(\"a/b\", \"1/1\")\n    with pytest.raises(ValueError):\n        simplify(\"1/1\", \"c/d\")", "tdd_stage": "implementation"}
{"task_id": "HumanEval/145", "prompt": "\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n", "completion": "if not isinstance(nums, list):\n        raise TypeError(\"Input must be a list\")\n    for num in nums:\n        if not isinstance(num, int):\n            raise TypeError(\"All elements in the list must be integers\")\n    \n    def digit_sum(n):\n        return sum(int(d) for d in str(abs(n)))\n    \n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T15:01:00.222463", "entry_point": "order_by_points", "canonical_solution": "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "generated_tests": "import pytest\n\ndef test_basic_functionality():\n    assert order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert order_by_points([10, 20, 30, 1, 2]) == [1, 2, 10, 20, 30]\n    assert order_by_points([5, 15, 25, 3, 4]) == [3, 4, 5, 15, 25]\n    assert order_by_points([-5, -15, -25, -3, -4]) == [-3, -4, -5, -15, -25]\n\ndef test_edge_cases():\n    assert order_by_points([]) == []\n    assert order_by_points([0]) == [0]\n    assert order_by_points([100, 200, 300]) == [100, 200, 300]\n    assert order_by_points([-100, -200, -300]) == [-100, -200, -300]\n    assert order_by_points([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n\ndef test_negative_numbers():\n    assert order_by_points([-1, -2, -3, -4, -5]) == [-1, -2, -3, -4, -5]\n    assert order_by_points([-10, -20, -30, -1, -2]) == [-1, -2, -10, -20, -30]\n\ndef test_large_numbers():\n    assert order_by_points([1000, 2000, 3000, 1, 2]) == [1, 2, 1000, 2000, 3000]\n    assert order_by_points([999, 1000, 1001]) == [999, 1000, 1001]\n\ndef test_invalid_inputs():\n    with pytest.raises(TypeError):\n        order_by_points(None)\n    with pytest.raises(TypeError):\n        order_by_points(\"string\")\n    with pytest.raises(TypeError):\n        order_by_points([1, 2, \"three\"])", "tdd_stage": "implementation"}
{"task_id": "HumanEval/146", "prompt": "\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n", "completion": "if not isinstance(nums, list):\n        raise TypeError(\"Input must be a list\")\n    \n    count = 0\n    for num in nums:\n        if not isinstance(num, (int, float)):\n            raise TypeError(\"All elements in the list must be numbers\")\n        if num > 10:\n            str_num = str(abs(num))\n            if str_num[0] in '13579' and str_num[-1] in '13579':\n                count += 1\n    return count", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T15:01:15.819204", "entry_point": "specialFilter", "canonical_solution": "    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, -2, 1, -5]) == 0  \n    assert candidate([15, -73, 14, -15]) == 1\n    assert candidate([33, -2, -3, 45, 21, 109]) == 2\n    assert candidate([43, -12, 93, 125, 121, 109]) == 4\n    assert candidate([71, -2, -33, 75, 21, 19]) == 3\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1]) == 0              \n    assert candidate([]) == 0                   \n\n", "generated_tests": "import pytest\n\ndef test_basic_functionality():\n    assert specialFilter([15, -73, 14, -15]) == 1\n    assert specialFilter([33, -2, -3, 45, 21, 109]) == 2\n    assert specialFilter([11, 13, 15, 17, 19]) == 5\n    assert specialFilter([20, 22, 24, 26]) == 0\n    assert specialFilter([31, 51, 71, 91]) == 4\n\ndef test_edge_cases():\n    assert specialFilter([]) == 0\n    assert specialFilter([10]) == 0\n    assert specialFilter([11]) == 1\n    assert specialFilter([99]) == 1\n    assert specialFilter([100]) == 0\n    assert specialFilter([-11, -13, -15]) == 0\n    assert specialFilter([12, 14, 16, 18]) == 0\n\ndef test_negative_numbers():\n    assert specialFilter([-11, -13, -15, 21]) == 1\n    assert specialFilter([-21, -31, -41]) == 0\n    assert specialFilter([-10, -12, -14]) == 0\n\ndef test_large_numbers():\n    assert specialFilter([101, 303, 505, 707, 909]) == 5\n    assert specialFilter([1000, 2000, 3000]) == 0\n    assert specialFilter([1001, 2002, 3003]) == 0\n\ndef test_invalid_inputs():\n    with pytest.raises(TypeError):\n        specialFilter(None)\n    with pytest.raises(TypeError):\n        specialFilter(\"string\")\n    with pytest.raises(TypeError):\n        specialFilter([1, 2, \"three\", 4])", "tdd_stage": "implementation"}
{"task_id": "HumanEval/147", "prompt": "\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n", "completion": "if not isinstance(n, int) or n < 0:\n        raise TypeError(\"Input must be a non-negative integer\")\n    \n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T15:01:25.515511", "entry_point": "get_max_triples", "canonical_solution": "    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n", "test": "def check(candidate):\n\n    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n", "generated_tests": "import pytest\n\ndef test_basic_functionality():\n    assert get_max_triples(5) == 1\n    assert get_max_triples(6) == 4\n    assert get_max_triples(7) == 4\n    assert get_max_triples(8) == 10\n    assert get_max_triples(9) == 20\n\ndef test_edge_cases():\n    assert get_max_triples(1) == 0  # Only one element, no triples possible\n    assert get_max_triples(2) == 0  # Only two elements, no triples possible\n    assert get_max_triples(3) == 1  # One valid triple (1, 3, 7)\n    assert get_max_triples(0) == 0  # No elements, should return 0\n\ndef test_large_input():\n    assert get_max_triples(100) >= 0  # Test with a larger input, should not raise an error\n\ndef test_invalid_input():\n    with pytest.raises(TypeError):\n        get_max_triples(\"string\")  # Invalid input type\n    with pytest.raises(TypeError):\n        get_max_triples(-5)  # Negative input should raise an error", "tdd_stage": "implementation"}
{"task_id": "HumanEval/148", "prompt": "\ndef bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n", "completion": "planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    \n    if index1 == index2:\n        return ()\n    \n    start_index = min(index1, index2) + 1\n    end_index = max(index1, index2)\n    \n    return tuple(planets[start_index:end_index])", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T15:01:35.652745", "entry_point": "bf", "canonical_solution": "    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\"), \"First test error: \" + str(len(candidate(\"Jupiter\", \"Neptune\")))      \n    assert candidate(\"Earth\", \"Mercury\") == (\"Venus\",), \"Second test error: \" + str(candidate(\"Earth\", \"Mercury\"))  \n    assert candidate(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"), \"Third test error: \" + str(candidate(\"Mercury\", \"Uranus\"))      \n    assert candidate(\"Neptune\", \"Venus\") == (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"), \"Fourth test error: \" + str(candidate(\"Neptune\", \"Venus\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Earth\", \"Earth\") == ()\n    assert candidate(\"Mars\", \"Earth\") == ()\n    assert candidate(\"Jupiter\", \"Makemake\") == ()\n\n", "generated_tests": "import pytest\n\ndef test_valid_planet_range():\n    assert bf(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\")\n    assert bf(\"Earth\", \"Mercury\") == (\"Venus\")\n    assert bf(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n\ndef test_reverse_planet_range():\n    assert bf(\"Neptune\", \"Jupiter\") == (\"Saturn\", \"Uranus\")\n    assert bf(\"Mercury\", \"Earth\") == (\"Venus\")\n\ndef test_same_planet_input():\n    assert bf(\"Earth\", \"Earth\") == ()\n    assert bf(\"Mars\", \"Mars\") == ()\n\ndef test_invalid_planet_names():\n    assert bf(\"Pluto\", \"Neptune\") == ()\n    assert bf(\"Earth\", \"Pluto\") == ()\n    assert bf(\"Venus\", \"Mars\") == (\"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    assert bf(\"Mercury\", \"Pluto\") == ()\n    assert bf(\"Pluto\", \"Pluto\") == ()\n\ndef test_empty_input():\n    assert bf(\"\", \"Neptune\") == ()\n    assert bf(\"Earth\", \"\") == ()\n    assert bf(\"\", \"\") == ()\n\ndef test_case_sensitivity():\n    assert bf(\"jupiter\", \"neptune\") == ()\n    assert bf(\"Earth\", \"neptune\") == ()\n    assert bf(\"Mercury\", \"VENUS\") == ()", "tdd_stage": "implementation"}
{"task_id": "HumanEval/149", "prompt": "\ndef sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n", "completion": "if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list\")\n    \n    filtered_list = [s for s in lst if isinstance(s, str) and len(s) % 2 == 0]\n    return sorted(filtered_list, key=lambda x: (len(x), x))", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T15:01:47.191844", "entry_point": "sorted_list_sum", "canonical_solution": "    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n    assert candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n    assert candidate([\"d\", \"b\", \"c\", \"a\"]) == []\n    assert candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"]\n    assert candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == []\n    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n\n", "generated_tests": "import pytest\n\ndef test_sorted_list_sum_basic_functionality():\n    assert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n    assert sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]\n    assert sorted_list_sum([\"hello\", \"world\", \"hi\", \"there\"]) == [\"hello\", \"world\"]\n    assert sorted_list_sum([\"cat\", \"dog\", \"bat\", \"ant\"]) == [\"bat\", \"cat\", \"dog\"]\n\ndef test_sorted_list_sum_with_duplicates():\n    assert sorted_list_sum([\"aa\", \"bb\", \"cc\", \"dd\", \"ee\"]) == [\"aa\", \"bb\", \"cc\", \"dd\", \"ee\"]\n    assert sorted_list_sum([\"aa\", \"bb\", \"cc\", \"aa\", \"bb\"]) == [\"aa\", \"aa\", \"bb\", \"bb\", \"cc\"]\n\ndef test_sorted_list_sum_edge_cases():\n    assert sorted_list_sum([]) == []\n    assert sorted_list_sum([\"\"]) == [\"\"]\n    assert sorted_list_sum([\"a\", \"b\", \"c\"]) == []\n    assert sorted_list_sum([\"abcd\", \"efgh\", \"ijkl\"]) == [\"abcd\", \"efgh\", \"ijkl\"]\n\ndef test_sorted_list_sum_with_varied_lengths():\n    assert sorted_list_sum([\"a\", \"bb\", \"ccc\", \"dddd\"]) == [\"bb\", \"dddd\"]\n    assert sorted_list_sum([\"longword\", \"short\", \"tiny\", \"medium\"]) == [\"medium\", \"short\"]\n\ndef test_sorted_list_sum_invalid_inputs():\n    with pytest.raises(TypeError):\n        sorted_list_sum(None)\n    with pytest.raises(TypeError):\n        sorted_list_sum(123)\n    with pytest.raises(TypeError):\n        sorted_list_sum([\"valid\", 123, \"input\"])", "tdd_stage": "implementation"}
{"task_id": "HumanEval/150", "prompt": "\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n", "completion": "if not isinstance(n, int) or not isinstance(x, int) or not isinstance(y, int):\n        raise TypeError(\"Inputs must be integers\")\n    \n    if n < 2:\n        return y\n    \n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n            \n    return x", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T15:01:56.337191", "entry_point": "x_or_y", "canonical_solution": "    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7, 34, 12) == 34\n    assert candidate(15, 8, 5) == 5\n    assert candidate(3, 33, 5212) == 33\n    assert candidate(1259, 3, 52) == 3\n    assert candidate(7919, -1, 12) == -1\n    assert candidate(3609, 1245, 583) == 583\n    assert candidate(91, 56, 129) == 129\n    assert candidate(6, 34, 1234) == 1234\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 2, 0) == 0\n    assert candidate(2, 2, 0) == 2\n\n", "generated_tests": "import pytest\n\ndef test_prime_number_returns_x():\n    assert x_or_y(7, 34, 12) == 34\n    assert x_or_y(11, 100, 50) == 100\n    assert x_or_y(13, 1, 0) == 1\n\ndef test_non_prime_number_returns_y():\n    assert x_or_y(15, 8, 5) == 5\n    assert x_or_y(4, 10, 20) == 20\n    assert x_or_y(1, 99, 0) == 0\n\ndef test_edge_case_one():\n    assert x_or_y(1, 10, 20) == 20\n\ndef test_edge_case_two():\n    assert x_or_y(2, 5, 10) == 5\n\ndef test_edge_case_three():\n    assert x_or_y(0, 10, 20) == 20\n\ndef test_negative_input():\n    assert x_or_y(-5, 10, 20) == 20\n\ndef test_large_prime_number():\n    assert x_or_y(7919, 1000, 500) == 1000\n\ndef test_large_non_prime_number():\n    assert x_or_y(10000, 100, 200) == 200\n\ndef test_invalid_input_string():\n    with pytest.raises(TypeError):\n        x_or_y(\"seven\", 34, 12)\n\ndef test_invalid_input_float():\n    with pytest.raises(TypeError):\n        x_or_y(7.5, 34, 12)\n\ndef test_invalid_input_list():\n    with pytest.raises(TypeError):\n        x_or_y([7], 34, 12)\n\ndef test_invalid_input_dict():\n    with pytest.raises(TypeError):\n        x_or_y({7: \"seven\"}, 34, 12)", "tdd_stage": "implementation"}
{"task_id": "HumanEval/151", "prompt": "\ndef double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n", "completion": "return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0)", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T15:02:05.459531", "entry_point": "double_the_difference", "canonical_solution": "    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0 , \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([5, 4]) == 25 , \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([0.1, 0.2, 0.3]) == 0 , \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([-10, -20, -30]) == 0 , \"This prints if this assert fails 4 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-1, -2, 8]) == 0, \"This prints if this assert fails 5 (also good for debugging!)\"\n    assert candidate([0.2, 3, 5]) == 34, \"This prints if this assert fails 6 (also good for debugging!)\"\n    lst = list(range(-99, 100, 2))\n    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])\n    assert candidate(lst) == odd_sum , \"This prints if this assert fails 7 (good for debugging!)\"\n\n", "generated_tests": "import pytest\n\ndef test_basic_functionality():\n    assert double_the_difference([1, 3, 2, 0]) == 10\n    assert double_the_difference([-1, -2, 0]) == 0\n    assert double_the_difference([9, -2]) == 81\n    assert double_the_difference([0]) == 0\n\ndef test_empty_list():\n    assert double_the_difference([]) == 0\n\ndef test_all_negative_numbers():\n    assert double_the_difference([-1, -3, -5]) == 0\n\ndef test_all_even_numbers():\n    assert double_the_difference([2, 4, 6]) == 0\n\ndef test_mixed_numbers():\n    assert double_the_difference([1, 2, 3, 4, 5]) == 35  # 1^2 + 3^2 + 5^2 = 1 + 9 + 25 = 35\n    assert double_the_difference([-1, 1, 2, 3, -3]) == 10  # 1^2 + 3^2 = 1 + 9 = 10\n\ndef test_non_integer_values():\n    assert double_the_difference([1.5, 2.5, 3.5]) == 0\n    assert double_the_difference([1, 'a', 3]) == 10  # 1^2 + 3^2 = 1 + 9 = 10\n    assert double_the_difference([None, 1, 3]) == 10  # 1^2 + 3^2 = 1 + 9 = 10\n\ndef test_large_numbers():\n    assert double_the_difference([999999999, 1000000000, 1000000001]) == 999999998000000002  # 999999999^2\n\ndef test_single_odd_positive():\n    assert double_the_difference([7]) == 49  # 7^2 = 49\n\ndef test_single_even_positive():\n    assert double_the_difference([8]) == 0  # No odd numbers\n\ndef test_single_negative():\n    assert double_the_difference([-5]) == 0  # No positive odd numbers", "tdd_stage": "implementation"}
{"task_id": "HumanEval/152", "prompt": "\ndef compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n", "completion": "if not isinstance(game, list) or not isinstance(guess, list):\n        raise TypeError(\"Both game and guess must be lists.\")\n    if len(game) != len(guess):\n        raise ValueError(\"Both lists must be of the same length.\")\n    \n    result = []\n    for g, gs in zip(game, guess):\n        if not isinstance(g, (int, float)) or not isinstance(gs, (int, float)):\n            raise TypeError(\"All elements in game and guess must be numbers.\")\n        result.append(abs(g - gs))\n    \n    return result", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T15:02:15.864384", "entry_point": "compare", "canonical_solution": "    return [abs(x-y) for x,y in zip(game,guess)]\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "generated_tests": "import pytest\n\ndef test_basic_functionality():\n    assert compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2]) == [4, 4, 1, 0, 0, 6]\n\ndef test_edge_cases():\n    assert compare([], []) == []\n    assert compare([1], [1]) == [0]\n    assert compare([1], [2]) == [1]\n    assert compare([0], [0]) == [0]\n    assert compare([100], [0]) == [100]\n    assert compare([0], [100]) == [100]\n\ndef test_invalid_inputs():\n    with pytest.raises(TypeError):\n        compare([1, 2, 3], \"not a list\")\n    with pytest.raises(TypeError):\n        compare(\"not a list\", [1, 2, 3])\n    with pytest.raises(ValueError):\n        compare([1, 2], [1])\n    with pytest.raises(ValueError):\n        compare([1], [1, 2])\n    with pytest.raises(TypeError):\n        compare([1, 2, 3], [None, 2, 3])\n    with pytest.raises(TypeError):\n        compare([1, 2, 3], [1, 2, \"three\"])\n\ndef test_large_numbers():\n    assert compare([1000000, 2000000], [1000000, 1999999]) == [0, 1]\n    assert compare([999999999], [1000000000]) == [1]\n    assert compare([0], [1000000000]) == [1000000000]", "tdd_stage": "implementation"}
{"task_id": "HumanEval/153", "prompt": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n", "completion": "if not isinstance(class_name, str) or not isinstance(extensions, list):\n        raise TypeError(\"Invalid input types.\")\n    \n    if not extensions:\n        return f\"{class_name}.\"\n    \n    strongest_extension = None\n    strongest_strength = float('-inf')\n    \n    for extension in extensions:\n        if not isinstance(extension, str):\n            raise TypeError(\"Extensions must be a list of strings.\")\n        \n        CAP = sum(1 for char in extension if char.isupper())\n        SM = sum(1 for char in extension if char.islower())\n        strength = CAP - SM\n        \n        if strength > strongest_strength:\n            strongest_strength = strength\n            strongest_extension = extension\n    \n    return f\"{class_name}.{strongest_extension}\"", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T15:02:29.672323", "entry_point": "Strongest_Extension", "canonical_solution": "    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n    \n", "generated_tests": "import pytest\n\ndef test_strongest_extension_basic_functionality():\n    assert Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\n    assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    assert Strongest_Extension('Test', ['abc', 'XYZ', 'aBc']) == 'Test.XYZ'\n    assert Strongest_Extension('Example', ['one', 'TWO', 'three']) == 'Example.TWO'\n\ndef test_strongest_extension_with_same_strength():\n    assert Strongest_Extension('Class', ['A', 'B', 'C']) == 'Class.A'\n    assert Strongest_Extension('Class', ['a', 'b', 'c']) == 'Class.a'\n    assert Strongest_Extension('Class', ['Aa', 'Bb', 'Cc']) == 'Class.Aa'\n\ndef test_strongest_extension_empty_extensions():\n    assert Strongest_Extension('EmptyClass', []) == 'EmptyClass.'\n\ndef test_strongest_extension_empty_class_name():\n    assert Strongest_Extension('', ['Extension1', 'Extension2']) == '.Extension1'\n\ndef test_strongest_extension_single_extension():\n    assert Strongest_Extension('SingleClass', ['OnlyOne']) == 'SingleClass.OnlyOne'\n    assert Strongest_Extension('SingleClass', ['A']) == 'SingleClass.A'\n\ndef test_strongest_extension_invalid_inputs():\n    with pytest.raises(TypeError):\n        Strongest_Extension('Class', None)\n    with pytest.raises(TypeError):\n        Strongest_Extension(None, ['Extension'])\n    with pytest.raises(TypeError):\n        Strongest_Extension('Class', 'NotAList')\n\ndef test_strongest_extension_case_sensitivity():\n    assert Strongest_Extension('CaseTest', ['abc', 'ABC', 'AbC']) == 'CaseTest.ABC'\n    assert Strongest_Extension('CaseTest', ['aBc', 'AbC', 'abc']) == 'CaseTest.AbC'\n\ndef test_strongest_extension_numeric_and_special_characters():\n    assert Strongest_Extension('NumClass', ['123', 'A1B2', 'C@D']) == 'NumClass.A1B2'\n    assert Strongest_Extension('SpecialClass', ['!@#$', 'Hello123', 'World!']) == 'SpecialClass.Hello123'", "tdd_stage": "implementation"}
{"task_id": "HumanEval/154", "prompt": "\ndef cycpattern_check(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n", "completion": "if not isinstance(a, str) or not isinstance(b, str):\n        raise TypeError(\"Both inputs must be strings\")\n    \n    if not b:\n        return True\n    if not a:\n        return False\n    \n    doubled_b = b + b\n    return a in doubled_b", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T15:02:41.619632", "entry_point": "cycpattern_check", "canonical_solution": "    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    #assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    #assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert  candidate(\"xyzw\",\"xyw\") == False , \"test #0\"\n    assert  candidate(\"yello\",\"ell\") == True , \"test #1\"\n    assert  candidate(\"whattup\",\"ptut\") == False , \"test #2\"\n    assert  candidate(\"efef\",\"fee\") == True , \"test #3\"\n    assert  candidate(\"abab\",\"aabb\") == False , \"test #4\"\n    assert  candidate(\"winemtt\",\"tinem\") == True , \"test #5\"\n\n", "generated_tests": "import pytest\n\ndef test_basic_functionality():\n    assert cycpattern_check(\"abcd\", \"abd\") == False\n    assert cycpattern_check(\"hello\", \"ell\") == True\n    assert cycpattern_check(\"whassup\", \"psus\") == False\n    assert cycpattern_check(\"abab\", \"baa\") == True\n    assert cycpattern_check(\"efef\", \"eeff\") == False\n    assert cycpattern_check(\"himenss\", \"simen\") == True\n\ndef test_rotations_as_substrings():\n    assert cycpattern_check(\"abcde\", \"cde\") == True\n    assert cycpattern_check(\"abcde\", \"deabc\") == True\n    assert cycpattern_check(\"abcde\", \"eabcd\") == True\n    assert cycpattern_check(\"abcde\", \"abcde\") == True\n    assert cycpattern_check(\"abcde\", \"xyz\") == False\n\ndef test_empty_inputs():\n    assert cycpattern_check(\"\", \"\") == True\n    assert cycpattern_check(\"abc\", \"\") == True\n    assert cycpattern_check(\"\", \"abc\") == False\n\ndef test_single_character_inputs():\n    assert cycpattern_check(\"a\", \"a\") == True\n    assert cycpattern_check(\"a\", \"b\") == False\n    assert cycpattern_check(\"a\", \"\") == True\n    assert cycpattern_check(\"\", \"a\") == False\n\ndef test_invalid_inputs():\n    with pytest.raises(TypeError):\n        cycpattern_check(None, \"abc\")\n    with pytest.raises(TypeError):\n        cycpattern_check(\"abc\", None)\n    with pytest.raises(TypeError):\n        cycpattern_check(None, None)\n\ndef test_longer_words():\n    assert cycpattern_check(\"thisisaverylongstring\", \"longstring\") == True\n    assert cycpattern_check(\"thisisaverylongstring\", \"stringlong\") == True\n    assert cycpattern_check(\"thisisaverylongstring\", \"notfound\") == False\n\ndef test_case_sensitivity():\n    assert cycpattern_check(\"Hello\", \"hello\") == False\n    assert cycpattern_check(\"Hello\", \"H\") == True\n    assert cycpattern_check(\"Hello\", \"eLLo\") == False", "tdd_stage": "implementation"}
{"task_id": "HumanEval/155", "prompt": "\ndef even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n", "completion": "if not isinstance(num, int):\n        raise TypeError(\"Input must be an integer\")\n    \n    num = abs(num)\n    even_count = 0\n    odd_count = 0\n    \n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n            \n    return (even_count, odd_count)", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T15:02:50.013101", "entry_point": "even_odd_count", "canonical_solution": "    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n", "generated_tests": "import pytest\n\ndef test_even_odd_count_with_negative_number():\n    assert even_odd_count(-12) == (1, 1)\n\ndef test_even_odd_count_with_positive_number():\n    assert even_odd_count(123) == (1, 2)\n\ndef test_even_odd_count_with_all_even_digits():\n    assert even_odd_count(24680) == (5, 0)\n\ndef test_even_odd_count_with_all_odd_digits():\n    assert even_odd_count(13579) == (0, 5)\n\ndef test_even_odd_count_with_mixed_digits():\n    assert even_odd_count(1020304050) == (6, 4)\n\ndef test_even_odd_count_with_single_digit_even():\n    assert even_odd_count(2) == (1, 0)\n\ndef test_even_odd_count_with_single_digit_odd():\n    assert even_odd_count(7) == (0, 1)\n\ndef test_even_odd_count_with_zero():\n    assert even_odd_count(0) == (1, 0)\n\ndef test_even_odd_count_with_large_number():\n    assert even_odd_count(9876543210) == (5, 5)\n\ndef test_even_odd_count_with_empty_input():\n    with pytest.raises(TypeError):\n        even_odd_count()\n\ndef test_even_odd_count_with_non_integer_input():\n    with pytest.raises(TypeError):\n        even_odd_count(\"string\")\n\ndef test_even_odd_count_with_float_input():\n    with pytest.raises(TypeError):\n        even_odd_count(12.34)", "tdd_stage": "implementation"}
{"task_id": "HumanEval/156", "prompt": "\ndef int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n", "completion": "if not isinstance(number, int):\n        raise TypeError(\"Input must be an integer.\")\n    if number < 1 or number > 1000:\n        raise ValueError(\"Input must be between 1 and 1000.\")\n    \n    roman_numerals = [\n        (1000, 'm'), (900, 'cm'), (500, 'd'), (400, 'cd'),\n        (100, 'c'), (90, 'xc'), (50, 'l'), (40, 'xl'),\n        (10, 'x'), (9, 'ix'), (5, 'v'), (4, 'iv'), (1, 'i')\n    ]\n    \n    result = []\n    for value, numeral in roman_numerals:\n        while number >= value:\n            result.append(numeral)\n            number -= value\n            \n    return ''.join(result)", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T15:03:01.567826", "entry_point": "int_to_mini_roman", "canonical_solution": "    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(19) == 'xix'\n    assert candidate(152) == 'clii'\n    assert candidate(251) == 'ccli'\n    assert candidate(426) == 'cdxxvi'\n    assert candidate(500) == 'd'\n    assert candidate(1) == 'i'\n    assert candidate(4) == 'iv'\n    assert candidate(43) == 'xliii'\n    assert candidate(90) == 'xc'\n    assert candidate(94) == 'xciv'\n    assert candidate(532) == 'dxxxii'\n    assert candidate(900) == 'cm'\n    assert candidate(994) == 'cmxciv'\n    assert candidate(1000) == 'm'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n", "generated_tests": "import pytest\n\ndef test_basic_functionality():\n    assert int_to_mini_roman(1) == 'i'\n    assert int_to_mini_roman(4) == 'iv'\n    assert int_to_mini_roman(5) == 'v'\n    assert int_to_mini_roman(9) == 'ix'\n    assert int_to_mini_roman(10) == 'x'\n    assert int_to_mini_roman(19) == 'xix'\n    assert int_to_mini_roman(50) == 'l'\n    assert int_to_mini_roman(99) == 'xcix'\n    assert int_to_mini_roman(100) == 'c'\n    assert int_to_mini_roman(152) == 'clii'\n    assert int_to_mini_roman(400) == 'cd'\n    assert int_to_mini_roman(426) == 'cdxxvi'\n    assert int_to_mini_roman(500) == 'd'\n    assert int_to_mini_roman(900) == 'cm'\n    assert int_to_mini_roman(1000) == 'm'\n\ndef test_edge_cases():\n    with pytest.raises(ValueError):\n        int_to_mini_roman(0)  # Below the valid range\n    with pytest.raises(ValueError):\n        int_to_mini_roman(1001)  # Above the valid range\n\ndef test_invalid_inputs():\n    with pytest.raises(TypeError):\n        int_to_mini_roman(\"ten\")  # Invalid type: string\n    with pytest.raises(TypeError):\n        int_to_mini_roman(None)  # Invalid type: None\n    with pytest.raises(TypeError):\n        int_to_mini_roman([])  # Invalid type: list\n    with pytest.raises(TypeError):\n        int_to_mini_roman({})  # Invalid type: dict", "tdd_stage": "implementation"}
{"task_id": "HumanEval/157", "prompt": "\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n", "completion": "if not all(isinstance(x, (int, float)) for x in (a, b, c)) or a <= 0 or b <= 0 or c <= 0:\n        raise TypeError(\"All sides must be positive numbers.\")\n    \n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T15:03:11.991153", "entry_point": "right_angle_triangle", "canonical_solution": "    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == False\n\n", "generated_tests": "import pytest\n\ndef test_right_angle_triangle_valid_cases():\n    assert right_angle_triangle(3, 4, 5) == True\n    assert right_angle_triangle(5, 12, 13) == True\n    assert right_angle_triangle(8, 15, 17) == True\n    assert right_angle_triangle(7, 24, 25) == True\n\ndef test_right_angle_triangle_invalid_cases():\n    assert right_angle_triangle(1, 2, 3) == False\n    assert right_angle_triangle(2, 2, 2) == False\n    assert right_angle_triangle(10, 6, 8) == False\n    assert right_angle_triangle(5, 5, 5) == False\n\ndef test_right_angle_triangle_edge_cases():\n    assert right_angle_triangle(0, 0, 0) == False\n    assert right_angle_triangle(0, 3, 4) == False\n    assert right_angle_triangle(3, 0, 4) == False\n    assert right_angle_triangle(3, 4, 0) == False\n    assert right_angle_triangle(-3, 4, 5) == False\n    assert right_angle_triangle(3, -4, 5) == False\n    assert right_angle_triangle(3, 4, -5) == False\n\ndef test_right_angle_triangle_non_numeric_inputs():\n    with pytest.raises(TypeError):\n        right_angle_triangle(\"3\", 4, 5)\n    with pytest.raises(TypeError):\n        right_angle_triangle(3, \"4\", 5)\n    with pytest.raises(TypeError):\n        right_angle_triangle(3, 4, \"5\")\n    with pytest.raises(TypeError):\n        right_angle_triangle(None, 4, 5)\n    with pytest.raises(TypeError):\n        right_angle_triangle(3, None, 5)\n    with pytest.raises(TypeError):\n        right_angle_triangle(3, 4, None)", "tdd_stage": "implementation"}
{"task_id": "HumanEval/158", "prompt": "\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n", "completion": "if not isinstance(words, list):\n        raise TypeError(\"Input must be a list of strings.\")\n    \n    max_word = \"\"\n    max_unique_count = 0\n    \n    for word in words:\n        if not isinstance(word, str):\n            raise TypeError(\"All elements in the list must be strings.\")\n        \n        unique_chars = len(set(word))\n        \n        if (unique_chars > max_unique_count) or (unique_chars == max_unique_count and word < max_word):\n            max_unique_count = unique_chars\n            max_word = word\n            \n    return max_word", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T15:03:19.330740", "entry_point": "find_max", "canonical_solution": "    return sorted(words, key = lambda x: (-len(set(x)), x))[0]\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert (candidate([\"name\", \"of\", \"string\"]) == \"string\"), \"t1\"\n    assert (candidate([\"name\", \"enam\", \"game\"]) == \"enam\"), 't2'\n    assert (candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"), 't3'\n    assert (candidate([\"abc\", \"cba\"]) == \"abc\"), 't4'\n    assert (candidate([\"play\", \"this\", \"game\", \"of\",\"footbott\"]) == \"footbott\"), 't5'\n    assert (candidate([\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\"), 't6'\n    assert (candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\"), 't7'\n    assert (candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"this\"), 't8'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert (candidate([\"b\"]) == \"b\"), 't9'\n    assert (candidate([\"play\", \"play\", \"play\"]) == \"play\"), 't10'\n\n", "generated_tests": "import pytest\n\ndef test_basic_functionality():\n    assert find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    assert find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    assert find_max([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\n\ndef test_multiple_max_unique_characters():\n    assert find_max([\"abc\", \"acb\", \"bac\"]) == \"abc\"\n    assert find_max([\"abc\", \"def\", \"ghi\"]) == \"abc\"\n\ndef test_lexicographical_order():\n    assert find_max([\"apple\", \"banana\", \"cherry\"]) == \"banana\"\n    assert find_max([\"bat\", \"cat\", \"rat\"]) == \"bat\"\n\ndef test_empty_input():\n    assert find_max([]) == \"\"\n\ndef test_single_word():\n    assert find_max([\"word\"]) == \"word\"\n    assert find_max([\"\"]) == \"\"\n\ndef test_all_identical_characters():\n    assert find_max([\"aaaa\", \"bbbb\", \"cccc\"]) == \"aaaa\"\n\ndef test_invalid_inputs():\n    with pytest.raises(TypeError):\n        find_max(None)\n    with pytest.raises(TypeError):\n        find_max(123)\n    with pytest.raises(TypeError):\n        find_max([\"valid\", None, \"input\"])\n\ndef test_mixed_case_words():\n    assert find_max([\"Apple\", \"apple\", \"banana\"]) == \"Apple\"\n    assert find_max([\"aBc\", \"AbC\", \"abc\"]) == \"AbC\"\n\ndef test_words_with_spaces():\n    assert find_max([\"hello world\", \"hello\", \"world\"]) == \"hello world\"\n    assert find_max([\"a b c\", \"a b\", \"a\"]) == \"a b c\"", "tdd_stage": "implementation"}
{"task_id": "HumanEval/159", "prompt": "\ndef eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n", "completion": "if number < 0 or need < 0 or remaining < 0:\n        raise ValueError(\"Input values must be non-negative.\")\n    \n    total_needed = need\n    if remaining >= total_needed:\n        total_eaten = number + total_needed\n        carrots_left = remaining - total_needed\n    else:\n        total_eaten = number + remaining\n        carrots_left = 0\n    \n    return [total_eaten, carrots_left]", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T15:03:30.791478", "entry_point": "eat", "canonical_solution": "    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(5, 6, 10) == [11, 4], \"Error\"\n    assert candidate(4, 8, 9) == [12, 1], \"Error\"\n    assert candidate(1, 10, 10) == [11, 0], \"Error\"\n    assert candidate(2, 11, 5) == [7, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(4, 5, 7) == [9, 2], \"Error\"\n    assert candidate(4, 5, 1) == [5, 0], \"Error\"\n\n", "generated_tests": "import pytest\n\ndef test_eat_with_enough_remaining_carrots():\n    assert eat(5, 6, 10) == [11, 4]\n    assert eat(4, 8, 9) == [12, 1]\n    assert eat(1, 10, 10) == [11, 0]\n\ndef test_eat_with_exact_remaining_carrots():\n    assert eat(3, 7, 4) == [7, 0]\n    assert eat(0, 5, 5) == [5, 0]\n\ndef test_eat_with_not_enough_remaining_carrots():\n    assert eat(2, 11, 5) == [7, 0]\n    assert eat(10, 5, 3) == [13, 0]\n\ndef test_eat_with_zero_need():\n    assert eat(5, 0, 10) == [5, 10]\n    assert eat(0, 0, 0) == [0, 0]\n\ndef test_eat_with_zero_remaining():\n    assert eat(5, 6, 0) == [11, 0]\n    assert eat(0, 10, 0) == [0, 0]\n\ndef test_eat_with_large_numbers():\n    assert eat(1000, 1000, 1000) == [2000, 0]\n    assert eat(500, 600, 800) == [1100, 200]\n\ndef test_eat_with_negative_numbers():\n    with pytest.raises(ValueError):\n        eat(-1, 5, 10)\n    with pytest.raises(ValueError):\n        eat(5, -1, 10)\n    with pytest.raises(ValueError):\n        eat(5, 5, -1)\n\ndef test_eat_with_boundary_conditions():\n    assert eat(0, 0, 0) == [0, 0]\n    assert eat(1000, 0, 0) == [1000, 0]\n    assert eat(0, 1000, 0) == [0, 0]\n    assert eat(1000, 1000, 1000) == [2000, 0]", "tdd_stage": "implementation"}
{"task_id": "HumanEval/160", "prompt": "\ndef do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n", "completion": "if len(operator) == 0 or len(operand) < 2 or len(operator) + 1 != len(operand):\n        raise SyntaxError(\"Invalid input: Check operators and operands length.\")\n    \n    valid_operators = {'+', '-', '*', '//', '**'}\n    for op in operator:\n        if op not in valid_operators:\n            raise SyntaxError(f\"Invalid operator: {op}\")\n\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    \n    return result", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T15:03:45.167089", "entry_point": "do_algebra", "canonical_solution": "    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\n    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9\n    assert candidate(['//', '*'], [7, 3, 4]) == 8, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "generated_tests": "import pytest\n\ndef test_basic_functionality():\n    assert do_algebra(['+', '*', '-'], [2, 3, 4, 5]) == 9\n    assert do_algebra(['*', '+'], [2, 3, 4]) == 10\n    assert do_algebra(['-', '+', '*'], [10, 2, 3, 4]) == 10\n    assert do_algebra(['**', '//'], [2, 3, 2]) == 1  # 2 ** 3 // 2 = 8 // 2 = 4\n\ndef test_edge_cases():\n    assert do_algebra(['+'], [1, 2]) == 3\n    assert do_algebra(['-'], [5, 3]) == 2\n    assert do_algebra(['*'], [0, 5]) == 0\n    assert do_algebra(['//'], [5, 2]) == 2\n    assert do_algebra(['**'], [2, 3]) == 8  # 2 ** 3 = 8\n\ndef test_invalid_inputs():\n    with pytest.raises(SyntaxError):\n        do_algebra(['+', 'invalid_op'], [1, 2, 3])\n    with pytest.raises(SyntaxError):\n        do_algebra(['+', '*'], [1])  # Not enough operands\n    with pytest.raises(SyntaxError):\n        do_algebra([], [1, 2])  # No operators\n\ndef test_large_numbers():\n    assert do_algebra(['+', '*', '-'], [1000000, 2000000, 3000000, 4000000]) == 5000000\n    assert do_algebra(['**', '+'], [2, 10, 3]) == 1024  # 2 ** 10 + 3 = 1024 + 3 = 1027\n\ndef test_negative_results():\n    assert do_algebra(['-', '+'], [2, 3, 5]) == 0  # 2 - 3 + 5 = 4\n    assert do_algebra(['-', '*'], [1, 2, 3]) == -5  # 1 - 2 * 3 = 1 - 6 = -5", "tdd_stage": "implementation"}
{"task_id": "HumanEval/161", "prompt": "\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n", "completion": "if any(c.isalpha() for c in s):\n        return ''.join(c.swapcase() if c.isalpha() else c for c in s)\n    return s[::-1]", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T15:03:54.640041", "entry_point": "solve", "canonical_solution": "    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AsDf\") == \"aSdF\"\n    assert candidate(\"1234\") == \"4321\"\n    assert candidate(\"ab\") == \"AB\"\n    assert candidate(\"#a@C\") == \"#A@c\"\n    assert candidate(\"#AsdfW^45\") == \"#aSDFw^45\"\n    assert candidate(\"#6@2\") == \"2@6#\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"#$a^D\") == \"#$A^d\"\n    assert candidate(\"#ccc\") == \"#CCC\"\n\n    # Don't remove this line:\n", "generated_tests": "import pytest\n\ndef test_reverse_case_for_lowercase_letters():\n    assert solve(\"ab\") == \"AB\"\n\ndef test_reverse_case_for_uppercase_letters():\n    assert solve(\"AB\") == \"ab\"\n\ndef test_mixed_case_letters():\n    assert solve(\"#a@C\") == \"#A@c\"\n\ndef test_numeric_string():\n    assert solve(\"1234\") == \"4321\"\n\ndef test_string_with_no_letters():\n    assert solve(\"!@#$%^&*()\") == \")(*&^%$#@!\"\n\ndef test_empty_string():\n    assert solve(\"\") == \"\"\n\ndef test_string_with_only_spaces():\n    assert solve(\"     \") == \"     \"\n\ndef test_string_with_mixed_content():\n    assert solve(\"Hello123!\") == \"hELLO123!\"\n\ndef test_string_with_special_characters_and_letters():\n    assert solve(\"abc!@#XYZ\") == \"ABC!@#xyz\"\n\ndef test_string_with_only_one_letter():\n    assert solve(\"z\") == \"Z\"\n    assert solve(\"Z\") == \"z\"\n\ndef test_string_with_multiple_consecutive_letters():\n    assert solve(\"aaaAAA\") == \"AAAaaa\"\n\ndef test_string_with_no_letters_and_numbers():\n    assert solve(\"!!!\") == \"!!!\"\n\ndef test_string_with_letters_and_numbers():\n    assert solve(\"1a2B3\") == \"1A2b3\"\n\ndef test_string_with_unicode_characters():\n    assert solve(\"\u00e9\u00e8\u00ea\") == \"\u00c9\u00c8\u00ca\"\n    assert solve(\"\u00c9\u00c8\u00ca\") == \"\u00e9\u00e8\u00ea\"\n\ndef test_string_with_mixed_unicode_and_special_characters():\n    assert solve(\"abc\u00e9\u00e8\u00ea!@#\") == \"ABC\u00c9\u00c8\u00ca!@#\"\n\ndef test_string_with_only_special_characters():\n    assert solve(\"!@#$%^&*()_+\") == \"+_)(*&^%$#@!\"\n\ndef test_string_with_letters_and_special_characters():\n    assert solve(\"Hello, World!\") == \"hELLO, wORLD!\"", "tdd_stage": "implementation"}
{"task_id": "HumanEval/162", "prompt": "\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n", "completion": "if not isinstance(text, str):\n        raise AttributeError(\"Input must be a string\")\n    if text == '':\n        return None\n    import hashlib\n    return hashlib.md5(text.encode('utf-8')).hexdigest()", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T15:04:04.951403", "entry_point": "string_to_md5", "canonical_solution": "    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    assert candidate('') == None\n    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'\n    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n", "generated_tests": "import pytest\n\ndef test_string_to_md5_basic_functionality():\n    assert string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    assert string_to_md5('OpenAI') == 'f3c3c1c1c1c1c1c1c1c1c1c1c1c1c1c1'\n    assert string_to_md5('Test string') == '6f1ed002ab5595859014ebf0951522d9'\n\ndef test_string_to_md5_empty_string():\n    assert string_to_md5('') is None\n\ndef test_string_to_md5_special_characters():\n    assert string_to_md5('!@#$%^&*()') == 'c4ca4238a0b923820dcc509a6f75849b15'\n    assert string_to_md5(' ') == '7215bdaaa413b11c8b5b1b1b1b1b1b1b'\n\ndef test_string_to_md5_numeric_string():\n    assert string_to_md5('123456') == 'e10adc3949ba59abbe56e057f20f883e'\n    assert string_to_md5('0') == 'cfcd208495d565ef66e7dff9f98764da'\n\ndef test_string_to_md5_unicode_characters():\n    assert string_to_md5('\u3053\u3093\u306b\u3061\u306f') == 'f4c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1'\n    assert string_to_md5('\ud83d\ude0a') == 'f4c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1'\n\ndef test_string_to_md5_large_input():\n    large_input = 'a' * 10000\n    assert string_to_md5(large_input) == '0cc175b9c0f1b6a831c399e26939b733'\n\ndef test_string_to_md5_non_string_input():\n    with pytest.raises(AttributeError):\n        string_to_md5(None)\n    with pytest.raises(AttributeError):\n        string_to_md5(123)\n    with pytest.raises(AttributeError):\n        string_to_md5(['a', 'b', 'c'])", "tdd_stage": "implementation"}
{"task_id": "HumanEval/163", "prompt": "\ndef generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n", "completion": "if not (isinstance(a, int) and isinstance(b, int)) or a < 0 or b < 0:\n        raise TypeError(\"Both a and b must be positive integers.\")\n    \n    start = min(a, b)\n    end = max(a, b)\n    \n    return [i for i in range(start, end + 1) if i % 2 == 0]", "method": "tdd_humaneval", "model": "gpt-4o-mini", "timestamp": "2025-08-30T15:04:17.832612", "entry_point": "generate_integers", "canonical_solution": "    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper+1) if i % 2 == 0]\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 10) == [2, 4, 6, 8], \"Test 1\"\n    assert candidate(10, 2) == [2, 4, 6, 8], \"Test 2\"\n    assert candidate(132, 2) == [2, 4, 6, 8], \"Test 3\"\n    assert candidate(17,89) == [], \"Test 4\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "generated_tests": "import pytest\n\ndef test_even_digits_in_range():\n    assert generate_integers(2, 8) == [2, 4, 6, 8]\n    assert generate_integers(8, 2) == [2, 4, 6, 8]\n    assert generate_integers(10, 14) == []\n    assert generate_integers(1, 9) == [2, 4, 6, 8]\n    assert generate_integers(3, 7) == [4, 6]\n    assert generate_integers(0, 8) == [2, 4, 6, 8]\n    assert generate_integers(2, 2) == [2]\n    assert generate_integers(4, 4) == [4]\n\ndef test_edge_cases():\n    assert generate_integers(2, 2) == [2]\n    assert generate_integers(8, 8) == [8]\n    assert generate_integers(1, 1) == []\n    assert generate_integers(0, 0) == []\n    assert generate_integers(9, 9) == []\n    assert generate_integers(10, 10) == []\n    assert generate_integers(2, 10) == [2, 4, 6, 8]\n    assert generate_integers(10, 2) == [2, 4, 6, 8]\n\ndef test_invalid_inputs():\n    with pytest.raises(TypeError):\n        generate_integers(\"a\", \"b\")\n    with pytest.raises(TypeError):\n        generate_integers(1.5, 2.5)\n    with pytest.raises(TypeError):\n        generate_integers(None, 5)\n    with pytest.raises(TypeError):\n        generate_integers(5, None)", "tdd_stage": "implementation"}
